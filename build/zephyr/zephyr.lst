
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

60000000 <Qspiflash_config>:
60000000:	46 43 46 42 00 04 01 56 00 00 00 00 01 03 03 00     FCFB...V........
	...
60000044:	00 04 06 00 00 00 00 00 00 00 00 00 00 00 80 00     ................
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
	...
600001c0:	00 01 00 00 00 10 00 00 00 00 00 00 00 00 00 00     ................
600001d0:	00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

60001000 <image_vector_table>:
60001000:	d1 00 20 41 00 20 00 60 00 00 00 00 00 00 00 00     .. A. .`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <boot_data>:
60001020:	00 00 00 60 00 00 80 00 00 00 00 00 ff ff ff ff     ...`............
	...

60002000 <_vector_table>:
60002000:	80 84 20 20 e9 b1 00 60 41 84 01 60 bd b1 00 60     ..  ...`A..`...`
60002010:	bd b1 00 60 bd b1 00 60 bd b1 00 60 00 00 00 00     ...`...`...`....
	...
6000202c:	31 aa 00 60 bd b1 00 60 00 00 00 00 dd a9 00 60     1..`...`.......`
6000203c:	0d d4 00 60                                         ...`

60002040 <_irq_vector_table>:
60002040:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002050:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002060:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002070:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002080:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002090:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600020a0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600020b0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600020c0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600020d0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600020e0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600020f0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002100:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002110:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002120:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002130:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002140:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002150:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002160:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002170:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002180:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002190:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600021a0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600021b0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600021c0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600021d0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600021e0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600021f0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002200:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002210:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002220:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002230:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002240:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002250:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002260:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002270:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002280:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
60002290:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600022a0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`
600022b0:	d5 aa 00 60 d5 aa 00 60 d5 aa 00 60 d5 aa 00 60     ...`...`...`...`

Disassembly of section text:

600022c0 <strlen>:
600022c0:	f890 f000 	pld	[r0]
600022c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
600022c8:	f020 0107 	bic.w	r1, r0, #7
600022cc:	f06f 0c00 	mvn.w	ip, #0
600022d0:	f010 0407 	ands.w	r4, r0, #7
600022d4:	f891 f020 	pld	[r1, #32]
600022d8:	f040 8049 	bne.w	6000236e <strlen+0xae>
600022dc:	f04f 0400 	mov.w	r4, #0
600022e0:	f06f 0007 	mvn.w	r0, #7
600022e4:	e9d1 2300 	ldrd	r2, r3, [r1]
600022e8:	f891 f040 	pld	[r1, #64]	; 0x40
600022ec:	f100 0008 	add.w	r0, r0, #8
600022f0:	fa82 f24c 	uadd8	r2, r2, ip
600022f4:	faa4 f28c 	sel	r2, r4, ip
600022f8:	fa83 f34c 	uadd8	r3, r3, ip
600022fc:	faa2 f38c 	sel	r3, r2, ip
60002300:	bb4b      	cbnz	r3, 60002356 <strlen+0x96>
60002302:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
60002306:	fa82 f24c 	uadd8	r2, r2, ip
6000230a:	f100 0008 	add.w	r0, r0, #8
6000230e:	faa4 f28c 	sel	r2, r4, ip
60002312:	fa83 f34c 	uadd8	r3, r3, ip
60002316:	faa2 f38c 	sel	r3, r2, ip
6000231a:	b9e3      	cbnz	r3, 60002356 <strlen+0x96>
6000231c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
60002320:	fa82 f24c 	uadd8	r2, r2, ip
60002324:	f100 0008 	add.w	r0, r0, #8
60002328:	faa4 f28c 	sel	r2, r4, ip
6000232c:	fa83 f34c 	uadd8	r3, r3, ip
60002330:	faa2 f38c 	sel	r3, r2, ip
60002334:	b97b      	cbnz	r3, 60002356 <strlen+0x96>
60002336:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
6000233a:	f101 0120 	add.w	r1, r1, #32
6000233e:	fa82 f24c 	uadd8	r2, r2, ip
60002342:	f100 0008 	add.w	r0, r0, #8
60002346:	faa4 f28c 	sel	r2, r4, ip
6000234a:	fa83 f34c 	uadd8	r3, r3, ip
6000234e:	faa2 f38c 	sel	r3, r2, ip
60002352:	2b00      	cmp	r3, #0
60002354:	d0c6      	beq.n	600022e4 <strlen+0x24>
60002356:	2a00      	cmp	r2, #0
60002358:	bf04      	itt	eq
6000235a:	3004      	addeq	r0, #4
6000235c:	461a      	moveq	r2, r3
6000235e:	ba12      	rev	r2, r2
60002360:	fab2 f282 	clz	r2, r2
60002364:	e8fd 4502 	ldrd	r4, r5, [sp], #8
60002368:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
6000236c:	4770      	bx	lr
6000236e:	e9d1 2300 	ldrd	r2, r3, [r1]
60002372:	f004 0503 	and.w	r5, r4, #3
60002376:	f1c4 0000 	rsb	r0, r4, #0
6000237a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
6000237e:	f014 0f04 	tst.w	r4, #4
60002382:	f891 f040 	pld	[r1, #64]	; 0x40
60002386:	fa0c f505 	lsl.w	r5, ip, r5
6000238a:	ea62 0205 	orn	r2, r2, r5
6000238e:	bf1c      	itt	ne
60002390:	ea63 0305 	ornne	r3, r3, r5
60002394:	4662      	movne	r2, ip
60002396:	f04f 0400 	mov.w	r4, #0
6000239a:	e7a9      	b.n	600022f0 <strlen+0x30>
6000239c:	0000      	movs	r0, r0
6000239e:	0000      	movs	r0, r0
600023a0:	eba2 0003 	sub.w	r0, r2, r3
600023a4:	4770      	bx	lr
600023a6:	bf00      	nop

600023a8 <strcmp>:
600023a8:	7802      	ldrb	r2, [r0, #0]
600023aa:	780b      	ldrb	r3, [r1, #0]
600023ac:	2a01      	cmp	r2, #1
600023ae:	bf28      	it	cs
600023b0:	429a      	cmpcs	r2, r3
600023b2:	d1f5      	bne.n	600023a0 <strlen+0xe0>
600023b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
600023b8:	ea40 0401 	orr.w	r4, r0, r1
600023bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
600023c0:	f06f 0c00 	mvn.w	ip, #0
600023c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
600023c8:	b312      	cbz	r2, 60002410 <strcmp+0x68>
600023ca:	ea80 0401 	eor.w	r4, r0, r1
600023ce:	f014 0f07 	tst.w	r4, #7
600023d2:	d16a      	bne.n	600024aa <strcmp+0x102>
600023d4:	f000 0407 	and.w	r4, r0, #7
600023d8:	f020 0007 	bic.w	r0, r0, #7
600023dc:	f004 0503 	and.w	r5, r4, #3
600023e0:	f021 0107 	bic.w	r1, r1, #7
600023e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
600023e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
600023ec:	f014 0f04 	tst.w	r4, #4
600023f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
600023f4:	fa0c f405 	lsl.w	r4, ip, r5
600023f8:	ea62 0204 	orn	r2, r2, r4
600023fc:	ea66 0604 	orn	r6, r6, r4
60002400:	d00a      	beq.n	60002418 <strcmp+0x70>
60002402:	ea63 0304 	orn	r3, r3, r4
60002406:	4662      	mov	r2, ip
60002408:	ea67 0704 	orn	r7, r7, r4
6000240c:	4666      	mov	r6, ip
6000240e:	e003      	b.n	60002418 <strcmp+0x70>
60002410:	e8f0 2304 	ldrd	r2, r3, [r0], #16
60002414:	e8f1 6704 	ldrd	r6, r7, [r1], #16
60002418:	fa82 f54c 	uadd8	r5, r2, ip
6000241c:	ea82 0406 	eor.w	r4, r2, r6
60002420:	faa4 f48c 	sel	r4, r4, ip
60002424:	bb6c      	cbnz	r4, 60002482 <strcmp+0xda>
60002426:	fa83 f54c 	uadd8	r5, r3, ip
6000242a:	ea83 0507 	eor.w	r5, r3, r7
6000242e:	faa5 f58c 	sel	r5, r5, ip
60002432:	b995      	cbnz	r5, 6000245a <strcmp+0xb2>
60002434:	e950 2302 	ldrd	r2, r3, [r0, #-8]
60002438:	e951 6702 	ldrd	r6, r7, [r1, #-8]
6000243c:	fa82 f54c 	uadd8	r5, r2, ip
60002440:	ea82 0406 	eor.w	r4, r2, r6
60002444:	faa4 f48c 	sel	r4, r4, ip
60002448:	fa83 f54c 	uadd8	r5, r3, ip
6000244c:	ea83 0507 	eor.w	r5, r3, r7
60002450:	faa5 f58c 	sel	r5, r5, ip
60002454:	4325      	orrs	r5, r4
60002456:	d0db      	beq.n	60002410 <strcmp+0x68>
60002458:	b99c      	cbnz	r4, 60002482 <strcmp+0xda>
6000245a:	ba2d      	rev	r5, r5
6000245c:	fab5 f485 	clz	r4, r5
60002460:	f024 0407 	bic.w	r4, r4, #7
60002464:	fa27 f104 	lsr.w	r1, r7, r4
60002468:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
6000246c:	fa23 f304 	lsr.w	r3, r3, r4
60002470:	f003 00ff 	and.w	r0, r3, #255	; 0xff
60002474:	f001 01ff 	and.w	r1, r1, #255	; 0xff
60002478:	e8fd 4504 	ldrd	r4, r5, [sp], #16
6000247c:	eba0 0001 	sub.w	r0, r0, r1
60002480:	4770      	bx	lr
60002482:	ba24      	rev	r4, r4
60002484:	fab4 f484 	clz	r4, r4
60002488:	f024 0407 	bic.w	r4, r4, #7
6000248c:	fa26 f104 	lsr.w	r1, r6, r4
60002490:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
60002494:	fa22 f204 	lsr.w	r2, r2, r4
60002498:	f002 00ff 	and.w	r0, r2, #255	; 0xff
6000249c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
600024a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
600024a4:	eba0 0001 	sub.w	r0, r0, r1
600024a8:	4770      	bx	lr
600024aa:	f014 0f03 	tst.w	r4, #3
600024ae:	d13c      	bne.n	6000252a <strcmp+0x182>
600024b0:	f010 0403 	ands.w	r4, r0, #3
600024b4:	d128      	bne.n	60002508 <strcmp+0x160>
600024b6:	f850 2b08 	ldr.w	r2, [r0], #8
600024ba:	f851 3b08 	ldr.w	r3, [r1], #8
600024be:	fa82 f54c 	uadd8	r5, r2, ip
600024c2:	ea82 0503 	eor.w	r5, r2, r3
600024c6:	faa5 f58c 	sel	r5, r5, ip
600024ca:	b95d      	cbnz	r5, 600024e4 <strcmp+0x13c>
600024cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
600024d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
600024d4:	fa82 f54c 	uadd8	r5, r2, ip
600024d8:	ea82 0503 	eor.w	r5, r2, r3
600024dc:	faa5 f58c 	sel	r5, r5, ip
600024e0:	2d00      	cmp	r5, #0
600024e2:	d0e8      	beq.n	600024b6 <strcmp+0x10e>
600024e4:	ba2d      	rev	r5, r5
600024e6:	fab5 f485 	clz	r4, r5
600024ea:	f024 0407 	bic.w	r4, r4, #7
600024ee:	fa23 f104 	lsr.w	r1, r3, r4
600024f2:	fa22 f204 	lsr.w	r2, r2, r4
600024f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
600024fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
600024fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
60002502:	eba0 0001 	sub.w	r0, r0, r1
60002506:	4770      	bx	lr
60002508:	ea4f 04c4 	mov.w	r4, r4, lsl #3
6000250c:	f020 0003 	bic.w	r0, r0, #3
60002510:	f850 2b08 	ldr.w	r2, [r0], #8
60002514:	f021 0103 	bic.w	r1, r1, #3
60002518:	f851 3b08 	ldr.w	r3, [r1], #8
6000251c:	fa0c f404 	lsl.w	r4, ip, r4
60002520:	ea62 0204 	orn	r2, r2, r4
60002524:	ea63 0304 	orn	r3, r3, r4
60002528:	e7c9      	b.n	600024be <strcmp+0x116>
6000252a:	f010 0403 	ands.w	r4, r0, #3
6000252e:	d01a      	beq.n	60002566 <strcmp+0x1be>
60002530:	eba1 0104 	sub.w	r1, r1, r4
60002534:	f020 0003 	bic.w	r0, r0, #3
60002538:	07e4      	lsls	r4, r4, #31
6000253a:	f850 2b04 	ldr.w	r2, [r0], #4
6000253e:	d006      	beq.n	6000254e <strcmp+0x1a6>
60002540:	d20f      	bcs.n	60002562 <strcmp+0x1ba>
60002542:	788b      	ldrb	r3, [r1, #2]
60002544:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
60002548:	1ae4      	subs	r4, r4, r3
6000254a:	d106      	bne.n	6000255a <strcmp+0x1b2>
6000254c:	b12b      	cbz	r3, 6000255a <strcmp+0x1b2>
6000254e:	78cb      	ldrb	r3, [r1, #3]
60002550:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
60002554:	1ae4      	subs	r4, r4, r3
60002556:	d100      	bne.n	6000255a <strcmp+0x1b2>
60002558:	b91b      	cbnz	r3, 60002562 <strcmp+0x1ba>
6000255a:	4620      	mov	r0, r4
6000255c:	f85d 4b10 	ldr.w	r4, [sp], #16
60002560:	4770      	bx	lr
60002562:	f101 0104 	add.w	r1, r1, #4
60002566:	f850 2b04 	ldr.w	r2, [r0], #4
6000256a:	07cc      	lsls	r4, r1, #31
6000256c:	f021 0103 	bic.w	r1, r1, #3
60002570:	f851 3b04 	ldr.w	r3, [r1], #4
60002574:	d848      	bhi.n	60002608 <strcmp+0x260>
60002576:	d224      	bcs.n	600025c2 <strcmp+0x21a>
60002578:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
6000257c:	fa82 f54c 	uadd8	r5, r2, ip
60002580:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
60002584:	faa5 f58c 	sel	r5, r5, ip
60002588:	d10a      	bne.n	600025a0 <strcmp+0x1f8>
6000258a:	b965      	cbnz	r5, 600025a6 <strcmp+0x1fe>
6000258c:	f851 3b04 	ldr.w	r3, [r1], #4
60002590:	ea84 0402 	eor.w	r4, r4, r2
60002594:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
60002598:	d10e      	bne.n	600025b8 <strcmp+0x210>
6000259a:	f850 2b04 	ldr.w	r2, [r0], #4
6000259e:	e7eb      	b.n	60002578 <strcmp+0x1d0>
600025a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
600025a4:	e055      	b.n	60002652 <strcmp+0x2aa>
600025a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
600025aa:	d14d      	bne.n	60002648 <strcmp+0x2a0>
600025ac:	7808      	ldrb	r0, [r1, #0]
600025ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
600025b2:	f1c0 0000 	rsb	r0, r0, #0
600025b6:	4770      	bx	lr
600025b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
600025bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
600025c0:	e047      	b.n	60002652 <strcmp+0x2aa>
600025c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
600025c6:	fa82 f54c 	uadd8	r5, r2, ip
600025ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
600025ce:	faa5 f58c 	sel	r5, r5, ip
600025d2:	d10a      	bne.n	600025ea <strcmp+0x242>
600025d4:	b965      	cbnz	r5, 600025f0 <strcmp+0x248>
600025d6:	f851 3b04 	ldr.w	r3, [r1], #4
600025da:	ea84 0402 	eor.w	r4, r4, r2
600025de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
600025e2:	d10c      	bne.n	600025fe <strcmp+0x256>
600025e4:	f850 2b04 	ldr.w	r2, [r0], #4
600025e8:	e7eb      	b.n	600025c2 <strcmp+0x21a>
600025ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
600025ee:	e030      	b.n	60002652 <strcmp+0x2aa>
600025f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
600025f4:	d128      	bne.n	60002648 <strcmp+0x2a0>
600025f6:	880b      	ldrh	r3, [r1, #0]
600025f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
600025fc:	e029      	b.n	60002652 <strcmp+0x2aa>
600025fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
60002602:	ea03 431c 	and.w	r3, r3, ip, lsr #16
60002606:	e024      	b.n	60002652 <strcmp+0x2aa>
60002608:	f002 04ff 	and.w	r4, r2, #255	; 0xff
6000260c:	fa82 f54c 	uadd8	r5, r2, ip
60002610:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
60002614:	faa5 f58c 	sel	r5, r5, ip
60002618:	d10a      	bne.n	60002630 <strcmp+0x288>
6000261a:	b965      	cbnz	r5, 60002636 <strcmp+0x28e>
6000261c:	f851 3b04 	ldr.w	r3, [r1], #4
60002620:	ea84 0402 	eor.w	r4, r4, r2
60002624:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
60002628:	d109      	bne.n	6000263e <strcmp+0x296>
6000262a:	f850 2b04 	ldr.w	r2, [r0], #4
6000262e:	e7eb      	b.n	60002608 <strcmp+0x260>
60002630:	ea4f 6313 	mov.w	r3, r3, lsr #24
60002634:	e00d      	b.n	60002652 <strcmp+0x2aa>
60002636:	f015 0fff 	tst.w	r5, #255	; 0xff
6000263a:	d105      	bne.n	60002648 <strcmp+0x2a0>
6000263c:	680b      	ldr	r3, [r1, #0]
6000263e:	ea4f 2212 	mov.w	r2, r2, lsr #8
60002642:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
60002646:	e004      	b.n	60002652 <strcmp+0x2aa>
60002648:	f04f 0000 	mov.w	r0, #0
6000264c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
60002650:	4770      	bx	lr
60002652:	ba12      	rev	r2, r2
60002654:	ba1b      	rev	r3, r3
60002656:	fa82 f44c 	uadd8	r4, r2, ip
6000265a:	ea82 0403 	eor.w	r4, r2, r3
6000265e:	faa4 f58c 	sel	r5, r4, ip
60002662:	fab5 f485 	clz	r4, r5
60002666:	fa02 f204 	lsl.w	r2, r2, r4
6000266a:	fa03 f304 	lsl.w	r3, r3, r4
6000266e:	ea4f 6012 	mov.w	r0, r2, lsr #24
60002672:	e8fd 4504 	ldrd	r4, r5, [sp], #16
60002676:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
6000267a:	4770      	bx	lr
6000267c:	0000      	movs	r0, r0
	...

60002680 <memchr>:
60002680:	f001 01ff 	and.w	r1, r1, #255	; 0xff
60002684:	2a10      	cmp	r2, #16
60002686:	db2b      	blt.n	600026e0 <memchr+0x60>
60002688:	f010 0f07 	tst.w	r0, #7
6000268c:	d008      	beq.n	600026a0 <memchr+0x20>
6000268e:	f810 3b01 	ldrb.w	r3, [r0], #1
60002692:	3a01      	subs	r2, #1
60002694:	428b      	cmp	r3, r1
60002696:	d02d      	beq.n	600026f4 <memchr+0x74>
60002698:	f010 0f07 	tst.w	r0, #7
6000269c:	b342      	cbz	r2, 600026f0 <memchr+0x70>
6000269e:	d1f6      	bne.n	6000268e <memchr+0xe>
600026a0:	b4f0      	push	{r4, r5, r6, r7}
600026a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
600026a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
600026aa:	f022 0407 	bic.w	r4, r2, #7
600026ae:	f07f 0700 	mvns.w	r7, #0
600026b2:	2300      	movs	r3, #0
600026b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
600026b8:	3c08      	subs	r4, #8
600026ba:	ea85 0501 	eor.w	r5, r5, r1
600026be:	ea86 0601 	eor.w	r6, r6, r1
600026c2:	fa85 f547 	uadd8	r5, r5, r7
600026c6:	faa3 f587 	sel	r5, r3, r7
600026ca:	fa86 f647 	uadd8	r6, r6, r7
600026ce:	faa5 f687 	sel	r6, r5, r7
600026d2:	b98e      	cbnz	r6, 600026f8 <memchr+0x78>
600026d4:	d1ee      	bne.n	600026b4 <memchr+0x34>
600026d6:	bcf0      	pop	{r4, r5, r6, r7}
600026d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
600026dc:	f002 0207 	and.w	r2, r2, #7
600026e0:	b132      	cbz	r2, 600026f0 <memchr+0x70>
600026e2:	f810 3b01 	ldrb.w	r3, [r0], #1
600026e6:	3a01      	subs	r2, #1
600026e8:	ea83 0301 	eor.w	r3, r3, r1
600026ec:	b113      	cbz	r3, 600026f4 <memchr+0x74>
600026ee:	d1f8      	bne.n	600026e2 <memchr+0x62>
600026f0:	2000      	movs	r0, #0
600026f2:	4770      	bx	lr
600026f4:	3801      	subs	r0, #1
600026f6:	4770      	bx	lr
600026f8:	2d00      	cmp	r5, #0
600026fa:	bf06      	itte	eq
600026fc:	4635      	moveq	r5, r6
600026fe:	3803      	subeq	r0, #3
60002700:	3807      	subne	r0, #7
60002702:	f015 0f01 	tst.w	r5, #1
60002706:	d107      	bne.n	60002718 <memchr+0x98>
60002708:	3001      	adds	r0, #1
6000270a:	f415 7f80 	tst.w	r5, #256	; 0x100
6000270e:	bf02      	ittt	eq
60002710:	3001      	addeq	r0, #1
60002712:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
60002716:	3001      	addeq	r0, #1
60002718:	bcf0      	pop	{r4, r5, r6, r7}
6000271a:	3801      	subs	r0, #1
6000271c:	4770      	bx	lr
6000271e:	bf00      	nop

60002720 <__aeabi_drsub>:
60002720:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
60002724:	e002      	b.n	6000272c <__adddf3>
60002726:	bf00      	nop

60002728 <__aeabi_dsub>:
60002728:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

6000272c <__adddf3>:
6000272c:	b530      	push	{r4, r5, lr}
6000272e:	ea4f 0441 	mov.w	r4, r1, lsl #1
60002732:	ea4f 0543 	mov.w	r5, r3, lsl #1
60002736:	ea94 0f05 	teq	r4, r5
6000273a:	bf08      	it	eq
6000273c:	ea90 0f02 	teqeq	r0, r2
60002740:	bf1f      	itttt	ne
60002742:	ea54 0c00 	orrsne.w	ip, r4, r0
60002746:	ea55 0c02 	orrsne.w	ip, r5, r2
6000274a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
6000274e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
60002752:	f000 80e2 	beq.w	6000291a <__adddf3+0x1ee>
60002756:	ea4f 5454 	mov.w	r4, r4, lsr #21
6000275a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
6000275e:	bfb8      	it	lt
60002760:	426d      	neglt	r5, r5
60002762:	dd0c      	ble.n	6000277e <__adddf3+0x52>
60002764:	442c      	add	r4, r5
60002766:	ea80 0202 	eor.w	r2, r0, r2
6000276a:	ea81 0303 	eor.w	r3, r1, r3
6000276e:	ea82 0000 	eor.w	r0, r2, r0
60002772:	ea83 0101 	eor.w	r1, r3, r1
60002776:	ea80 0202 	eor.w	r2, r0, r2
6000277a:	ea81 0303 	eor.w	r3, r1, r3
6000277e:	2d36      	cmp	r5, #54	; 0x36
60002780:	bf88      	it	hi
60002782:	bd30      	pophi	{r4, r5, pc}
60002784:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
60002788:	ea4f 3101 	mov.w	r1, r1, lsl #12
6000278c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
60002790:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
60002794:	d002      	beq.n	6000279c <__adddf3+0x70>
60002796:	4240      	negs	r0, r0
60002798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
6000279c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
600027a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
600027a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
600027a8:	d002      	beq.n	600027b0 <__adddf3+0x84>
600027aa:	4252      	negs	r2, r2
600027ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
600027b0:	ea94 0f05 	teq	r4, r5
600027b4:	f000 80a7 	beq.w	60002906 <__adddf3+0x1da>
600027b8:	f1a4 0401 	sub.w	r4, r4, #1
600027bc:	f1d5 0e20 	rsbs	lr, r5, #32
600027c0:	db0d      	blt.n	600027de <__adddf3+0xb2>
600027c2:	fa02 fc0e 	lsl.w	ip, r2, lr
600027c6:	fa22 f205 	lsr.w	r2, r2, r5
600027ca:	1880      	adds	r0, r0, r2
600027cc:	f141 0100 	adc.w	r1, r1, #0
600027d0:	fa03 f20e 	lsl.w	r2, r3, lr
600027d4:	1880      	adds	r0, r0, r2
600027d6:	fa43 f305 	asr.w	r3, r3, r5
600027da:	4159      	adcs	r1, r3
600027dc:	e00e      	b.n	600027fc <__adddf3+0xd0>
600027de:	f1a5 0520 	sub.w	r5, r5, #32
600027e2:	f10e 0e20 	add.w	lr, lr, #32
600027e6:	2a01      	cmp	r2, #1
600027e8:	fa03 fc0e 	lsl.w	ip, r3, lr
600027ec:	bf28      	it	cs
600027ee:	f04c 0c02 	orrcs.w	ip, ip, #2
600027f2:	fa43 f305 	asr.w	r3, r3, r5
600027f6:	18c0      	adds	r0, r0, r3
600027f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
600027fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
60002800:	d507      	bpl.n	60002812 <__adddf3+0xe6>
60002802:	f04f 0e00 	mov.w	lr, #0
60002806:	f1dc 0c00 	rsbs	ip, ip, #0
6000280a:	eb7e 0000 	sbcs.w	r0, lr, r0
6000280e:	eb6e 0101 	sbc.w	r1, lr, r1
60002812:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
60002816:	d31b      	bcc.n	60002850 <__adddf3+0x124>
60002818:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
6000281c:	d30c      	bcc.n	60002838 <__adddf3+0x10c>
6000281e:	0849      	lsrs	r1, r1, #1
60002820:	ea5f 0030 	movs.w	r0, r0, rrx
60002824:	ea4f 0c3c 	mov.w	ip, ip, rrx
60002828:	f104 0401 	add.w	r4, r4, #1
6000282c:	ea4f 5244 	mov.w	r2, r4, lsl #21
60002830:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
60002834:	f080 809a 	bcs.w	6000296c <__adddf3+0x240>
60002838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
6000283c:	bf08      	it	eq
6000283e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
60002842:	f150 0000 	adcs.w	r0, r0, #0
60002846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
6000284a:	ea41 0105 	orr.w	r1, r1, r5
6000284e:	bd30      	pop	{r4, r5, pc}
60002850:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
60002854:	4140      	adcs	r0, r0
60002856:	eb41 0101 	adc.w	r1, r1, r1
6000285a:	3c01      	subs	r4, #1
6000285c:	bf28      	it	cs
6000285e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
60002862:	d2e9      	bcs.n	60002838 <__adddf3+0x10c>
60002864:	f091 0f00 	teq	r1, #0
60002868:	bf04      	itt	eq
6000286a:	4601      	moveq	r1, r0
6000286c:	2000      	moveq	r0, #0
6000286e:	fab1 f381 	clz	r3, r1
60002872:	bf08      	it	eq
60002874:	3320      	addeq	r3, #32
60002876:	f1a3 030b 	sub.w	r3, r3, #11
6000287a:	f1b3 0220 	subs.w	r2, r3, #32
6000287e:	da0c      	bge.n	6000289a <__adddf3+0x16e>
60002880:	320c      	adds	r2, #12
60002882:	dd08      	ble.n	60002896 <__adddf3+0x16a>
60002884:	f102 0c14 	add.w	ip, r2, #20
60002888:	f1c2 020c 	rsb	r2, r2, #12
6000288c:	fa01 f00c 	lsl.w	r0, r1, ip
60002890:	fa21 f102 	lsr.w	r1, r1, r2
60002894:	e00c      	b.n	600028b0 <__adddf3+0x184>
60002896:	f102 0214 	add.w	r2, r2, #20
6000289a:	bfd8      	it	le
6000289c:	f1c2 0c20 	rsble	ip, r2, #32
600028a0:	fa01 f102 	lsl.w	r1, r1, r2
600028a4:	fa20 fc0c 	lsr.w	ip, r0, ip
600028a8:	bfdc      	itt	le
600028aa:	ea41 010c 	orrle.w	r1, r1, ip
600028ae:	4090      	lslle	r0, r2
600028b0:	1ae4      	subs	r4, r4, r3
600028b2:	bfa2      	ittt	ge
600028b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
600028b8:	4329      	orrge	r1, r5
600028ba:	bd30      	popge	{r4, r5, pc}
600028bc:	ea6f 0404 	mvn.w	r4, r4
600028c0:	3c1f      	subs	r4, #31
600028c2:	da1c      	bge.n	600028fe <__adddf3+0x1d2>
600028c4:	340c      	adds	r4, #12
600028c6:	dc0e      	bgt.n	600028e6 <__adddf3+0x1ba>
600028c8:	f104 0414 	add.w	r4, r4, #20
600028cc:	f1c4 0220 	rsb	r2, r4, #32
600028d0:	fa20 f004 	lsr.w	r0, r0, r4
600028d4:	fa01 f302 	lsl.w	r3, r1, r2
600028d8:	ea40 0003 	orr.w	r0, r0, r3
600028dc:	fa21 f304 	lsr.w	r3, r1, r4
600028e0:	ea45 0103 	orr.w	r1, r5, r3
600028e4:	bd30      	pop	{r4, r5, pc}
600028e6:	f1c4 040c 	rsb	r4, r4, #12
600028ea:	f1c4 0220 	rsb	r2, r4, #32
600028ee:	fa20 f002 	lsr.w	r0, r0, r2
600028f2:	fa01 f304 	lsl.w	r3, r1, r4
600028f6:	ea40 0003 	orr.w	r0, r0, r3
600028fa:	4629      	mov	r1, r5
600028fc:	bd30      	pop	{r4, r5, pc}
600028fe:	fa21 f004 	lsr.w	r0, r1, r4
60002902:	4629      	mov	r1, r5
60002904:	bd30      	pop	{r4, r5, pc}
60002906:	f094 0f00 	teq	r4, #0
6000290a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
6000290e:	bf06      	itte	eq
60002910:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
60002914:	3401      	addeq	r4, #1
60002916:	3d01      	subne	r5, #1
60002918:	e74e      	b.n	600027b8 <__adddf3+0x8c>
6000291a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
6000291e:	bf18      	it	ne
60002920:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
60002924:	d029      	beq.n	6000297a <__adddf3+0x24e>
60002926:	ea94 0f05 	teq	r4, r5
6000292a:	bf08      	it	eq
6000292c:	ea90 0f02 	teqeq	r0, r2
60002930:	d005      	beq.n	6000293e <__adddf3+0x212>
60002932:	ea54 0c00 	orrs.w	ip, r4, r0
60002936:	bf04      	itt	eq
60002938:	4619      	moveq	r1, r3
6000293a:	4610      	moveq	r0, r2
6000293c:	bd30      	pop	{r4, r5, pc}
6000293e:	ea91 0f03 	teq	r1, r3
60002942:	bf1e      	ittt	ne
60002944:	2100      	movne	r1, #0
60002946:	2000      	movne	r0, #0
60002948:	bd30      	popne	{r4, r5, pc}
6000294a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
6000294e:	d105      	bne.n	6000295c <__adddf3+0x230>
60002950:	0040      	lsls	r0, r0, #1
60002952:	4149      	adcs	r1, r1
60002954:	bf28      	it	cs
60002956:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
6000295a:	bd30      	pop	{r4, r5, pc}
6000295c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
60002960:	bf3c      	itt	cc
60002962:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
60002966:	bd30      	popcc	{r4, r5, pc}
60002968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
6000296c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
60002970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
60002974:	f04f 0000 	mov.w	r0, #0
60002978:	bd30      	pop	{r4, r5, pc}
6000297a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
6000297e:	bf1a      	itte	ne
60002980:	4619      	movne	r1, r3
60002982:	4610      	movne	r0, r2
60002984:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
60002988:	bf1c      	itt	ne
6000298a:	460b      	movne	r3, r1
6000298c:	4602      	movne	r2, r0
6000298e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
60002992:	bf06      	itte	eq
60002994:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
60002998:	ea91 0f03 	teqeq	r1, r3
6000299c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
600029a0:	bd30      	pop	{r4, r5, pc}
600029a2:	bf00      	nop

600029a4 <__aeabi_ui2d>:
600029a4:	f090 0f00 	teq	r0, #0
600029a8:	bf04      	itt	eq
600029aa:	2100      	moveq	r1, #0
600029ac:	4770      	bxeq	lr
600029ae:	b530      	push	{r4, r5, lr}
600029b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
600029b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
600029b8:	f04f 0500 	mov.w	r5, #0
600029bc:	f04f 0100 	mov.w	r1, #0
600029c0:	e750      	b.n	60002864 <__adddf3+0x138>
600029c2:	bf00      	nop

600029c4 <__aeabi_i2d>:
600029c4:	f090 0f00 	teq	r0, #0
600029c8:	bf04      	itt	eq
600029ca:	2100      	moveq	r1, #0
600029cc:	4770      	bxeq	lr
600029ce:	b530      	push	{r4, r5, lr}
600029d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
600029d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
600029d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
600029dc:	bf48      	it	mi
600029de:	4240      	negmi	r0, r0
600029e0:	f04f 0100 	mov.w	r1, #0
600029e4:	e73e      	b.n	60002864 <__adddf3+0x138>
600029e6:	bf00      	nop

600029e8 <__aeabi_f2d>:
600029e8:	0042      	lsls	r2, r0, #1
600029ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
600029ee:	ea4f 0131 	mov.w	r1, r1, rrx
600029f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
600029f6:	bf1f      	itttt	ne
600029f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
600029fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
60002a00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
60002a04:	4770      	bxne	lr
60002a06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
60002a0a:	bf08      	it	eq
60002a0c:	4770      	bxeq	lr
60002a0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
60002a12:	bf04      	itt	eq
60002a14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
60002a18:	4770      	bxeq	lr
60002a1a:	b530      	push	{r4, r5, lr}
60002a1c:	f44f 7460 	mov.w	r4, #896	; 0x380
60002a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
60002a24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
60002a28:	e71c      	b.n	60002864 <__adddf3+0x138>
60002a2a:	bf00      	nop

60002a2c <__aeabi_ul2d>:
60002a2c:	ea50 0201 	orrs.w	r2, r0, r1
60002a30:	bf08      	it	eq
60002a32:	4770      	bxeq	lr
60002a34:	b530      	push	{r4, r5, lr}
60002a36:	f04f 0500 	mov.w	r5, #0
60002a3a:	e00a      	b.n	60002a52 <__aeabi_l2d+0x16>

60002a3c <__aeabi_l2d>:
60002a3c:	ea50 0201 	orrs.w	r2, r0, r1
60002a40:	bf08      	it	eq
60002a42:	4770      	bxeq	lr
60002a44:	b530      	push	{r4, r5, lr}
60002a46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
60002a4a:	d502      	bpl.n	60002a52 <__aeabi_l2d+0x16>
60002a4c:	4240      	negs	r0, r0
60002a4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
60002a52:	f44f 6480 	mov.w	r4, #1024	; 0x400
60002a56:	f104 0432 	add.w	r4, r4, #50	; 0x32
60002a5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
60002a5e:	f43f aed8 	beq.w	60002812 <__adddf3+0xe6>
60002a62:	f04f 0203 	mov.w	r2, #3
60002a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
60002a6a:	bf18      	it	ne
60002a6c:	3203      	addne	r2, #3
60002a6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
60002a72:	bf18      	it	ne
60002a74:	3203      	addne	r2, #3
60002a76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
60002a7a:	f1c2 0320 	rsb	r3, r2, #32
60002a7e:	fa00 fc03 	lsl.w	ip, r0, r3
60002a82:	fa20 f002 	lsr.w	r0, r0, r2
60002a86:	fa01 fe03 	lsl.w	lr, r1, r3
60002a8a:	ea40 000e 	orr.w	r0, r0, lr
60002a8e:	fa21 f102 	lsr.w	r1, r1, r2
60002a92:	4414      	add	r4, r2
60002a94:	e6bd      	b.n	60002812 <__adddf3+0xe6>
60002a96:	bf00      	nop

60002a98 <__aeabi_dmul>:
60002a98:	b570      	push	{r4, r5, r6, lr}
60002a9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
60002a9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
60002aa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
60002aa6:	bf1d      	ittte	ne
60002aa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
60002aac:	ea94 0f0c 	teqne	r4, ip
60002ab0:	ea95 0f0c 	teqne	r5, ip
60002ab4:	f000 f8de 	bleq	60002c74 <__aeabi_dmul+0x1dc>
60002ab8:	442c      	add	r4, r5
60002aba:	ea81 0603 	eor.w	r6, r1, r3
60002abe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
60002ac2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
60002ac6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
60002aca:	bf18      	it	ne
60002acc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
60002ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
60002ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
60002ad8:	d038      	beq.n	60002b4c <__aeabi_dmul+0xb4>
60002ada:	fba0 ce02 	umull	ip, lr, r0, r2
60002ade:	f04f 0500 	mov.w	r5, #0
60002ae2:	fbe1 e502 	umlal	lr, r5, r1, r2
60002ae6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
60002aea:	fbe0 e503 	umlal	lr, r5, r0, r3
60002aee:	f04f 0600 	mov.w	r6, #0
60002af2:	fbe1 5603 	umlal	r5, r6, r1, r3
60002af6:	f09c 0f00 	teq	ip, #0
60002afa:	bf18      	it	ne
60002afc:	f04e 0e01 	orrne.w	lr, lr, #1
60002b00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
60002b04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
60002b08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
60002b0c:	d204      	bcs.n	60002b18 <__aeabi_dmul+0x80>
60002b0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
60002b12:	416d      	adcs	r5, r5
60002b14:	eb46 0606 	adc.w	r6, r6, r6
60002b18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
60002b1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
60002b20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
60002b24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
60002b28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
60002b2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
60002b30:	bf88      	it	hi
60002b32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
60002b36:	d81e      	bhi.n	60002b76 <__aeabi_dmul+0xde>
60002b38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
60002b3c:	bf08      	it	eq
60002b3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
60002b42:	f150 0000 	adcs.w	r0, r0, #0
60002b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
60002b4a:	bd70      	pop	{r4, r5, r6, pc}
60002b4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
60002b50:	ea46 0101 	orr.w	r1, r6, r1
60002b54:	ea40 0002 	orr.w	r0, r0, r2
60002b58:	ea81 0103 	eor.w	r1, r1, r3
60002b5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
60002b60:	bfc2      	ittt	gt
60002b62:	ebd4 050c 	rsbsgt	r5, r4, ip
60002b66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
60002b6a:	bd70      	popgt	{r4, r5, r6, pc}
60002b6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
60002b70:	f04f 0e00 	mov.w	lr, #0
60002b74:	3c01      	subs	r4, #1
60002b76:	f300 80ab 	bgt.w	60002cd0 <__aeabi_dmul+0x238>
60002b7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
60002b7e:	bfde      	ittt	le
60002b80:	2000      	movle	r0, #0
60002b82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
60002b86:	bd70      	pople	{r4, r5, r6, pc}
60002b88:	f1c4 0400 	rsb	r4, r4, #0
60002b8c:	3c20      	subs	r4, #32
60002b8e:	da35      	bge.n	60002bfc <__aeabi_dmul+0x164>
60002b90:	340c      	adds	r4, #12
60002b92:	dc1b      	bgt.n	60002bcc <__aeabi_dmul+0x134>
60002b94:	f104 0414 	add.w	r4, r4, #20
60002b98:	f1c4 0520 	rsb	r5, r4, #32
60002b9c:	fa00 f305 	lsl.w	r3, r0, r5
60002ba0:	fa20 f004 	lsr.w	r0, r0, r4
60002ba4:	fa01 f205 	lsl.w	r2, r1, r5
60002ba8:	ea40 0002 	orr.w	r0, r0, r2
60002bac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
60002bb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
60002bb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
60002bb8:	fa21 f604 	lsr.w	r6, r1, r4
60002bbc:	eb42 0106 	adc.w	r1, r2, r6
60002bc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
60002bc4:	bf08      	it	eq
60002bc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
60002bca:	bd70      	pop	{r4, r5, r6, pc}
60002bcc:	f1c4 040c 	rsb	r4, r4, #12
60002bd0:	f1c4 0520 	rsb	r5, r4, #32
60002bd4:	fa00 f304 	lsl.w	r3, r0, r4
60002bd8:	fa20 f005 	lsr.w	r0, r0, r5
60002bdc:	fa01 f204 	lsl.w	r2, r1, r4
60002be0:	ea40 0002 	orr.w	r0, r0, r2
60002be4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
60002be8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
60002bec:	f141 0100 	adc.w	r1, r1, #0
60002bf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
60002bf4:	bf08      	it	eq
60002bf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
60002bfa:	bd70      	pop	{r4, r5, r6, pc}
60002bfc:	f1c4 0520 	rsb	r5, r4, #32
60002c00:	fa00 f205 	lsl.w	r2, r0, r5
60002c04:	ea4e 0e02 	orr.w	lr, lr, r2
60002c08:	fa20 f304 	lsr.w	r3, r0, r4
60002c0c:	fa01 f205 	lsl.w	r2, r1, r5
60002c10:	ea43 0302 	orr.w	r3, r3, r2
60002c14:	fa21 f004 	lsr.w	r0, r1, r4
60002c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
60002c1c:	fa21 f204 	lsr.w	r2, r1, r4
60002c20:	ea20 0002 	bic.w	r0, r0, r2
60002c24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
60002c28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
60002c2c:	bf08      	it	eq
60002c2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
60002c32:	bd70      	pop	{r4, r5, r6, pc}
60002c34:	f094 0f00 	teq	r4, #0
60002c38:	d10f      	bne.n	60002c5a <__aeabi_dmul+0x1c2>
60002c3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
60002c3e:	0040      	lsls	r0, r0, #1
60002c40:	eb41 0101 	adc.w	r1, r1, r1
60002c44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
60002c48:	bf08      	it	eq
60002c4a:	3c01      	subeq	r4, #1
60002c4c:	d0f7      	beq.n	60002c3e <__aeabi_dmul+0x1a6>
60002c4e:	ea41 0106 	orr.w	r1, r1, r6
60002c52:	f095 0f00 	teq	r5, #0
60002c56:	bf18      	it	ne
60002c58:	4770      	bxne	lr
60002c5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
60002c5e:	0052      	lsls	r2, r2, #1
60002c60:	eb43 0303 	adc.w	r3, r3, r3
60002c64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
60002c68:	bf08      	it	eq
60002c6a:	3d01      	subeq	r5, #1
60002c6c:	d0f7      	beq.n	60002c5e <__aeabi_dmul+0x1c6>
60002c6e:	ea43 0306 	orr.w	r3, r3, r6
60002c72:	4770      	bx	lr
60002c74:	ea94 0f0c 	teq	r4, ip
60002c78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
60002c7c:	bf18      	it	ne
60002c7e:	ea95 0f0c 	teqne	r5, ip
60002c82:	d00c      	beq.n	60002c9e <__aeabi_dmul+0x206>
60002c84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
60002c88:	bf18      	it	ne
60002c8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
60002c8e:	d1d1      	bne.n	60002c34 <__aeabi_dmul+0x19c>
60002c90:	ea81 0103 	eor.w	r1, r1, r3
60002c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
60002c98:	f04f 0000 	mov.w	r0, #0
60002c9c:	bd70      	pop	{r4, r5, r6, pc}
60002c9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
60002ca2:	bf06      	itte	eq
60002ca4:	4610      	moveq	r0, r2
60002ca6:	4619      	moveq	r1, r3
60002ca8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
60002cac:	d019      	beq.n	60002ce2 <__aeabi_dmul+0x24a>
60002cae:	ea94 0f0c 	teq	r4, ip
60002cb2:	d102      	bne.n	60002cba <__aeabi_dmul+0x222>
60002cb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
60002cb8:	d113      	bne.n	60002ce2 <__aeabi_dmul+0x24a>
60002cba:	ea95 0f0c 	teq	r5, ip
60002cbe:	d105      	bne.n	60002ccc <__aeabi_dmul+0x234>
60002cc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
60002cc4:	bf1c      	itt	ne
60002cc6:	4610      	movne	r0, r2
60002cc8:	4619      	movne	r1, r3
60002cca:	d10a      	bne.n	60002ce2 <__aeabi_dmul+0x24a>
60002ccc:	ea81 0103 	eor.w	r1, r1, r3
60002cd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
60002cd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
60002cd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
60002cdc:	f04f 0000 	mov.w	r0, #0
60002ce0:	bd70      	pop	{r4, r5, r6, pc}
60002ce2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
60002ce6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
60002cea:	bd70      	pop	{r4, r5, r6, pc}

60002cec <__aeabi_ddiv>:
60002cec:	b570      	push	{r4, r5, r6, lr}
60002cee:	f04f 0cff 	mov.w	ip, #255	; 0xff
60002cf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
60002cf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
60002cfa:	bf1d      	ittte	ne
60002cfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
60002d00:	ea94 0f0c 	teqne	r4, ip
60002d04:	ea95 0f0c 	teqne	r5, ip
60002d08:	f000 f8a7 	bleq	60002e5a <__aeabi_ddiv+0x16e>
60002d0c:	eba4 0405 	sub.w	r4, r4, r5
60002d10:	ea81 0e03 	eor.w	lr, r1, r3
60002d14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
60002d18:	ea4f 3101 	mov.w	r1, r1, lsl #12
60002d1c:	f000 8088 	beq.w	60002e30 <__aeabi_ddiv+0x144>
60002d20:	ea4f 3303 	mov.w	r3, r3, lsl #12
60002d24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
60002d28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
60002d2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
60002d30:	ea4f 2202 	mov.w	r2, r2, lsl #8
60002d34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
60002d38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
60002d3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
60002d40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
60002d44:	429d      	cmp	r5, r3
60002d46:	bf08      	it	eq
60002d48:	4296      	cmpeq	r6, r2
60002d4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
60002d4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
60002d52:	d202      	bcs.n	60002d5a <__aeabi_ddiv+0x6e>
60002d54:	085b      	lsrs	r3, r3, #1
60002d56:	ea4f 0232 	mov.w	r2, r2, rrx
60002d5a:	1ab6      	subs	r6, r6, r2
60002d5c:	eb65 0503 	sbc.w	r5, r5, r3
60002d60:	085b      	lsrs	r3, r3, #1
60002d62:	ea4f 0232 	mov.w	r2, r2, rrx
60002d66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
60002d6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
60002d6e:	ebb6 0e02 	subs.w	lr, r6, r2
60002d72:	eb75 0e03 	sbcs.w	lr, r5, r3
60002d76:	bf22      	ittt	cs
60002d78:	1ab6      	subcs	r6, r6, r2
60002d7a:	4675      	movcs	r5, lr
60002d7c:	ea40 000c 	orrcs.w	r0, r0, ip
60002d80:	085b      	lsrs	r3, r3, #1
60002d82:	ea4f 0232 	mov.w	r2, r2, rrx
60002d86:	ebb6 0e02 	subs.w	lr, r6, r2
60002d8a:	eb75 0e03 	sbcs.w	lr, r5, r3
60002d8e:	bf22      	ittt	cs
60002d90:	1ab6      	subcs	r6, r6, r2
60002d92:	4675      	movcs	r5, lr
60002d94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
60002d98:	085b      	lsrs	r3, r3, #1
60002d9a:	ea4f 0232 	mov.w	r2, r2, rrx
60002d9e:	ebb6 0e02 	subs.w	lr, r6, r2
60002da2:	eb75 0e03 	sbcs.w	lr, r5, r3
60002da6:	bf22      	ittt	cs
60002da8:	1ab6      	subcs	r6, r6, r2
60002daa:	4675      	movcs	r5, lr
60002dac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
60002db0:	085b      	lsrs	r3, r3, #1
60002db2:	ea4f 0232 	mov.w	r2, r2, rrx
60002db6:	ebb6 0e02 	subs.w	lr, r6, r2
60002dba:	eb75 0e03 	sbcs.w	lr, r5, r3
60002dbe:	bf22      	ittt	cs
60002dc0:	1ab6      	subcs	r6, r6, r2
60002dc2:	4675      	movcs	r5, lr
60002dc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
60002dc8:	ea55 0e06 	orrs.w	lr, r5, r6
60002dcc:	d018      	beq.n	60002e00 <__aeabi_ddiv+0x114>
60002dce:	ea4f 1505 	mov.w	r5, r5, lsl #4
60002dd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
60002dd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
60002dda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
60002dde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
60002de2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
60002de6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
60002dea:	d1c0      	bne.n	60002d6e <__aeabi_ddiv+0x82>
60002dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
60002df0:	d10b      	bne.n	60002e0a <__aeabi_ddiv+0x11e>
60002df2:	ea41 0100 	orr.w	r1, r1, r0
60002df6:	f04f 0000 	mov.w	r0, #0
60002dfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
60002dfe:	e7b6      	b.n	60002d6e <__aeabi_ddiv+0x82>
60002e00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
60002e04:	bf04      	itt	eq
60002e06:	4301      	orreq	r1, r0
60002e08:	2000      	moveq	r0, #0
60002e0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
60002e0e:	bf88      	it	hi
60002e10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
60002e14:	f63f aeaf 	bhi.w	60002b76 <__aeabi_dmul+0xde>
60002e18:	ebb5 0c03 	subs.w	ip, r5, r3
60002e1c:	bf04      	itt	eq
60002e1e:	ebb6 0c02 	subseq.w	ip, r6, r2
60002e22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
60002e26:	f150 0000 	adcs.w	r0, r0, #0
60002e2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
60002e2e:	bd70      	pop	{r4, r5, r6, pc}
60002e30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
60002e34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
60002e38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
60002e3c:	bfc2      	ittt	gt
60002e3e:	ebd4 050c 	rsbsgt	r5, r4, ip
60002e42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
60002e46:	bd70      	popgt	{r4, r5, r6, pc}
60002e48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
60002e4c:	f04f 0e00 	mov.w	lr, #0
60002e50:	3c01      	subs	r4, #1
60002e52:	e690      	b.n	60002b76 <__aeabi_dmul+0xde>
60002e54:	ea45 0e06 	orr.w	lr, r5, r6
60002e58:	e68d      	b.n	60002b76 <__aeabi_dmul+0xde>
60002e5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
60002e5e:	ea94 0f0c 	teq	r4, ip
60002e62:	bf08      	it	eq
60002e64:	ea95 0f0c 	teqeq	r5, ip
60002e68:	f43f af3b 	beq.w	60002ce2 <__aeabi_dmul+0x24a>
60002e6c:	ea94 0f0c 	teq	r4, ip
60002e70:	d10a      	bne.n	60002e88 <__aeabi_ddiv+0x19c>
60002e72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
60002e76:	f47f af34 	bne.w	60002ce2 <__aeabi_dmul+0x24a>
60002e7a:	ea95 0f0c 	teq	r5, ip
60002e7e:	f47f af25 	bne.w	60002ccc <__aeabi_dmul+0x234>
60002e82:	4610      	mov	r0, r2
60002e84:	4619      	mov	r1, r3
60002e86:	e72c      	b.n	60002ce2 <__aeabi_dmul+0x24a>
60002e88:	ea95 0f0c 	teq	r5, ip
60002e8c:	d106      	bne.n	60002e9c <__aeabi_ddiv+0x1b0>
60002e8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
60002e92:	f43f aefd 	beq.w	60002c90 <__aeabi_dmul+0x1f8>
60002e96:	4610      	mov	r0, r2
60002e98:	4619      	mov	r1, r3
60002e9a:	e722      	b.n	60002ce2 <__aeabi_dmul+0x24a>
60002e9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
60002ea0:	bf18      	it	ne
60002ea2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
60002ea6:	f47f aec5 	bne.w	60002c34 <__aeabi_dmul+0x19c>
60002eaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
60002eae:	f47f af0d 	bne.w	60002ccc <__aeabi_dmul+0x234>
60002eb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
60002eb6:	f47f aeeb 	bne.w	60002c90 <__aeabi_dmul+0x1f8>
60002eba:	e712      	b.n	60002ce2 <__aeabi_dmul+0x24a>

60002ebc <__gedf2>:
60002ebc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
60002ec0:	e006      	b.n	60002ed0 <__cmpdf2+0x4>
60002ec2:	bf00      	nop

60002ec4 <__ledf2>:
60002ec4:	f04f 0c01 	mov.w	ip, #1
60002ec8:	e002      	b.n	60002ed0 <__cmpdf2+0x4>
60002eca:	bf00      	nop

60002ecc <__cmpdf2>:
60002ecc:	f04f 0c01 	mov.w	ip, #1
60002ed0:	f84d cd04 	str.w	ip, [sp, #-4]!
60002ed4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
60002ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
60002edc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
60002ee0:	bf18      	it	ne
60002ee2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
60002ee6:	d01b      	beq.n	60002f20 <__cmpdf2+0x54>
60002ee8:	b001      	add	sp, #4
60002eea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
60002eee:	bf0c      	ite	eq
60002ef0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
60002ef4:	ea91 0f03 	teqne	r1, r3
60002ef8:	bf02      	ittt	eq
60002efa:	ea90 0f02 	teqeq	r0, r2
60002efe:	2000      	moveq	r0, #0
60002f00:	4770      	bxeq	lr
60002f02:	f110 0f00 	cmn.w	r0, #0
60002f06:	ea91 0f03 	teq	r1, r3
60002f0a:	bf58      	it	pl
60002f0c:	4299      	cmppl	r1, r3
60002f0e:	bf08      	it	eq
60002f10:	4290      	cmpeq	r0, r2
60002f12:	bf2c      	ite	cs
60002f14:	17d8      	asrcs	r0, r3, #31
60002f16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
60002f1a:	f040 0001 	orr.w	r0, r0, #1
60002f1e:	4770      	bx	lr
60002f20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
60002f24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
60002f28:	d102      	bne.n	60002f30 <__cmpdf2+0x64>
60002f2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
60002f2e:	d107      	bne.n	60002f40 <__cmpdf2+0x74>
60002f30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
60002f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
60002f38:	d1d6      	bne.n	60002ee8 <__cmpdf2+0x1c>
60002f3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
60002f3e:	d0d3      	beq.n	60002ee8 <__cmpdf2+0x1c>
60002f40:	f85d 0b04 	ldr.w	r0, [sp], #4
60002f44:	4770      	bx	lr
60002f46:	bf00      	nop

60002f48 <__aeabi_cdrcmple>:
60002f48:	4684      	mov	ip, r0
60002f4a:	4610      	mov	r0, r2
60002f4c:	4662      	mov	r2, ip
60002f4e:	468c      	mov	ip, r1
60002f50:	4619      	mov	r1, r3
60002f52:	4663      	mov	r3, ip
60002f54:	e000      	b.n	60002f58 <__aeabi_cdcmpeq>
60002f56:	bf00      	nop

60002f58 <__aeabi_cdcmpeq>:
60002f58:	b501      	push	{r0, lr}
60002f5a:	f7ff ffb7 	bl	60002ecc <__cmpdf2>
60002f5e:	2800      	cmp	r0, #0
60002f60:	bf48      	it	mi
60002f62:	f110 0f00 	cmnmi.w	r0, #0
60002f66:	bd01      	pop	{r0, pc}

60002f68 <__aeabi_dcmpeq>:
60002f68:	f84d ed08 	str.w	lr, [sp, #-8]!
60002f6c:	f7ff fff4 	bl	60002f58 <__aeabi_cdcmpeq>
60002f70:	bf0c      	ite	eq
60002f72:	2001      	moveq	r0, #1
60002f74:	2000      	movne	r0, #0
60002f76:	f85d fb08 	ldr.w	pc, [sp], #8
60002f7a:	bf00      	nop

60002f7c <__aeabi_dcmplt>:
60002f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
60002f80:	f7ff ffea 	bl	60002f58 <__aeabi_cdcmpeq>
60002f84:	bf34      	ite	cc
60002f86:	2001      	movcc	r0, #1
60002f88:	2000      	movcs	r0, #0
60002f8a:	f85d fb08 	ldr.w	pc, [sp], #8
60002f8e:	bf00      	nop

60002f90 <__aeabi_dcmple>:
60002f90:	f84d ed08 	str.w	lr, [sp, #-8]!
60002f94:	f7ff ffe0 	bl	60002f58 <__aeabi_cdcmpeq>
60002f98:	bf94      	ite	ls
60002f9a:	2001      	movls	r0, #1
60002f9c:	2000      	movhi	r0, #0
60002f9e:	f85d fb08 	ldr.w	pc, [sp], #8
60002fa2:	bf00      	nop

60002fa4 <__aeabi_dcmpge>:
60002fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
60002fa8:	f7ff ffce 	bl	60002f48 <__aeabi_cdrcmple>
60002fac:	bf94      	ite	ls
60002fae:	2001      	movls	r0, #1
60002fb0:	2000      	movhi	r0, #0
60002fb2:	f85d fb08 	ldr.w	pc, [sp], #8
60002fb6:	bf00      	nop

60002fb8 <__aeabi_dcmpgt>:
60002fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
60002fbc:	f7ff ffc4 	bl	60002f48 <__aeabi_cdrcmple>
60002fc0:	bf34      	ite	cc
60002fc2:	2001      	movcc	r0, #1
60002fc4:	2000      	movcs	r0, #0
60002fc6:	f85d fb08 	ldr.w	pc, [sp], #8
60002fca:	bf00      	nop

60002fcc <__aeabi_d2iz>:
60002fcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
60002fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
60002fd4:	d215      	bcs.n	60003002 <__aeabi_d2iz+0x36>
60002fd6:	d511      	bpl.n	60002ffc <__aeabi_d2iz+0x30>
60002fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
60002fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
60002fe0:	d912      	bls.n	60003008 <__aeabi_d2iz+0x3c>
60002fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
60002fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
60002fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
60002fee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
60002ff2:	fa23 f002 	lsr.w	r0, r3, r2
60002ff6:	bf18      	it	ne
60002ff8:	4240      	negne	r0, r0
60002ffa:	4770      	bx	lr
60002ffc:	f04f 0000 	mov.w	r0, #0
60003000:	4770      	bx	lr
60003002:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
60003006:	d105      	bne.n	60003014 <__aeabi_d2iz+0x48>
60003008:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
6000300c:	bf08      	it	eq
6000300e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
60003012:	4770      	bx	lr
60003014:	f04f 0000 	mov.w	r0, #0
60003018:	4770      	bx	lr
6000301a:	bf00      	nop

6000301c <__aeabi_d2f>:
6000301c:	ea4f 0241 	mov.w	r2, r1, lsl #1
60003020:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
60003024:	bf24      	itt	cs
60003026:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
6000302a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
6000302e:	d90d      	bls.n	6000304c <__aeabi_d2f+0x30>
60003030:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
60003034:	ea4f 02c0 	mov.w	r2, r0, lsl #3
60003038:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
6000303c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
60003040:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
60003044:	bf08      	it	eq
60003046:	f020 0001 	biceq.w	r0, r0, #1
6000304a:	4770      	bx	lr
6000304c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
60003050:	d121      	bne.n	60003096 <__aeabi_d2f+0x7a>
60003052:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
60003056:	bfbc      	itt	lt
60003058:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
6000305c:	4770      	bxlt	lr
6000305e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
60003062:	ea4f 5252 	mov.w	r2, r2, lsr #21
60003066:	f1c2 0218 	rsb	r2, r2, #24
6000306a:	f1c2 0c20 	rsb	ip, r2, #32
6000306e:	fa10 f30c 	lsls.w	r3, r0, ip
60003072:	fa20 f002 	lsr.w	r0, r0, r2
60003076:	bf18      	it	ne
60003078:	f040 0001 	orrne.w	r0, r0, #1
6000307c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
60003080:	ea4f 23d3 	mov.w	r3, r3, lsr #11
60003084:	fa03 fc0c 	lsl.w	ip, r3, ip
60003088:	ea40 000c 	orr.w	r0, r0, ip
6000308c:	fa23 f302 	lsr.w	r3, r3, r2
60003090:	ea4f 0343 	mov.w	r3, r3, lsl #1
60003094:	e7cc      	b.n	60003030 <__aeabi_d2f+0x14>
60003096:	ea7f 5362 	mvns.w	r3, r2, asr #21
6000309a:	d107      	bne.n	600030ac <__aeabi_d2f+0x90>
6000309c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
600030a0:	bf1e      	ittt	ne
600030a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
600030a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
600030aa:	4770      	bxne	lr
600030ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
600030b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
600030b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
600030b8:	4770      	bx	lr
600030ba:	bf00      	nop

600030bc <__aeabi_frsub>:
600030bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
600030c0:	e002      	b.n	600030c8 <__addsf3>
600030c2:	bf00      	nop

600030c4 <__aeabi_fsub>:
600030c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

600030c8 <__addsf3>:
600030c8:	0042      	lsls	r2, r0, #1
600030ca:	bf1f      	itttt	ne
600030cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
600030d0:	ea92 0f03 	teqne	r2, r3
600030d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
600030d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
600030dc:	d06a      	beq.n	600031b4 <__addsf3+0xec>
600030de:	ea4f 6212 	mov.w	r2, r2, lsr #24
600030e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
600030e6:	bfc1      	itttt	gt
600030e8:	18d2      	addgt	r2, r2, r3
600030ea:	4041      	eorgt	r1, r0
600030ec:	4048      	eorgt	r0, r1
600030ee:	4041      	eorgt	r1, r0
600030f0:	bfb8      	it	lt
600030f2:	425b      	neglt	r3, r3
600030f4:	2b19      	cmp	r3, #25
600030f6:	bf88      	it	hi
600030f8:	4770      	bxhi	lr
600030fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
600030fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60003102:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
60003106:	bf18      	it	ne
60003108:	4240      	negne	r0, r0
6000310a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
6000310e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
60003112:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
60003116:	bf18      	it	ne
60003118:	4249      	negne	r1, r1
6000311a:	ea92 0f03 	teq	r2, r3
6000311e:	d03f      	beq.n	600031a0 <__addsf3+0xd8>
60003120:	f1a2 0201 	sub.w	r2, r2, #1
60003124:	fa41 fc03 	asr.w	ip, r1, r3
60003128:	eb10 000c 	adds.w	r0, r0, ip
6000312c:	f1c3 0320 	rsb	r3, r3, #32
60003130:	fa01 f103 	lsl.w	r1, r1, r3
60003134:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
60003138:	d502      	bpl.n	60003140 <__addsf3+0x78>
6000313a:	4249      	negs	r1, r1
6000313c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
60003140:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
60003144:	d313      	bcc.n	6000316e <__addsf3+0xa6>
60003146:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
6000314a:	d306      	bcc.n	6000315a <__addsf3+0x92>
6000314c:	0840      	lsrs	r0, r0, #1
6000314e:	ea4f 0131 	mov.w	r1, r1, rrx
60003152:	f102 0201 	add.w	r2, r2, #1
60003156:	2afe      	cmp	r2, #254	; 0xfe
60003158:	d251      	bcs.n	600031fe <__addsf3+0x136>
6000315a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
6000315e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
60003162:	bf08      	it	eq
60003164:	f020 0001 	biceq.w	r0, r0, #1
60003168:	ea40 0003 	orr.w	r0, r0, r3
6000316c:	4770      	bx	lr
6000316e:	0049      	lsls	r1, r1, #1
60003170:	eb40 0000 	adc.w	r0, r0, r0
60003174:	3a01      	subs	r2, #1
60003176:	bf28      	it	cs
60003178:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
6000317c:	d2ed      	bcs.n	6000315a <__addsf3+0x92>
6000317e:	fab0 fc80 	clz	ip, r0
60003182:	f1ac 0c08 	sub.w	ip, ip, #8
60003186:	ebb2 020c 	subs.w	r2, r2, ip
6000318a:	fa00 f00c 	lsl.w	r0, r0, ip
6000318e:	bfaa      	itet	ge
60003190:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
60003194:	4252      	neglt	r2, r2
60003196:	4318      	orrge	r0, r3
60003198:	bfbc      	itt	lt
6000319a:	40d0      	lsrlt	r0, r2
6000319c:	4318      	orrlt	r0, r3
6000319e:	4770      	bx	lr
600031a0:	f092 0f00 	teq	r2, #0
600031a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
600031a8:	bf06      	itte	eq
600031aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
600031ae:	3201      	addeq	r2, #1
600031b0:	3b01      	subne	r3, #1
600031b2:	e7b5      	b.n	60003120 <__addsf3+0x58>
600031b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
600031b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
600031bc:	bf18      	it	ne
600031be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
600031c2:	d021      	beq.n	60003208 <__addsf3+0x140>
600031c4:	ea92 0f03 	teq	r2, r3
600031c8:	d004      	beq.n	600031d4 <__addsf3+0x10c>
600031ca:	f092 0f00 	teq	r2, #0
600031ce:	bf08      	it	eq
600031d0:	4608      	moveq	r0, r1
600031d2:	4770      	bx	lr
600031d4:	ea90 0f01 	teq	r0, r1
600031d8:	bf1c      	itt	ne
600031da:	2000      	movne	r0, #0
600031dc:	4770      	bxne	lr
600031de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
600031e2:	d104      	bne.n	600031ee <__addsf3+0x126>
600031e4:	0040      	lsls	r0, r0, #1
600031e6:	bf28      	it	cs
600031e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
600031ec:	4770      	bx	lr
600031ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
600031f2:	bf3c      	itt	cc
600031f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
600031f8:	4770      	bxcc	lr
600031fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
600031fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
60003202:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60003206:	4770      	bx	lr
60003208:	ea7f 6222 	mvns.w	r2, r2, asr #24
6000320c:	bf16      	itet	ne
6000320e:	4608      	movne	r0, r1
60003210:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
60003214:	4601      	movne	r1, r0
60003216:	0242      	lsls	r2, r0, #9
60003218:	bf06      	itte	eq
6000321a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
6000321e:	ea90 0f01 	teqeq	r0, r1
60003222:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
60003226:	4770      	bx	lr

60003228 <__aeabi_ui2f>:
60003228:	f04f 0300 	mov.w	r3, #0
6000322c:	e004      	b.n	60003238 <__aeabi_i2f+0x8>
6000322e:	bf00      	nop

60003230 <__aeabi_i2f>:
60003230:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
60003234:	bf48      	it	mi
60003236:	4240      	negmi	r0, r0
60003238:	ea5f 0c00 	movs.w	ip, r0
6000323c:	bf08      	it	eq
6000323e:	4770      	bxeq	lr
60003240:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
60003244:	4601      	mov	r1, r0
60003246:	f04f 0000 	mov.w	r0, #0
6000324a:	e01c      	b.n	60003286 <__aeabi_l2f+0x2a>

6000324c <__aeabi_ul2f>:
6000324c:	ea50 0201 	orrs.w	r2, r0, r1
60003250:	bf08      	it	eq
60003252:	4770      	bxeq	lr
60003254:	f04f 0300 	mov.w	r3, #0
60003258:	e00a      	b.n	60003270 <__aeabi_l2f+0x14>
6000325a:	bf00      	nop

6000325c <__aeabi_l2f>:
6000325c:	ea50 0201 	orrs.w	r2, r0, r1
60003260:	bf08      	it	eq
60003262:	4770      	bxeq	lr
60003264:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
60003268:	d502      	bpl.n	60003270 <__aeabi_l2f+0x14>
6000326a:	4240      	negs	r0, r0
6000326c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
60003270:	ea5f 0c01 	movs.w	ip, r1
60003274:	bf02      	ittt	eq
60003276:	4684      	moveq	ip, r0
60003278:	4601      	moveq	r1, r0
6000327a:	2000      	moveq	r0, #0
6000327c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
60003280:	bf08      	it	eq
60003282:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
60003286:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
6000328a:	fabc f28c 	clz	r2, ip
6000328e:	3a08      	subs	r2, #8
60003290:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
60003294:	db10      	blt.n	600032b8 <__aeabi_l2f+0x5c>
60003296:	fa01 fc02 	lsl.w	ip, r1, r2
6000329a:	4463      	add	r3, ip
6000329c:	fa00 fc02 	lsl.w	ip, r0, r2
600032a0:	f1c2 0220 	rsb	r2, r2, #32
600032a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
600032a8:	fa20 f202 	lsr.w	r2, r0, r2
600032ac:	eb43 0002 	adc.w	r0, r3, r2
600032b0:	bf08      	it	eq
600032b2:	f020 0001 	biceq.w	r0, r0, #1
600032b6:	4770      	bx	lr
600032b8:	f102 0220 	add.w	r2, r2, #32
600032bc:	fa01 fc02 	lsl.w	ip, r1, r2
600032c0:	f1c2 0220 	rsb	r2, r2, #32
600032c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
600032c8:	fa21 f202 	lsr.w	r2, r1, r2
600032cc:	eb43 0002 	adc.w	r0, r3, r2
600032d0:	bf08      	it	eq
600032d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
600032d6:	4770      	bx	lr

600032d8 <__aeabi_fmul>:
600032d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
600032dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
600032e0:	bf1e      	ittt	ne
600032e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
600032e6:	ea92 0f0c 	teqne	r2, ip
600032ea:	ea93 0f0c 	teqne	r3, ip
600032ee:	d06f      	beq.n	600033d0 <__aeabi_fmul+0xf8>
600032f0:	441a      	add	r2, r3
600032f2:	ea80 0c01 	eor.w	ip, r0, r1
600032f6:	0240      	lsls	r0, r0, #9
600032f8:	bf18      	it	ne
600032fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
600032fe:	d01e      	beq.n	6000333e <__aeabi_fmul+0x66>
60003300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
60003304:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
60003308:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
6000330c:	fba0 3101 	umull	r3, r1, r0, r1
60003310:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
60003314:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
60003318:	bf3e      	ittt	cc
6000331a:	0049      	lslcc	r1, r1, #1
6000331c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
60003320:	005b      	lslcc	r3, r3, #1
60003322:	ea40 0001 	orr.w	r0, r0, r1
60003326:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
6000332a:	2afd      	cmp	r2, #253	; 0xfd
6000332c:	d81d      	bhi.n	6000336a <__aeabi_fmul+0x92>
6000332e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
60003332:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
60003336:	bf08      	it	eq
60003338:	f020 0001 	biceq.w	r0, r0, #1
6000333c:	4770      	bx	lr
6000333e:	f090 0f00 	teq	r0, #0
60003342:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
60003346:	bf08      	it	eq
60003348:	0249      	lsleq	r1, r1, #9
6000334a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
6000334e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
60003352:	3a7f      	subs	r2, #127	; 0x7f
60003354:	bfc2      	ittt	gt
60003356:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
6000335a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
6000335e:	4770      	bxgt	lr
60003360:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60003364:	f04f 0300 	mov.w	r3, #0
60003368:	3a01      	subs	r2, #1
6000336a:	dc5d      	bgt.n	60003428 <__aeabi_fmul+0x150>
6000336c:	f112 0f19 	cmn.w	r2, #25
60003370:	bfdc      	itt	le
60003372:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
60003376:	4770      	bxle	lr
60003378:	f1c2 0200 	rsb	r2, r2, #0
6000337c:	0041      	lsls	r1, r0, #1
6000337e:	fa21 f102 	lsr.w	r1, r1, r2
60003382:	f1c2 0220 	rsb	r2, r2, #32
60003386:	fa00 fc02 	lsl.w	ip, r0, r2
6000338a:	ea5f 0031 	movs.w	r0, r1, rrx
6000338e:	f140 0000 	adc.w	r0, r0, #0
60003392:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
60003396:	bf08      	it	eq
60003398:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
6000339c:	4770      	bx	lr
6000339e:	f092 0f00 	teq	r2, #0
600033a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
600033a6:	bf02      	ittt	eq
600033a8:	0040      	lsleq	r0, r0, #1
600033aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
600033ae:	3a01      	subeq	r2, #1
600033b0:	d0f9      	beq.n	600033a6 <__aeabi_fmul+0xce>
600033b2:	ea40 000c 	orr.w	r0, r0, ip
600033b6:	f093 0f00 	teq	r3, #0
600033ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
600033be:	bf02      	ittt	eq
600033c0:	0049      	lsleq	r1, r1, #1
600033c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
600033c6:	3b01      	subeq	r3, #1
600033c8:	d0f9      	beq.n	600033be <__aeabi_fmul+0xe6>
600033ca:	ea41 010c 	orr.w	r1, r1, ip
600033ce:	e78f      	b.n	600032f0 <__aeabi_fmul+0x18>
600033d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
600033d4:	ea92 0f0c 	teq	r2, ip
600033d8:	bf18      	it	ne
600033da:	ea93 0f0c 	teqne	r3, ip
600033de:	d00a      	beq.n	600033f6 <__aeabi_fmul+0x11e>
600033e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
600033e4:	bf18      	it	ne
600033e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
600033ea:	d1d8      	bne.n	6000339e <__aeabi_fmul+0xc6>
600033ec:	ea80 0001 	eor.w	r0, r0, r1
600033f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
600033f4:	4770      	bx	lr
600033f6:	f090 0f00 	teq	r0, #0
600033fa:	bf17      	itett	ne
600033fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
60003400:	4608      	moveq	r0, r1
60003402:	f091 0f00 	teqne	r1, #0
60003406:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
6000340a:	d014      	beq.n	60003436 <__aeabi_fmul+0x15e>
6000340c:	ea92 0f0c 	teq	r2, ip
60003410:	d101      	bne.n	60003416 <__aeabi_fmul+0x13e>
60003412:	0242      	lsls	r2, r0, #9
60003414:	d10f      	bne.n	60003436 <__aeabi_fmul+0x15e>
60003416:	ea93 0f0c 	teq	r3, ip
6000341a:	d103      	bne.n	60003424 <__aeabi_fmul+0x14c>
6000341c:	024b      	lsls	r3, r1, #9
6000341e:	bf18      	it	ne
60003420:	4608      	movne	r0, r1
60003422:	d108      	bne.n	60003436 <__aeabi_fmul+0x15e>
60003424:	ea80 0001 	eor.w	r0, r0, r1
60003428:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
6000342c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
60003430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
60003434:	4770      	bx	lr
60003436:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
6000343a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
6000343e:	4770      	bx	lr

60003440 <__aeabi_fdiv>:
60003440:	f04f 0cff 	mov.w	ip, #255	; 0xff
60003444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
60003448:	bf1e      	ittt	ne
6000344a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
6000344e:	ea92 0f0c 	teqne	r2, ip
60003452:	ea93 0f0c 	teqne	r3, ip
60003456:	d069      	beq.n	6000352c <__aeabi_fdiv+0xec>
60003458:	eba2 0203 	sub.w	r2, r2, r3
6000345c:	ea80 0c01 	eor.w	ip, r0, r1
60003460:	0249      	lsls	r1, r1, #9
60003462:	ea4f 2040 	mov.w	r0, r0, lsl #9
60003466:	d037      	beq.n	600034d8 <__aeabi_fdiv+0x98>
60003468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
6000346c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
60003470:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
60003474:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
60003478:	428b      	cmp	r3, r1
6000347a:	bf38      	it	cc
6000347c:	005b      	lslcc	r3, r3, #1
6000347e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
60003482:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
60003486:	428b      	cmp	r3, r1
60003488:	bf24      	itt	cs
6000348a:	1a5b      	subcs	r3, r3, r1
6000348c:	ea40 000c 	orrcs.w	r0, r0, ip
60003490:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
60003494:	bf24      	itt	cs
60003496:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
6000349a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
6000349e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
600034a2:	bf24      	itt	cs
600034a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
600034a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
600034ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
600034b0:	bf24      	itt	cs
600034b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
600034b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
600034ba:	011b      	lsls	r3, r3, #4
600034bc:	bf18      	it	ne
600034be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
600034c2:	d1e0      	bne.n	60003486 <__aeabi_fdiv+0x46>
600034c4:	2afd      	cmp	r2, #253	; 0xfd
600034c6:	f63f af50 	bhi.w	6000336a <__aeabi_fmul+0x92>
600034ca:	428b      	cmp	r3, r1
600034cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
600034d0:	bf08      	it	eq
600034d2:	f020 0001 	biceq.w	r0, r0, #1
600034d6:	4770      	bx	lr
600034d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
600034dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
600034e0:	327f      	adds	r2, #127	; 0x7f
600034e2:	bfc2      	ittt	gt
600034e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
600034e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
600034ec:	4770      	bxgt	lr
600034ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
600034f2:	f04f 0300 	mov.w	r3, #0
600034f6:	3a01      	subs	r2, #1
600034f8:	e737      	b.n	6000336a <__aeabi_fmul+0x92>
600034fa:	f092 0f00 	teq	r2, #0
600034fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
60003502:	bf02      	ittt	eq
60003504:	0040      	lsleq	r0, r0, #1
60003506:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
6000350a:	3a01      	subeq	r2, #1
6000350c:	d0f9      	beq.n	60003502 <__aeabi_fdiv+0xc2>
6000350e:	ea40 000c 	orr.w	r0, r0, ip
60003512:	f093 0f00 	teq	r3, #0
60003516:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
6000351a:	bf02      	ittt	eq
6000351c:	0049      	lsleq	r1, r1, #1
6000351e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
60003522:	3b01      	subeq	r3, #1
60003524:	d0f9      	beq.n	6000351a <__aeabi_fdiv+0xda>
60003526:	ea41 010c 	orr.w	r1, r1, ip
6000352a:	e795      	b.n	60003458 <__aeabi_fdiv+0x18>
6000352c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
60003530:	ea92 0f0c 	teq	r2, ip
60003534:	d108      	bne.n	60003548 <__aeabi_fdiv+0x108>
60003536:	0242      	lsls	r2, r0, #9
60003538:	f47f af7d 	bne.w	60003436 <__aeabi_fmul+0x15e>
6000353c:	ea93 0f0c 	teq	r3, ip
60003540:	f47f af70 	bne.w	60003424 <__aeabi_fmul+0x14c>
60003544:	4608      	mov	r0, r1
60003546:	e776      	b.n	60003436 <__aeabi_fmul+0x15e>
60003548:	ea93 0f0c 	teq	r3, ip
6000354c:	d104      	bne.n	60003558 <__aeabi_fdiv+0x118>
6000354e:	024b      	lsls	r3, r1, #9
60003550:	f43f af4c 	beq.w	600033ec <__aeabi_fmul+0x114>
60003554:	4608      	mov	r0, r1
60003556:	e76e      	b.n	60003436 <__aeabi_fmul+0x15e>
60003558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
6000355c:	bf18      	it	ne
6000355e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
60003562:	d1ca      	bne.n	600034fa <__aeabi_fdiv+0xba>
60003564:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
60003568:	f47f af5c 	bne.w	60003424 <__aeabi_fmul+0x14c>
6000356c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
60003570:	f47f af3c 	bne.w	600033ec <__aeabi_fmul+0x114>
60003574:	e75f      	b.n	60003436 <__aeabi_fmul+0x15e>
60003576:	bf00      	nop

60003578 <__gesf2>:
60003578:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
6000357c:	e006      	b.n	6000358c <__cmpsf2+0x4>
6000357e:	bf00      	nop

60003580 <__lesf2>:
60003580:	f04f 0c01 	mov.w	ip, #1
60003584:	e002      	b.n	6000358c <__cmpsf2+0x4>
60003586:	bf00      	nop

60003588 <__cmpsf2>:
60003588:	f04f 0c01 	mov.w	ip, #1
6000358c:	f84d cd04 	str.w	ip, [sp, #-4]!
60003590:	ea4f 0240 	mov.w	r2, r0, lsl #1
60003594:	ea4f 0341 	mov.w	r3, r1, lsl #1
60003598:	ea7f 6c22 	mvns.w	ip, r2, asr #24
6000359c:	bf18      	it	ne
6000359e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
600035a2:	d011      	beq.n	600035c8 <__cmpsf2+0x40>
600035a4:	b001      	add	sp, #4
600035a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
600035aa:	bf18      	it	ne
600035ac:	ea90 0f01 	teqne	r0, r1
600035b0:	bf58      	it	pl
600035b2:	ebb2 0003 	subspl.w	r0, r2, r3
600035b6:	bf88      	it	hi
600035b8:	17c8      	asrhi	r0, r1, #31
600035ba:	bf38      	it	cc
600035bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
600035c0:	bf18      	it	ne
600035c2:	f040 0001 	orrne.w	r0, r0, #1
600035c6:	4770      	bx	lr
600035c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
600035cc:	d102      	bne.n	600035d4 <__cmpsf2+0x4c>
600035ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
600035d2:	d105      	bne.n	600035e0 <__cmpsf2+0x58>
600035d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
600035d8:	d1e4      	bne.n	600035a4 <__cmpsf2+0x1c>
600035da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
600035de:	d0e1      	beq.n	600035a4 <__cmpsf2+0x1c>
600035e0:	f85d 0b04 	ldr.w	r0, [sp], #4
600035e4:	4770      	bx	lr
600035e6:	bf00      	nop

600035e8 <__aeabi_cfrcmple>:
600035e8:	4684      	mov	ip, r0
600035ea:	4608      	mov	r0, r1
600035ec:	4661      	mov	r1, ip
600035ee:	e7ff      	b.n	600035f0 <__aeabi_cfcmpeq>

600035f0 <__aeabi_cfcmpeq>:
600035f0:	b50f      	push	{r0, r1, r2, r3, lr}
600035f2:	f7ff ffc9 	bl	60003588 <__cmpsf2>
600035f6:	2800      	cmp	r0, #0
600035f8:	bf48      	it	mi
600035fa:	f110 0f00 	cmnmi.w	r0, #0
600035fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

60003600 <__aeabi_fcmpeq>:
60003600:	f84d ed08 	str.w	lr, [sp, #-8]!
60003604:	f7ff fff4 	bl	600035f0 <__aeabi_cfcmpeq>
60003608:	bf0c      	ite	eq
6000360a:	2001      	moveq	r0, #1
6000360c:	2000      	movne	r0, #0
6000360e:	f85d fb08 	ldr.w	pc, [sp], #8
60003612:	bf00      	nop

60003614 <__aeabi_fcmplt>:
60003614:	f84d ed08 	str.w	lr, [sp, #-8]!
60003618:	f7ff ffea 	bl	600035f0 <__aeabi_cfcmpeq>
6000361c:	bf34      	ite	cc
6000361e:	2001      	movcc	r0, #1
60003620:	2000      	movcs	r0, #0
60003622:	f85d fb08 	ldr.w	pc, [sp], #8
60003626:	bf00      	nop

60003628 <__aeabi_fcmple>:
60003628:	f84d ed08 	str.w	lr, [sp, #-8]!
6000362c:	f7ff ffe0 	bl	600035f0 <__aeabi_cfcmpeq>
60003630:	bf94      	ite	ls
60003632:	2001      	movls	r0, #1
60003634:	2000      	movhi	r0, #0
60003636:	f85d fb08 	ldr.w	pc, [sp], #8
6000363a:	bf00      	nop

6000363c <__aeabi_fcmpge>:
6000363c:	f84d ed08 	str.w	lr, [sp, #-8]!
60003640:	f7ff ffd2 	bl	600035e8 <__aeabi_cfrcmple>
60003644:	bf94      	ite	ls
60003646:	2001      	movls	r0, #1
60003648:	2000      	movhi	r0, #0
6000364a:	f85d fb08 	ldr.w	pc, [sp], #8
6000364e:	bf00      	nop

60003650 <__aeabi_fcmpgt>:
60003650:	f84d ed08 	str.w	lr, [sp, #-8]!
60003654:	f7ff ffc8 	bl	600035e8 <__aeabi_cfrcmple>
60003658:	bf34      	ite	cc
6000365a:	2001      	movcc	r0, #1
6000365c:	2000      	movcs	r0, #0
6000365e:	f85d fb08 	ldr.w	pc, [sp], #8
60003662:	bf00      	nop

60003664 <__aeabi_ldivmod>:
60003664:	b97b      	cbnz	r3, 60003686 <__aeabi_ldivmod+0x22>
60003666:	b972      	cbnz	r2, 60003686 <__aeabi_ldivmod+0x22>
60003668:	2900      	cmp	r1, #0
6000366a:	bfbe      	ittt	lt
6000366c:	2000      	movlt	r0, #0
6000366e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
60003672:	e006      	blt.n	60003682 <__aeabi_ldivmod+0x1e>
60003674:	bf08      	it	eq
60003676:	2800      	cmpeq	r0, #0
60003678:	bf1c      	itt	ne
6000367a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
6000367e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
60003682:	f000 b857 	b.w	60003734 <__aeabi_idiv0>
60003686:	f1ad 0c08 	sub.w	ip, sp, #8
6000368a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
6000368e:	2900      	cmp	r1, #0
60003690:	db09      	blt.n	600036a6 <__aeabi_ldivmod+0x42>
60003692:	2b00      	cmp	r3, #0
60003694:	db1a      	blt.n	600036cc <__aeabi_ldivmod+0x68>
60003696:	f000 f8ff 	bl	60003898 <__udivmoddi4>
6000369a:	f8dd e004 	ldr.w	lr, [sp, #4]
6000369e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
600036a2:	b004      	add	sp, #16
600036a4:	4770      	bx	lr
600036a6:	4240      	negs	r0, r0
600036a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
600036ac:	2b00      	cmp	r3, #0
600036ae:	db1b      	blt.n	600036e8 <__aeabi_ldivmod+0x84>
600036b0:	f000 f8f2 	bl	60003898 <__udivmoddi4>
600036b4:	f8dd e004 	ldr.w	lr, [sp, #4]
600036b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
600036bc:	b004      	add	sp, #16
600036be:	4240      	negs	r0, r0
600036c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
600036c4:	4252      	negs	r2, r2
600036c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
600036ca:	4770      	bx	lr
600036cc:	4252      	negs	r2, r2
600036ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
600036d2:	f000 f8e1 	bl	60003898 <__udivmoddi4>
600036d6:	f8dd e004 	ldr.w	lr, [sp, #4]
600036da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
600036de:	b004      	add	sp, #16
600036e0:	4240      	negs	r0, r0
600036e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
600036e6:	4770      	bx	lr
600036e8:	4252      	negs	r2, r2
600036ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
600036ee:	f000 f8d3 	bl	60003898 <__udivmoddi4>
600036f2:	f8dd e004 	ldr.w	lr, [sp, #4]
600036f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
600036fa:	b004      	add	sp, #16
600036fc:	4252      	negs	r2, r2
600036fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
60003702:	4770      	bx	lr

60003704 <__aeabi_uldivmod>:
60003704:	b953      	cbnz	r3, 6000371c <__aeabi_uldivmod+0x18>
60003706:	b94a      	cbnz	r2, 6000371c <__aeabi_uldivmod+0x18>
60003708:	2900      	cmp	r1, #0
6000370a:	bf08      	it	eq
6000370c:	2800      	cmpeq	r0, #0
6000370e:	bf1c      	itt	ne
60003710:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
60003714:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
60003718:	f000 b80c 	b.w	60003734 <__aeabi_idiv0>
6000371c:	f1ad 0c08 	sub.w	ip, sp, #8
60003720:	e96d ce04 	strd	ip, lr, [sp, #-16]!
60003724:	f000 f8b8 	bl	60003898 <__udivmoddi4>
60003728:	f8dd e004 	ldr.w	lr, [sp, #4]
6000372c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
60003730:	b004      	add	sp, #16
60003732:	4770      	bx	lr

60003734 <__aeabi_idiv0>:
60003734:	4770      	bx	lr
60003736:	bf00      	nop

60003738 <memcpy>:
60003738:	4684      	mov	ip, r0
6000373a:	ea41 0300 	orr.w	r3, r1, r0
6000373e:	f013 0303 	ands.w	r3, r3, #3
60003742:	d16d      	bne.n	60003820 <memcpy+0xe8>
60003744:	3a40      	subs	r2, #64	; 0x40
60003746:	d341      	bcc.n	600037cc <memcpy+0x94>
60003748:	f851 3b04 	ldr.w	r3, [r1], #4
6000374c:	f840 3b04 	str.w	r3, [r0], #4
60003750:	f851 3b04 	ldr.w	r3, [r1], #4
60003754:	f840 3b04 	str.w	r3, [r0], #4
60003758:	f851 3b04 	ldr.w	r3, [r1], #4
6000375c:	f840 3b04 	str.w	r3, [r0], #4
60003760:	f851 3b04 	ldr.w	r3, [r1], #4
60003764:	f840 3b04 	str.w	r3, [r0], #4
60003768:	f851 3b04 	ldr.w	r3, [r1], #4
6000376c:	f840 3b04 	str.w	r3, [r0], #4
60003770:	f851 3b04 	ldr.w	r3, [r1], #4
60003774:	f840 3b04 	str.w	r3, [r0], #4
60003778:	f851 3b04 	ldr.w	r3, [r1], #4
6000377c:	f840 3b04 	str.w	r3, [r0], #4
60003780:	f851 3b04 	ldr.w	r3, [r1], #4
60003784:	f840 3b04 	str.w	r3, [r0], #4
60003788:	f851 3b04 	ldr.w	r3, [r1], #4
6000378c:	f840 3b04 	str.w	r3, [r0], #4
60003790:	f851 3b04 	ldr.w	r3, [r1], #4
60003794:	f840 3b04 	str.w	r3, [r0], #4
60003798:	f851 3b04 	ldr.w	r3, [r1], #4
6000379c:	f840 3b04 	str.w	r3, [r0], #4
600037a0:	f851 3b04 	ldr.w	r3, [r1], #4
600037a4:	f840 3b04 	str.w	r3, [r0], #4
600037a8:	f851 3b04 	ldr.w	r3, [r1], #4
600037ac:	f840 3b04 	str.w	r3, [r0], #4
600037b0:	f851 3b04 	ldr.w	r3, [r1], #4
600037b4:	f840 3b04 	str.w	r3, [r0], #4
600037b8:	f851 3b04 	ldr.w	r3, [r1], #4
600037bc:	f840 3b04 	str.w	r3, [r0], #4
600037c0:	f851 3b04 	ldr.w	r3, [r1], #4
600037c4:	f840 3b04 	str.w	r3, [r0], #4
600037c8:	3a40      	subs	r2, #64	; 0x40
600037ca:	d2bd      	bcs.n	60003748 <memcpy+0x10>
600037cc:	3230      	adds	r2, #48	; 0x30
600037ce:	d311      	bcc.n	600037f4 <memcpy+0xbc>
600037d0:	f851 3b04 	ldr.w	r3, [r1], #4
600037d4:	f840 3b04 	str.w	r3, [r0], #4
600037d8:	f851 3b04 	ldr.w	r3, [r1], #4
600037dc:	f840 3b04 	str.w	r3, [r0], #4
600037e0:	f851 3b04 	ldr.w	r3, [r1], #4
600037e4:	f840 3b04 	str.w	r3, [r0], #4
600037e8:	f851 3b04 	ldr.w	r3, [r1], #4
600037ec:	f840 3b04 	str.w	r3, [r0], #4
600037f0:	3a10      	subs	r2, #16
600037f2:	d2ed      	bcs.n	600037d0 <memcpy+0x98>
600037f4:	320c      	adds	r2, #12
600037f6:	d305      	bcc.n	60003804 <memcpy+0xcc>
600037f8:	f851 3b04 	ldr.w	r3, [r1], #4
600037fc:	f840 3b04 	str.w	r3, [r0], #4
60003800:	3a04      	subs	r2, #4
60003802:	d2f9      	bcs.n	600037f8 <memcpy+0xc0>
60003804:	3204      	adds	r2, #4
60003806:	d008      	beq.n	6000381a <memcpy+0xe2>
60003808:	07d2      	lsls	r2, r2, #31
6000380a:	bf1c      	itt	ne
6000380c:	f811 3b01 	ldrbne.w	r3, [r1], #1
60003810:	f800 3b01 	strbne.w	r3, [r0], #1
60003814:	d301      	bcc.n	6000381a <memcpy+0xe2>
60003816:	880b      	ldrh	r3, [r1, #0]
60003818:	8003      	strh	r3, [r0, #0]
6000381a:	4660      	mov	r0, ip
6000381c:	4770      	bx	lr
6000381e:	bf00      	nop
60003820:	2a08      	cmp	r2, #8
60003822:	d313      	bcc.n	6000384c <memcpy+0x114>
60003824:	078b      	lsls	r3, r1, #30
60003826:	d08d      	beq.n	60003744 <memcpy+0xc>
60003828:	f010 0303 	ands.w	r3, r0, #3
6000382c:	d08a      	beq.n	60003744 <memcpy+0xc>
6000382e:	f1c3 0304 	rsb	r3, r3, #4
60003832:	1ad2      	subs	r2, r2, r3
60003834:	07db      	lsls	r3, r3, #31
60003836:	bf1c      	itt	ne
60003838:	f811 3b01 	ldrbne.w	r3, [r1], #1
6000383c:	f800 3b01 	strbne.w	r3, [r0], #1
60003840:	d380      	bcc.n	60003744 <memcpy+0xc>
60003842:	f831 3b02 	ldrh.w	r3, [r1], #2
60003846:	f820 3b02 	strh.w	r3, [r0], #2
6000384a:	e77b      	b.n	60003744 <memcpy+0xc>
6000384c:	3a04      	subs	r2, #4
6000384e:	d3d9      	bcc.n	60003804 <memcpy+0xcc>
60003850:	3a01      	subs	r2, #1
60003852:	f811 3b01 	ldrb.w	r3, [r1], #1
60003856:	f800 3b01 	strb.w	r3, [r0], #1
6000385a:	d2f9      	bcs.n	60003850 <memcpy+0x118>
6000385c:	780b      	ldrb	r3, [r1, #0]
6000385e:	7003      	strb	r3, [r0, #0]
60003860:	784b      	ldrb	r3, [r1, #1]
60003862:	7043      	strb	r3, [r0, #1]
60003864:	788b      	ldrb	r3, [r1, #2]
60003866:	7083      	strb	r3, [r0, #2]
60003868:	4660      	mov	r0, ip
6000386a:	4770      	bx	lr

6000386c <__aeabi_dcmpun>:
6000386c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
60003870:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
60003874:	d102      	bne.n	6000387c <__aeabi_dcmpun+0x10>
60003876:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
6000387a:	d10a      	bne.n	60003892 <__aeabi_dcmpun+0x26>
6000387c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
60003880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
60003884:	d102      	bne.n	6000388c <__aeabi_dcmpun+0x20>
60003886:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
6000388a:	d102      	bne.n	60003892 <__aeabi_dcmpun+0x26>
6000388c:	f04f 0000 	mov.w	r0, #0
60003890:	4770      	bx	lr
60003892:	f04f 0001 	mov.w	r0, #1
60003896:	4770      	bx	lr

60003898 <__udivmoddi4>:
60003898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000389c:	4686      	mov	lr, r0
6000389e:	468c      	mov	ip, r1
600038a0:	4608      	mov	r0, r1
600038a2:	9e08      	ldr	r6, [sp, #32]
600038a4:	4615      	mov	r5, r2
600038a6:	4674      	mov	r4, lr
600038a8:	4619      	mov	r1, r3
600038aa:	2b00      	cmp	r3, #0
600038ac:	f040 80c2 	bne.w	60003a34 <__udivmoddi4+0x19c>
600038b0:	4285      	cmp	r5, r0
600038b2:	fab2 f282 	clz	r2, r2
600038b6:	d945      	bls.n	60003944 <__udivmoddi4+0xac>
600038b8:	b14a      	cbz	r2, 600038ce <__udivmoddi4+0x36>
600038ba:	f1c2 0320 	rsb	r3, r2, #32
600038be:	fa00 fc02 	lsl.w	ip, r0, r2
600038c2:	fa2e f303 	lsr.w	r3, lr, r3
600038c6:	4095      	lsls	r5, r2
600038c8:	ea43 0c0c 	orr.w	ip, r3, ip
600038cc:	4094      	lsls	r4, r2
600038ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
600038d2:	b2a8      	uxth	r0, r5
600038d4:	fbbc f8fe 	udiv	r8, ip, lr
600038d8:	0c23      	lsrs	r3, r4, #16
600038da:	fb0e cc18 	mls	ip, lr, r8, ip
600038de:	fb08 f900 	mul.w	r9, r8, r0
600038e2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
600038e6:	4599      	cmp	r9, r3
600038e8:	d928      	bls.n	6000393c <__udivmoddi4+0xa4>
600038ea:	18eb      	adds	r3, r5, r3
600038ec:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
600038f0:	d204      	bcs.n	600038fc <__udivmoddi4+0x64>
600038f2:	4599      	cmp	r9, r3
600038f4:	d902      	bls.n	600038fc <__udivmoddi4+0x64>
600038f6:	f1a8 0702 	sub.w	r7, r8, #2
600038fa:	442b      	add	r3, r5
600038fc:	eba3 0309 	sub.w	r3, r3, r9
60003900:	b2a4      	uxth	r4, r4
60003902:	fbb3 fcfe 	udiv	ip, r3, lr
60003906:	fb0e 331c 	mls	r3, lr, ip, r3
6000390a:	fb0c f000 	mul.w	r0, ip, r0
6000390e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
60003912:	42a0      	cmp	r0, r4
60003914:	d914      	bls.n	60003940 <__udivmoddi4+0xa8>
60003916:	192c      	adds	r4, r5, r4
60003918:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
6000391c:	d204      	bcs.n	60003928 <__udivmoddi4+0x90>
6000391e:	42a0      	cmp	r0, r4
60003920:	d902      	bls.n	60003928 <__udivmoddi4+0x90>
60003922:	f1ac 0302 	sub.w	r3, ip, #2
60003926:	442c      	add	r4, r5
60003928:	1a24      	subs	r4, r4, r0
6000392a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
6000392e:	b11e      	cbz	r6, 60003938 <__udivmoddi4+0xa0>
60003930:	40d4      	lsrs	r4, r2
60003932:	2300      	movs	r3, #0
60003934:	6034      	str	r4, [r6, #0]
60003936:	6073      	str	r3, [r6, #4]
60003938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000393c:	4647      	mov	r7, r8
6000393e:	e7dd      	b.n	600038fc <__udivmoddi4+0x64>
60003940:	4663      	mov	r3, ip
60003942:	e7f1      	b.n	60003928 <__udivmoddi4+0x90>
60003944:	bb92      	cbnz	r2, 600039ac <__udivmoddi4+0x114>
60003946:	1b43      	subs	r3, r0, r5
60003948:	2101      	movs	r1, #1
6000394a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
6000394e:	b2af      	uxth	r7, r5
60003950:	fbb3 fcfe 	udiv	ip, r3, lr
60003954:	0c20      	lsrs	r0, r4, #16
60003956:	fb0e 331c 	mls	r3, lr, ip, r3
6000395a:	fb0c f807 	mul.w	r8, ip, r7
6000395e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
60003962:	4598      	cmp	r8, r3
60003964:	d962      	bls.n	60003a2c <__udivmoddi4+0x194>
60003966:	18eb      	adds	r3, r5, r3
60003968:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
6000396c:	d204      	bcs.n	60003978 <__udivmoddi4+0xe0>
6000396e:	4598      	cmp	r8, r3
60003970:	d902      	bls.n	60003978 <__udivmoddi4+0xe0>
60003972:	f1ac 0002 	sub.w	r0, ip, #2
60003976:	442b      	add	r3, r5
60003978:	eba3 0308 	sub.w	r3, r3, r8
6000397c:	b2a4      	uxth	r4, r4
6000397e:	fbb3 fcfe 	udiv	ip, r3, lr
60003982:	fb0e 331c 	mls	r3, lr, ip, r3
60003986:	fb0c f707 	mul.w	r7, ip, r7
6000398a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
6000398e:	42a7      	cmp	r7, r4
60003990:	d94e      	bls.n	60003a30 <__udivmoddi4+0x198>
60003992:	192c      	adds	r4, r5, r4
60003994:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
60003998:	d204      	bcs.n	600039a4 <__udivmoddi4+0x10c>
6000399a:	42a7      	cmp	r7, r4
6000399c:	d902      	bls.n	600039a4 <__udivmoddi4+0x10c>
6000399e:	f1ac 0302 	sub.w	r3, ip, #2
600039a2:	442c      	add	r4, r5
600039a4:	1be4      	subs	r4, r4, r7
600039a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
600039aa:	e7c0      	b.n	6000392e <__udivmoddi4+0x96>
600039ac:	f1c2 0320 	rsb	r3, r2, #32
600039b0:	fa20 f103 	lsr.w	r1, r0, r3
600039b4:	4095      	lsls	r5, r2
600039b6:	4090      	lsls	r0, r2
600039b8:	fa2e f303 	lsr.w	r3, lr, r3
600039bc:	4303      	orrs	r3, r0
600039be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
600039c2:	b2af      	uxth	r7, r5
600039c4:	fbb1 fcfe 	udiv	ip, r1, lr
600039c8:	fb0e 101c 	mls	r0, lr, ip, r1
600039cc:	0c19      	lsrs	r1, r3, #16
600039ce:	fb0c f807 	mul.w	r8, ip, r7
600039d2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
600039d6:	4588      	cmp	r8, r1
600039d8:	fa04 f402 	lsl.w	r4, r4, r2
600039dc:	d922      	bls.n	60003a24 <__udivmoddi4+0x18c>
600039de:	1869      	adds	r1, r5, r1
600039e0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
600039e4:	d204      	bcs.n	600039f0 <__udivmoddi4+0x158>
600039e6:	4588      	cmp	r8, r1
600039e8:	d902      	bls.n	600039f0 <__udivmoddi4+0x158>
600039ea:	f1ac 0002 	sub.w	r0, ip, #2
600039ee:	4429      	add	r1, r5
600039f0:	eba1 0108 	sub.w	r1, r1, r8
600039f4:	b29b      	uxth	r3, r3
600039f6:	fbb1 fcfe 	udiv	ip, r1, lr
600039fa:	fb0e 111c 	mls	r1, lr, ip, r1
600039fe:	fb0c f707 	mul.w	r7, ip, r7
60003a02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
60003a06:	429f      	cmp	r7, r3
60003a08:	d90e      	bls.n	60003a28 <__udivmoddi4+0x190>
60003a0a:	18eb      	adds	r3, r5, r3
60003a0c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
60003a10:	d204      	bcs.n	60003a1c <__udivmoddi4+0x184>
60003a12:	429f      	cmp	r7, r3
60003a14:	d902      	bls.n	60003a1c <__udivmoddi4+0x184>
60003a16:	f1ac 0102 	sub.w	r1, ip, #2
60003a1a:	442b      	add	r3, r5
60003a1c:	1bdb      	subs	r3, r3, r7
60003a1e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
60003a22:	e792      	b.n	6000394a <__udivmoddi4+0xb2>
60003a24:	4660      	mov	r0, ip
60003a26:	e7e3      	b.n	600039f0 <__udivmoddi4+0x158>
60003a28:	4661      	mov	r1, ip
60003a2a:	e7f7      	b.n	60003a1c <__udivmoddi4+0x184>
60003a2c:	4660      	mov	r0, ip
60003a2e:	e7a3      	b.n	60003978 <__udivmoddi4+0xe0>
60003a30:	4663      	mov	r3, ip
60003a32:	e7b7      	b.n	600039a4 <__udivmoddi4+0x10c>
60003a34:	4283      	cmp	r3, r0
60003a36:	d906      	bls.n	60003a46 <__udivmoddi4+0x1ae>
60003a38:	b916      	cbnz	r6, 60003a40 <__udivmoddi4+0x1a8>
60003a3a:	2100      	movs	r1, #0
60003a3c:	4608      	mov	r0, r1
60003a3e:	e77b      	b.n	60003938 <__udivmoddi4+0xa0>
60003a40:	e9c6 e000 	strd	lr, r0, [r6]
60003a44:	e7f9      	b.n	60003a3a <__udivmoddi4+0x1a2>
60003a46:	fab3 f783 	clz	r7, r3
60003a4a:	b98f      	cbnz	r7, 60003a70 <__udivmoddi4+0x1d8>
60003a4c:	4283      	cmp	r3, r0
60003a4e:	d301      	bcc.n	60003a54 <__udivmoddi4+0x1bc>
60003a50:	4572      	cmp	r2, lr
60003a52:	d808      	bhi.n	60003a66 <__udivmoddi4+0x1ce>
60003a54:	ebbe 0402 	subs.w	r4, lr, r2
60003a58:	eb60 0303 	sbc.w	r3, r0, r3
60003a5c:	2001      	movs	r0, #1
60003a5e:	469c      	mov	ip, r3
60003a60:	b91e      	cbnz	r6, 60003a6a <__udivmoddi4+0x1d2>
60003a62:	2100      	movs	r1, #0
60003a64:	e768      	b.n	60003938 <__udivmoddi4+0xa0>
60003a66:	4638      	mov	r0, r7
60003a68:	e7fa      	b.n	60003a60 <__udivmoddi4+0x1c8>
60003a6a:	e9c6 4c00 	strd	r4, ip, [r6]
60003a6e:	e7f8      	b.n	60003a62 <__udivmoddi4+0x1ca>
60003a70:	f1c7 0c20 	rsb	ip, r7, #32
60003a74:	40bb      	lsls	r3, r7
60003a76:	fa22 f40c 	lsr.w	r4, r2, ip
60003a7a:	431c      	orrs	r4, r3
60003a7c:	fa2e f10c 	lsr.w	r1, lr, ip
60003a80:	fa20 f30c 	lsr.w	r3, r0, ip
60003a84:	40b8      	lsls	r0, r7
60003a86:	4301      	orrs	r1, r0
60003a88:	ea4f 4914 	mov.w	r9, r4, lsr #16
60003a8c:	fa0e f507 	lsl.w	r5, lr, r7
60003a90:	fbb3 f8f9 	udiv	r8, r3, r9
60003a94:	fa1f fe84 	uxth.w	lr, r4
60003a98:	fb09 3018 	mls	r0, r9, r8, r3
60003a9c:	0c0b      	lsrs	r3, r1, #16
60003a9e:	fb08 fa0e 	mul.w	sl, r8, lr
60003aa2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
60003aa6:	459a      	cmp	sl, r3
60003aa8:	fa02 f207 	lsl.w	r2, r2, r7
60003aac:	d940      	bls.n	60003b30 <__udivmoddi4+0x298>
60003aae:	18e3      	adds	r3, r4, r3
60003ab0:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
60003ab4:	d204      	bcs.n	60003ac0 <__udivmoddi4+0x228>
60003ab6:	459a      	cmp	sl, r3
60003ab8:	d902      	bls.n	60003ac0 <__udivmoddi4+0x228>
60003aba:	f1a8 0002 	sub.w	r0, r8, #2
60003abe:	4423      	add	r3, r4
60003ac0:	eba3 030a 	sub.w	r3, r3, sl
60003ac4:	b289      	uxth	r1, r1
60003ac6:	fbb3 f8f9 	udiv	r8, r3, r9
60003aca:	fb09 3318 	mls	r3, r9, r8, r3
60003ace:	fb08 fe0e 	mul.w	lr, r8, lr
60003ad2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
60003ad6:	458e      	cmp	lr, r1
60003ad8:	d92c      	bls.n	60003b34 <__udivmoddi4+0x29c>
60003ada:	1861      	adds	r1, r4, r1
60003adc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
60003ae0:	d204      	bcs.n	60003aec <__udivmoddi4+0x254>
60003ae2:	458e      	cmp	lr, r1
60003ae4:	d902      	bls.n	60003aec <__udivmoddi4+0x254>
60003ae6:	f1a8 0302 	sub.w	r3, r8, #2
60003aea:	4421      	add	r1, r4
60003aec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
60003af0:	fba0 9802 	umull	r9, r8, r0, r2
60003af4:	eba1 010e 	sub.w	r1, r1, lr
60003af8:	4541      	cmp	r1, r8
60003afa:	46ce      	mov	lr, r9
60003afc:	4643      	mov	r3, r8
60003afe:	d302      	bcc.n	60003b06 <__udivmoddi4+0x26e>
60003b00:	d106      	bne.n	60003b10 <__udivmoddi4+0x278>
60003b02:	454d      	cmp	r5, r9
60003b04:	d204      	bcs.n	60003b10 <__udivmoddi4+0x278>
60003b06:	ebb9 0e02 	subs.w	lr, r9, r2
60003b0a:	eb68 0304 	sbc.w	r3, r8, r4
60003b0e:	3801      	subs	r0, #1
60003b10:	2e00      	cmp	r6, #0
60003b12:	d0a6      	beq.n	60003a62 <__udivmoddi4+0x1ca>
60003b14:	ebb5 020e 	subs.w	r2, r5, lr
60003b18:	eb61 0103 	sbc.w	r1, r1, r3
60003b1c:	fa01 fc0c 	lsl.w	ip, r1, ip
60003b20:	fa22 f307 	lsr.w	r3, r2, r7
60003b24:	ea4c 0303 	orr.w	r3, ip, r3
60003b28:	40f9      	lsrs	r1, r7
60003b2a:	e9c6 3100 	strd	r3, r1, [r6]
60003b2e:	e798      	b.n	60003a62 <__udivmoddi4+0x1ca>
60003b30:	4640      	mov	r0, r8
60003b32:	e7c5      	b.n	60003ac0 <__udivmoddi4+0x228>
60003b34:	4643      	mov	r3, r8
60003b36:	e7d9      	b.n	60003aec <__udivmoddi4+0x254>

60003b38 <pwm_set_pulse_dt>:
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
60003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60003b3c:	b089      	sub	sp, #36	; 0x24
60003b3e:	460d      	mov	r5, r1
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
60003b40:	6887      	ldr	r7, [r0, #8]
60003b42:	e9d0 6300 	ldrd	r6, r3, [r0]
60003b46:	9303      	str	r3, [sp, #12]
		       spec->flags);
60003b48:	8983      	ldrh	r3, [r0, #12]
60003b4a:	9305      	str	r3, [sp, #20]
	return api->get_cycles_per_sec(dev, channel, cycles);
60003b4c:	68b3      	ldr	r3, [r6, #8]
60003b4e:	aa06      	add	r2, sp, #24
60003b50:	9903      	ldr	r1, [sp, #12]
60003b52:	4630      	mov	r0, r6
60003b54:	685b      	ldr	r3, [r3, #4]
60003b56:	4798      	blx	r3
	if (err < 0) {
60003b58:	2800      	cmp	r0, #0
60003b5a:	db31      	blt.n	60003bc0 <pwm_set_pulse_dt+0x88>
	if (period_cycles > UINT32_MAX) {
60003b5c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
60003b60:	f8df 907c 	ldr.w	r9, [pc, #124]	; 60003be0 <pwm_set_pulse_dt+0xa8>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
60003b64:	e9dd 4b06 	ldrd	r4, fp, [sp, #24]
60003b68:	fba7 2304 	umull	r2, r3, r7, r4
60003b6c:	fb07 380b 	mla	r8, r7, fp, r3
60003b70:	9204      	str	r2, [sp, #16]
60003b72:	9804      	ldr	r0, [sp, #16]
60003b74:	4641      	mov	r1, r8
60003b76:	a318      	add	r3, pc, #96	; (adr r3, 60003bd8 <pwm_set_pulse_dt+0xa0>)
60003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
60003b7c:	f7ff fdc2 	bl	60003704 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
60003b80:	9b04      	ldr	r3, [sp, #16]
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
60003b82:	4607      	mov	r7, r0
	if (period_cycles > UINT32_MAX) {
60003b84:	459a      	cmp	sl, r3
60003b86:	eb79 0308 	sbcs.w	r3, r9, r8
60003b8a:	d31c      	bcc.n	60003bc6 <pwm_set_pulse_dt+0x8e>
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
60003b8c:	fba5 4304 	umull	r4, r3, r5, r4
60003b90:	fb05 350b 	mla	r5, r5, fp, r3
60003b94:	4620      	mov	r0, r4
60003b96:	a310      	add	r3, pc, #64	; (adr r3, 60003bd8 <pwm_set_pulse_dt+0xa0>)
60003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
60003b9c:	4629      	mov	r1, r5
60003b9e:	f7ff fdb1 	bl	60003704 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
60003ba2:	45a2      	cmp	sl, r4
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
60003ba4:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
60003ba6:	eb79 0505 	sbcs.w	r5, r9, r5
60003baa:	d30c      	bcc.n	60003bc6 <pwm_set_pulse_dt+0x8e>
	if (pulse > period) {
60003bac:	4287      	cmp	r7, r0
	const struct pwm_driver_api *api =
60003bae:	68b2      	ldr	r2, [r6, #8]
	if (pulse > period) {
60003bb0:	d30c      	bcc.n	60003bcc <pwm_set_pulse_dt+0x94>
	return api->set_cycles(dev, channel, period, pulse, flags);
60003bb2:	9905      	ldr	r1, [sp, #20]
60003bb4:	4630      	mov	r0, r6
60003bb6:	9100      	str	r1, [sp, #0]
60003bb8:	9903      	ldr	r1, [sp, #12]
60003bba:	6814      	ldr	r4, [r2, #0]
60003bbc:	463a      	mov	r2, r7
60003bbe:	47a0      	blx	r4
}
60003bc0:	b009      	add	sp, #36	; 0x24
60003bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
60003bc6:	f06f 0085 	mvn.w	r0, #133	; 0x85
60003bca:	e7f9      	b.n	60003bc0 <pwm_set_pulse_dt+0x88>
		return -EINVAL;
60003bcc:	f06f 0015 	mvn.w	r0, #21
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
60003bd0:	e7f6      	b.n	60003bc0 <pwm_set_pulse_dt+0x88>
60003bd2:	bf00      	nop
60003bd4:	f3af 8000 	nop.w
60003bd8:	3b9aca00 	.word	0x3b9aca00
60003bdc:	00000000 	.word	0x00000000
60003be0:	3b9ac9ff 	.word	0x3b9ac9ff
60003be4:	00000000 	.word	0x00000000

60003be8 <position_control>:
//     }
// }

// // with step detection
void position_control(void)
{
60003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float dec = (top - bottom) / (float)how_many_traj;
	float high = top;
	float low = high - dec;

	int traj_num = -1;
	float pos_filtered = 0.0;
60003bec:	2500      	movs	r5, #0
{
60003bee:	b08b      	sub	sp, #44	; 0x2c

	bool first = 1;
60003bf0:	2701      	movs	r7, #1
	int traj_num = -1;
60003bf2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	int i = 0;
60003bf6:	f04f 0a00 	mov.w	sl, #0

				// angle = angle_profiles_REAL[traj_num][i-1];
				// accel_profile = angle_profiles_REAL[traj_num][i-1];  // Assuming
				// accel_profile is also an array of the same structure

				angle = angle_profiles_REAL_cropped[traj_num][i - 1];
60003bfa:	4eb1      	ldr	r6, [pc, #708]	; (60003ec0 <position_control+0x2d8>)
	k_sleep(K_SECONDS(5));
60003bfc:	f24c 3050 	movw	r0, #50000	; 0xc350
60003c00:	2100      	movs	r1, #0
60003c02:	f013 fe1c 	bl	6001783e <k_sleep.isra.0>
	int data_length = 1; // to trigger the condition to set a trajectory
60003c06:	9708      	str	r7, [sp, #32]
	float previous_angle = 0;
60003c08:	9507      	str	r5, [sp, #28]
	float ed = 0, e_prev = 0.0, eint = 0.0, D_filtered, D_prev = 0.0;
60003c0a:	9506      	str	r5, [sp, #24]
60003c0c:	9503      	str	r5, [sp, #12]
60003c0e:	9504      	str	r5, [sp, #16]
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
60003c10:	2200      	movs	r2, #0
60003c12:	2300      	movs	r3, #0
60003c14:	48ab      	ldr	r0, [pc, #684]	; (60003ec4 <position_control+0x2dc>)
60003c16:	e9cd 2300 	strd	r2, r3, [sp]
60003c1a:	2264      	movs	r2, #100	; 0x64
60003c1c:	2300      	movs	r3, #0
60003c1e:	f00e fd4b 	bl	600126b8 <z_impl_k_timer_start>
		k_mutex_lock(&mpu_sensor_mutex, K_FOREVER);
60003c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60003c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60003c2a:	48a7      	ldr	r0, [pc, #668]	; (60003ec8 <position_control+0x2e0>)
60003c2c:	f013 fe01 	bl	60017832 <k_mutex_lock.constprop.0.isra.0>
		float cad = cadence;
60003c30:	4ba6      	ldr	r3, [pc, #664]	; (60003ecc <position_control+0x2e4>)
		k_mutex_unlock(&mpu_sensor_mutex);
60003c32:	48a5      	ldr	r0, [pc, #660]	; (60003ec8 <position_control+0x2e0>)
		float cad = cadence;
60003c34:	f8d3 b000 	ldr.w	fp, [r3]
		k_mutex_unlock(&mpu_sensor_mutex);
60003c38:	f013 fdfd 	bl	60017836 <k_mutex_unlock.isra.0>
		k_mutex_lock(&pot_adc_mutex, K_FOREVER);
60003c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60003c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60003c44:	48a2      	ldr	r0, [pc, #648]	; (60003ed0 <position_control+0x2e8>)
60003c46:	f013 fdf4 	bl	60017832 <k_mutex_lock.constprop.0.isra.0>
		encoder = filteredEncoderReading;
60003c4a:	4ba2      	ldr	r3, [pc, #648]	; (60003ed4 <position_control+0x2ec>)
		actual_angle = encoder * (220.0 / 4095.0) - 135.5; // 145.5 works but is wrong
60003c4c:	6818      	ldr	r0, [r3, #0]
60003c4e:	f7fe fecb 	bl	600029e8 <__aeabi_f2d>
60003c52:	a391      	add	r3, pc, #580	; (adr r3, 60003e98 <position_control+0x2b0>)
60003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
60003c58:	f7fe ff1e 	bl	60002a98 <__aeabi_dmul>
60003c5c:	a390      	add	r3, pc, #576	; (adr r3, 60003ea0 <position_control+0x2b8>)
60003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
60003c62:	f7fe fd61 	bl	60002728 <__aeabi_dsub>
60003c66:	f7ff f9d9 	bl	6000301c <__aeabi_d2f>
		actual_radians = actual_angle * PI / 180.0;
60003c6a:	f7fe febd 	bl	600029e8 <__aeabi_f2d>
60003c6e:	a38e      	add	r3, pc, #568	; (adr r3, 60003ea8 <position_control+0x2c0>)
60003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
60003c74:	f7fe ff10 	bl	60002a98 <__aeabi_dmul>
60003c78:	2200      	movs	r2, #0
60003c7a:	4b97      	ldr	r3, [pc, #604]	; (60003ed8 <position_control+0x2f0>)
60003c7c:	f7ff f836 	bl	60002cec <__aeabi_ddiv>
60003c80:	f7ff f9cc 	bl	6000301c <__aeabi_d2f>
60003c84:	4b95      	ldr	r3, [pc, #596]	; (60003edc <position_control+0x2f4>)
		pos_filtered = alpha * actual_radians + (1.0-alpha) * pos_filtered;
60003c86:	4996      	ldr	r1, [pc, #600]	; (60003ee0 <position_control+0x2f8>)
		actual_radians = actual_angle * PI / 180.0;
60003c88:	6018      	str	r0, [r3, #0]
		pos_filtered = alpha * actual_radians + (1.0-alpha) * pos_filtered;
60003c8a:	6818      	ldr	r0, [r3, #0]
60003c8c:	f7ff fb24 	bl	600032d8 <__aeabi_fmul>
60003c90:	f7fe feaa 	bl	600029e8 <__aeabi_f2d>
60003c94:	4689      	mov	r9, r1
60003c96:	4680      	mov	r8, r0
60003c98:	4628      	mov	r0, r5
60003c9a:	f7fe fea5 	bl	600029e8 <__aeabi_f2d>
60003c9e:	a384      	add	r3, pc, #528	; (adr r3, 60003eb0 <position_control+0x2c8>)
60003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
60003ca4:	f7fe fef8 	bl	60002a98 <__aeabi_dmul>
60003ca8:	4602      	mov	r2, r0
60003caa:	460b      	mov	r3, r1
60003cac:	4640      	mov	r0, r8
60003cae:	4649      	mov	r1, r9
60003cb0:	f8df 9230 	ldr.w	r9, [pc, #560]	; 60003ee4 <position_control+0x2fc>
60003cb4:	f7fe fd3a 	bl	6000272c <__adddf3>
60003cb8:	f7ff f9b0 	bl	6000301c <__aeabi_d2f>
60003cbc:	4605      	mov	r5, r0
		k_mutex_unlock(&pot_adc_mutex);
60003cbe:	4884      	ldr	r0, [pc, #528]	; (60003ed0 <position_control+0x2e8>)
60003cc0:	f013 fdb9 	bl	60017836 <k_mutex_unlock.isra.0>
		if (cad != 0.0) {
60003cc4:	2100      	movs	r1, #0
60003cc6:	4658      	mov	r0, fp
60003cc8:	f7ff fc9a 	bl	60003600 <__aeabi_fcmpeq>
60003ccc:	2800      	cmp	r0, #0
60003cce:	f040 815e 	bne.w	60003f8e <position_control+0x3a6>
			motion_detect = true;
60003cd2:	2301      	movs	r3, #1
			i++; // increment counter
60003cd4:	f10a 0a01 	add.w	sl, sl, #1
			motion_detect = true;
60003cd8:	f889 3000 	strb.w	r3, [r9]
			if (i == data_length) {
60003cdc:	9b08      	ldr	r3, [sp, #32]
60003cde:	4553      	cmp	r3, sl
60003ce0:	f000 80d8 	beq.w	60003e94 <position_control+0x2ac>
			if (i == 0 || first == 1) {
60003ce4:	f1ba 0f00 	cmp.w	sl, #0
60003ce8:	d002      	beq.n	60003cf0 <position_control+0x108>
60003cea:	2f00      	cmp	r7, #0
60003cec:	f000 8140 	beq.w	60003f70 <position_control+0x388>
				i = 0; // reset counter
60003cf0:	2400      	movs	r4, #0
					float low_adjusted = low - (dec * j);
60003cf2:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 60003ee8 <position_control+0x300>
					float high_adjusted = high - (dec * j);
60003cf6:	4620      	mov	r0, r4
60003cf8:	f7ff fa9a 	bl	60003230 <__aeabi_i2f>
60003cfc:	4978      	ldr	r1, [pc, #480]	; (60003ee0 <position_control+0x2f8>)
60003cfe:	f7ff faeb 	bl	600032d8 <__aeabi_fmul>
60003d02:	4601      	mov	r1, r0
60003d04:	4607      	mov	r7, r0
60003d06:	4879      	ldr	r0, [pc, #484]	; (60003eec <position_control+0x304>)
60003d08:	f7ff f9dc 	bl	600030c4 <__aeabi_fsub>
60003d0c:	9009      	str	r0, [sp, #36]	; 0x24
					k_msleep(5);
60003d0e:	2005      	movs	r0, #5
60003d10:	f013 fd97 	bl	60017842 <k_msleep.isra.0>
					if (cad < (high_adjusted) && cad >= (low_adjusted)) {
60003d14:	9909      	ldr	r1, [sp, #36]	; 0x24
60003d16:	4658      	mov	r0, fp
60003d18:	f7ff fc7c 	bl	60003614 <__aeabi_fcmplt>
60003d1c:	2800      	cmp	r0, #0
60003d1e:	f000 810b 	beq.w	60003f38 <position_control+0x350>
					float low_adjusted = low - (dec * j);
60003d22:	4639      	mov	r1, r7
60003d24:	4640      	mov	r0, r8
60003d26:	f7ff f9cd 	bl	600030c4 <__aeabi_fsub>
60003d2a:	4601      	mov	r1, r0
					if (cad < (high_adjusted) && cad >= (low_adjusted)) {
60003d2c:	4658      	mov	r0, fp
60003d2e:	f7ff fc85 	bl	6000363c <__aeabi_fcmpge>
60003d32:	2800      	cmp	r0, #0
60003d34:	f000 8100 	beq.w	60003f38 <position_control+0x350>
						traj_num = 3 - j; // since they are listed low to
60003d38:	f1c4 0403 	rsb	r4, r4, #3
						data_length = profile_lengths_REAL_cropped[traj_num]; // Get the length of the array
60003d3c:	4b6c      	ldr	r3, [pc, #432]	; (60003ef0 <position_control+0x308>)
60003d3e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
60003d42:	9308      	str	r3, [sp, #32]
						Kp_pos = Kp_pos_array[traj_num];
60003d44:	4b6b      	ldr	r3, [pc, #428]	; (60003ef4 <position_control+0x30c>)
60003d46:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
60003d4a:	4b6b      	ldr	r3, [pc, #428]	; (60003ef8 <position_control+0x310>)
60003d4c:	601a      	str	r2, [r3, #0]
                        Ki_pos = Ki_pos_array[traj_num];
60003d4e:	4b6b      	ldr	r3, [pc, #428]	; (60003efc <position_control+0x314>)
60003d50:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
60003d54:	4b6a      	ldr	r3, [pc, #424]	; (60003f00 <position_control+0x318>)
60003d56:	601a      	str	r2, [r3, #0]
                        Kd_pos = Kd_pos_array[traj_num];
60003d58:	4b6a      	ldr	r3, [pc, #424]	; (60003f04 <position_control+0x31c>)
60003d5a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
60003d5e:	4b6a      	ldr	r3, [pc, #424]	; (60003f08 <position_control+0x320>)
60003d60:	601a      	str	r2, [r3, #0]
                        Kff1_pos = Kff1_pos_array[traj_num];
60003d62:	4b6a      	ldr	r3, [pc, #424]	; (60003f0c <position_control+0x324>)
60003d64:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
60003d68:	4b69      	ldr	r3, [pc, #420]	; (60003f10 <position_control+0x328>)
60003d6a:	601a      	str	r2, [r3, #0]
                        Kff2_pos = Kff2_pos_array[traj_num];
60003d6c:	4b69      	ldr	r3, [pc, #420]	; (60003f14 <position_control+0x32c>)
60003d6e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
60003d72:	4b69      	ldr	r3, [pc, #420]	; (60003f18 <position_control+0x330>)
60003d74:	601a      	str	r2, [r3, #0]
				k_mutex_lock(&angle_mutex, K_FOREVER);
60003d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60003d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60003d7e:	4867      	ldr	r0, [pc, #412]	; (60003f1c <position_control+0x334>)
60003d80:	f013 fd57 	bl	60017832 <k_mutex_lock.constprop.0.isra.0>
				angle = angle_profiles_REAL_cropped[traj_num][i - 1];
60003d84:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
60003d88:	4a65      	ldr	r2, [pc, #404]	; (60003f20 <position_control+0x338>)
60003d8a:	3b01      	subs	r3, #1
				// the same structure

				// angle = angle_profiles_REAL_adjusted[traj_num][i-1];
				// accel_profile = angle_profiles_REAL_adjusted[traj_num][i-1];  //
				// Assuming accel_profile is also an array of the same structure
				k_mutex_unlock(&angle_mutex);
60003d8c:	4863      	ldr	r0, [pc, #396]	; (60003f1c <position_control+0x334>)
				angle = angle_profiles_REAL_cropped[traj_num][i - 1];
60003d8e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
60003d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				accel_profile = angle_profiles_REAL_cropped[traj_num][i - 1]; // Assuming accel_profile is also an array of
60003d96:	4a63      	ldr	r2, [pc, #396]	; (60003f24 <position_control+0x33c>)
				angle = angle_profiles_REAL_cropped[traj_num][i - 1];
60003d98:	6033      	str	r3, [r6, #0]
				accel_profile = angle_profiles_REAL_cropped[traj_num][i - 1]; // Assuming accel_profile is also an array of
60003d9a:	6013      	str	r3, [r2, #0]
				k_mutex_unlock(&angle_mutex);
60003d9c:	f013 fd4b 	bl	60017836 <k_mutex_unlock.isra.0>

				// pos_filtered = actual_radians;
				error = (angle - pos_filtered);
60003da0:	6830      	ldr	r0, [r6, #0]
60003da2:	4629      	mov	r1, r5
60003da4:	f7ff f98e 	bl	600030c4 <__aeabi_fsub>
				// error = (angle - actual_/radians);

				// Proportional term
				P = Kp_pos * error;
60003da8:	4b53      	ldr	r3, [pc, #332]	; (60003ef8 <position_control+0x310>)
				error = (angle - pos_filtered);
60003daa:	4607      	mov	r7, r0
				P = Kp_pos * error;
60003dac:	6818      	ldr	r0, [r3, #0]
60003dae:	4639      	mov	r1, r7
60003db0:	f7ff fa92 	bl	600032d8 <__aeabi_fmul>

				// Integral calc
				eint += error * dt;
60003db4:	495c      	ldr	r1, [pc, #368]	; (60003f28 <position_control+0x340>)
				P = Kp_pos * error;
60003db6:	4680      	mov	r8, r0
				eint += error * dt;
60003db8:	4638      	mov	r0, r7
60003dba:	f7ff fa8d 	bl	600032d8 <__aeabi_fmul>
60003dbe:	4601      	mov	r1, r0
60003dc0:	9803      	ldr	r0, [sp, #12]
60003dc2:	f7ff f981 	bl	600030c8 <__addsf3>

				// Clamping anti-windup for integral term
				if (eint > anti_windup_max) {
60003dc6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
				eint += error * dt;
60003dca:	9003      	str	r0, [sp, #12]
				if (eint > anti_windup_max) {
60003dcc:	f7ff fc40 	bl	60003650 <__aeabi_fcmpgt>
60003dd0:	2800      	cmp	r0, #0
60003dd2:	f040 80d1 	bne.w	60003f78 <position_control+0x390>
					eint = anti_windup_max;
				} else if (eint < -anti_windup_max) {
60003dd6:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
60003dda:	9803      	ldr	r0, [sp, #12]
60003ddc:	f7ff fc1a 	bl	60003614 <__aeabi_fcmplt>
60003de0:	2800      	cmp	r0, #0
60003de2:	f040 80cd 	bne.w	60003f80 <position_control+0x398>
					eint = -anti_windup_max;
				}

				// Integral term
				I = Ki_pos * eint;
60003de6:	4b46      	ldr	r3, [pc, #280]	; (60003f00 <position_control+0x318>)
60003de8:	9903      	ldr	r1, [sp, #12]
60003dea:	6818      	ldr	r0, [r3, #0]
60003dec:	f7ff fa74 	bl	600032d8 <__aeabi_fmul>
				// Derivative term
				ed = (error - e_prev) / dt;
				D_filtered = der_filter_coef * D_prev +
					     (1.0 - der_filter_coef) *
						     ed; // Filter derivative term with EMA filter
				D = Kd_pos * D_filtered;
60003df0:	4b45      	ldr	r3, [pc, #276]	; (60003f08 <position_control+0x320>)
				ed = (error - e_prev) / dt;
60003df2:	9904      	ldr	r1, [sp, #16]
				I = Ki_pos * eint;
60003df4:	4681      	mov	r9, r0
				ed = (error - e_prev) / dt;
60003df6:	4638      	mov	r0, r7
				D = Kd_pos * D_filtered;
60003df8:	f8d3 b000 	ldr.w	fp, [r3]
				ed = (error - e_prev) / dt;
60003dfc:	f7ff f962 	bl	600030c4 <__aeabi_fsub>
60003e00:	4949      	ldr	r1, [pc, #292]	; (60003f28 <position_control+0x340>)
60003e02:	f7ff fb1d 	bl	60003440 <__aeabi_fdiv>
					     (1.0 - der_filter_coef) *
60003e06:	f7fe fdef 	bl	600029e8 <__aeabi_f2d>
60003e0a:	a32b      	add	r3, pc, #172	; (adr r3, 60003eb8 <position_control+0x2d0>)
60003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
60003e10:	f7fe fe42 	bl	60002a98 <__aeabi_dmul>
60003e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
				D_filtered = der_filter_coef * D_prev +
60003e18:	4944      	ldr	r1, [pc, #272]	; (60003f2c <position_control+0x344>)
60003e1a:	9806      	ldr	r0, [sp, #24]
60003e1c:	f7ff fa5c 	bl	600032d8 <__aeabi_fmul>
60003e20:	f7fe fde2 	bl	600029e8 <__aeabi_f2d>
60003e24:	4602      	mov	r2, r0
60003e26:	460b      	mov	r3, r1
60003e28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
60003e2c:	f7fe fc7e 	bl	6000272c <__adddf3>
60003e30:	f7ff f8f4 	bl	6000301c <__aeabi_d2f>
				D = Kd_pos * D_filtered;
60003e34:	4659      	mov	r1, fp
60003e36:	f7ff fa4f 	bl	600032d8 <__aeabi_fmul>
				//     uff = angle * Kff2_pos;
				// }

				//  If the trajectory is decreasing, flip the sign of the ff term
				//  and increase ff power for upwards
				if (angle < previous_angle) {
60003e3a:	9907      	ldr	r1, [sp, #28]
				D = Kd_pos * D_filtered;
60003e3c:	9006      	str	r0, [sp, #24]
				if (angle < previous_angle) {
60003e3e:	6830      	ldr	r0, [r6, #0]
60003e40:	f7ff fbe8 	bl	60003614 <__aeabi_fcmplt>
60003e44:	2800      	cmp	r0, #0
60003e46:	f000 809e 	beq.w	60003f86 <position_control+0x39e>
					uff = -angle * Kff2_pos;
60003e4a:	6830      	ldr	r0, [r6, #0]
60003e4c:	4b32      	ldr	r3, [pc, #200]	; (60003f18 <position_control+0x330>)
60003e4e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
60003e52:	6819      	ldr	r1, [r3, #0]
				} else {
					uff = angle * Kff1_pos;
60003e54:	f7ff fa40 	bl	600032d8 <__aeabi_fmul>
				}
				previous_angle = angle;
60003e58:	6833      	ldr	r3, [r6, #0]
					uff = angle * Kff1_pos;
60003e5a:	4683      	mov	fp, r0

				// Calculate U
				float u = P + I + D + uff;
60003e5c:	4649      	mov	r1, r9
60003e5e:	4640      	mov	r0, r8
				previous_angle = angle;
60003e60:	9307      	str	r3, [sp, #28]
				float u = P + I + D + uff;
60003e62:	f7ff f931 	bl	600030c8 <__addsf3>
60003e66:	9906      	ldr	r1, [sp, #24]
60003e68:	f7ff f92e 	bl	600030c8 <__addsf3>
60003e6c:	4659      	mov	r1, fp
60003e6e:	f7ff f92b 	bl	600030c8 <__addsf3>

				k_mutex_lock(&current_mutex, K_FOREVER);
60003e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
				float u = P + I + D + uff;
60003e76:	4680      	mov	r8, r0
				k_mutex_lock(&current_mutex, K_FOREVER);
60003e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60003e7c:	482c      	ldr	r0, [pc, #176]	; (60003f30 <position_control+0x348>)
60003e7e:	f013 fcd8 	bl	60017832 <k_mutex_lock.constprop.0.isra.0>
				commanded_current = u;
60003e82:	4b2c      	ldr	r3, [pc, #176]	; (60003f34 <position_control+0x34c>)
				// commanded_current = angle; // for tuning the current control
				k_mutex_unlock(&current_mutex);
60003e84:	482a      	ldr	r0, [pc, #168]	; (60003f30 <position_control+0x348>)
				commanded_current = u;
60003e86:	f8c3 8000 	str.w	r8, [r3]
				k_mutex_unlock(&current_mutex);
60003e8a:	f013 fcd4 	bl	60017836 <k_mutex_unlock.isra.0>
				e_prev = error;
60003e8e:	9704      	str	r7, [sp, #16]
60003e90:	2700      	movs	r7, #0
60003e92:	e05a      	b.n	60003f4a <position_control+0x362>
				i = 0; // reset counter
60003e94:	4682      	mov	sl, r0
60003e96:	e72b      	b.n	60003cf0 <position_control+0x108>
60003e98:	1b81b81c 	.word	0x1b81b81c
60003e9c:	3fab81b8 	.word	0x3fab81b8
60003ea0:	00000000 	.word	0x00000000
60003ea4:	4060f000 	.word	0x4060f000
60003ea8:	54442d18 	.word	0x54442d18
60003eac:	400921fb 	.word	0x400921fb
60003eb0:	60000000 	.word	0x60000000
60003eb4:	3fe66666 	.word	0x3fe66666
60003eb8:	80000000 	.word	0x80000000
60003ebc:	3fc99999 	.word	0x3fc99999
60003ec0:	202030cc 	.word	0x202030cc
60003ec4:	202033c8 	.word	0x202033c8
60003ec8:	202034cc 	.word	0x202034cc
60003ecc:	202046e8 	.word	0x202046e8
60003ed0:	202034e0 	.word	0x202034e0
60003ed4:	202046d0 	.word	0x202046d0
60003ed8:	40668000 	.word	0x40668000
60003edc:	2020478c 	.word	0x2020478c
60003ee0:	3e99999a 	.word	0x3e99999a
60003ee4:	20204e2d 	.word	0x20204e2d
60003ee8:	402ccccd 	.word	0x402ccccd
60003eec:	40400000 	.word	0x40400000
60003ef0:	6001a550 	.word	0x6001a550
60003ef4:	202030b4 	.word	0x202030b4
60003ef8:	2020471c 	.word	0x2020471c
60003efc:	202030a4 	.word	0x202030a4
60003f00:	20204718 	.word	0x20204718
60003f04:	20203094 	.word	0x20203094
60003f08:	20204714 	.word	0x20204714
60003f0c:	20203084 	.word	0x20203084
60003f10:	20204710 	.word	0x20204710
60003f14:	202046fc 	.word	0x202046fc
60003f18:	2020470c 	.word	0x2020470c
60003f1c:	20203490 	.word	0x20203490
60003f20:	2020306c 	.word	0x2020306c
60003f24:	20204790 	.word	0x20204790
60003f28:	3c23d70a 	.word	0x3c23d70a
60003f2c:	3f4ccccd 	.word	0x3f4ccccd
60003f30:	202034a4 	.word	0x202034a4
60003f34:	20204794 	.word	0x20204794
				for (int j = 0; j < how_many_traj; j++) {
60003f38:	3401      	adds	r4, #1
60003f3a:	2c04      	cmp	r4, #4
60003f3c:	f47f aedb 	bne.w	60003cf6 <position_control+0x10e>
				motion_detect = 0;
60003f40:	2700      	movs	r7, #0
60003f42:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
60003f46:	f889 7000 	strb.w	r7, [r9]

		/* * * * * * * * * * * * * * * * * * *
			    Radian DATA
		* * * * * * * * * * * * * * * * * * */
		// printk("a%f %f\n", angle,actual_radians);
		printk("a%f %f\n", angle, pos_filtered);
60003f4a:	6830      	ldr	r0, [r6, #0]
60003f4c:	f7fe fd4c 	bl	600029e8 <__aeabi_f2d>
60003f50:	4680      	mov	r8, r0
60003f52:	4689      	mov	r9, r1
60003f54:	4628      	mov	r0, r5
60003f56:	f7fe fd47 	bl	600029e8 <__aeabi_f2d>
60003f5a:	4642      	mov	r2, r8
60003f5c:	464b      	mov	r3, r9
60003f5e:	e9cd 0100 	strd	r0, r1, [sp]
60003f62:	480d      	ldr	r0, [pc, #52]	; (60003f98 <position_control+0x3b0>)
60003f64:	f013 fd21 	bl	600179aa <printk>

		// ensure timer has expired
		k_timer_status_sync(&position_timer);
60003f68:	480c      	ldr	r0, [pc, #48]	; (60003f9c <position_control+0x3b4>)
60003f6a:	f013 fc66 	bl	6001783a <k_timer_status_sync.isra.0>
	while (1) {
60003f6e:	e64f      	b.n	60003c10 <position_control+0x28>
			if (traj_num == -1) {
60003f70:	1c63      	adds	r3, r4, #1
60003f72:	f47f af00 	bne.w	60003d76 <position_control+0x18e>
60003f76:	e7e3      	b.n	60003f40 <position_control+0x358>
					eint = anti_windup_max;
60003f78:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
					eint = -anti_windup_max;
60003f7c:	9303      	str	r3, [sp, #12]
60003f7e:	e732      	b.n	60003de6 <position_control+0x1fe>
60003f80:	f04f 433f 	mov.w	r3, #3204448256	; 0xbf000000
60003f84:	e7fa      	b.n	60003f7c <position_control+0x394>
					uff = angle * Kff1_pos;
60003f86:	4b06      	ldr	r3, [pc, #24]	; (60003fa0 <position_control+0x3b8>)
60003f88:	6830      	ldr	r0, [r6, #0]
60003f8a:	6819      	ldr	r1, [r3, #0]
60003f8c:	e762      	b.n	60003e54 <position_control+0x26c>
			motion_detect = false;
60003f8e:	2300      	movs	r3, #0
60003f90:	f889 3000 	strb.w	r3, [r9]
60003f94:	e7d9      	b.n	60003f4a <position_control+0x362>
60003f96:	bf00      	nop
60003f98:	6001c178 	.word	0x6001c178
60003f9c:	202033c8 	.word	0x202033c8
60003fa0:	20204710 	.word	0x20204710
60003fa4:	00000000 	.word	0x00000000

60003fa8 <current_control>:
{
60003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float p_control = 0, int_control = 0, der_control = 0, der_filtered = 0, der_prev = 0, uff;
60003fac:	2400      	movs	r4, #0
{
60003fae:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
	float adc_buffer[AVG_WINDOW] = {0};
60003fb2:	f44f 7216 	mov.w	r2, #600	; 0x258
60003fb6:	2100      	movs	r1, #0
60003fb8:	a808      	add	r0, sp, #32
60003fba:	f8df a21c 	ldr.w	sl, [pc, #540]	; 600041d8 <current_control+0x230>
		eint += error * dt;
60003fbe:	f8df 821c 	ldr.w	r8, [pc, #540]	; 600041dc <current_control+0x234>
		if (u > 0.0) { // helped so much!
60003fc2:	46a1      	mov	r9, r4
	float adc_buffer[AVG_WINDOW] = {0};
60003fc4:	f00f f9bc 	bl	60013340 <memset>
	k_sleep(K_SECONDS(5));
60003fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
60003fcc:	2100      	movs	r1, #0
60003fce:	f013 fc36 	bl	6001783e <k_sleep.isra.0>
60003fd2:	2200      	movs	r2, #0
60003fd4:	2300      	movs	r3, #0
60003fd6:	4650      	mov	r0, sl
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
60003fd8:	f8df b204 	ldr.w	fp, [pc, #516]	; 600041e0 <current_control+0x238>
60003fdc:	e9cd 2300 	strd	r2, r3, [sp]
60003fe0:	220a      	movs	r2, #10
60003fe2:	2300      	movs	r3, #0
60003fe4:	f00e fb68 	bl	600126b8 <z_impl_k_timer_start>
		k_mutex_lock(&current_mutex, K_FOREVER);
60003fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60003fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60003ff0:	487c      	ldr	r0, [pc, #496]	; (600041e4 <current_control+0x23c>)
60003ff2:	f013 fc1e 	bl	60017832 <k_mutex_lock.constprop.0.isra.0>
		float ref_current = commanded_current * 1000.0;
60003ff6:	4b7c      	ldr	r3, [pc, #496]	; (600041e8 <current_control+0x240>)
60003ff8:	497c      	ldr	r1, [pc, #496]	; (600041ec <current_control+0x244>)
60003ffa:	6818      	ldr	r0, [r3, #0]
60003ffc:	f7ff f96c 	bl	600032d8 <__aeabi_fmul>
60004000:	4605      	mov	r5, r0
		k_mutex_unlock(&current_mutex);
60004002:	4878      	ldr	r0, [pc, #480]	; (600041e4 <current_control+0x23c>)
60004004:	f013 fc17 	bl	60017836 <k_mutex_unlock.isra.0>
		k_mutex_lock(&ina_sensor_mutex, K_FOREVER);
60004008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000400c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60004010:	4877      	ldr	r0, [pc, #476]	; (600041f0 <current_control+0x248>)
60004012:	f013 fc0e 	bl	60017832 <k_mutex_lock.constprop.0.isra.0>
60004016:	f8db 0014 	ldr.w	r0, [fp, #20]
6000401a:	f7fe fcd3 	bl	600029c4 <__aeabi_i2d>
6000401e:	a36a      	add	r3, pc, #424	; (adr r3, 600041c8 <current_control+0x220>)
60004020:	e9d3 2300 	ldrd	r2, r3, [r3]
60004024:	f7fe fe62 	bl	60002cec <__aeabi_ddiv>
60004028:	4606      	mov	r6, r0
6000402a:	460f      	mov	r7, r1
6000402c:	f8db 0010 	ldr.w	r0, [fp, #16]
60004030:	f7fe fcc8 	bl	600029c4 <__aeabi_i2d>
60004034:	4602      	mov	r2, r0
60004036:	460b      	mov	r3, r1
60004038:	4630      	mov	r0, r6
6000403a:	4639      	mov	r1, r7
6000403c:	f7fe fb76 	bl	6000272c <__adddf3>
		float adcval = sensor_value_to_double(&ina_data.current) * 1000.0;
60004040:	4b6c      	ldr	r3, [pc, #432]	; (600041f4 <current_control+0x24c>)
60004042:	2200      	movs	r2, #0
60004044:	f7fe fd28 	bl	60002a98 <__aeabi_dmul>
60004048:	f7fe ffe8 	bl	6000301c <__aeabi_d2f>
6000404c:	4606      	mov	r6, r0
		k_mutex_unlock(&ina_sensor_mutex);
6000404e:	4868      	ldr	r0, [pc, #416]	; (600041f0 <current_control+0x248>)
60004050:	f013 fbf1 	bl	60017836 <k_mutex_unlock.isra.0>
		float average = moving_average(adc_buffer, window_size, adcval);
60004054:	4632      	mov	r2, r6
60004056:	2164      	movs	r1, #100	; 0x64
60004058:	a808      	add	r0, sp, #32
6000405a:	f013 fc0e 	bl	6001787a <moving_average>
6000405e:	4683      	mov	fp, r0
		printk("c%f %f\n", ref_current, average);
60004060:	4628      	mov	r0, r5
60004062:	f7fe fcc1 	bl	600029e8 <__aeabi_f2d>
60004066:	4606      	mov	r6, r0
60004068:	460f      	mov	r7, r1
6000406a:	4658      	mov	r0, fp
6000406c:	f7fe fcbc 	bl	600029e8 <__aeabi_f2d>
60004070:	4632      	mov	r2, r6
60004072:	463b      	mov	r3, r7
60004074:	e9cd 0100 	strd	r0, r1, [sp]
60004078:	485f      	ldr	r0, [pc, #380]	; (600041f8 <current_control+0x250>)
6000407a:	f013 fc96 	bl	600179aa <printk>
		float error = (ref_current - average);
6000407e:	4659      	mov	r1, fp
60004080:	4628      	mov	r0, r5
		eint += error * dt;
60004082:	f8df b178 	ldr.w	fp, [pc, #376]	; 600041fc <current_control+0x254>
		float error = (ref_current - average);
60004086:	f7ff f81d 	bl	600030c4 <__aeabi_fsub>
		p_control = Kp * error;
6000408a:	4b5d      	ldr	r3, [pc, #372]	; (60004200 <current_control+0x258>)
		float error = (ref_current - average);
6000408c:	4606      	mov	r6, r0
		p_control = Kp * error;
6000408e:	6818      	ldr	r0, [r3, #0]
60004090:	4631      	mov	r1, r6
60004092:	f7ff f921 	bl	600032d8 <__aeabi_fmul>
		eint += error * dt;
60004096:	f8db 7000 	ldr.w	r7, [fp]
6000409a:	4641      	mov	r1, r8
		p_control = Kp * error;
6000409c:	9005      	str	r0, [sp, #20]
		eint += error * dt;
6000409e:	4630      	mov	r0, r6
600040a0:	f7ff f91a 	bl	600032d8 <__aeabi_fmul>
600040a4:	4639      	mov	r1, r7
		if (eint > anti_windup_max) {
600040a6:	4f57      	ldr	r7, [pc, #348]	; (60004204 <current_control+0x25c>)
		eint += error * dt;
600040a8:	f7ff f80e 	bl	600030c8 <__addsf3>
600040ac:	f8cb 0000 	str.w	r0, [fp]
		if (eint > anti_windup_max) {
600040b0:	4639      	mov	r1, r7
600040b2:	f8db 0000 	ldr.w	r0, [fp]
600040b6:	f7ff facb 	bl	60003650 <__aeabi_fcmpgt>
600040ba:	b110      	cbz	r0, 600040c2 <current_control+0x11a>
			eint = -anti_windup_max;
600040bc:	f8cb 7000 	str.w	r7, [fp]
600040c0:	e007      	b.n	600040d2 <current_control+0x12a>
		} else if (eint < -anti_windup_max) {
600040c2:	4f51      	ldr	r7, [pc, #324]	; (60004208 <current_control+0x260>)
600040c4:	f8db 0000 	ldr.w	r0, [fp]
600040c8:	4639      	mov	r1, r7
600040ca:	f7ff faa3 	bl	60003614 <__aeabi_fcmplt>
600040ce:	2800      	cmp	r0, #0
600040d0:	d1f4      	bne.n	600040bc <current_control+0x114>
		int_control = Ki * eint;
600040d2:	4b4e      	ldr	r3, [pc, #312]	; (6000420c <current_control+0x264>)
		ed = (error - e_prev) / dt;
600040d4:	4630      	mov	r0, r6
600040d6:	4f4e      	ldr	r7, [pc, #312]	; (60004210 <current_control+0x268>)
		int_control = Ki * eint;
600040d8:	681b      	ldr	r3, [r3, #0]
600040da:	9302      	str	r3, [sp, #8]
600040dc:	f8db 3000 	ldr.w	r3, [fp]
		ed = (error - e_prev) / dt;
600040e0:	6839      	ldr	r1, [r7, #0]
		int_control = Ki * eint;
600040e2:	9303      	str	r3, [sp, #12]
		ed = (error - e_prev) / dt;
600040e4:	f7fe ffee 	bl	600030c4 <__aeabi_fsub>
600040e8:	4641      	mov	r1, r8
600040ea:	f7ff f9a9 	bl	60003440 <__aeabi_fdiv>
600040ee:	4b49      	ldr	r3, [pc, #292]	; (60004214 <current_control+0x26c>)
			der_filter_coef * der_prev +
600040f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
		ed = (error - e_prev) / dt;
600040f4:	6018      	str	r0, [r3, #0]
			der_filter_coef * der_prev +
600040f6:	4620      	mov	r0, r4
			(1.0 - der_filter_coef) * ed; // Filter derivative term with EMA filter
600040f8:	f8d3 b000 	ldr.w	fp, [r3]
		der_control = Kd * der_filtered;
600040fc:	4b46      	ldr	r3, [pc, #280]	; (60004218 <current_control+0x270>)
600040fe:	681b      	ldr	r3, [r3, #0]
60004100:	9304      	str	r3, [sp, #16]
			der_filter_coef * der_prev +
60004102:	f7ff f8e9 	bl	600032d8 <__aeabi_fmul>
60004106:	f7fe fc6f 	bl	600029e8 <__aeabi_f2d>
6000410a:	e9cd 0106 	strd	r0, r1, [sp, #24]
			(1.0 - der_filter_coef) * ed; // Filter derivative term with EMA filter
6000410e:	4658      	mov	r0, fp
60004110:	f7fe fc6a 	bl	600029e8 <__aeabi_f2d>
60004114:	2200      	movs	r2, #0
60004116:	4b41      	ldr	r3, [pc, #260]	; (6000421c <current_control+0x274>)
60004118:	f7fe fcbe 	bl	60002a98 <__aeabi_dmul>
6000411c:	4602      	mov	r2, r0
6000411e:	460b      	mov	r3, r1
			der_filter_coef * der_prev +
60004120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
60004124:	f7fe fb02 	bl	6000272c <__adddf3>
		der_filtered =
60004128:	f7fe ff78 	bl	6000301c <__aeabi_d2f>
		der_control = Kd * der_filtered;
6000412c:	9904      	ldr	r1, [sp, #16]
6000412e:	f7ff f8d3 	bl	600032d8 <__aeabi_fmul>
		uff = ref_current * Kff;
60004132:	4b3b      	ldr	r3, [pc, #236]	; (60004220 <current_control+0x278>)
		float u = p_control + der_control + int_control + uff;
60004134:	4601      	mov	r1, r0
		e_prev = error;
60004136:	603e      	str	r6, [r7, #0]
		der_control = Kd * der_filtered;
60004138:	4604      	mov	r4, r0
		float u = p_control + der_control + int_control + uff;
6000413a:	9805      	ldr	r0, [sp, #20]
		uff = ref_current * Kff;
6000413c:	681e      	ldr	r6, [r3, #0]
		float u = p_control + der_control + int_control + uff;
6000413e:	f7fe ffc3 	bl	600030c8 <__addsf3>
60004142:	4607      	mov	r7, r0
		int_control = Ki * eint;
60004144:	9903      	ldr	r1, [sp, #12]
60004146:	9802      	ldr	r0, [sp, #8]
60004148:	f7ff f8c6 	bl	600032d8 <__aeabi_fmul>
6000414c:	4601      	mov	r1, r0
		float u = p_control + der_control + int_control + uff;
6000414e:	4638      	mov	r0, r7
60004150:	f7fe ffba 	bl	600030c8 <__addsf3>
60004154:	4607      	mov	r7, r0
		uff = ref_current * Kff;
60004156:	4629      	mov	r1, r5
60004158:	4630      	mov	r0, r6
6000415a:	f7ff f8bd 	bl	600032d8 <__aeabi_fmul>
		u = u + torque_scale;
6000415e:	4e31      	ldr	r6, [pc, #196]	; (60004224 <current_control+0x27c>)
		uff = ref_current * Kff;
60004160:	4601      	mov	r1, r0
		float u = p_control + der_control + int_control + uff;
60004162:	4638      	mov	r0, r7
60004164:	f7fe ffb0 	bl	600030c8 <__addsf3>
		if (u > 0.0) { // helped so much!
60004168:	4649      	mov	r1, r9
		float u = p_control + der_control + int_control + uff;
6000416a:	4605      	mov	r5, r0
		u = u + torque_scale;
6000416c:	6837      	ldr	r7, [r6, #0]
		if (u > 0.0) { // helped so much!
6000416e:	f7ff fa6f 	bl	60003650 <__aeabi_fcmpgt>
60004172:	4b2d      	ldr	r3, [pc, #180]	; (60004228 <current_control+0x280>)
60004174:	b1f0      	cbz	r0, 600041b4 <current_control+0x20c>
			dir_flag = 1;
60004176:	2201      	movs	r2, #1
60004178:	601a      	str	r2, [r3, #0]
		u = u + torque_scale;
6000417a:	6831      	ldr	r1, [r6, #0]
6000417c:	4628      	mov	r0, r5
6000417e:	f7fe ffa3 	bl	600030c8 <__addsf3>
		if (u >= 0.0) {
60004182:	4649      	mov	r1, r9
		u = u + torque_scale;
60004184:	4605      	mov	r5, r0
		if (u >= 0.0) {
60004186:	f7ff fa59 	bl	6000363c <__aeabi_fcmpge>
6000418a:	b1d0      	cbz	r0, 600041c2 <current_control+0x21a>
			pwm_val = (int)(u / 100.0 * SPEED);
6000418c:	4628      	mov	r0, r5
			pwm_val = (int)(-u / 100.0 * SPEED);
6000418e:	f7fe fc2b 	bl	600029e8 <__aeabi_f2d>
60004192:	2200      	movs	r2, #0
60004194:	4b25      	ldr	r3, [pc, #148]	; (6000422c <current_control+0x284>)
60004196:	f7fe fda9 	bl	60002cec <__aeabi_ddiv>
6000419a:	a30d      	add	r3, pc, #52	; (adr r3, 600041d0 <current_control+0x228>)
6000419c:	e9d3 2300 	ldrd	r2, r3, [r3]
600041a0:	f7fe fc7a 	bl	60002a98 <__aeabi_dmul>
600041a4:	f7fe ff12 	bl	60002fcc <__aeabi_d2iz>
600041a8:	4b21      	ldr	r3, [pc, #132]	; (60004230 <current_control+0x288>)
600041aa:	6018      	str	r0, [r3, #0]
		k_timer_status_sync(&current_timer);
600041ac:	4650      	mov	r0, sl
600041ae:	f013 fb44 	bl	6001783a <k_timer_status_sync.isra.0>
	while (1) {
600041b2:	e70e      	b.n	60003fd2 <current_control+0x2a>
			dir_flag = -1;
600041b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			torque_scale *= -1;
600041b8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
			dir_flag = -1;
600041bc:	601a      	str	r2, [r3, #0]
			torque_scale *= -1;
600041be:	6037      	str	r7, [r6, #0]
600041c0:	e7db      	b.n	6000417a <current_control+0x1d2>
			pwm_val = (int)(-u / 100.0 * SPEED);
600041c2:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
600041c6:	e7e2      	b.n	6000418e <current_control+0x1e6>
600041c8:	00000000 	.word	0x00000000
600041cc:	412e8480 	.word	0x412e8480
600041d0:	00000000 	.word	0x00000000
600041d4:	40e86a00 	.word	0x40e86a00
600041d8:	20203320 	.word	0x20203320
600041dc:	3a83126f 	.word	0x3a83126f
600041e0:	202047a0 	.word	0x202047a0
600041e4:	202034a4 	.word	0x202034a4
600041e8:	20204794 	.word	0x20204794
600041ec:	447a0000 	.word	0x447a0000
600041f0:	202034b8 	.word	0x202034b8
600041f4:	408f4000 	.word	0x408f4000
600041f8:	6001c185 	.word	0x6001c185
600041fc:	202046b0 	.word	0x202046b0
60004200:	202030c8 	.word	0x202030c8
60004204:	41200000 	.word	0x41200000
60004208:	c1200000 	.word	0xc1200000
6000420c:	20204724 	.word	0x20204724
60004210:	202046ac 	.word	0x202046ac
60004214:	202046a8 	.word	0x202046a8
60004218:	20204720 	.word	0x20204720
6000421c:	3fe00000 	.word	0x3fe00000
60004220:	202030c4 	.word	0x202030c4
60004224:	202046f0 	.word	0x202046f0
60004228:	20203080 	.word	0x20203080
6000422c:	40590000 	.word	0x40590000
60004230:	202046f8 	.word	0x202046f8
60004234:	00000000 	.word	0x00000000

60004238 <mpu_sensor_read>:
{
60004238:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	mpu_dev = sensors_init(sensor_name);
6000423c:	f8df a130 	ldr.w	sl, [pc, #304]	; 60004370 <mpu_sensor_read+0x138>
	k_work_queue_start(&imu_work_q, imu_q_stack_area, K_THREAD_STACK_SIZEOF(imu_q_stack_area),
60004240:	2500      	movs	r5, #0
	mpu_dev = sensors_init(sensor_name);
60004242:	484c      	ldr	r0, [pc, #304]	; (60004374 <mpu_sensor_read+0x13c>)
	float smooth_data = 0.0;
60004244:	2400      	movs	r4, #0
	mpu_dev = sensors_init(sensor_name);
60004246:	f002 f857 	bl	600062f8 <sensors_init>
6000424a:	f8ca 0000 	str.w	r0, [sl]
	k_work_queue_init(&imu_work_q); // init work q
6000424e:	484a      	ldr	r0, [pc, #296]	; (60004378 <mpu_sensor_read+0x140>)
60004250:	f00c fb96 	bl	60010980 <k_work_queue_init>
	k_work_queue_start(&imu_work_q, imu_q_stack_area, K_THREAD_STACK_SIZEOF(imu_q_stack_area),
60004254:	2307      	movs	r3, #7
60004256:	f44f 7200 	mov.w	r2, #512	; 0x200
6000425a:	4948      	ldr	r1, [pc, #288]	; (6000437c <mpu_sensor_read+0x144>)
6000425c:	4846      	ldr	r0, [pc, #280]	; (60004378 <mpu_sensor_read+0x140>)
6000425e:	9500      	str	r5, [sp, #0]
60004260:	f00c fba8 	bl	600109b4 <k_work_queue_start>
	k_work_init(&my_data, cadence_detection); // init work item
60004264:	4946      	ldr	r1, [pc, #280]	; (60004380 <mpu_sensor_read+0x148>)
60004266:	4847      	ldr	r0, [pc, #284]	; (60004384 <mpu_sensor_read+0x14c>)
60004268:	f00c fb0a 	bl	60010880 <k_work_init>
	k_sleep(K_SECONDS(2));
6000426c:	f644 6020 	movw	r0, #20000	; 0x4e20
60004270:	2100      	movs	r1, #0
60004272:	f013 fae4 	bl	6001783e <k_sleep.isra.0>
60004276:	2200      	movs	r2, #0
60004278:	2300      	movs	r3, #0
		int rc = process_mpu6050(mpu_dev, &mpu_data);
6000427a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 60004388 <mpu_sensor_read+0x150>
6000427e:	4843      	ldr	r0, [pc, #268]	; (6000438c <mpu_sensor_read+0x154>)
60004280:	e9cd 2300 	strd	r2, r3, [sp]
60004284:	220a      	movs	r2, #10
60004286:	2300      	movs	r3, #0
60004288:	f00e fa16 	bl	600126b8 <z_impl_k_timer_start>
6000428c:	4641      	mov	r1, r8
6000428e:	f8da 0000 	ldr.w	r0, [sl]
60004292:	f002 f875 	bl	60006380 <process_mpu6050>
		if (rc != 0) {
60004296:	2800      	cmp	r0, #0
60004298:	d15d      	bne.n	60004356 <mpu_sensor_read+0x11e>
		k_mutex_lock(&mpu_sensor_mutex, K_FOREVER);
6000429a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000429e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
600042a2:	483b      	ldr	r0, [pc, #236]	; (60004390 <mpu_sensor_read+0x158>)
600042a4:	f013 fac5 	bl	60017832 <k_mutex_lock.constprop.0.isra.0>
600042a8:	f8d8 000c 	ldr.w	r0, [r8, #12]
600042ac:	f7fe fb8a 	bl	600029c4 <__aeabi_i2d>
600042b0:	a32b      	add	r3, pc, #172	; (adr r3, 60004360 <mpu_sensor_read+0x128>)
600042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
600042b6:	f7fe fd19 	bl	60002cec <__aeabi_ddiv>
600042ba:	4606      	mov	r6, r0
600042bc:	460f      	mov	r7, r1
600042be:	f8d8 0008 	ldr.w	r0, [r8, #8]
600042c2:	f7fe fb7f 	bl	600029c4 <__aeabi_i2d>
600042c6:	4602      	mov	r2, r0
600042c8:	460b      	mov	r3, r1
600042ca:	4630      	mov	r0, r6
600042cc:	4639      	mov	r1, r7
600042ce:	f7fe fa2d 	bl	6000272c <__adddf3>
		accel_y = sensor_value_to_double(&mpu_data.accelerometer[1]);
600042d2:	f7fe fea3 	bl	6000301c <__aeabi_d2f>
600042d6:	4606      	mov	r6, r0
		k_mutex_unlock(&mpu_sensor_mutex);
600042d8:	482d      	ldr	r0, [pc, #180]	; (60004390 <mpu_sensor_read+0x158>)
600042da:	f013 faac 	bl	60017836 <k_mutex_unlock.isra.0>
		accel_mag = sqrt(pow(accel_y, 2));
600042de:	4630      	mov	r0, r6
600042e0:	f7fe fb82 	bl	600029e8 <__aeabi_f2d>
600042e4:	2200      	movs	r2, #0
600042e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
600042ea:	f00e fad3 	bl	60012894 <pow>
600042ee:	f00e fb8f 	bl	60012a10 <sqrt>
600042f2:	4680      	mov	r8, r0
600042f4:	4689      	mov	r9, r1
		smooth_data = smooth_data - (.7 * (smooth_data - (accel_mag)));
600042f6:	4620      	mov	r0, r4
600042f8:	f7fe fb76 	bl	600029e8 <__aeabi_f2d>
600042fc:	4606      	mov	r6, r0
600042fe:	460f      	mov	r7, r1
		accel_mag = sqrt(pow(accel_y, 2));
60004300:	4640      	mov	r0, r8
60004302:	4649      	mov	r1, r9
60004304:	f7fe fe8a 	bl	6000301c <__aeabi_d2f>
60004308:	4601      	mov	r1, r0
		smooth_data = smooth_data - (.7 * (smooth_data - (accel_mag)));
6000430a:	4620      	mov	r0, r4
6000430c:	f7fe feda 	bl	600030c4 <__aeabi_fsub>
60004310:	f7fe fb6a 	bl	600029e8 <__aeabi_f2d>
60004314:	a314      	add	r3, pc, #80	; (adr r3, 60004368 <mpu_sensor_read+0x130>)
60004316:	e9d3 2300 	ldrd	r2, r3, [r3]
6000431a:	f7fe fbbd 	bl	60002a98 <__aeabi_dmul>
6000431e:	4602      	mov	r2, r0
60004320:	460b      	mov	r3, r1
60004322:	4630      	mov	r0, r6
60004324:	4639      	mov	r1, r7
60004326:	f7fe f9ff 	bl	60002728 <__aeabi_dsub>
6000432a:	f7fe fe77 	bl	6000301c <__aeabi_d2f>
		my_data.data = smooth_data;
6000432e:	4915      	ldr	r1, [pc, #84]	; (60004384 <mpu_sensor_read+0x14c>)
		smooth_data = smooth_data - (.7 * (smooth_data - (accel_mag)));
60004330:	4604      	mov	r4, r0
		my_data.data = smooth_data;
60004332:	6108      	str	r0, [r1, #16]
		k_work_submit_to_queue(&imu_work_q, &my_data.work);
60004334:	4810      	ldr	r0, [pc, #64]	; (60004378 <mpu_sensor_read+0x140>)
		my_data.count = counter;
60004336:	614d      	str	r5, [r1, #20]
		k_work_submit_to_queue(&imu_work_q, &my_data.work);
60004338:	f015 faff 	bl	6001993a <k_work_submit_to_queue>
		printk("m%f\n",smooth_data);
6000433c:	4620      	mov	r0, r4
		counter++;
6000433e:	3501      	adds	r5, #1
		printk("m%f\n",smooth_data);
60004340:	f7fe fb52 	bl	600029e8 <__aeabi_f2d>
60004344:	4602      	mov	r2, r0
60004346:	460b      	mov	r3, r1
60004348:	4812      	ldr	r0, [pc, #72]	; (60004394 <mpu_sensor_read+0x15c>)
6000434a:	f013 fb2e 	bl	600179aa <printk>
		k_timer_status_sync(&imu_timer);
6000434e:	480f      	ldr	r0, [pc, #60]	; (6000438c <mpu_sensor_read+0x154>)
60004350:	f013 fa73 	bl	6001783a <k_timer_status_sync.isra.0>
	while (1) {
60004354:	e78f      	b.n	60004276 <mpu_sensor_read+0x3e>
}
60004356:	b002      	add	sp, #8
60004358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000435c:	f3af 8000 	nop.w
60004360:	00000000 	.word	0x00000000
60004364:	412e8480 	.word	0x412e8480
60004368:	66666666 	.word	0x66666666
6000436c:	3fe66666 	.word	0x3fe66666
60004370:	2020479c 	.word	0x2020479c
60004374:	6001c2ee 	.word	0x6001c2ee
60004378:	20203f00 	.word	0x20203f00
6000437c:	20206800 	.word	0x20206800
60004380:	60006031 	.word	0x60006031
60004384:	202046b8 	.word	0x202046b8
60004388:	202047b8 	.word	0x202047b8
6000438c:	20203358 	.word	0x20203358
60004390:	202034cc 	.word	0x202034cc
60004394:	6001c340 	.word	0x6001c340

60004398 <ina219_channel_get>:
	const struct ina219_config *cfg = dev->config;
	struct ina219_data *data = dev->data;
	double tmp;
	int8_t sign = 1;

	switch (chan) {
60004398:	291f      	cmp	r1, #31
{
6000439a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
6000439e:	4616      	mov	r6, r2
	const struct ina219_config *cfg = dev->config;
600043a0:	6844      	ldr	r4, [r0, #4]
	struct ina219_data *data = dev->data;
600043a2:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
600043a4:	d052      	beq.n	6000444c <ina219_channel_get+0xb4>
600043a6:	2920      	cmp	r1, #32
600043a8:	d045      	beq.n	60004436 <ina219_channel_get+0x9e>
600043aa:	291e      	cmp	r1, #30
600043ac:	d15a      	bne.n	60004464 <ina219_channel_get+0xcc>
	case SENSOR_CHAN_VOLTAGE:
		tmp = data->v_bus * INA219_V_BUS_MUL;
600043ae:	8858      	ldrh	r0, [r3, #2]
600043b0:	f7fe fb08 	bl	600029c4 <__aeabi_i2d>
600043b4:	a32e      	add	r3, pc, #184	; (adr r3, 60004470 <ina219_channel_get+0xd8>)
600043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
	case SENSOR_CHAN_CURRENT:
		if (INA219_SIGN_BIT(data->current)) {
			data->current = ~data->current + 1;
			sign = -1;
		}
		tmp = sign * data->current * cfg->current_lsb * INA219_SI_MUL;
600043ba:	f7fe fb6d 	bl	60002a98 <__aeabi_dmul>
 * @param inp The converted value.
 * @return 0 if successful, negative errno code if failure.
 */
static inline int sensor_value_from_double(struct sensor_value *val, double inp)
{
	if (inp < INT32_MIN || inp > INT32_MAX) {
600043be:	2200      	movs	r2, #0
600043c0:	4b33      	ldr	r3, [pc, #204]	; (60004490 <ina219_channel_get+0xf8>)
600043c2:	4604      	mov	r4, r0
600043c4:	460d      	mov	r5, r1
600043c6:	f7fe fdd9 	bl	60002f7c <__aeabi_dcmplt>
600043ca:	2800      	cmp	r0, #0
600043cc:	d14d      	bne.n	6000446a <ina219_channel_get+0xd2>
600043ce:	4620      	mov	r0, r4
600043d0:	4629      	mov	r1, r5
600043d2:	a329      	add	r3, pc, #164	; (adr r3, 60004478 <ina219_channel_get+0xe0>)
600043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
600043d8:	f7fe fdee 	bl	60002fb8 <__aeabi_dcmpgt>
600043dc:	2800      	cmp	r0, #0
600043de:	d144      	bne.n	6000446a <ina219_channel_get+0xd2>
		return -ERANGE;
	}

	double val2 = (inp - (int32_t)inp) * 1000000.0;
600043e0:	4629      	mov	r1, r5
600043e2:	4620      	mov	r0, r4
600043e4:	f7fe fdf2 	bl	60002fcc <__aeabi_d2iz>
600043e8:	4607      	mov	r7, r0
600043ea:	f7fe faeb 	bl	600029c4 <__aeabi_i2d>
600043ee:	4602      	mov	r2, r0
600043f0:	460b      	mov	r3, r1
600043f2:	4620      	mov	r0, r4
600043f4:	4629      	mov	r1, r5
600043f6:	f7fe f997 	bl	60002728 <__aeabi_dsub>
600043fa:	a321      	add	r3, pc, #132	; (adr r3, 60004480 <ina219_channel_get+0xe8>)
600043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
60004400:	f7fe fb4a 	bl	60002a98 <__aeabi_dmul>

	if (val2 < INT32_MIN || val2 > INT32_MAX) {
60004404:	2200      	movs	r2, #0
60004406:	4b22      	ldr	r3, [pc, #136]	; (60004490 <ina219_channel_get+0xf8>)
	double val2 = (inp - (int32_t)inp) * 1000000.0;
60004408:	4680      	mov	r8, r0
6000440a:	4689      	mov	r9, r1
	if (val2 < INT32_MIN || val2 > INT32_MAX) {
6000440c:	f7fe fdb6 	bl	60002f7c <__aeabi_dcmplt>
60004410:	bb58      	cbnz	r0, 6000446a <ina219_channel_get+0xd2>
60004412:	4640      	mov	r0, r8
60004414:	4649      	mov	r1, r9
60004416:	a318      	add	r3, pc, #96	; (adr r3, 60004478 <ina219_channel_get+0xe0>)
60004418:	e9d3 2300 	ldrd	r2, r3, [r3]
6000441c:	f7fe fdcc 	bl	60002fb8 <__aeabi_dcmpgt>
60004420:	4604      	mov	r4, r0
60004422:	bb10      	cbnz	r0, 6000446a <ina219_channel_get+0xd2>
		return -ERANGE;
	}

	val->val1 = (int32_t)inp;
	val->val2 = (int32_t)val2;
60004424:	4640      	mov	r0, r8
60004426:	4649      	mov	r1, r9
	val->val1 = (int32_t)inp;
60004428:	6037      	str	r7, [r6, #0]
	val->val2 = (int32_t)val2;
6000442a:	f7fe fdcf 	bl	60002fcc <__aeabi_d2iz>
6000442e:	6070      	str	r0, [r6, #4]

	return 0;
60004430:	4620      	mov	r0, r4
		LOG_DBG("Channel not supported by device!");
		return -ENOTSUP;
	}

	return sensor_value_from_double(val, tmp);
}
60004432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		tmp = data->power * cfg->current_lsb * INA219_POWER_MUL * INA219_SI_MUL;
60004436:	889b      	ldrh	r3, [r3, #4]
60004438:	2014      	movs	r0, #20
6000443a:	8922      	ldrh	r2, [r4, #8]
6000443c:	4353      	muls	r3, r2
		tmp = sign * data->current * cfg->current_lsb * INA219_SI_MUL;
6000443e:	4358      	muls	r0, r3
60004440:	f7fe fac0 	bl	600029c4 <__aeabi_i2d>
60004444:	a310      	add	r3, pc, #64	; (adr r3, 60004488 <ina219_channel_get+0xf0>)
60004446:	e9d3 2300 	ldrd	r2, r3, [r3]
6000444a:	e7b6      	b.n	600043ba <ina219_channel_get+0x22>
		if (INA219_SIGN_BIT(data->current)) {
6000444c:	88da      	ldrh	r2, [r3, #6]
6000444e:	0bd1      	lsrs	r1, r2, #15
			data->current = ~data->current + 1;
60004450:	bf17      	itett	ne
60004452:	4252      	negne	r2, r2
	int8_t sign = 1;
60004454:	2201      	moveq	r2, #1
			data->current = ~data->current + 1;
60004456:	80da      	strhne	r2, [r3, #6]
			sign = -1;
60004458:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
		tmp = sign * data->current * cfg->current_lsb * INA219_SI_MUL;
6000445c:	88db      	ldrh	r3, [r3, #6]
6000445e:	8920      	ldrh	r0, [r4, #8]
60004460:	4353      	muls	r3, r2
60004462:	e7ec      	b.n	6000443e <ina219_channel_get+0xa6>
	switch (chan) {
60004464:	f06f 0085 	mvn.w	r0, #133	; 0x85
60004468:	e7e3      	b.n	60004432 <ina219_channel_get+0x9a>
		return -ERANGE;
6000446a:	f06f 0021 	mvn.w	r0, #33	; 0x21
6000446e:	e7e0      	b.n	60004432 <ina219_channel_get+0x9a>
60004470:	d2f1a9fc 	.word	0xd2f1a9fc
60004474:	3f70624d 	.word	0x3f70624d
60004478:	ffc00000 	.word	0xffc00000
6000447c:	41dfffff 	.word	0x41dfffff
60004480:	00000000 	.word	0x00000000
60004484:	412e8480 	.word	0x412e8480
60004488:	88e368f1 	.word	0x88e368f1
6000448c:	3ee4f8b5 	.word	0x3ee4f8b5
60004490:	c1e00000 	.word	0xc1e00000
60004494:	00000000 	.word	0x00000000

60004498 <__ieee754_pow>:
60004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000449c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
600044a0:	461d      	mov	r5, r3
600044a2:	469a      	mov	sl, r3
600044a4:	ea57 0302 	orrs.w	r3, r7, r2
600044a8:	b093      	sub	sp, #76	; 0x4c
600044aa:	f000 8336 	beq.w	60004b1a <__ieee754_pow+0x682>
600044ae:	4689      	mov	r9, r1
600044b0:	4680      	mov	r8, r0
600044b2:	48d5      	ldr	r0, [pc, #852]	; (60004808 <__ieee754_pow+0x370>)
600044b4:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
600044b8:	4286      	cmp	r6, r0
600044ba:	4614      	mov	r4, r2
600044bc:	4611      	mov	r1, r2
600044be:	46cb      	mov	fp, r9
600044c0:	4643      	mov	r3, r8
600044c2:	4632      	mov	r2, r6
600044c4:	f200 8323 	bhi.w	60004b0e <__ieee754_pow+0x676>
600044c8:	f000 832c 	beq.w	60004b24 <__ieee754_pow+0x68c>
600044cc:	4287      	cmp	r7, r0
600044ce:	f200 831e 	bhi.w	60004b0e <__ieee754_pow+0x676>
600044d2:	f000 83ce 	beq.w	60004c72 <__ieee754_pow+0x7da>
600044d6:	f1bb 0f00 	cmp.w	fp, #0
600044da:	f2c0 8379 	blt.w	60004bd0 <__ieee754_pow+0x738>
600044de:	2900      	cmp	r1, #0
600044e0:	f000 8338 	beq.w	60004b54 <__ieee754_pow+0x6bc>
600044e4:	2100      	movs	r1, #0
600044e6:	9100      	str	r1, [sp, #0]
600044e8:	4640      	mov	r0, r8
600044ea:	4649      	mov	r1, r9
600044ec:	9304      	str	r3, [sp, #16]
600044ee:	9202      	str	r2, [sp, #8]
600044f0:	f00e fb7e 	bl	60012bf0 <fabs>
600044f4:	9b04      	ldr	r3, [sp, #16]
600044f6:	9a02      	ldr	r2, [sp, #8]
600044f8:	2b00      	cmp	r3, #0
600044fa:	f000 838d 	beq.w	60004c18 <__ieee754_pow+0x780>
600044fe:	ea4f 73db 	mov.w	r3, fp, lsr #31
60004502:	3b01      	subs	r3, #1
60004504:	930a      	str	r3, [sp, #40]	; 0x28
60004506:	4bc1      	ldr	r3, [pc, #772]	; (6000480c <__ieee754_pow+0x374>)
60004508:	429f      	cmp	r7, r3
6000450a:	f200 83e7 	bhi.w	60004cdc <__ieee754_pow+0x844>
6000450e:	4bbe      	ldr	r3, [pc, #760]	; (60004808 <__ieee754_pow+0x370>)
60004510:	ea0b 0303 	and.w	r3, fp, r3
60004514:	2b00      	cmp	r3, #0
60004516:	f040 8498 	bne.w	60004e4a <__ieee754_pow+0x9b2>
6000451a:	2200      	movs	r2, #0
6000451c:	4bbc      	ldr	r3, [pc, #752]	; (60004810 <__ieee754_pow+0x378>)
6000451e:	f7fe fabb 	bl	60002a98 <__aeabi_dmul>
60004522:	f06f 0634 	mvn.w	r6, #52	; 0x34
60004526:	460a      	mov	r2, r1
60004528:	1513      	asrs	r3, r2, #20
6000452a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
6000452e:	199f      	adds	r7, r3, r6
60004530:	4bb8      	ldr	r3, [pc, #736]	; (60004814 <__ieee754_pow+0x37c>)
60004532:	970b      	str	r7, [sp, #44]	; 0x2c
60004534:	f3c2 0213 	ubfx	r2, r2, #0, #20
60004538:	f042 567f 	orr.w	r6, r2, #1069547520	; 0x3fc00000
6000453c:	429a      	cmp	r2, r3
6000453e:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
60004542:	dd07      	ble.n	60004554 <__ieee754_pow+0xbc>
60004544:	4bb4      	ldr	r3, [pc, #720]	; (60004818 <__ieee754_pow+0x380>)
60004546:	429a      	cmp	r2, r3
60004548:	f340 84ec 	ble.w	60004f24 <__ieee754_pow+0xa8c>
6000454c:	3701      	adds	r7, #1
6000454e:	970b      	str	r7, [sp, #44]	; 0x2c
60004550:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
60004554:	2200      	movs	r2, #0
60004556:	2300      	movs	r3, #0
60004558:	e9cd 2308 	strd	r2, r3, [sp, #32]
6000455c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
60004560:	4bae      	ldr	r3, [pc, #696]	; (6000481c <__ieee754_pow+0x384>)
60004562:	2200      	movs	r2, #0
60004564:	e9cd 2306 	strd	r2, r3, [sp, #24]
60004568:	2700      	movs	r7, #0
6000456a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
6000456e:	4631      	mov	r1, r6
60004570:	4682      	mov	sl, r0
60004572:	f7fe f8d9 	bl	60002728 <__aeabi_dsub>
60004576:	46b3      	mov	fp, r6
60004578:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
6000457c:	4680      	mov	r8, r0
6000457e:	4689      	mov	r9, r1
60004580:	4650      	mov	r0, sl
60004582:	4631      	mov	r1, r6
60004584:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
60004588:	f7fe f8d0 	bl	6000272c <__adddf3>
6000458c:	4602      	mov	r2, r0
6000458e:	460b      	mov	r3, r1
60004590:	2000      	movs	r0, #0
60004592:	49a2      	ldr	r1, [pc, #648]	; (6000481c <__ieee754_pow+0x384>)
60004594:	f7fe fbaa 	bl	60002cec <__aeabi_ddiv>
60004598:	460a      	mov	r2, r1
6000459a:	4601      	mov	r1, r0
6000459c:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
600045a0:	4613      	mov	r3, r2
600045a2:	4649      	mov	r1, r9
600045a4:	4602      	mov	r2, r0
600045a6:	4640      	mov	r0, r8
600045a8:	f7fe fa76 	bl	60002a98 <__aeabi_dmul>
600045ac:	460a      	mov	r2, r1
600045ae:	4683      	mov	fp, r0
600045b0:	4694      	mov	ip, r2
600045b2:	e9cd bc02 	strd	fp, ip, [sp, #8]
600045b6:	f04f 0c00 	mov.w	ip, #0
600045ba:	f8cd c008 	str.w	ip, [sp, #8]
600045be:	1076      	asrs	r6, r6, #1
600045c0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
600045c4:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
600045c8:	4601      	mov	r1, r0
600045ca:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
600045ce:	e9cd 1204 	strd	r1, r2, [sp, #16]
600045d2:	2000      	movs	r0, #0
600045d4:	19d9      	adds	r1, r3, r7
600045d6:	4606      	mov	r6, r0
600045d8:	460f      	mov	r7, r1
600045da:	4602      	mov	r2, r0
600045dc:	460b      	mov	r3, r1
600045de:	4650      	mov	r0, sl
600045e0:	4659      	mov	r1, fp
600045e2:	f7fe fa59 	bl	60002a98 <__aeabi_dmul>
600045e6:	4602      	mov	r2, r0
600045e8:	460b      	mov	r3, r1
600045ea:	4640      	mov	r0, r8
600045ec:	4649      	mov	r1, r9
600045ee:	f7fe f89b 	bl	60002728 <__aeabi_dsub>
600045f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
600045f6:	4680      	mov	r8, r0
600045f8:	4689      	mov	r9, r1
600045fa:	4630      	mov	r0, r6
600045fc:	4639      	mov	r1, r7
600045fe:	f7fe f893 	bl	60002728 <__aeabi_dsub>
60004602:	4602      	mov	r2, r0
60004604:	460b      	mov	r3, r1
60004606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
6000460a:	f7fe f88d 	bl	60002728 <__aeabi_dsub>
6000460e:	4652      	mov	r2, sl
60004610:	465b      	mov	r3, fp
60004612:	f7fe fa41 	bl	60002a98 <__aeabi_dmul>
60004616:	4602      	mov	r2, r0
60004618:	460b      	mov	r3, r1
6000461a:	4640      	mov	r0, r8
6000461c:	4649      	mov	r1, r9
6000461e:	f7fe f883 	bl	60002728 <__aeabi_dsub>
60004622:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
60004626:	f7fe fa37 	bl	60002a98 <__aeabi_dmul>
6000462a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
6000462e:	e9cd 0106 	strd	r0, r1, [sp, #24]
60004632:	4632      	mov	r2, r6
60004634:	463b      	mov	r3, r7
60004636:	4630      	mov	r0, r6
60004638:	4639      	mov	r1, r7
6000463a:	f7fe fa2d 	bl	60002a98 <__aeabi_dmul>
6000463e:	a360      	add	r3, pc, #384	; (adr r3, 600047c0 <__ieee754_pow+0x328>)
60004640:	e9d3 2300 	ldrd	r2, r3, [r3]
60004644:	4606      	mov	r6, r0
60004646:	460f      	mov	r7, r1
60004648:	f7fe fa26 	bl	60002a98 <__aeabi_dmul>
6000464c:	a35e      	add	r3, pc, #376	; (adr r3, 600047c8 <__ieee754_pow+0x330>)
6000464e:	e9d3 2300 	ldrd	r2, r3, [r3]
60004652:	f7fe f86b 	bl	6000272c <__adddf3>
60004656:	4632      	mov	r2, r6
60004658:	463b      	mov	r3, r7
6000465a:	f7fe fa1d 	bl	60002a98 <__aeabi_dmul>
6000465e:	a35c      	add	r3, pc, #368	; (adr r3, 600047d0 <__ieee754_pow+0x338>)
60004660:	e9d3 2300 	ldrd	r2, r3, [r3]
60004664:	f7fe f862 	bl	6000272c <__adddf3>
60004668:	4632      	mov	r2, r6
6000466a:	463b      	mov	r3, r7
6000466c:	f7fe fa14 	bl	60002a98 <__aeabi_dmul>
60004670:	a359      	add	r3, pc, #356	; (adr r3, 600047d8 <__ieee754_pow+0x340>)
60004672:	e9d3 2300 	ldrd	r2, r3, [r3]
60004676:	f7fe f859 	bl	6000272c <__adddf3>
6000467a:	4632      	mov	r2, r6
6000467c:	463b      	mov	r3, r7
6000467e:	f7fe fa0b 	bl	60002a98 <__aeabi_dmul>
60004682:	a357      	add	r3, pc, #348	; (adr r3, 600047e0 <__ieee754_pow+0x348>)
60004684:	e9d3 2300 	ldrd	r2, r3, [r3]
60004688:	f7fe f850 	bl	6000272c <__adddf3>
6000468c:	4632      	mov	r2, r6
6000468e:	463b      	mov	r3, r7
60004690:	f7fe fa02 	bl	60002a98 <__aeabi_dmul>
60004694:	a354      	add	r3, pc, #336	; (adr r3, 600047e8 <__ieee754_pow+0x350>)
60004696:	e9d3 2300 	ldrd	r2, r3, [r3]
6000469a:	f7fe f847 	bl	6000272c <__adddf3>
6000469e:	4632      	mov	r2, r6
600046a0:	4680      	mov	r8, r0
600046a2:	4689      	mov	r9, r1
600046a4:	463b      	mov	r3, r7
600046a6:	4630      	mov	r0, r6
600046a8:	4639      	mov	r1, r7
600046aa:	f7fe f9f5 	bl	60002a98 <__aeabi_dmul>
600046ae:	4602      	mov	r2, r0
600046b0:	460b      	mov	r3, r1
600046b2:	4640      	mov	r0, r8
600046b4:	4649      	mov	r1, r9
600046b6:	f7fe f9ef 	bl	60002a98 <__aeabi_dmul>
600046ba:	4652      	mov	r2, sl
600046bc:	4606      	mov	r6, r0
600046be:	460f      	mov	r7, r1
600046c0:	465b      	mov	r3, fp
600046c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
600046c6:	f7fe f831 	bl	6000272c <__adddf3>
600046ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
600046ce:	f7fe f9e3 	bl	60002a98 <__aeabi_dmul>
600046d2:	4632      	mov	r2, r6
600046d4:	463b      	mov	r3, r7
600046d6:	f7fe f829 	bl	6000272c <__adddf3>
600046da:	4652      	mov	r2, sl
600046dc:	4680      	mov	r8, r0
600046de:	4689      	mov	r9, r1
600046e0:	465b      	mov	r3, fp
600046e2:	4650      	mov	r0, sl
600046e4:	4659      	mov	r1, fp
600046e6:	f7fe f9d7 	bl	60002a98 <__aeabi_dmul>
600046ea:	4602      	mov	r2, r0
600046ec:	460b      	mov	r3, r1
600046ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
600046f2:	4b4b      	ldr	r3, [pc, #300]	; (60004820 <__ieee754_pow+0x388>)
600046f4:	2200      	movs	r2, #0
600046f6:	f7fe f819 	bl	6000272c <__adddf3>
600046fa:	4642      	mov	r2, r8
600046fc:	464b      	mov	r3, r9
600046fe:	f7fe f815 	bl	6000272c <__adddf3>
60004702:	2600      	movs	r6, #0
60004704:	460f      	mov	r7, r1
60004706:	4632      	mov	r2, r6
60004708:	463b      	mov	r3, r7
6000470a:	4650      	mov	r0, sl
6000470c:	4659      	mov	r1, fp
6000470e:	f7fe f9c3 	bl	60002a98 <__aeabi_dmul>
60004712:	4b43      	ldr	r3, [pc, #268]	; (60004820 <__ieee754_pow+0x388>)
60004714:	4682      	mov	sl, r0
60004716:	468b      	mov	fp, r1
60004718:	2200      	movs	r2, #0
6000471a:	4630      	mov	r0, r6
6000471c:	4639      	mov	r1, r7
6000471e:	f7fe f803 	bl	60002728 <__aeabi_dsub>
60004722:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
60004726:	f7fd ffff 	bl	60002728 <__aeabi_dsub>
6000472a:	4602      	mov	r2, r0
6000472c:	460b      	mov	r3, r1
6000472e:	4640      	mov	r0, r8
60004730:	4649      	mov	r1, r9
60004732:	f7fd fff9 	bl	60002728 <__aeabi_dsub>
60004736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
6000473a:	f7fe f9ad 	bl	60002a98 <__aeabi_dmul>
6000473e:	4632      	mov	r2, r6
60004740:	4680      	mov	r8, r0
60004742:	4689      	mov	r9, r1
60004744:	463b      	mov	r3, r7
60004746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
6000474a:	f7fe f9a5 	bl	60002a98 <__aeabi_dmul>
6000474e:	4602      	mov	r2, r0
60004750:	460b      	mov	r3, r1
60004752:	4640      	mov	r0, r8
60004754:	4649      	mov	r1, r9
60004756:	f7fd ffe9 	bl	6000272c <__adddf3>
6000475a:	4680      	mov	r8, r0
6000475c:	4689      	mov	r9, r1
6000475e:	4602      	mov	r2, r0
60004760:	460b      	mov	r3, r1
60004762:	4650      	mov	r0, sl
60004764:	4659      	mov	r1, fp
60004766:	f7fd ffe1 	bl	6000272c <__adddf3>
6000476a:	2600      	movs	r6, #0
6000476c:	a320      	add	r3, pc, #128	; (adr r3, 600047f0 <__ieee754_pow+0x358>)
6000476e:	e9d3 2300 	ldrd	r2, r3, [r3]
60004772:	4630      	mov	r0, r6
60004774:	460f      	mov	r7, r1
60004776:	f7fe f98f 	bl	60002a98 <__aeabi_dmul>
6000477a:	4652      	mov	r2, sl
6000477c:	465b      	mov	r3, fp
6000477e:	4682      	mov	sl, r0
60004780:	468b      	mov	fp, r1
60004782:	4630      	mov	r0, r6
60004784:	4639      	mov	r1, r7
60004786:	f7fd ffcf 	bl	60002728 <__aeabi_dsub>
6000478a:	4602      	mov	r2, r0
6000478c:	460b      	mov	r3, r1
6000478e:	4640      	mov	r0, r8
60004790:	4649      	mov	r1, r9
60004792:	f7fd ffc9 	bl	60002728 <__aeabi_dsub>
60004796:	a318      	add	r3, pc, #96	; (adr r3, 600047f8 <__ieee754_pow+0x360>)
60004798:	e9d3 2300 	ldrd	r2, r3, [r3]
6000479c:	f7fe f97c 	bl	60002a98 <__aeabi_dmul>
600047a0:	a317      	add	r3, pc, #92	; (adr r3, 60004800 <__ieee754_pow+0x368>)
600047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
600047a6:	4680      	mov	r8, r0
600047a8:	4689      	mov	r9, r1
600047aa:	4630      	mov	r0, r6
600047ac:	4639      	mov	r1, r7
600047ae:	f7fe f973 	bl	60002a98 <__aeabi_dmul>
600047b2:	4602      	mov	r2, r0
600047b4:	460b      	mov	r3, r1
600047b6:	4640      	mov	r0, r8
600047b8:	4649      	mov	r1, r9
600047ba:	e033      	b.n	60004824 <__ieee754_pow+0x38c>
600047bc:	f3af 8000 	nop.w
600047c0:	4a454eef 	.word	0x4a454eef
600047c4:	3fca7e28 	.word	0x3fca7e28
600047c8:	93c9db65 	.word	0x93c9db65
600047cc:	3fcd864a 	.word	0x3fcd864a
600047d0:	a91d4101 	.word	0xa91d4101
600047d4:	3fd17460 	.word	0x3fd17460
600047d8:	518f264d 	.word	0x518f264d
600047dc:	3fd55555 	.word	0x3fd55555
600047e0:	db6fabff 	.word	0xdb6fabff
600047e4:	3fdb6db6 	.word	0x3fdb6db6
600047e8:	33333303 	.word	0x33333303
600047ec:	3fe33333 	.word	0x3fe33333
600047f0:	e0000000 	.word	0xe0000000
600047f4:	3feec709 	.word	0x3feec709
600047f8:	dc3a03fd 	.word	0xdc3a03fd
600047fc:	3feec709 	.word	0x3feec709
60004800:	145b01f5 	.word	0x145b01f5
60004804:	be3e2fe0 	.word	0xbe3e2fe0
60004808:	7ff00000 	.word	0x7ff00000
6000480c:	41e00000 	.word	0x41e00000
60004810:	43400000 	.word	0x43400000
60004814:	0003988e 	.word	0x0003988e
60004818:	000bb679 	.word	0x000bb679
6000481c:	3ff00000 	.word	0x3ff00000
60004820:	40080000 	.word	0x40080000
60004824:	f7fd ff82 	bl	6000272c <__adddf3>
60004828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
6000482c:	f7fd ff7e 	bl	6000272c <__adddf3>
60004830:	4680      	mov	r8, r0
60004832:	980b      	ldr	r0, [sp, #44]	; 0x2c
60004834:	4689      	mov	r9, r1
60004836:	f7fe f8c5 	bl	600029c4 <__aeabi_i2d>
6000483a:	4642      	mov	r2, r8
6000483c:	4606      	mov	r6, r0
6000483e:	460f      	mov	r7, r1
60004840:	464b      	mov	r3, r9
60004842:	4650      	mov	r0, sl
60004844:	4659      	mov	r1, fp
60004846:	e9cd ab04 	strd	sl, fp, [sp, #16]
6000484a:	f7fd ff6f 	bl	6000272c <__adddf3>
6000484e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
60004852:	f7fd ff6b 	bl	6000272c <__adddf3>
60004856:	4632      	mov	r2, r6
60004858:	463b      	mov	r3, r7
6000485a:	f7fd ff67 	bl	6000272c <__adddf3>
6000485e:	2000      	movs	r0, #0
60004860:	4632      	mov	r2, r6
60004862:	463b      	mov	r3, r7
60004864:	4682      	mov	sl, r0
60004866:	468b      	mov	fp, r1
60004868:	f7fd ff5e 	bl	60002728 <__aeabi_dsub>
6000486c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
60004870:	f7fd ff5a 	bl	60002728 <__aeabi_dsub>
60004874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
60004878:	f7fd ff56 	bl	60002728 <__aeabi_dsub>
6000487c:	4602      	mov	r2, r0
6000487e:	460b      	mov	r3, r1
60004880:	4640      	mov	r0, r8
60004882:	4649      	mov	r1, r9
60004884:	f7fd ff50 	bl	60002728 <__aeabi_dsub>
60004888:	e9cd 0102 	strd	r0, r1, [sp, #8]
6000488c:	9b00      	ldr	r3, [sp, #0]
6000488e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
60004890:	3b01      	subs	r3, #1
60004892:	4313      	orrs	r3, r2
60004894:	bf14      	ite	ne
60004896:	4bc8      	ldrne	r3, [pc, #800]	; (60004bb8 <__ieee754_pow+0x720>)
60004898:	4bc8      	ldreq	r3, [pc, #800]	; (60004bbc <__ieee754_pow+0x724>)
6000489a:	2200      	movs	r2, #0
6000489c:	e9cd 2304 	strd	r2, r3, [sp, #16]
600048a0:	2300      	movs	r3, #0
600048a2:	e9cd 4500 	strd	r4, r5, [sp]
600048a6:	9300      	str	r3, [sp, #0]
600048a8:	e9dd 8900 	ldrd	r8, r9, [sp]
600048ac:	4620      	mov	r0, r4
600048ae:	4642      	mov	r2, r8
600048b0:	464b      	mov	r3, r9
600048b2:	4629      	mov	r1, r5
600048b4:	f7fd ff38 	bl	60002728 <__aeabi_dsub>
600048b8:	465b      	mov	r3, fp
600048ba:	4652      	mov	r2, sl
600048bc:	f7fe f8ec 	bl	60002a98 <__aeabi_dmul>
600048c0:	4622      	mov	r2, r4
600048c2:	4606      	mov	r6, r0
600048c4:	460f      	mov	r7, r1
600048c6:	462b      	mov	r3, r5
600048c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
600048cc:	f7fe f8e4 	bl	60002a98 <__aeabi_dmul>
600048d0:	4602      	mov	r2, r0
600048d2:	460b      	mov	r3, r1
600048d4:	4630      	mov	r0, r6
600048d6:	4639      	mov	r1, r7
600048d8:	f7fd ff28 	bl	6000272c <__adddf3>
600048dc:	4642      	mov	r2, r8
600048de:	4604      	mov	r4, r0
600048e0:	460d      	mov	r5, r1
600048e2:	464b      	mov	r3, r9
600048e4:	4659      	mov	r1, fp
600048e6:	4650      	mov	r0, sl
600048e8:	f7fe f8d6 	bl	60002a98 <__aeabi_dmul>
600048ec:	460b      	mov	r3, r1
600048ee:	4602      	mov	r2, r0
600048f0:	4606      	mov	r6, r0
600048f2:	460f      	mov	r7, r1
600048f4:	4620      	mov	r0, r4
600048f6:	4629      	mov	r1, r5
600048f8:	f7fd ff18 	bl	6000272c <__adddf3>
600048fc:	4bb0      	ldr	r3, [pc, #704]	; (60004bc0 <__ieee754_pow+0x728>)
600048fe:	4299      	cmp	r1, r3
60004900:	46a0      	mov	r8, r4
60004902:	46a9      	mov	r9, r5
60004904:	4604      	mov	r4, r0
60004906:	460d      	mov	r5, r1
60004908:	468b      	mov	fp, r1
6000490a:	f340 820c 	ble.w	60004d26 <__ieee754_pow+0x88e>
6000490e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
60004912:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
60004916:	4303      	orrs	r3, r0
60004918:	f040 82a2 	bne.w	60004e60 <__ieee754_pow+0x9c8>
6000491c:	a394      	add	r3, pc, #592	; (adr r3, 60004b70 <__ieee754_pow+0x6d8>)
6000491e:	e9d3 2300 	ldrd	r2, r3, [r3]
60004922:	4640      	mov	r0, r8
60004924:	4649      	mov	r1, r9
60004926:	f7fd ff01 	bl	6000272c <__adddf3>
6000492a:	4632      	mov	r2, r6
6000492c:	e9cd 0100 	strd	r0, r1, [sp]
60004930:	463b      	mov	r3, r7
60004932:	4620      	mov	r0, r4
60004934:	4629      	mov	r1, r5
60004936:	f7fd fef7 	bl	60002728 <__aeabi_dsub>
6000493a:	4602      	mov	r2, r0
6000493c:	460b      	mov	r3, r1
6000493e:	e9dd 0100 	ldrd	r0, r1, [sp]
60004942:	f7fe fb39 	bl	60002fb8 <__aeabi_dcmpgt>
60004946:	2800      	cmp	r0, #0
60004948:	f040 828a 	bne.w	60004e60 <__ieee754_pow+0x9c8>
6000494c:	f44f 7100 	mov.w	r1, #512	; 0x200
60004950:	4459      	add	r1, fp
60004952:	f3c1 530a 	ubfx	r3, r1, #20, #11
60004956:	489b      	ldr	r0, [pc, #620]	; (60004bc4 <__ieee754_pow+0x72c>)
60004958:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
6000495c:	f3c1 0213 	ubfx	r2, r1, #0, #20
60004960:	4118      	asrs	r0, r3
60004962:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
60004966:	f1c3 0314 	rsb	r3, r3, #20
6000496a:	fa42 fa03 	asr.w	sl, r2, r3
6000496e:	f1bb 0f00 	cmp.w	fp, #0
60004972:	ea00 0301 	and.w	r3, r0, r1
60004976:	f04f 0200 	mov.w	r2, #0
6000497a:	4630      	mov	r0, r6
6000497c:	4639      	mov	r1, r7
6000497e:	bfb8      	it	lt
60004980:	f1ca 0a00 	rsblt	sl, sl, #0
60004984:	f7fd fed0 	bl	60002728 <__aeabi_dsub>
60004988:	4602      	mov	r2, r0
6000498a:	460b      	mov	r3, r1
6000498c:	4606      	mov	r6, r0
6000498e:	460f      	mov	r7, r1
60004990:	4640      	mov	r0, r8
60004992:	4649      	mov	r1, r9
60004994:	f7fd feca 	bl	6000272c <__adddf3>
60004998:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
6000499c:	460d      	mov	r5, r1
6000499e:	2400      	movs	r4, #0
600049a0:	a375      	add	r3, pc, #468	; (adr r3, 60004b78 <__ieee754_pow+0x6e0>)
600049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
600049a6:	4620      	mov	r0, r4
600049a8:	4629      	mov	r1, r5
600049aa:	f7fe f875 	bl	60002a98 <__aeabi_dmul>
600049ae:	4632      	mov	r2, r6
600049b0:	e9cd 0100 	strd	r0, r1, [sp]
600049b4:	463b      	mov	r3, r7
600049b6:	4620      	mov	r0, r4
600049b8:	4629      	mov	r1, r5
600049ba:	f7fd feb5 	bl	60002728 <__aeabi_dsub>
600049be:	4602      	mov	r2, r0
600049c0:	460b      	mov	r3, r1
600049c2:	4640      	mov	r0, r8
600049c4:	4649      	mov	r1, r9
600049c6:	f7fd feaf 	bl	60002728 <__aeabi_dsub>
600049ca:	a36d      	add	r3, pc, #436	; (adr r3, 60004b80 <__ieee754_pow+0x6e8>)
600049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
600049d0:	f7fe f862 	bl	60002a98 <__aeabi_dmul>
600049d4:	a36c      	add	r3, pc, #432	; (adr r3, 60004b88 <__ieee754_pow+0x6f0>)
600049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
600049da:	4606      	mov	r6, r0
600049dc:	460f      	mov	r7, r1
600049de:	4620      	mov	r0, r4
600049e0:	4629      	mov	r1, r5
600049e2:	f7fe f859 	bl	60002a98 <__aeabi_dmul>
600049e6:	4602      	mov	r2, r0
600049e8:	460b      	mov	r3, r1
600049ea:	4630      	mov	r0, r6
600049ec:	4639      	mov	r1, r7
600049ee:	f7fd fe9d 	bl	6000272c <__adddf3>
600049f2:	e9dd 8900 	ldrd	r8, r9, [sp]
600049f6:	4606      	mov	r6, r0
600049f8:	460f      	mov	r7, r1
600049fa:	4602      	mov	r2, r0
600049fc:	460b      	mov	r3, r1
600049fe:	4640      	mov	r0, r8
60004a00:	4649      	mov	r1, r9
60004a02:	f7fd fe93 	bl	6000272c <__adddf3>
60004a06:	4642      	mov	r2, r8
60004a08:	464b      	mov	r3, r9
60004a0a:	4604      	mov	r4, r0
60004a0c:	460d      	mov	r5, r1
60004a0e:	f7fd fe8b 	bl	60002728 <__aeabi_dsub>
60004a12:	4602      	mov	r2, r0
60004a14:	460b      	mov	r3, r1
60004a16:	4630      	mov	r0, r6
60004a18:	4639      	mov	r1, r7
60004a1a:	f7fd fe85 	bl	60002728 <__aeabi_dsub>
60004a1e:	4622      	mov	r2, r4
60004a20:	4680      	mov	r8, r0
60004a22:	4689      	mov	r9, r1
60004a24:	462b      	mov	r3, r5
60004a26:	4620      	mov	r0, r4
60004a28:	4629      	mov	r1, r5
60004a2a:	f7fe f835 	bl	60002a98 <__aeabi_dmul>
60004a2e:	a358      	add	r3, pc, #352	; (adr r3, 60004b90 <__ieee754_pow+0x6f8>)
60004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
60004a34:	4606      	mov	r6, r0
60004a36:	460f      	mov	r7, r1
60004a38:	f7fe f82e 	bl	60002a98 <__aeabi_dmul>
60004a3c:	a356      	add	r3, pc, #344	; (adr r3, 60004b98 <__ieee754_pow+0x700>)
60004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
60004a42:	f7fd fe71 	bl	60002728 <__aeabi_dsub>
60004a46:	4632      	mov	r2, r6
60004a48:	463b      	mov	r3, r7
60004a4a:	f7fe f825 	bl	60002a98 <__aeabi_dmul>
60004a4e:	a354      	add	r3, pc, #336	; (adr r3, 60004ba0 <__ieee754_pow+0x708>)
60004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
60004a54:	f7fd fe6a 	bl	6000272c <__adddf3>
60004a58:	4632      	mov	r2, r6
60004a5a:	463b      	mov	r3, r7
60004a5c:	f7fe f81c 	bl	60002a98 <__aeabi_dmul>
60004a60:	a351      	add	r3, pc, #324	; (adr r3, 60004ba8 <__ieee754_pow+0x710>)
60004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
60004a66:	f7fd fe5f 	bl	60002728 <__aeabi_dsub>
60004a6a:	4632      	mov	r2, r6
60004a6c:	463b      	mov	r3, r7
60004a6e:	f7fe f813 	bl	60002a98 <__aeabi_dmul>
60004a72:	a34f      	add	r3, pc, #316	; (adr r3, 60004bb0 <__ieee754_pow+0x718>)
60004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
60004a78:	f7fd fe58 	bl	6000272c <__adddf3>
60004a7c:	4632      	mov	r2, r6
60004a7e:	463b      	mov	r3, r7
60004a80:	f7fe f80a 	bl	60002a98 <__aeabi_dmul>
60004a84:	4602      	mov	r2, r0
60004a86:	460b      	mov	r3, r1
60004a88:	4620      	mov	r0, r4
60004a8a:	4629      	mov	r1, r5
60004a8c:	f7fd fe4c 	bl	60002728 <__aeabi_dsub>
60004a90:	4606      	mov	r6, r0
60004a92:	460f      	mov	r7, r1
60004a94:	4602      	mov	r2, r0
60004a96:	460b      	mov	r3, r1
60004a98:	4620      	mov	r0, r4
60004a9a:	4629      	mov	r1, r5
60004a9c:	f7fd fffc 	bl	60002a98 <__aeabi_dmul>
60004aa0:	2200      	movs	r2, #0
60004aa2:	e9cd 0100 	strd	r0, r1, [sp]
60004aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
60004aaa:	4630      	mov	r0, r6
60004aac:	4639      	mov	r1, r7
60004aae:	f7fd fe3b 	bl	60002728 <__aeabi_dsub>
60004ab2:	4602      	mov	r2, r0
60004ab4:	460b      	mov	r3, r1
60004ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
60004aba:	f7fe f917 	bl	60002cec <__aeabi_ddiv>
60004abe:	4642      	mov	r2, r8
60004ac0:	4606      	mov	r6, r0
60004ac2:	460f      	mov	r7, r1
60004ac4:	464b      	mov	r3, r9
60004ac6:	4620      	mov	r0, r4
60004ac8:	4629      	mov	r1, r5
60004aca:	f7fd ffe5 	bl	60002a98 <__aeabi_dmul>
60004ace:	4642      	mov	r2, r8
60004ad0:	464b      	mov	r3, r9
60004ad2:	f7fd fe2b 	bl	6000272c <__adddf3>
60004ad6:	4602      	mov	r2, r0
60004ad8:	460b      	mov	r3, r1
60004ada:	4630      	mov	r0, r6
60004adc:	4639      	mov	r1, r7
60004ade:	f7fd fe23 	bl	60002728 <__aeabi_dsub>
60004ae2:	4622      	mov	r2, r4
60004ae4:	462b      	mov	r3, r5
60004ae6:	f7fd fe1f 	bl	60002728 <__aeabi_dsub>
60004aea:	4602      	mov	r2, r0
60004aec:	460b      	mov	r3, r1
60004aee:	2000      	movs	r0, #0
60004af0:	4931      	ldr	r1, [pc, #196]	; (60004bb8 <__ieee754_pow+0x720>)
60004af2:	f7fd fe19 	bl	60002728 <__aeabi_dsub>
60004af6:	460c      	mov	r4, r1
60004af8:	445c      	add	r4, fp
60004afa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
60004afe:	f2c0 8223 	blt.w	60004f48 <__ieee754_pow+0xab0>
60004b02:	4621      	mov	r1, r4
60004b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
60004b08:	f7fd ffc6 	bl	60002a98 <__aeabi_dmul>
60004b0c:	e007      	b.n	60004b1e <__ieee754_pow+0x686>
60004b0e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
60004b12:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
60004b16:	431e      	orrs	r6, r3
60004b18:	d107      	bne.n	60004b2a <__ieee754_pow+0x692>
60004b1a:	4927      	ldr	r1, [pc, #156]	; (60004bb8 <__ieee754_pow+0x720>)
60004b1c:	2000      	movs	r0, #0
60004b1e:	b013      	add	sp, #76	; 0x4c
60004b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60004b24:	b90b      	cbnz	r3, 60004b2a <__ieee754_pow+0x692>
60004b26:	42b7      	cmp	r7, r6
60004b28:	d905      	bls.n	60004b36 <__ieee754_pow+0x69e>
60004b2a:	4827      	ldr	r0, [pc, #156]	; (60004bc8 <__ieee754_pow+0x730>)
60004b2c:	b013      	add	sp, #76	; 0x4c
60004b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60004b32:	f00e b867 	b.w	60012c04 <nan>
60004b36:	f47f acce 	bne.w	600044d6 <__ieee754_pow+0x3e>
60004b3a:	2c00      	cmp	r4, #0
60004b3c:	d1f5      	bne.n	60004b2a <__ieee754_pow+0x692>
60004b3e:	4b23      	ldr	r3, [pc, #140]	; (60004bcc <__ieee754_pow+0x734>)
60004b40:	429e      	cmp	r6, r3
60004b42:	f240 8185 	bls.w	60004e50 <__ieee754_pow+0x9b8>
60004b46:	f1ba 0f00 	cmp.w	sl, #0
60004b4a:	f2c0 80db 	blt.w	60004d04 <__ieee754_pow+0x86c>
60004b4e:	4620      	mov	r0, r4
60004b50:	4629      	mov	r1, r5
60004b52:	e7e4      	b.n	60004b1e <__ieee754_pow+0x686>
60004b54:	4818      	ldr	r0, [pc, #96]	; (60004bb8 <__ieee754_pow+0x720>)
60004b56:	4287      	cmp	r7, r0
60004b58:	f040 80d7 	bne.w	60004d0a <__ieee754_pow+0x872>
60004b5c:	f1ba 0f00 	cmp.w	sl, #0
60004b60:	f2c0 81ce 	blt.w	60004f00 <__ieee754_pow+0xa68>
60004b64:	4640      	mov	r0, r8
60004b66:	4649      	mov	r1, r9
60004b68:	e7d9      	b.n	60004b1e <__ieee754_pow+0x686>
60004b6a:	bf00      	nop
60004b6c:	f3af 8000 	nop.w
60004b70:	652b82fe 	.word	0x652b82fe
60004b74:	3c971547 	.word	0x3c971547
60004b78:	00000000 	.word	0x00000000
60004b7c:	3fe62e43 	.word	0x3fe62e43
60004b80:	fefa39ef 	.word	0xfefa39ef
60004b84:	3fe62e42 	.word	0x3fe62e42
60004b88:	0ca86c39 	.word	0x0ca86c39
60004b8c:	be205c61 	.word	0xbe205c61
60004b90:	72bea4d0 	.word	0x72bea4d0
60004b94:	3e663769 	.word	0x3e663769
60004b98:	c5d26bf1 	.word	0xc5d26bf1
60004b9c:	3ebbbd41 	.word	0x3ebbbd41
60004ba0:	af25de2c 	.word	0xaf25de2c
60004ba4:	3f11566a 	.word	0x3f11566a
60004ba8:	16bebd93 	.word	0x16bebd93
60004bac:	3f66c16c 	.word	0x3f66c16c
60004bb0:	5555553e 	.word	0x5555553e
60004bb4:	3fc55555 	.word	0x3fc55555
60004bb8:	3ff00000 	.word	0x3ff00000
60004bbc:	bff00000 	.word	0xbff00000
60004bc0:	408fffff 	.word	0x408fffff
60004bc4:	fff00000 	.word	0xfff00000
60004bc8:	6001be00 	.word	0x6001be00
60004bcc:	3fefffff 	.word	0x3fefffff
60004bd0:	48bf      	ldr	r0, [pc, #764]	; (60004ed0 <__ieee754_pow+0xa38>)
60004bd2:	4287      	cmp	r7, r0
60004bd4:	d870      	bhi.n	60004cb8 <__ieee754_pow+0x820>
60004bd6:	48bf      	ldr	r0, [pc, #764]	; (60004ed4 <__ieee754_pow+0xa3c>)
60004bd8:	4287      	cmp	r7, r0
60004bda:	d90d      	bls.n	60004bf8 <__ieee754_pow+0x760>
60004bdc:	1538      	asrs	r0, r7, #20
60004bde:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
60004be2:	2814      	cmp	r0, #20
60004be4:	f340 8149 	ble.w	60004e7a <__ieee754_pow+0x9e2>
60004be8:	f1c0 0034 	rsb	r0, r0, #52	; 0x34
60004bec:	fa21 fc00 	lsr.w	ip, r1, r0
60004bf0:	fa0c f000 	lsl.w	r0, ip, r0
60004bf4:	4288      	cmp	r0, r1
60004bf6:	d02a      	beq.n	60004c4e <__ieee754_pow+0x7b6>
60004bf8:	2900      	cmp	r1, #0
60004bfa:	f040 80b7 	bne.w	60004d6c <__ieee754_pow+0x8d4>
60004bfe:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
60004c02:	d02f      	beq.n	60004c64 <__ieee754_pow+0x7cc>
60004c04:	9100      	str	r1, [sp, #0]
60004c06:	4640      	mov	r0, r8
60004c08:	4649      	mov	r1, r9
60004c0a:	9304      	str	r3, [sp, #16]
60004c0c:	9202      	str	r2, [sp, #8]
60004c0e:	f00d ffef 	bl	60012bf0 <fabs>
60004c12:	9b04      	ldr	r3, [sp, #16]
60004c14:	9a02      	ldr	r2, [sp, #8]
60004c16:	b92b      	cbnz	r3, 60004c24 <__ieee754_pow+0x78c>
60004c18:	4baf      	ldr	r3, [pc, #700]	; (60004ed8 <__ieee754_pow+0xa40>)
60004c1a:	f02b 4c40 	bic.w	ip, fp, #3221225472	; 0xc0000000
60004c1e:	459c      	cmp	ip, r3
60004c20:	d032      	beq.n	60004c88 <__ieee754_pow+0x7f0>
60004c22:	b38e      	cbz	r6, 60004c88 <__ieee754_pow+0x7f0>
60004c24:	f8dd c000 	ldr.w	ip, [sp]
60004c28:	ea4f 73db 	mov.w	r3, fp, lsr #31
60004c2c:	3b01      	subs	r3, #1
60004c2e:	930a      	str	r3, [sp, #40]	; 0x28
60004c30:	ea5c 0303 	orrs.w	r3, ip, r3
60004c34:	f47f ac67 	bne.w	60004506 <__ieee754_pow+0x6e>
60004c38:	4642      	mov	r2, r8
60004c3a:	464b      	mov	r3, r9
60004c3c:	4610      	mov	r0, r2
60004c3e:	4619      	mov	r1, r3
60004c40:	f7fd fd72 	bl	60002728 <__aeabi_dsub>
60004c44:	4602      	mov	r2, r0
60004c46:	460b      	mov	r3, r1
60004c48:	f7fe f850 	bl	60002cec <__aeabi_ddiv>
60004c4c:	e767      	b.n	60004b1e <__ieee754_pow+0x686>
60004c4e:	f00c 0c01 	and.w	ip, ip, #1
60004c52:	f1cc 0002 	rsb	r0, ip, #2
60004c56:	9000      	str	r0, [sp, #0]
60004c58:	2900      	cmp	r1, #0
60004c5a:	f47f ac45 	bne.w	600044e8 <__ieee754_pow+0x50>
60004c5e:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
60004c62:	d1d0      	bne.n	60004c06 <__ieee754_pow+0x76e>
60004c64:	4642      	mov	r2, r8
60004c66:	464b      	mov	r3, r9
60004c68:	4640      	mov	r0, r8
60004c6a:	4649      	mov	r1, r9
60004c6c:	f7fd ff14 	bl	60002a98 <__aeabi_dmul>
60004c70:	e755      	b.n	60004b1e <__ieee754_pow+0x686>
60004c72:	2c00      	cmp	r4, #0
60004c74:	f47f af4b 	bne.w	60004b0e <__ieee754_pow+0x676>
60004c78:	f106 4240 	add.w	r2, r6, #3221225472	; 0xc0000000
60004c7c:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
60004c80:	431a      	orrs	r2, r3
60004c82:	f43f af4a 	beq.w	60004b1a <__ieee754_pow+0x682>
60004c86:	e75a      	b.n	60004b3e <__ieee754_pow+0x6a6>
60004c88:	f1ba 0f00 	cmp.w	sl, #0
60004c8c:	da05      	bge.n	60004c9a <__ieee754_pow+0x802>
60004c8e:	4602      	mov	r2, r0
60004c90:	460b      	mov	r3, r1
60004c92:	2000      	movs	r0, #0
60004c94:	4990      	ldr	r1, [pc, #576]	; (60004ed8 <__ieee754_pow+0xa40>)
60004c96:	f7fe f829 	bl	60002cec <__aeabi_ddiv>
60004c9a:	f1bb 0f00 	cmp.w	fp, #0
60004c9e:	f6bf af3e 	bge.w	60004b1e <__ieee754_pow+0x686>
60004ca2:	9b00      	ldr	r3, [sp, #0]
60004ca4:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
60004ca8:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
60004cac:	431e      	orrs	r6, r3
60004cae:	f040 8131 	bne.w	60004f14 <__ieee754_pow+0xa7c>
60004cb2:	4602      	mov	r2, r0
60004cb4:	460b      	mov	r3, r1
60004cb6:	e7c1      	b.n	60004c3c <__ieee754_pow+0x7a4>
60004cb8:	2900      	cmp	r1, #0
60004cba:	f000 8149 	beq.w	60004f50 <__ieee754_pow+0xab8>
60004cbe:	4640      	mov	r0, r8
60004cc0:	4649      	mov	r1, r9
60004cc2:	9302      	str	r3, [sp, #8]
60004cc4:	9200      	str	r2, [sp, #0]
60004cc6:	f00d ff93 	bl	60012bf0 <fabs>
60004cca:	9b02      	ldr	r3, [sp, #8]
60004ccc:	9a00      	ldr	r2, [sp, #0]
60004cce:	2b00      	cmp	r3, #0
60004cd0:	f000 811d 	beq.w	60004f0e <__ieee754_pow+0xa76>
60004cd4:	2302      	movs	r3, #2
60004cd6:	9300      	str	r3, [sp, #0]
60004cd8:	2300      	movs	r3, #0
60004cda:	930a      	str	r3, [sp, #40]	; 0x28
60004cdc:	4b7f      	ldr	r3, [pc, #508]	; (60004edc <__ieee754_pow+0xa44>)
60004cde:	429f      	cmp	r7, r3
60004ce0:	4b7c      	ldr	r3, [pc, #496]	; (60004ed4 <__ieee754_pow+0xa3c>)
60004ce2:	d94f      	bls.n	60004d84 <__ieee754_pow+0x8ec>
60004ce4:	429e      	cmp	r6, r3
60004ce6:	d90a      	bls.n	60004cfe <__ieee754_pow+0x866>
60004ce8:	f1ba 0f00 	cmp.w	sl, #0
60004cec:	dd0a      	ble.n	60004d04 <__ieee754_pow+0x86c>
60004cee:	a36c      	add	r3, pc, #432	; (adr r3, 60004ea0 <__ieee754_pow+0xa08>)
60004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
60004cf4:	4610      	mov	r0, r2
60004cf6:	4619      	mov	r1, r3
60004cf8:	f7fd fece 	bl	60002a98 <__aeabi_dmul>
60004cfc:	e70f      	b.n	60004b1e <__ieee754_pow+0x686>
60004cfe:	f1ba 0f00 	cmp.w	sl, #0
60004d02:	dbf4      	blt.n	60004cee <__ieee754_pow+0x856>
60004d04:	2000      	movs	r0, #0
60004d06:	2100      	movs	r1, #0
60004d08:	e709      	b.n	60004b1e <__ieee754_pow+0x686>
60004d0a:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
60004d0e:	d0a9      	beq.n	60004c64 <__ieee754_pow+0x7cc>
60004d10:	4873      	ldr	r0, [pc, #460]	; (60004ee0 <__ieee754_pow+0xa48>)
60004d12:	4582      	cmp	sl, r0
60004d14:	f47f af76 	bne.w	60004c04 <__ieee754_pow+0x76c>
60004d18:	4640      	mov	r0, r8
60004d1a:	4649      	mov	r1, r9
60004d1c:	b013      	add	sp, #76	; 0x4c
60004d1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60004d22:	f00d bea3 	b.w	60012a6c <__ieee754_sqrt>
60004d26:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 60004ee4 <__ieee754_pow+0xa4c>
60004d2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
60004d2e:	4563      	cmp	r3, ip
60004d30:	f240 80de 	bls.w	60004ef0 <__ieee754_pow+0xa58>
60004d34:	4b6c      	ldr	r3, [pc, #432]	; (60004ee8 <__ieee754_pow+0xa50>)
60004d36:	440b      	add	r3, r1
60004d38:	4303      	orrs	r3, r0
60004d3a:	d10a      	bne.n	60004d52 <__ieee754_pow+0x8ba>
60004d3c:	4632      	mov	r2, r6
60004d3e:	463b      	mov	r3, r7
60004d40:	f7fd fcf2 	bl	60002728 <__aeabi_dsub>
60004d44:	4642      	mov	r2, r8
60004d46:	464b      	mov	r3, r9
60004d48:	f7fe f92c 	bl	60002fa4 <__aeabi_dcmpge>
60004d4c:	2800      	cmp	r0, #0
60004d4e:	f43f adfd 	beq.w	6000494c <__ieee754_pow+0x4b4>
60004d52:	a355      	add	r3, pc, #340	; (adr r3, 60004ea8 <__ieee754_pow+0xa10>)
60004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
60004d58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
60004d5c:	f7fd fe9c 	bl	60002a98 <__aeabi_dmul>
60004d60:	a351      	add	r3, pc, #324	; (adr r3, 60004ea8 <__ieee754_pow+0xa10>)
60004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
60004d66:	f7fd fe97 	bl	60002a98 <__aeabi_dmul>
60004d6a:	e6d8      	b.n	60004b1e <__ieee754_pow+0x686>
60004d6c:	4640      	mov	r0, r8
60004d6e:	4649      	mov	r1, r9
60004d70:	9300      	str	r3, [sp, #0]
60004d72:	9202      	str	r2, [sp, #8]
60004d74:	f00d ff3c 	bl	60012bf0 <fabs>
60004d78:	9b00      	ldr	r3, [sp, #0]
60004d7a:	2b00      	cmp	r3, #0
60004d7c:	f47f af5c 	bne.w	60004c38 <__ieee754_pow+0x7a0>
60004d80:	9a02      	ldr	r2, [sp, #8]
60004d82:	e749      	b.n	60004c18 <__ieee754_pow+0x780>
60004d84:	429e      	cmp	r6, r3
60004d86:	d3ba      	bcc.n	60004cfe <__ieee754_pow+0x866>
60004d88:	4b53      	ldr	r3, [pc, #332]	; (60004ed8 <__ieee754_pow+0xa40>)
60004d8a:	429e      	cmp	r6, r3
60004d8c:	d8ac      	bhi.n	60004ce8 <__ieee754_pow+0x850>
60004d8e:	4b52      	ldr	r3, [pc, #328]	; (60004ed8 <__ieee754_pow+0xa40>)
60004d90:	2200      	movs	r2, #0
60004d92:	f7fd fcc9 	bl	60002728 <__aeabi_dsub>
60004d96:	a346      	add	r3, pc, #280	; (adr r3, 60004eb0 <__ieee754_pow+0xa18>)
60004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
60004d9c:	4606      	mov	r6, r0
60004d9e:	460f      	mov	r7, r1
60004da0:	f7fd fe7a 	bl	60002a98 <__aeabi_dmul>
60004da4:	a344      	add	r3, pc, #272	; (adr r3, 60004eb8 <__ieee754_pow+0xa20>)
60004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
60004daa:	4680      	mov	r8, r0
60004dac:	4689      	mov	r9, r1
60004dae:	4630      	mov	r0, r6
60004db0:	4639      	mov	r1, r7
60004db2:	f7fd fe71 	bl	60002a98 <__aeabi_dmul>
60004db6:	4b4d      	ldr	r3, [pc, #308]	; (60004eec <__ieee754_pow+0xa54>)
60004db8:	4682      	mov	sl, r0
60004dba:	468b      	mov	fp, r1
60004dbc:	2200      	movs	r2, #0
60004dbe:	4630      	mov	r0, r6
60004dc0:	4639      	mov	r1, r7
60004dc2:	f7fd fe69 	bl	60002a98 <__aeabi_dmul>
60004dc6:	4602      	mov	r2, r0
60004dc8:	460b      	mov	r3, r1
60004dca:	a13d      	add	r1, pc, #244	; (adr r1, 60004ec0 <__ieee754_pow+0xa28>)
60004dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
60004dd0:	f7fd fcaa 	bl	60002728 <__aeabi_dsub>
60004dd4:	4632      	mov	r2, r6
60004dd6:	463b      	mov	r3, r7
60004dd8:	f7fd fe5e 	bl	60002a98 <__aeabi_dmul>
60004ddc:	4602      	mov	r2, r0
60004dde:	460b      	mov	r3, r1
60004de0:	2000      	movs	r0, #0
60004de2:	493f      	ldr	r1, [pc, #252]	; (60004ee0 <__ieee754_pow+0xa48>)
60004de4:	f7fd fca0 	bl	60002728 <__aeabi_dsub>
60004de8:	4632      	mov	r2, r6
60004dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
60004dee:	463b      	mov	r3, r7
60004df0:	4630      	mov	r0, r6
60004df2:	4639      	mov	r1, r7
60004df4:	f7fd fe50 	bl	60002a98 <__aeabi_dmul>
60004df8:	4602      	mov	r2, r0
60004dfa:	460b      	mov	r3, r1
60004dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
60004e00:	f7fd fe4a 	bl	60002a98 <__aeabi_dmul>
60004e04:	a330      	add	r3, pc, #192	; (adr r3, 60004ec8 <__ieee754_pow+0xa30>)
60004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
60004e0a:	f7fd fe45 	bl	60002a98 <__aeabi_dmul>
60004e0e:	4602      	mov	r2, r0
60004e10:	460b      	mov	r3, r1
60004e12:	4650      	mov	r0, sl
60004e14:	4659      	mov	r1, fp
60004e16:	f7fd fc87 	bl	60002728 <__aeabi_dsub>
60004e1a:	4602      	mov	r2, r0
60004e1c:	460b      	mov	r3, r1
60004e1e:	4606      	mov	r6, r0
60004e20:	460f      	mov	r7, r1
60004e22:	4640      	mov	r0, r8
60004e24:	4649      	mov	r1, r9
60004e26:	f7fd fc81 	bl	6000272c <__adddf3>
60004e2a:	2000      	movs	r0, #0
60004e2c:	4642      	mov	r2, r8
60004e2e:	464b      	mov	r3, r9
60004e30:	4682      	mov	sl, r0
60004e32:	468b      	mov	fp, r1
60004e34:	f7fd fc78 	bl	60002728 <__aeabi_dsub>
60004e38:	4602      	mov	r2, r0
60004e3a:	460b      	mov	r3, r1
60004e3c:	4630      	mov	r0, r6
60004e3e:	4639      	mov	r1, r7
60004e40:	f7fd fc72 	bl	60002728 <__aeabi_dsub>
60004e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
60004e48:	e520      	b.n	6000488c <__ieee754_pow+0x3f4>
60004e4a:	2600      	movs	r6, #0
60004e4c:	f7ff bb6c 	b.w	60004528 <__ieee754_pow+0x90>
60004e50:	f1ba 0f00 	cmp.w	sl, #0
60004e54:	f6bf af56 	bge.w	60004d04 <__ieee754_pow+0x86c>
60004e58:	4620      	mov	r0, r4
60004e5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
60004e5e:	e65e      	b.n	60004b1e <__ieee754_pow+0x686>
60004e60:	a30f      	add	r3, pc, #60	; (adr r3, 60004ea0 <__ieee754_pow+0xa08>)
60004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
60004e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
60004e6a:	f7fd fe15 	bl	60002a98 <__aeabi_dmul>
60004e6e:	a30c      	add	r3, pc, #48	; (adr r3, 60004ea0 <__ieee754_pow+0xa08>)
60004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
60004e74:	f7fd fe10 	bl	60002a98 <__aeabi_dmul>
60004e78:	e651      	b.n	60004b1e <__ieee754_pow+0x686>
60004e7a:	2900      	cmp	r1, #0
60004e7c:	f47f af76 	bne.w	60004d6c <__ieee754_pow+0x8d4>
60004e80:	f1c0 0014 	rsb	r0, r0, #20
60004e84:	fa47 fc00 	asr.w	ip, r7, r0
60004e88:	fa0c f000 	lsl.w	r0, ip, r0
60004e8c:	42b8      	cmp	r0, r7
60004e8e:	d066      	beq.n	60004f5e <__ieee754_pow+0xac6>
60004e90:	4811      	ldr	r0, [pc, #68]	; (60004ed8 <__ieee754_pow+0xa40>)
60004e92:	4287      	cmp	r7, r0
60004e94:	f43f ae62 	beq.w	60004b5c <__ieee754_pow+0x6c4>
60004e98:	e6b1      	b.n	60004bfe <__ieee754_pow+0x766>
60004e9a:	bf00      	nop
60004e9c:	f3af 8000 	nop.w
60004ea0:	8800759c 	.word	0x8800759c
60004ea4:	7e37e43c 	.word	0x7e37e43c
60004ea8:	c2f8f359 	.word	0xc2f8f359
60004eac:	01a56e1f 	.word	0x01a56e1f
60004eb0:	60000000 	.word	0x60000000
60004eb4:	3ff71547 	.word	0x3ff71547
60004eb8:	f85ddf44 	.word	0xf85ddf44
60004ebc:	3e54ae0b 	.word	0x3e54ae0b
60004ec0:	55555555 	.word	0x55555555
60004ec4:	3fd55555 	.word	0x3fd55555
60004ec8:	652b82fe 	.word	0x652b82fe
60004ecc:	3ff71547 	.word	0x3ff71547
60004ed0:	433fffff 	.word	0x433fffff
60004ed4:	3fefffff 	.word	0x3fefffff
60004ed8:	3ff00000 	.word	0x3ff00000
60004edc:	43f00000 	.word	0x43f00000
60004ee0:	3fe00000 	.word	0x3fe00000
60004ee4:	4090cbff 	.word	0x4090cbff
60004ee8:	3f6f3400 	.word	0x3f6f3400
60004eec:	3fd00000 	.word	0x3fd00000
60004ef0:	4a29      	ldr	r2, [pc, #164]	; (60004f98 <__ieee754_pow+0xb00>)
60004ef2:	4293      	cmp	r3, r2
60004ef4:	d841      	bhi.n	60004f7a <__ieee754_pow+0xae2>
60004ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
60004efa:	4693      	mov	fp, r2
60004efc:	4692      	mov	sl, r2
60004efe:	e54e      	b.n	6000499e <__ieee754_pow+0x506>
60004f00:	4642      	mov	r2, r8
60004f02:	464b      	mov	r3, r9
60004f04:	4925      	ldr	r1, [pc, #148]	; (60004f9c <__ieee754_pow+0xb04>)
60004f06:	2000      	movs	r0, #0
60004f08:	f7fd fef0 	bl	60002cec <__aeabi_ddiv>
60004f0c:	e607      	b.n	60004b1e <__ieee754_pow+0x686>
60004f0e:	2302      	movs	r3, #2
60004f10:	9300      	str	r3, [sp, #0]
60004f12:	e681      	b.n	60004c18 <__ieee754_pow+0x780>
60004f14:	9b00      	ldr	r3, [sp, #0]
60004f16:	2b01      	cmp	r3, #1
60004f18:	f47f ae01 	bne.w	60004b1e <__ieee754_pow+0x686>
60004f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
60004f20:	4619      	mov	r1, r3
60004f22:	e5fc      	b.n	60004b1e <__ieee754_pow+0x686>
60004f24:	a318      	add	r3, pc, #96	; (adr r3, 60004f88 <__ieee754_pow+0xaf0>)
60004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
60004f2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
60004f2e:	a318      	add	r3, pc, #96	; (adr r3, 60004f90 <__ieee754_pow+0xaf8>)
60004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
60004f34:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
60004f38:	4b19      	ldr	r3, [pc, #100]	; (60004fa0 <__ieee754_pow+0xb08>)
60004f3a:	2200      	movs	r2, #0
60004f3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
60004f40:	f44f 2780 	mov.w	r7, #262144	; 0x40000
60004f44:	f7ff bb11 	b.w	6000456a <__ieee754_pow+0xd2>
60004f48:	4652      	mov	r2, sl
60004f4a:	f000 f82d 	bl	60004fa8 <scalbn>
60004f4e:	e5d9      	b.n	60004b04 <__ieee754_pow+0x66c>
60004f50:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
60004f54:	f43f ae86 	beq.w	60004c64 <__ieee754_pow+0x7cc>
60004f58:	2102      	movs	r1, #2
60004f5a:	9100      	str	r1, [sp, #0]
60004f5c:	e653      	b.n	60004c06 <__ieee754_pow+0x76e>
60004f5e:	490f      	ldr	r1, [pc, #60]	; (60004f9c <__ieee754_pow+0xb04>)
60004f60:	428f      	cmp	r7, r1
60004f62:	f43f adfb 	beq.w	60004b5c <__ieee754_pow+0x6c4>
60004f66:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
60004f6a:	f43f ae7b 	beq.w	60004c64 <__ieee754_pow+0x7cc>
60004f6e:	f00c 0c01 	and.w	ip, ip, #1
60004f72:	f1cc 0102 	rsb	r1, ip, #2
60004f76:	9100      	str	r1, [sp, #0]
60004f78:	e645      	b.n	60004c06 <__ieee754_pow+0x76e>
60004f7a:	151b      	asrs	r3, r3, #20
60004f7c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
60004f80:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
60004f84:	4119      	asrs	r1, r3
60004f86:	e4e3      	b.n	60004950 <__ieee754_pow+0x4b8>
60004f88:	40000000 	.word	0x40000000
60004f8c:	3fe2b803 	.word	0x3fe2b803
60004f90:	43cfd006 	.word	0x43cfd006
60004f94:	3e4cfdeb 	.word	0x3e4cfdeb
60004f98:	3fe00000 	.word	0x3fe00000
60004f9c:	3ff00000 	.word	0x3ff00000
60004fa0:	3ff80000 	.word	0x3ff80000
60004fa4:	00000000 	.word	0x00000000

60004fa8 <scalbn>:
60004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60004faa:	f3c1 560a 	ubfx	r6, r1, #20, #11
60004fae:	4604      	mov	r4, r0
60004fb0:	460d      	mov	r5, r1
60004fb2:	4617      	mov	r7, r2
60004fb4:	460b      	mov	r3, r1
60004fb6:	bb3e      	cbnz	r6, 60005008 <scalbn+0x60>
60004fb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
60004fbc:	4303      	orrs	r3, r0
60004fbe:	d022      	beq.n	60005006 <scalbn+0x5e>
60004fc0:	4b2b      	ldr	r3, [pc, #172]	; (60005070 <scalbn+0xc8>)
60004fc2:	2200      	movs	r2, #0
60004fc4:	f7fd fd68 	bl	60002a98 <__aeabi_dmul>
60004fc8:	4b2a      	ldr	r3, [pc, #168]	; (60005074 <scalbn+0xcc>)
60004fca:	429f      	cmp	r7, r3
60004fcc:	4604      	mov	r4, r0
60004fce:	460d      	mov	r5, r1
60004fd0:	db37      	blt.n	60005042 <scalbn+0x9a>
60004fd2:	f3c1 560a 	ubfx	r6, r1, #20, #11
60004fd6:	460b      	mov	r3, r1
60004fd8:	3e36      	subs	r6, #54	; 0x36
60004fda:	19ba      	adds	r2, r7, r6
60004fdc:	f240 71fe 	movw	r1, #2046	; 0x7fe
60004fe0:	428a      	cmp	r2, r1
60004fe2:	dc19      	bgt.n	60005018 <scalbn+0x70>
60004fe4:	2a00      	cmp	r2, #0
60004fe6:	dc32      	bgt.n	6000504e <scalbn+0xa6>
60004fe8:	f112 0f35 	cmn.w	r2, #53	; 0x35
60004fec:	db20      	blt.n	60005030 <scalbn+0x88>
60004fee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
60004ff2:	3236      	adds	r2, #54	; 0x36
60004ff4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
60004ff8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
60004ffc:	4620      	mov	r0, r4
60004ffe:	4b1e      	ldr	r3, [pc, #120]	; (60005078 <scalbn+0xd0>)
60005000:	2200      	movs	r2, #0
60005002:	f7fd fd49 	bl	60002a98 <__aeabi_dmul>
60005006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60005008:	f240 72ff 	movw	r2, #2047	; 0x7ff
6000500c:	4296      	cmp	r6, r2
6000500e:	d1e4      	bne.n	60004fda <scalbn+0x32>
60005010:	4602      	mov	r2, r0
60005012:	f7fd fb8b 	bl	6000272c <__adddf3>
60005016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60005018:	a311      	add	r3, pc, #68	; (adr r3, 60005060 <scalbn+0xb8>)
6000501a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000501e:	0fed      	lsrs	r5, r5, #31
60005020:	461c      	mov	r4, r3
60005022:	f365 74df 	bfi	r4, r5, #31, #1
60005026:	4621      	mov	r1, r4
60005028:	4814      	ldr	r0, [pc, #80]	; (6000507c <scalbn+0xd4>)
6000502a:	f7fd fd35 	bl	60002a98 <__aeabi_dmul>
6000502e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60005030:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
60005034:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
60005038:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
6000503c:	4810      	ldr	r0, [pc, #64]	; (60005080 <scalbn+0xd8>)
6000503e:	f041 011f 	orr.w	r1, r1, #31
60005042:	a309      	add	r3, pc, #36	; (adr r3, 60005068 <scalbn+0xc0>)
60005044:	e9d3 2300 	ldrd	r2, r3, [r3]
60005048:	f7fd fd26 	bl	60002a98 <__aeabi_dmul>
6000504c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000504e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
60005052:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
60005056:	4620      	mov	r0, r4
60005058:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
6000505c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000505e:	bf00      	nop
60005060:	8800759c 	.word	0x8800759c
60005064:	7e37e43c 	.word	0x7e37e43c
60005068:	c2f8f359 	.word	0xc2f8f359
6000506c:	01a56e1f 	.word	0x01a56e1f
60005070:	43500000 	.word	0x43500000
60005074:	ffff3cb0 	.word	0xffff3cb0
60005078:	3c900000 	.word	0x3c900000
6000507c:	8800759c 	.word	0x8800759c
60005080:	c2f8f359 	.word	0xc2f8f359
60005084:	00000000 	.word	0x00000000

60005088 <_dtoa_r>:
60005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000508c:	6c01      	ldr	r1, [r0, #64]	; 0x40
6000508e:	b09f      	sub	sp, #124	; 0x7c
60005090:	4616      	mov	r6, r2
60005092:	461f      	mov	r7, r3
60005094:	e9cd 6704 	strd	r6, r7, [sp, #16]
60005098:	9d2b      	ldr	r5, [sp, #172]	; 0xac
6000509a:	9003      	str	r0, [sp, #12]
6000509c:	b149      	cbz	r1, 600050b2 <_dtoa_r+0x2a>
6000509e:	6c42      	ldr	r2, [r0, #68]	; 0x44
600050a0:	604a      	str	r2, [r1, #4]
600050a2:	2301      	movs	r3, #1
600050a4:	4093      	lsls	r3, r2
600050a6:	4604      	mov	r4, r0
600050a8:	608b      	str	r3, [r1, #8]
600050aa:	f011 fcc5 	bl	60016a38 <_Bfree>
600050ae:	2300      	movs	r3, #0
600050b0:	6423      	str	r3, [r4, #64]	; 0x40
600050b2:	f1b7 0900 	subs.w	r9, r7, #0
600050b6:	bfb4      	ite	lt
600050b8:	2301      	movlt	r3, #1
600050ba:	2300      	movge	r3, #0
600050bc:	602b      	str	r3, [r5, #0]
600050be:	4b76      	ldr	r3, [pc, #472]	; (60005298 <_dtoa_r+0x210>)
600050c0:	bfbc      	itt	lt
600050c2:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
600050c6:	f8cd 9014 	strlt.w	r9, [sp, #20]
600050ca:	ea33 0309 	bics.w	r3, r3, r9
600050ce:	f000 80aa 	beq.w	60005226 <_dtoa_r+0x19e>
600050d2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
600050d6:	2200      	movs	r2, #0
600050d8:	4618      	mov	r0, r3
600050da:	4621      	mov	r1, r4
600050dc:	2300      	movs	r3, #0
600050de:	e9cd 0108 	strd	r0, r1, [sp, #32]
600050e2:	f7fd ff41 	bl	60002f68 <__aeabi_dcmpeq>
600050e6:	4680      	mov	r8, r0
600050e8:	b168      	cbz	r0, 60005106 <_dtoa_r+0x7e>
600050ea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
600050ec:	2301      	movs	r3, #1
600050ee:	6013      	str	r3, [r2, #0]
600050f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
600050f2:	b113      	cbz	r3, 600050fa <_dtoa_r+0x72>
600050f4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
600050f6:	4b69      	ldr	r3, [pc, #420]	; (6000529c <_dtoa_r+0x214>)
600050f8:	6013      	str	r3, [r2, #0]
600050fa:	4b69      	ldr	r3, [pc, #420]	; (600052a0 <_dtoa_r+0x218>)
600050fc:	930a      	str	r3, [sp, #40]	; 0x28
600050fe:	980a      	ldr	r0, [sp, #40]	; 0x28
60005100:	b01f      	add	sp, #124	; 0x7c
60005102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60005106:	ab1c      	add	r3, sp, #112	; 0x70
60005108:	9301      	str	r3, [sp, #4]
6000510a:	ab1d      	add	r3, sp, #116	; 0x74
6000510c:	9300      	str	r3, [sp, #0]
6000510e:	9803      	ldr	r0, [sp, #12]
60005110:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
60005114:	f011 ffc4 	bl	600170a0 <__d2b>
60005118:	ea5f 5519 	movs.w	r5, r9, lsr #20
6000511c:	4682      	mov	sl, r0
6000511e:	f040 8098 	bne.w	60005252 <_dtoa_r+0x1ca>
60005122:	e9dd 851c 	ldrd	r8, r5, [sp, #112]	; 0x70
60005126:	4445      	add	r5, r8
60005128:	f205 4332 	addw	r3, r5, #1074	; 0x432
6000512c:	2b20      	cmp	r3, #32
6000512e:	f340 8383 	ble.w	60005838 <_dtoa_r+0x7b0>
60005132:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
60005136:	fa09 f903 	lsl.w	r9, r9, r3
6000513a:	f205 4312 	addw	r3, r5, #1042	; 0x412
6000513e:	fa26 f303 	lsr.w	r3, r6, r3
60005142:	ea49 0003 	orr.w	r0, r9, r3
60005146:	f7fd fc2d 	bl	600029a4 <__aeabi_ui2d>
6000514a:	2301      	movs	r3, #1
6000514c:	3d01      	subs	r5, #1
6000514e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
60005152:	9311      	str	r3, [sp, #68]	; 0x44
60005154:	4b53      	ldr	r3, [pc, #332]	; (600052a4 <_dtoa_r+0x21c>)
60005156:	2200      	movs	r2, #0
60005158:	f7fd fae6 	bl	60002728 <__aeabi_dsub>
6000515c:	a348      	add	r3, pc, #288	; (adr r3, 60005280 <_dtoa_r+0x1f8>)
6000515e:	e9d3 2300 	ldrd	r2, r3, [r3]
60005162:	f7fd fc99 	bl	60002a98 <__aeabi_dmul>
60005166:	a348      	add	r3, pc, #288	; (adr r3, 60005288 <_dtoa_r+0x200>)
60005168:	e9d3 2300 	ldrd	r2, r3, [r3]
6000516c:	f7fd fade 	bl	6000272c <__adddf3>
60005170:	4606      	mov	r6, r0
60005172:	4628      	mov	r0, r5
60005174:	460f      	mov	r7, r1
60005176:	f7fd fc25 	bl	600029c4 <__aeabi_i2d>
6000517a:	a345      	add	r3, pc, #276	; (adr r3, 60005290 <_dtoa_r+0x208>)
6000517c:	e9d3 2300 	ldrd	r2, r3, [r3]
60005180:	f7fd fc8a 	bl	60002a98 <__aeabi_dmul>
60005184:	4602      	mov	r2, r0
60005186:	460b      	mov	r3, r1
60005188:	4630      	mov	r0, r6
6000518a:	4639      	mov	r1, r7
6000518c:	f7fd face 	bl	6000272c <__adddf3>
60005190:	4606      	mov	r6, r0
60005192:	460f      	mov	r7, r1
60005194:	f7fd ff1a 	bl	60002fcc <__aeabi_d2iz>
60005198:	2200      	movs	r2, #0
6000519a:	4683      	mov	fp, r0
6000519c:	2300      	movs	r3, #0
6000519e:	4630      	mov	r0, r6
600051a0:	4639      	mov	r1, r7
600051a2:	f7fd feeb 	bl	60002f7c <__aeabi_dcmplt>
600051a6:	2800      	cmp	r0, #0
600051a8:	f040 831a 	bne.w	600057e0 <_dtoa_r+0x758>
600051ac:	eba8 0805 	sub.w	r8, r8, r5
600051b0:	f1bb 0f16 	cmp.w	fp, #22
600051b4:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
600051b8:	f200 818b 	bhi.w	600054d2 <_dtoa_r+0x44a>
600051bc:	4d3a      	ldr	r5, [pc, #232]	; (600052a8 <_dtoa_r+0x220>)
600051be:	eb05 05cb 	add.w	r5, r5, fp, lsl #3
600051c2:	e9d5 2300 	ldrd	r2, r3, [r5]
600051c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
600051ca:	f7fd fed7 	bl	60002f7c <__aeabi_dcmplt>
600051ce:	2800      	cmp	r0, #0
600051d0:	d070      	beq.n	600052b4 <_dtoa_r+0x22c>
600051d2:	2300      	movs	r3, #0
600051d4:	2c00      	cmp	r4, #0
600051d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
600051da:	9310      	str	r3, [sp, #64]	; 0x40
600051dc:	f2c0 817e 	blt.w	600054dc <_dtoa_r+0x454>
600051e0:	2300      	movs	r3, #0
600051e2:	930b      	str	r3, [sp, #44]	; 0x2c
600051e4:	f1bb 0f00 	cmp.w	fp, #0
600051e8:	da6a      	bge.n	600052c0 <_dtoa_r+0x238>
600051ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
600051ec:	eba3 030b 	sub.w	r3, r3, fp
600051f0:	930b      	str	r3, [sp, #44]	; 0x2c
600051f2:	f1cb 0300 	rsb	r3, fp, #0
600051f6:	e9cd b30e 	strd	fp, r3, [sp, #56]	; 0x38
600051fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
600051fc:	2b09      	cmp	r3, #9
600051fe:	f04f 0b00 	mov.w	fp, #0
60005202:	d865      	bhi.n	600052d0 <_dtoa_r+0x248>
60005204:	2b05      	cmp	r3, #5
60005206:	f340 831c 	ble.w	60005842 <_dtoa_r+0x7ba>
6000520a:	3b04      	subs	r3, #4
6000520c:	9328      	str	r3, [sp, #160]	; 0xa0
6000520e:	2500      	movs	r5, #0
60005210:	9b28      	ldr	r3, [sp, #160]	; 0xa0
60005212:	3b02      	subs	r3, #2
60005214:	2b03      	cmp	r3, #3
60005216:	f200 8623 	bhi.w	60005e60 <_dtoa_r+0xdd8>
6000521a:	e8df f013 	tbh	[pc, r3, lsl #1]
6000521e:	0460      	.short	0x0460
60005220:	0454045d 	.word	0x0454045d
60005224:	0438      	.short	0x0438
60005226:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
60005228:	f3c9 0913 	ubfx	r9, r9, #0, #20
6000522c:	f242 730f 	movw	r3, #9999	; 0x270f
60005230:	ea59 0906 	orrs.w	r9, r9, r6
60005234:	6013      	str	r3, [r2, #0]
60005236:	d11c      	bne.n	60005272 <_dtoa_r+0x1ea>
60005238:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
6000523a:	2b00      	cmp	r3, #0
6000523c:	f000 862b 	beq.w	60005e96 <_dtoa_r+0xe0e>
60005240:	4b1a      	ldr	r3, [pc, #104]	; (600052ac <_dtoa_r+0x224>)
60005242:	930a      	str	r3, [sp, #40]	; 0x28
60005244:	3308      	adds	r3, #8
60005246:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
60005248:	980a      	ldr	r0, [sp, #40]	; 0x28
6000524a:	6013      	str	r3, [r2, #0]
6000524c:	b01f      	add	sp, #124	; 0x7c
6000524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60005252:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
60005256:	f3c2 0313 	ubfx	r3, r2, #0, #20
6000525a:	4608      	mov	r0, r1
6000525c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
60005260:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
60005264:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
60005268:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
6000526c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
60005270:	e770      	b.n	60005154 <_dtoa_r+0xcc>
60005272:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
60005274:	2b00      	cmp	r3, #0
60005276:	f040 83e7 	bne.w	60005a48 <_dtoa_r+0x9c0>
6000527a:	4b0d      	ldr	r3, [pc, #52]	; (600052b0 <_dtoa_r+0x228>)
6000527c:	930a      	str	r3, [sp, #40]	; 0x28
6000527e:	e73e      	b.n	600050fe <_dtoa_r+0x76>
60005280:	636f4361 	.word	0x636f4361
60005284:	3fd287a7 	.word	0x3fd287a7
60005288:	8b60c8b3 	.word	0x8b60c8b3
6000528c:	3fc68a28 	.word	0x3fc68a28
60005290:	509f79fb 	.word	0x509f79fb
60005294:	3fd34413 	.word	0x3fd34413
60005298:	7ff00000 	.word	0x7ff00000
6000529c:	6001bf99 	.word	0x6001bf99
600052a0:	6001bf98 	.word	0x6001bf98
600052a4:	3ff80000 	.word	0x3ff80000
600052a8:	6001a488 	.word	0x6001a488
600052ac:	6001bfbc 	.word	0x6001bfbc
600052b0:	6001bfc8 	.word	0x6001bfc8
600052b4:	f1b8 0f00 	cmp.w	r8, #0
600052b8:	f340 8460 	ble.w	60005b7c <_dtoa_r+0xaf4>
600052bc:	9010      	str	r0, [sp, #64]	; 0x40
600052be:	900b      	str	r0, [sp, #44]	; 0x2c
600052c0:	2300      	movs	r3, #0
600052c2:	930f      	str	r3, [sp, #60]	; 0x3c
600052c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
600052c6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
600052ca:	2b09      	cmp	r3, #9
600052cc:	445c      	add	r4, fp
600052ce:	d999      	bls.n	60005204 <_dtoa_r+0x17c>
600052d0:	2300      	movs	r3, #0
600052d2:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
600052d6:	2501      	movs	r5, #1
600052d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
600052dc:	950c      	str	r5, [sp, #48]	; 0x30
600052de:	9306      	str	r3, [sp, #24]
600052e0:	9b03      	ldr	r3, [sp, #12]
600052e2:	2100      	movs	r1, #0
600052e4:	6459      	str	r1, [r3, #68]	; 0x44
600052e6:	9b06      	ldr	r3, [sp, #24]
600052e8:	9318      	str	r3, [sp, #96]	; 0x60
600052ea:	9803      	ldr	r0, [sp, #12]
600052ec:	f011 fb7e 	bl	600169ec <_Balloc>
600052f0:	900a      	str	r0, [sp, #40]	; 0x28
600052f2:	2800      	cmp	r0, #0
600052f4:	f000 85bd 	beq.w	60005e72 <_dtoa_r+0xdea>
600052f8:	9b03      	ldr	r3, [sp, #12]
600052fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
600052fc:	641a      	str	r2, [r3, #64]	; 0x40
600052fe:	9b06      	ldr	r3, [sp, #24]
60005300:	2b0e      	cmp	r3, #14
60005302:	f200 8115 	bhi.w	60005530 <_dtoa_r+0x4a8>
60005306:	2d00      	cmp	r5, #0
60005308:	f000 8112 	beq.w	60005530 <_dtoa_r+0x4a8>
6000530c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
6000530e:	2a00      	cmp	r2, #0
60005310:	f340 843b 	ble.w	60005b8a <_dtoa_r+0xb02>
60005314:	4db2      	ldr	r5, [pc, #712]	; (600055e0 <_dtoa_r+0x558>)
60005316:	f002 030f 	and.w	r3, r2, #15
6000531a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
6000531e:	e9d3 8900 	ldrd	r8, r9, [r3]
60005322:	4613      	mov	r3, r2
60005324:	1115      	asrs	r5, r2, #4
60005326:	05da      	lsls	r2, r3, #23
60005328:	f140 83fa 	bpl.w	60005b20 <_dtoa_r+0xa98>
6000532c:	4bad      	ldr	r3, [pc, #692]	; (600055e4 <_dtoa_r+0x55c>)
6000532e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
60005332:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
60005336:	f7fd fcd9 	bl	60002cec <__aeabi_ddiv>
6000533a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
6000533e:	f005 050f 	and.w	r5, r5, #15
60005342:	2703      	movs	r7, #3
60005344:	b17d      	cbz	r5, 60005366 <_dtoa_r+0x2de>
60005346:	4ea7      	ldr	r6, [pc, #668]	; (600055e4 <_dtoa_r+0x55c>)
60005348:	07eb      	lsls	r3, r5, #31
6000534a:	d508      	bpl.n	6000535e <_dtoa_r+0x2d6>
6000534c:	4640      	mov	r0, r8
6000534e:	4649      	mov	r1, r9
60005350:	e9d6 2300 	ldrd	r2, r3, [r6]
60005354:	f7fd fba0 	bl	60002a98 <__aeabi_dmul>
60005358:	3701      	adds	r7, #1
6000535a:	4680      	mov	r8, r0
6000535c:	4689      	mov	r9, r1
6000535e:	106d      	asrs	r5, r5, #1
60005360:	f106 0608 	add.w	r6, r6, #8
60005364:	d1f0      	bne.n	60005348 <_dtoa_r+0x2c0>
60005366:	4642      	mov	r2, r8
60005368:	464b      	mov	r3, r9
6000536a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
6000536e:	f7fd fcbd 	bl	60002cec <__aeabi_ddiv>
60005372:	4680      	mov	r8, r0
60005374:	4689      	mov	r9, r1
60005376:	9b10      	ldr	r3, [sp, #64]	; 0x40
60005378:	b143      	cbz	r3, 6000538c <_dtoa_r+0x304>
6000537a:	4b9b      	ldr	r3, [pc, #620]	; (600055e8 <_dtoa_r+0x560>)
6000537c:	2200      	movs	r2, #0
6000537e:	4640      	mov	r0, r8
60005380:	4649      	mov	r1, r9
60005382:	f7fd fdfb 	bl	60002f7c <__aeabi_dcmplt>
60005386:	2800      	cmp	r0, #0
60005388:	f040 84f1 	bne.w	60005d6e <_dtoa_r+0xce6>
6000538c:	4638      	mov	r0, r7
6000538e:	f7fd fb19 	bl	600029c4 <__aeabi_i2d>
60005392:	4642      	mov	r2, r8
60005394:	464b      	mov	r3, r9
60005396:	f7fd fb7f 	bl	60002a98 <__aeabi_dmul>
6000539a:	4b94      	ldr	r3, [pc, #592]	; (600055ec <_dtoa_r+0x564>)
6000539c:	2200      	movs	r2, #0
6000539e:	f7fd f9c5 	bl	6000272c <__adddf3>
600053a2:	9b06      	ldr	r3, [sp, #24]
600053a4:	4606      	mov	r6, r0
600053a6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
600053aa:	2b00      	cmp	r3, #0
600053ac:	f000 80a9 	beq.w	60005502 <_dtoa_r+0x47a>
600053b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
600053b2:	9319      	str	r3, [sp, #100]	; 0x64
600053b4:	9b06      	ldr	r3, [sp, #24]
600053b6:	9312      	str	r3, [sp, #72]	; 0x48
600053b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
600053ba:	4d89      	ldr	r5, [pc, #548]	; (600055e0 <_dtoa_r+0x558>)
600053bc:	4649      	mov	r1, r9
600053be:	4640      	mov	r0, r8
600053c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
600053c4:	1c5e      	adds	r6, r3, #1
600053c6:	f7fd fe01 	bl	60002fcc <__aeabi_d2iz>
600053ca:	9912      	ldr	r1, [sp, #72]	; 0x48
600053cc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
600053d0:	e953 1202 	ldrd	r1, r2, [r3, #-8]
600053d4:	4607      	mov	r7, r0
600053d6:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
600053da:	f7fd faf3 	bl	600029c4 <__aeabi_i2d>
600053de:	4602      	mov	r2, r0
600053e0:	460b      	mov	r3, r1
600053e2:	4640      	mov	r0, r8
600053e4:	4649      	mov	r1, r9
600053e6:	f7fd f99f 	bl	60002728 <__aeabi_dsub>
600053ea:	4689      	mov	r9, r1
600053ec:	990c      	ldr	r1, [sp, #48]	; 0x30
600053ee:	3730      	adds	r7, #48	; 0x30
600053f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
600053f4:	4680      	mov	r8, r0
600053f6:	b2ff      	uxtb	r7, r7
600053f8:	2900      	cmp	r1, #0
600053fa:	f000 8453 	beq.w	60005ca4 <_dtoa_r+0xc1c>
600053fe:	497c      	ldr	r1, [pc, #496]	; (600055f0 <_dtoa_r+0x568>)
60005400:	2000      	movs	r0, #0
60005402:	f7fd fc73 	bl	60002cec <__aeabi_ddiv>
60005406:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
6000540a:	f7fd f98d 	bl	60002728 <__aeabi_dsub>
6000540e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
60005410:	4602      	mov	r2, r0
60005412:	460b      	mov	r3, r1
60005414:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
60005418:	702f      	strb	r7, [r5, #0]
6000541a:	4642      	mov	r2, r8
6000541c:	464b      	mov	r3, r9
6000541e:	f7fd fdcb 	bl	60002fb8 <__aeabi_dcmpgt>
60005422:	2800      	cmp	r0, #0
60005424:	f040 8497 	bne.w	60005d56 <_dtoa_r+0xcce>
60005428:	e9cd b41a 	strd	fp, r4, [sp, #104]	; 0x68
6000542c:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
60005430:	9d12      	ldr	r5, [sp, #72]	; 0x48
60005432:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
60005436:	2700      	movs	r7, #0
60005438:	e02a      	b.n	60005490 <_dtoa_r+0x408>
6000543a:	3701      	adds	r7, #1
6000543c:	42af      	cmp	r7, r5
6000543e:	f280 84de 	bge.w	60005dfe <_dtoa_r+0xd76>
60005442:	4b6c      	ldr	r3, [pc, #432]	; (600055f4 <_dtoa_r+0x56c>)
60005444:	4650      	mov	r0, sl
60005446:	4659      	mov	r1, fp
60005448:	2200      	movs	r2, #0
6000544a:	f7fd fb25 	bl	60002a98 <__aeabi_dmul>
6000544e:	4b69      	ldr	r3, [pc, #420]	; (600055f4 <_dtoa_r+0x56c>)
60005450:	2200      	movs	r2, #0
60005452:	4682      	mov	sl, r0
60005454:	468b      	mov	fp, r1
60005456:	4640      	mov	r0, r8
60005458:	4649      	mov	r1, r9
6000545a:	f7fd fb1d 	bl	60002a98 <__aeabi_dmul>
6000545e:	4689      	mov	r9, r1
60005460:	4680      	mov	r8, r0
60005462:	f7fd fdb3 	bl	60002fcc <__aeabi_d2iz>
60005466:	4604      	mov	r4, r0
60005468:	f7fd faac 	bl	600029c4 <__aeabi_i2d>
6000546c:	4602      	mov	r2, r0
6000546e:	460b      	mov	r3, r1
60005470:	4640      	mov	r0, r8
60005472:	4649      	mov	r1, r9
60005474:	f7fd f958 	bl	60002728 <__aeabi_dsub>
60005478:	3430      	adds	r4, #48	; 0x30
6000547a:	f806 4b01 	strb.w	r4, [r6], #1
6000547e:	4652      	mov	r2, sl
60005480:	465b      	mov	r3, fp
60005482:	4680      	mov	r8, r0
60005484:	4689      	mov	r9, r1
60005486:	f7fd fd79 	bl	60002f7c <__aeabi_dcmplt>
6000548a:	2800      	cmp	r0, #0
6000548c:	f040 84b4 	bne.w	60005df8 <_dtoa_r+0xd70>
60005490:	4642      	mov	r2, r8
60005492:	464b      	mov	r3, r9
60005494:	4954      	ldr	r1, [pc, #336]	; (600055e8 <_dtoa_r+0x560>)
60005496:	2000      	movs	r0, #0
60005498:	f7fd f946 	bl	60002728 <__aeabi_dsub>
6000549c:	4652      	mov	r2, sl
6000549e:	465b      	mov	r3, fp
600054a0:	f7fd fd6c 	bl	60002f7c <__aeabi_dcmplt>
600054a4:	2800      	cmp	r0, #0
600054a6:	d0c8      	beq.n	6000543a <_dtoa_r+0x3b2>
600054a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
600054aa:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
600054ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
600054b0:	4637      	mov	r7, r6
600054b2:	f103 0801 	add.w	r8, r3, #1
600054b6:	e002      	b.n	600054be <_dtoa_r+0x436>
600054b8:	4297      	cmp	r7, r2
600054ba:	f000 847c 	beq.w	60005db6 <_dtoa_r+0xd2e>
600054be:	463e      	mov	r6, r7
600054c0:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
600054c4:	2b39      	cmp	r3, #57	; 0x39
600054c6:	d0f7      	beq.n	600054b8 <_dtoa_r+0x430>
600054c8:	3301      	adds	r3, #1
600054ca:	b2db      	uxtb	r3, r3
600054cc:	703b      	strb	r3, [r7, #0]
600054ce:	4645      	mov	r5, r8
600054d0:	e175      	b.n	600057be <_dtoa_r+0x736>
600054d2:	2301      	movs	r3, #1
600054d4:	2c00      	cmp	r4, #0
600054d6:	9310      	str	r3, [sp, #64]	; 0x40
600054d8:	f6bf ae82 	bge.w	600051e0 <_dtoa_r+0x158>
600054dc:	f1c8 0301 	rsb	r3, r8, #1
600054e0:	930b      	str	r3, [sp, #44]	; 0x2c
600054e2:	2400      	movs	r4, #0
600054e4:	e67e      	b.n	600051e4 <_dtoa_r+0x15c>
600054e6:	4638      	mov	r0, r7
600054e8:	f7fd fa6c 	bl	600029c4 <__aeabi_i2d>
600054ec:	4642      	mov	r2, r8
600054ee:	464b      	mov	r3, r9
600054f0:	f7fd fad2 	bl	60002a98 <__aeabi_dmul>
600054f4:	4b3d      	ldr	r3, [pc, #244]	; (600055ec <_dtoa_r+0x564>)
600054f6:	2200      	movs	r2, #0
600054f8:	f7fd f918 	bl	6000272c <__adddf3>
600054fc:	4606      	mov	r6, r0
600054fe:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
60005502:	4b3d      	ldr	r3, [pc, #244]	; (600055f8 <_dtoa_r+0x570>)
60005504:	4640      	mov	r0, r8
60005506:	4649      	mov	r1, r9
60005508:	2200      	movs	r2, #0
6000550a:	f7fd f90d 	bl	60002728 <__aeabi_dsub>
6000550e:	4632      	mov	r2, r6
60005510:	463b      	mov	r3, r7
60005512:	4680      	mov	r8, r0
60005514:	4689      	mov	r9, r1
60005516:	f7fd fd4f 	bl	60002fb8 <__aeabi_dcmpgt>
6000551a:	2800      	cmp	r0, #0
6000551c:	f040 845a 	bne.w	60005dd4 <_dtoa_r+0xd4c>
60005520:	4640      	mov	r0, r8
60005522:	4649      	mov	r1, r9
60005524:	4632      	mov	r2, r6
60005526:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
6000552a:	f7fd fd27 	bl	60002f7c <__aeabi_dcmplt>
6000552e:	bb28      	cbnz	r0, 6000557c <_dtoa_r+0x4f4>
60005530:	9b1d      	ldr	r3, [sp, #116]	; 0x74
60005532:	2b00      	cmp	r3, #0
60005534:	f2c0 8092 	blt.w	6000565c <_dtoa_r+0x5d4>
60005538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
6000553a:	2a0e      	cmp	r2, #14
6000553c:	f300 808e 	bgt.w	6000565c <_dtoa_r+0x5d4>
60005540:	4d27      	ldr	r5, [pc, #156]	; (600055e0 <_dtoa_r+0x558>)
60005542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60005544:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
60005548:	e9d5 3400 	ldrd	r3, r4, [r5]
6000554c:	e9cd 3404 	strd	r3, r4, [sp, #16]
60005550:	9b29      	ldr	r3, [sp, #164]	; 0xa4
60005552:	2b00      	cmp	r3, #0
60005554:	da19      	bge.n	6000558a <_dtoa_r+0x502>
60005556:	9b06      	ldr	r3, [sp, #24]
60005558:	2b00      	cmp	r3, #0
6000555a:	dc16      	bgt.n	6000558a <_dtoa_r+0x502>
6000555c:	d10e      	bne.n	6000557c <_dtoa_r+0x4f4>
6000555e:	4b26      	ldr	r3, [pc, #152]	; (600055f8 <_dtoa_r+0x570>)
60005560:	2200      	movs	r2, #0
60005562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
60005566:	f7fd fa97 	bl	60002a98 <__aeabi_dmul>
6000556a:	4602      	mov	r2, r0
6000556c:	460b      	mov	r3, r1
6000556e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
60005572:	f7fd fd0d 	bl	60002f90 <__aeabi_dcmple>
60005576:	2800      	cmp	r0, #0
60005578:	f000 842c 	beq.w	60005dd4 <_dtoa_r+0xd4c>
6000557c:	f04f 0900 	mov.w	r9, #0
60005580:	9e0a      	ldr	r6, [sp, #40]	; 0x28
60005582:	464f      	mov	r7, r9
60005584:	9b29      	ldr	r3, [sp, #164]	; 0xa4
60005586:	43dd      	mvns	r5, r3
60005588:	e225      	b.n	600059d6 <_dtoa_r+0x94e>
6000558a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
6000558e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
60005592:	4622      	mov	r2, r4
60005594:	462b      	mov	r3, r5
60005596:	4640      	mov	r0, r8
60005598:	4649      	mov	r1, r9
6000559a:	f7fd fba7 	bl	60002cec <__aeabi_ddiv>
6000559e:	f7fd fd15 	bl	60002fcc <__aeabi_d2iz>
600055a2:	4606      	mov	r6, r0
600055a4:	f7fd fa0e 	bl	600029c4 <__aeabi_i2d>
600055a8:	4622      	mov	r2, r4
600055aa:	462b      	mov	r3, r5
600055ac:	f7fd fa74 	bl	60002a98 <__aeabi_dmul>
600055b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
600055b2:	460b      	mov	r3, r1
600055b4:	4602      	mov	r2, r0
600055b6:	4649      	mov	r1, r9
600055b8:	4640      	mov	r0, r8
600055ba:	f7fd f8b5 	bl	60002728 <__aeabi_dsub>
600055be:	f106 0330 	add.w	r3, r6, #48	; 0x30
600055c2:	f807 3b01 	strb.w	r3, [r7], #1
600055c6:	9b06      	ldr	r3, [sp, #24]
600055c8:	2b01      	cmp	r3, #1
600055ca:	f000 8312 	beq.w	60005bf2 <_dtoa_r+0xb6a>
600055ce:	2501      	movs	r5, #1
600055d0:	f8cd a018 	str.w	sl, [sp, #24]
600055d4:	4699      	mov	r9, r3
600055d6:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
600055da:	46a8      	mov	r8, r5
600055dc:	e02c      	b.n	60005638 <_dtoa_r+0x5b0>
600055de:	bf00      	nop
600055e0:	6001a488 	.word	0x6001a488
600055e4:	6001a460 	.word	0x6001a460
600055e8:	3ff00000 	.word	0x3ff00000
600055ec:	401c0000 	.word	0x401c0000
600055f0:	3fe00000 	.word	0x3fe00000
600055f4:	40240000 	.word	0x40240000
600055f8:	40140000 	.word	0x40140000
600055fc:	4652      	mov	r2, sl
600055fe:	465b      	mov	r3, fp
60005600:	4620      	mov	r0, r4
60005602:	4629      	mov	r1, r5
60005604:	f7fd fb72 	bl	60002cec <__aeabi_ddiv>
60005608:	f7fd fce0 	bl	60002fcc <__aeabi_d2iz>
6000560c:	4606      	mov	r6, r0
6000560e:	f7fd f9d9 	bl	600029c4 <__aeabi_i2d>
60005612:	4652      	mov	r2, sl
60005614:	465b      	mov	r3, fp
60005616:	f7fd fa3f 	bl	60002a98 <__aeabi_dmul>
6000561a:	f108 0801 	add.w	r8, r8, #1
6000561e:	460b      	mov	r3, r1
60005620:	4602      	mov	r2, r0
60005622:	4629      	mov	r1, r5
60005624:	4620      	mov	r0, r4
60005626:	f7fd f87f 	bl	60002728 <__aeabi_dsub>
6000562a:	f106 0330 	add.w	r3, r6, #48	; 0x30
6000562e:	45c8      	cmp	r8, r9
60005630:	f807 3b01 	strb.w	r3, [r7], #1
60005634:	f000 82db 	beq.w	60005bee <_dtoa_r+0xb66>
60005638:	4bb9      	ldr	r3, [pc, #740]	; (60005920 <_dtoa_r+0x898>)
6000563a:	2200      	movs	r2, #0
6000563c:	f7fd fa2c 	bl	60002a98 <__aeabi_dmul>
60005640:	2200      	movs	r2, #0
60005642:	2300      	movs	r3, #0
60005644:	4604      	mov	r4, r0
60005646:	460d      	mov	r5, r1
60005648:	f7fd fc8e 	bl	60002f68 <__aeabi_dcmpeq>
6000564c:	2800      	cmp	r0, #0
6000564e:	d0d5      	beq.n	600055fc <_dtoa_r+0x574>
60005650:	9d0e      	ldr	r5, [sp, #56]	; 0x38
60005652:	f8dd a018 	ldr.w	sl, [sp, #24]
60005656:	3501      	adds	r5, #1
60005658:	463e      	mov	r6, r7
6000565a:	e0b0      	b.n	600057be <_dtoa_r+0x736>
6000565c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
6000565e:	2a00      	cmp	r2, #0
60005660:	f040 80d2 	bne.w	60005808 <_dtoa_r+0x780>
60005664:	2300      	movs	r3, #0
60005666:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
60005668:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
6000566a:	930c      	str	r3, [sp, #48]	; 0x30
6000566c:	461f      	mov	r7, r3
6000566e:	b156      	cbz	r6, 60005686 <_dtoa_r+0x5fe>
60005670:	2c00      	cmp	r4, #0
60005672:	dd08      	ble.n	60005686 <_dtoa_r+0x5fe>
60005674:	42a6      	cmp	r6, r4
60005676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
60005678:	4633      	mov	r3, r6
6000567a:	bfa8      	it	ge
6000567c:	4623      	movge	r3, r4
6000567e:	1ad2      	subs	r2, r2, r3
60005680:	920b      	str	r2, [sp, #44]	; 0x2c
60005682:	1af6      	subs	r6, r6, r3
60005684:	1ae4      	subs	r4, r4, r3
60005686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60005688:	b153      	cbz	r3, 600056a0 <_dtoa_r+0x618>
6000568a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
6000568c:	b113      	cbz	r3, 60005694 <_dtoa_r+0x60c>
6000568e:	2d00      	cmp	r5, #0
60005690:	f040 82e8 	bne.w	60005c64 <_dtoa_r+0xbdc>
60005694:	4651      	mov	r1, sl
60005696:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
60005698:	9803      	ldr	r0, [sp, #12]
6000569a:	f011 fb5d 	bl	60016d58 <__pow5mult>
6000569e:	4682      	mov	sl, r0
600056a0:	9803      	ldr	r0, [sp, #12]
600056a2:	2101      	movs	r1, #1
600056a4:	f011 fa74 	bl	60016b90 <__i2b>
600056a8:	4681      	mov	r9, r0
600056aa:	f1bb 0f00 	cmp.w	fp, #0
600056ae:	f040 81b6 	bne.w	60005a1e <_dtoa_r+0x996>
600056b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
600056b4:	2b01      	cmp	r3, #1
600056b6:	f340 81cc 	ble.w	60005a52 <_dtoa_r+0x9ca>
600056ba:	2001      	movs	r0, #1
600056bc:	4420      	add	r0, r4
600056be:	f010 001f 	ands.w	r0, r0, #31
600056c2:	f000 809a 	beq.w	600057fa <_dtoa_r+0x772>
600056c6:	f1c0 0320 	rsb	r3, r0, #32
600056ca:	2b04      	cmp	r3, #4
600056cc:	f340 81da 	ble.w	60005a84 <_dtoa_r+0x9fc>
600056d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
600056d2:	f1c0 001c 	rsb	r0, r0, #28
600056d6:	4403      	add	r3, r0
600056d8:	930b      	str	r3, [sp, #44]	; 0x2c
600056da:	4406      	add	r6, r0
600056dc:	4404      	add	r4, r0
600056de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
600056e0:	2b00      	cmp	r3, #0
600056e2:	dd05      	ble.n	600056f0 <_dtoa_r+0x668>
600056e4:	4651      	mov	r1, sl
600056e6:	9803      	ldr	r0, [sp, #12]
600056e8:	461a      	mov	r2, r3
600056ea:	f011 fb8f 	bl	60016e0c <__lshift>
600056ee:	4682      	mov	sl, r0
600056f0:	2c00      	cmp	r4, #0
600056f2:	dd05      	ble.n	60005700 <_dtoa_r+0x678>
600056f4:	4649      	mov	r1, r9
600056f6:	9803      	ldr	r0, [sp, #12]
600056f8:	4622      	mov	r2, r4
600056fa:	f011 fb87 	bl	60016e0c <__lshift>
600056fe:	4681      	mov	r9, r0
60005700:	9b10      	ldr	r3, [sp, #64]	; 0x40
60005702:	2b00      	cmp	r3, #0
60005704:	f040 8170 	bne.w	600059e8 <_dtoa_r+0x960>
60005708:	9b06      	ldr	r3, [sp, #24]
6000570a:	2b00      	cmp	r3, #0
6000570c:	f340 8148 	ble.w	600059a0 <_dtoa_r+0x918>
60005710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
60005712:	2b00      	cmp	r3, #0
60005714:	f040 80a4 	bne.w	60005860 <_dtoa_r+0x7d8>
60005718:	9d0e      	ldr	r5, [sp, #56]	; 0x38
6000571a:	3501      	adds	r5, #1
6000571c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
60005720:	9c06      	ldr	r4, [sp, #24]
60005722:	f8dd b00c 	ldr.w	fp, [sp, #12]
60005726:	2601      	movs	r6, #1
60005728:	e007      	b.n	6000573a <_dtoa_r+0x6b2>
6000572a:	4651      	mov	r1, sl
6000572c:	2300      	movs	r3, #0
6000572e:	220a      	movs	r2, #10
60005730:	4658      	mov	r0, fp
60005732:	f011 f98b 	bl	60016a4c <__multadd>
60005736:	3601      	adds	r6, #1
60005738:	4682      	mov	sl, r0
6000573a:	4649      	mov	r1, r9
6000573c:	4650      	mov	r0, sl
6000573e:	f010 fbab 	bl	60015e98 <quorem>
60005742:	42a6      	cmp	r6, r4
60005744:	f100 0330 	add.w	r3, r0, #48	; 0x30
60005748:	f808 3b01 	strb.w	r3, [r8], #1
6000574c:	dbed      	blt.n	6000572a <_dtoa_r+0x6a2>
6000574e:	9a06      	ldr	r2, [sp, #24]
60005750:	2a00      	cmp	r2, #0
60005752:	bfc8      	it	gt
60005754:	4616      	movgt	r6, r2
60005756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
60005758:	bfd8      	it	le
6000575a:	2601      	movle	r6, #1
6000575c:	eb02 0b06 	add.w	fp, r2, r6
60005760:	2400      	movs	r4, #0
60005762:	4651      	mov	r1, sl
60005764:	2201      	movs	r2, #1
60005766:	9803      	ldr	r0, [sp, #12]
60005768:	9304      	str	r3, [sp, #16]
6000576a:	f011 fb4f 	bl	60016e0c <__lshift>
6000576e:	4649      	mov	r1, r9
60005770:	4682      	mov	sl, r0
60005772:	f011 fbc3 	bl	60016efc <__mcmp>
60005776:	2800      	cmp	r0, #0
60005778:	f340 81e3 	ble.w	60005b42 <_dtoa_r+0xaba>
6000577c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
6000577e:	e002      	b.n	60005786 <_dtoa_r+0x6fe>
60005780:	455a      	cmp	r2, fp
60005782:	f000 81e9 	beq.w	60005b58 <_dtoa_r+0xad0>
60005786:	465e      	mov	r6, fp
60005788:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
6000578c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
60005790:	2b39      	cmp	r3, #57	; 0x39
60005792:	d0f5      	beq.n	60005780 <_dtoa_r+0x6f8>
60005794:	3301      	adds	r3, #1
60005796:	f88b 3000 	strb.w	r3, [fp]
6000579a:	f8dd 800c 	ldr.w	r8, [sp, #12]
6000579e:	4649      	mov	r1, r9
600057a0:	4640      	mov	r0, r8
600057a2:	f011 f949 	bl	60016a38 <_Bfree>
600057a6:	b157      	cbz	r7, 600057be <_dtoa_r+0x736>
600057a8:	b12c      	cbz	r4, 600057b6 <_dtoa_r+0x72e>
600057aa:	42bc      	cmp	r4, r7
600057ac:	d003      	beq.n	600057b6 <_dtoa_r+0x72e>
600057ae:	4621      	mov	r1, r4
600057b0:	4640      	mov	r0, r8
600057b2:	f011 f941 	bl	60016a38 <_Bfree>
600057b6:	9803      	ldr	r0, [sp, #12]
600057b8:	4639      	mov	r1, r7
600057ba:	f011 f93d 	bl	60016a38 <_Bfree>
600057be:	9803      	ldr	r0, [sp, #12]
600057c0:	4651      	mov	r1, sl
600057c2:	f011 f939 	bl	60016a38 <_Bfree>
600057c6:	2300      	movs	r3, #0
600057c8:	7033      	strb	r3, [r6, #0]
600057ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
600057cc:	601d      	str	r5, [r3, #0]
600057ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
600057d0:	2b00      	cmp	r3, #0
600057d2:	f43f ac94 	beq.w	600050fe <_dtoa_r+0x76>
600057d6:	980a      	ldr	r0, [sp, #40]	; 0x28
600057d8:	601e      	str	r6, [r3, #0]
600057da:	b01f      	add	sp, #124	; 0x7c
600057dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
600057e0:	4658      	mov	r0, fp
600057e2:	f7fd f8ef 	bl	600029c4 <__aeabi_i2d>
600057e6:	4632      	mov	r2, r6
600057e8:	463b      	mov	r3, r7
600057ea:	f7fd fbbd 	bl	60002f68 <__aeabi_dcmpeq>
600057ee:	2800      	cmp	r0, #0
600057f0:	f47f acdc 	bne.w	600051ac <_dtoa_r+0x124>
600057f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
600057f8:	e4d8      	b.n	600051ac <_dtoa_r+0x124>
600057fa:	231c      	movs	r3, #28
600057fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
600057fe:	441a      	add	r2, r3
60005800:	920b      	str	r2, [sp, #44]	; 0x2c
60005802:	441e      	add	r6, r3
60005804:	441c      	add	r4, r3
60005806:	e76a      	b.n	600056de <_dtoa_r+0x656>
60005808:	9a28      	ldr	r2, [sp, #160]	; 0xa0
6000580a:	2a01      	cmp	r2, #1
6000580c:	f340 81a9 	ble.w	60005b62 <_dtoa_r+0xada>
60005810:	9a06      	ldr	r2, [sp, #24]
60005812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60005814:	1e55      	subs	r5, r2, #1
60005816:	42ab      	cmp	r3, r5
60005818:	f2c0 816b 	blt.w	60005af2 <_dtoa_r+0xa6a>
6000581c:	2a00      	cmp	r2, #0
6000581e:	eba3 0505 	sub.w	r5, r3, r5
60005822:	f280 82dd 	bge.w	60005de0 <_dtoa_r+0xd58>
60005826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
60005828:	9a06      	ldr	r2, [sp, #24]
6000582a:	1a9e      	subs	r6, r3, r2
6000582c:	9803      	ldr	r0, [sp, #12]
6000582e:	2101      	movs	r1, #1
60005830:	f011 f9ae 	bl	60016b90 <__i2b>
60005834:	4607      	mov	r7, r0
60005836:	e71a      	b.n	6000566e <_dtoa_r+0x5e6>
60005838:	f1c3 0320 	rsb	r3, r3, #32
6000583c:	fa06 f003 	lsl.w	r0, r6, r3
60005840:	e481      	b.n	60005146 <_dtoa_r+0xbe>
60005842:	2501      	movs	r5, #1
60005844:	e4e4      	b.n	60005210 <_dtoa_r+0x188>
60005846:	4639      	mov	r1, r7
60005848:	2300      	movs	r3, #0
6000584a:	9803      	ldr	r0, [sp, #12]
6000584c:	220a      	movs	r2, #10
6000584e:	f011 f8fd 	bl	60016a4c <__multadd>
60005852:	9b18      	ldr	r3, [sp, #96]	; 0x60
60005854:	2b00      	cmp	r3, #0
60005856:	4607      	mov	r7, r0
60005858:	f340 82ef 	ble.w	60005e3a <_dtoa_r+0xdb2>
6000585c:	950e      	str	r5, [sp, #56]	; 0x38
6000585e:	9306      	str	r3, [sp, #24]
60005860:	2e00      	cmp	r6, #0
60005862:	f300 813f 	bgt.w	60005ae4 <_dtoa_r+0xa5c>
60005866:	f1bb 0f00 	cmp.w	fp, #0
6000586a:	f040 81df 	bne.w	60005c2c <_dtoa_r+0xba4>
6000586e:	46b8      	mov	r8, r7
60005870:	9e0a      	ldr	r6, [sp, #40]	; 0x28
60005872:	9c06      	ldr	r4, [sp, #24]
60005874:	1e73      	subs	r3, r6, #1
60005876:	441c      	add	r4, r3
60005878:	9b04      	ldr	r3, [sp, #16]
6000587a:	940c      	str	r4, [sp, #48]	; 0x30
6000587c:	f003 0301 	and.w	r3, r3, #1
60005880:	9c03      	ldr	r4, [sp, #12]
60005882:	930f      	str	r3, [sp, #60]	; 0x3c
60005884:	4649      	mov	r1, r9
60005886:	4650      	mov	r0, sl
60005888:	f010 fb06 	bl	60015e98 <quorem>
6000588c:	4639      	mov	r1, r7
6000588e:	4683      	mov	fp, r0
60005890:	4650      	mov	r0, sl
60005892:	f011 fb33 	bl	60016efc <__mcmp>
60005896:	4642      	mov	r2, r8
60005898:	4649      	mov	r1, r9
6000589a:	4605      	mov	r5, r0
6000589c:	4620      	mov	r0, r4
6000589e:	f011 fb4d 	bl	60016f3c <__mdiff>
600058a2:	68c2      	ldr	r2, [r0, #12]
600058a4:	4601      	mov	r1, r0
600058a6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
600058aa:	2a00      	cmp	r2, #0
600058ac:	d13a      	bne.n	60005924 <_dtoa_r+0x89c>
600058ae:	9008      	str	r0, [sp, #32]
600058b0:	4650      	mov	r0, sl
600058b2:	930b      	str	r3, [sp, #44]	; 0x2c
600058b4:	f011 fb22 	bl	60016efc <__mcmp>
600058b8:	9908      	ldr	r1, [sp, #32]
600058ba:	9006      	str	r0, [sp, #24]
600058bc:	4620      	mov	r0, r4
600058be:	f011 f8bb 	bl	60016a38 <_Bfree>
600058c2:	9a06      	ldr	r2, [sp, #24]
600058c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
600058c6:	2a00      	cmp	r2, #0
600058c8:	d15a      	bne.n	60005980 <_dtoa_r+0x8f8>
600058ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
600058cc:	b91a      	cbnz	r2, 600058d6 <_dtoa_r+0x84e>
600058ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
600058d0:	2a00      	cmp	r2, #0
600058d2:	f000 829a 	beq.w	60005e0a <_dtoa_r+0xd82>
600058d6:	2d00      	cmp	r5, #0
600058d8:	db45      	blt.n	60005966 <_dtoa_r+0x8de>
600058da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
600058dc:	46b3      	mov	fp, r6
600058de:	42b2      	cmp	r2, r6
600058e0:	f80b 3b01 	strb.w	r3, [fp], #1
600058e4:	f000 81b9 	beq.w	60005c5a <_dtoa_r+0xbd2>
600058e8:	4651      	mov	r1, sl
600058ea:	2300      	movs	r3, #0
600058ec:	220a      	movs	r2, #10
600058ee:	4620      	mov	r0, r4
600058f0:	f011 f8ac 	bl	60016a4c <__multadd>
600058f4:	4547      	cmp	r7, r8
600058f6:	4682      	mov	sl, r0
600058f8:	4639      	mov	r1, r7
600058fa:	f04f 0300 	mov.w	r3, #0
600058fe:	f04f 020a 	mov.w	r2, #10
60005902:	4620      	mov	r0, r4
60005904:	d036      	beq.n	60005974 <_dtoa_r+0x8ec>
60005906:	f011 f8a1 	bl	60016a4c <__multadd>
6000590a:	4641      	mov	r1, r8
6000590c:	4607      	mov	r7, r0
6000590e:	2300      	movs	r3, #0
60005910:	220a      	movs	r2, #10
60005912:	4620      	mov	r0, r4
60005914:	f011 f89a 	bl	60016a4c <__multadd>
60005918:	465e      	mov	r6, fp
6000591a:	4680      	mov	r8, r0
6000591c:	e7b2      	b.n	60005884 <_dtoa_r+0x7fc>
6000591e:	bf00      	nop
60005920:	40240000 	.word	0x40240000
60005924:	9803      	ldr	r0, [sp, #12]
60005926:	9306      	str	r3, [sp, #24]
60005928:	f011 f886 	bl	60016a38 <_Bfree>
6000592c:	2d00      	cmp	r5, #0
6000592e:	9b06      	ldr	r3, [sp, #24]
60005930:	db06      	blt.n	60005940 <_dtoa_r+0x8b8>
60005932:	9a04      	ldr	r2, [sp, #16]
60005934:	9928      	ldr	r1, [sp, #160]	; 0xa0
60005936:	f002 0201 	and.w	r2, r2, #1
6000593a:	430d      	orrs	r5, r1
6000593c:	432a      	orrs	r2, r5
6000593e:	d12a      	bne.n	60005996 <_dtoa_r+0x90e>
60005940:	4651      	mov	r1, sl
60005942:	2201      	movs	r2, #1
60005944:	9803      	ldr	r0, [sp, #12]
60005946:	9304      	str	r3, [sp, #16]
60005948:	f011 fa60 	bl	60016e0c <__lshift>
6000594c:	4649      	mov	r1, r9
6000594e:	4682      	mov	sl, r0
60005950:	f011 fad4 	bl	60016efc <__mcmp>
60005954:	2800      	cmp	r0, #0
60005956:	9b04      	ldr	r3, [sp, #16]
60005958:	f340 80e8 	ble.w	60005b2c <_dtoa_r+0xaa4>
6000595c:	2b39      	cmp	r3, #57	; 0x39
6000595e:	f000 822f 	beq.w	60005dc0 <_dtoa_r+0xd38>
60005962:	f10b 0331 	add.w	r3, fp, #49	; 0x31
60005966:	9d0e      	ldr	r5, [sp, #56]	; 0x38
60005968:	f806 3b01 	strb.w	r3, [r6], #1
6000596c:	463c      	mov	r4, r7
6000596e:	3501      	adds	r5, #1
60005970:	4647      	mov	r7, r8
60005972:	e712      	b.n	6000579a <_dtoa_r+0x712>
60005974:	f011 f86a 	bl	60016a4c <__multadd>
60005978:	465e      	mov	r6, fp
6000597a:	4607      	mov	r7, r0
6000597c:	4680      	mov	r8, r0
6000597e:	e781      	b.n	60005884 <_dtoa_r+0x7fc>
60005980:	2d00      	cmp	r5, #0
60005982:	f2c0 827d 	blt.w	60005e80 <_dtoa_r+0xdf8>
60005986:	9928      	ldr	r1, [sp, #160]	; 0xa0
60005988:	430d      	orrs	r5, r1
6000598a:	990f      	ldr	r1, [sp, #60]	; 0x3c
6000598c:	430d      	orrs	r5, r1
6000598e:	f000 8277 	beq.w	60005e80 <_dtoa_r+0xdf8>
60005992:	2a00      	cmp	r2, #0
60005994:	dda1      	ble.n	600058da <_dtoa_r+0x852>
60005996:	2b39      	cmp	r3, #57	; 0x39
60005998:	f000 8212 	beq.w	60005dc0 <_dtoa_r+0xd38>
6000599c:	3301      	adds	r3, #1
6000599e:	e7e2      	b.n	60005966 <_dtoa_r+0x8de>
600059a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
600059a2:	2b02      	cmp	r3, #2
600059a4:	f77f aeb4 	ble.w	60005710 <_dtoa_r+0x688>
600059a8:	9b06      	ldr	r3, [sp, #24]
600059aa:	2b00      	cmp	r3, #0
600059ac:	f040 811d 	bne.w	60005bea <_dtoa_r+0xb62>
600059b0:	4649      	mov	r1, r9
600059b2:	2205      	movs	r2, #5
600059b4:	9803      	ldr	r0, [sp, #12]
600059b6:	f011 f849 	bl	60016a4c <__multadd>
600059ba:	4601      	mov	r1, r0
600059bc:	4681      	mov	r9, r0
600059be:	4650      	mov	r0, sl
600059c0:	f011 fa9c 	bl	60016efc <__mcmp>
600059c4:	2800      	cmp	r0, #0
600059c6:	f340 8110 	ble.w	60005bea <_dtoa_r+0xb62>
600059ca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
600059cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
600059ce:	2331      	movs	r3, #49	; 0x31
600059d0:	f806 3b01 	strb.w	r3, [r6], #1
600059d4:	3501      	adds	r5, #1
600059d6:	9803      	ldr	r0, [sp, #12]
600059d8:	4649      	mov	r1, r9
600059da:	3501      	adds	r5, #1
600059dc:	f011 f82c 	bl	60016a38 <_Bfree>
600059e0:	2f00      	cmp	r7, #0
600059e2:	f47f aee8 	bne.w	600057b6 <_dtoa_r+0x72e>
600059e6:	e6ea      	b.n	600057be <_dtoa_r+0x736>
600059e8:	4649      	mov	r1, r9
600059ea:	4650      	mov	r0, sl
600059ec:	f011 fa86 	bl	60016efc <__mcmp>
600059f0:	2800      	cmp	r0, #0
600059f2:	f6bf ae89 	bge.w	60005708 <_dtoa_r+0x680>
600059f6:	4651      	mov	r1, sl
600059f8:	2300      	movs	r3, #0
600059fa:	9803      	ldr	r0, [sp, #12]
600059fc:	220a      	movs	r2, #10
600059fe:	f011 f825 	bl	60016a4c <__multadd>
60005a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60005a04:	1e5d      	subs	r5, r3, #1
60005a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
60005a08:	4682      	mov	sl, r0
60005a0a:	2b00      	cmp	r3, #0
60005a0c:	f47f af1b 	bne.w	60005846 <_dtoa_r+0x7be>
60005a10:	9b18      	ldr	r3, [sp, #96]	; 0x60
60005a12:	2b00      	cmp	r3, #0
60005a14:	f340 81ff 	ble.w	60005e16 <_dtoa_r+0xd8e>
60005a18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
60005a1a:	9306      	str	r3, [sp, #24]
60005a1c:	e67e      	b.n	6000571c <_dtoa_r+0x694>
60005a1e:	4601      	mov	r1, r0
60005a20:	465a      	mov	r2, fp
60005a22:	9803      	ldr	r0, [sp, #12]
60005a24:	f011 f998 	bl	60016d58 <__pow5mult>
60005a28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
60005a2a:	2b01      	cmp	r3, #1
60005a2c:	4681      	mov	r9, r0
60005a2e:	dd6c      	ble.n	60005b0a <_dtoa_r+0xa82>
60005a30:	f04f 0b00 	mov.w	fp, #0
60005a34:	f8d9 3010 	ldr.w	r3, [r9, #16]
60005a38:	eb09 0383 	add.w	r3, r9, r3, lsl #2
60005a3c:	6918      	ldr	r0, [r3, #16]
60005a3e:	f011 f855 	bl	60016aec <__hi0bits>
60005a42:	f1c0 0020 	rsb	r0, r0, #32
60005a46:	e639      	b.n	600056bc <_dtoa_r+0x634>
60005a48:	4b92      	ldr	r3, [pc, #584]	; (60005c94 <_dtoa_r+0xc0c>)
60005a4a:	930a      	str	r3, [sp, #40]	; 0x28
60005a4c:	3303      	adds	r3, #3
60005a4e:	f7ff bbfa 	b.w	60005246 <_dtoa_r+0x1be>
60005a52:	9b04      	ldr	r3, [sp, #16]
60005a54:	2b00      	cmp	r3, #0
60005a56:	f47f ae30 	bne.w	600056ba <_dtoa_r+0x632>
60005a5a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
60005a5e:	f3c2 0313 	ubfx	r3, r2, #0, #20
60005a62:	2b00      	cmp	r3, #0
60005a64:	f47f ae29 	bne.w	600056ba <_dtoa_r+0x632>
60005a68:	4b8b      	ldr	r3, [pc, #556]	; (60005c98 <_dtoa_r+0xc10>)
60005a6a:	4013      	ands	r3, r2
60005a6c:	b123      	cbz	r3, 60005a78 <_dtoa_r+0x9f0>
60005a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
60005a70:	3301      	adds	r3, #1
60005a72:	930b      	str	r3, [sp, #44]	; 0x2c
60005a74:	3401      	adds	r4, #1
60005a76:	2301      	movs	r3, #1
60005a78:	f1bb 0f00 	cmp.w	fp, #0
60005a7c:	f040 81ae 	bne.w	60005ddc <_dtoa_r+0xd54>
60005a80:	469b      	mov	fp, r3
60005a82:	e61a      	b.n	600056ba <_dtoa_r+0x632>
60005a84:	f43f ae2b 	beq.w	600056de <_dtoa_r+0x656>
60005a88:	f1c0 033c 	rsb	r3, r0, #60	; 0x3c
60005a8c:	e6b6      	b.n	600057fc <_dtoa_r+0x774>
60005a8e:	2301      	movs	r3, #1
60005a90:	930c      	str	r3, [sp, #48]	; 0x30
60005a92:	9b29      	ldr	r3, [sp, #164]	; 0xa4
60005a94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
60005a96:	4413      	add	r3, r2
60005a98:	9318      	str	r3, [sp, #96]	; 0x60
60005a9a:	3301      	adds	r3, #1
60005a9c:	2b01      	cmp	r3, #1
60005a9e:	461e      	mov	r6, r3
60005aa0:	9306      	str	r3, [sp, #24]
60005aa2:	bfb8      	it	lt
60005aa4:	2601      	movlt	r6, #1
60005aa6:	2e17      	cmp	r6, #23
60005aa8:	f340 81d5 	ble.w	60005e56 <_dtoa_r+0xdce>
60005aac:	2201      	movs	r2, #1
60005aae:	2304      	movs	r3, #4
60005ab0:	005b      	lsls	r3, r3, #1
60005ab2:	f103 0014 	add.w	r0, r3, #20
60005ab6:	42b0      	cmp	r0, r6
60005ab8:	4611      	mov	r1, r2
60005aba:	f102 0201 	add.w	r2, r2, #1
60005abe:	d9f7      	bls.n	60005ab0 <_dtoa_r+0xa28>
60005ac0:	9b03      	ldr	r3, [sp, #12]
60005ac2:	6459      	str	r1, [r3, #68]	; 0x44
60005ac4:	e411      	b.n	600052ea <_dtoa_r+0x262>
60005ac6:	2301      	movs	r3, #1
60005ac8:	930c      	str	r3, [sp, #48]	; 0x30
60005aca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
60005acc:	2b00      	cmp	r3, #0
60005ace:	dd33      	ble.n	60005b38 <_dtoa_r+0xab0>
60005ad0:	9318      	str	r3, [sp, #96]	; 0x60
60005ad2:	9306      	str	r3, [sp, #24]
60005ad4:	461e      	mov	r6, r3
60005ad6:	e7e6      	b.n	60005aa6 <_dtoa_r+0xa1e>
60005ad8:	2300      	movs	r3, #0
60005ada:	930c      	str	r3, [sp, #48]	; 0x30
60005adc:	e7d9      	b.n	60005a92 <_dtoa_r+0xa0a>
60005ade:	2300      	movs	r3, #0
60005ae0:	930c      	str	r3, [sp, #48]	; 0x30
60005ae2:	e7f2      	b.n	60005aca <_dtoa_r+0xa42>
60005ae4:	4639      	mov	r1, r7
60005ae6:	9803      	ldr	r0, [sp, #12]
60005ae8:	4632      	mov	r2, r6
60005aea:	f011 f98f 	bl	60016e0c <__lshift>
60005aee:	4607      	mov	r7, r0
60005af0:	e6b9      	b.n	60005866 <_dtoa_r+0x7de>
60005af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60005af4:	9a06      	ldr	r2, [sp, #24]
60005af6:	950f      	str	r5, [sp, #60]	; 0x3c
60005af8:	1aeb      	subs	r3, r5, r3
60005afa:	449b      	add	fp, r3
60005afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
60005afe:	461e      	mov	r6, r3
60005b00:	4413      	add	r3, r2
60005b02:	4414      	add	r4, r2
60005b04:	930b      	str	r3, [sp, #44]	; 0x2c
60005b06:	2500      	movs	r5, #0
60005b08:	e690      	b.n	6000582c <_dtoa_r+0x7a4>
60005b0a:	9b04      	ldr	r3, [sp, #16]
60005b0c:	2b00      	cmp	r3, #0
60005b0e:	d18f      	bne.n	60005a30 <_dtoa_r+0x9a8>
60005b10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
60005b14:	f3c1 0313 	ubfx	r3, r1, #0, #20
60005b18:	460a      	mov	r2, r1
60005b1a:	2b00      	cmp	r3, #0
60005b1c:	d188      	bne.n	60005a30 <_dtoa_r+0x9a8>
60005b1e:	e7a3      	b.n	60005a68 <_dtoa_r+0x9e0>
60005b20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
60005b24:	2702      	movs	r7, #2
60005b26:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
60005b2a:	e40b      	b.n	60005344 <_dtoa_r+0x2bc>
60005b2c:	f47f af1b 	bne.w	60005966 <_dtoa_r+0x8de>
60005b30:	07da      	lsls	r2, r3, #31
60005b32:	f57f af18 	bpl.w	60005966 <_dtoa_r+0x8de>
60005b36:	e711      	b.n	6000595c <_dtoa_r+0x8d4>
60005b38:	2301      	movs	r3, #1
60005b3a:	9329      	str	r3, [sp, #164]	; 0xa4
60005b3c:	9306      	str	r3, [sp, #24]
60005b3e:	f7ff bbcf 	b.w	600052e0 <_dtoa_r+0x258>
60005b42:	d103      	bne.n	60005b4c <_dtoa_r+0xac4>
60005b44:	9b04      	ldr	r3, [sp, #16]
60005b46:	07db      	lsls	r3, r3, #31
60005b48:	f53f ae18 	bmi.w	6000577c <_dtoa_r+0x6f4>
60005b4c:	465e      	mov	r6, fp
60005b4e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
60005b52:	2b30      	cmp	r3, #48	; 0x30
60005b54:	d0fa      	beq.n	60005b4c <_dtoa_r+0xac4>
60005b56:	e620      	b.n	6000579a <_dtoa_r+0x712>
60005b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
60005b5a:	2331      	movs	r3, #49	; 0x31
60005b5c:	3501      	adds	r5, #1
60005b5e:	7013      	strb	r3, [r2, #0]
60005b60:	e61b      	b.n	6000579a <_dtoa_r+0x712>
60005b62:	9a11      	ldr	r2, [sp, #68]	; 0x44
60005b64:	2a00      	cmp	r2, #0
60005b66:	f000 80f9 	beq.w	60005d5c <_dtoa_r+0xcd4>
60005b6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
60005b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
60005b70:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
60005b72:	4616      	mov	r6, r2
60005b74:	441a      	add	r2, r3
60005b76:	441c      	add	r4, r3
60005b78:	920b      	str	r2, [sp, #44]	; 0x2c
60005b7a:	e657      	b.n	6000582c <_dtoa_r+0x7a4>
60005b7c:	f1c8 0301 	rsb	r3, r8, #1
60005b80:	4604      	mov	r4, r0
60005b82:	930b      	str	r3, [sp, #44]	; 0x2c
60005b84:	9010      	str	r0, [sp, #64]	; 0x40
60005b86:	f7ff bb9b 	b.w	600052c0 <_dtoa_r+0x238>
60005b8a:	f000 80eb 	beq.w	60005d64 <_dtoa_r+0xcdc>
60005b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60005b90:	4d42      	ldr	r5, [pc, #264]	; (60005c9c <_dtoa_r+0xc14>)
60005b92:	425e      	negs	r6, r3
60005b94:	f006 030f 	and.w	r3, r6, #15
60005b98:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
60005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
60005ba0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
60005ba4:	f7fc ff78 	bl	60002a98 <__aeabi_dmul>
60005ba8:	1135      	asrs	r5, r6, #4
60005baa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
60005bae:	f000 814d 	beq.w	60005e4c <_dtoa_r+0xdc4>
60005bb2:	4e3b      	ldr	r6, [pc, #236]	; (60005ca0 <_dtoa_r+0xc18>)
60005bb4:	2300      	movs	r3, #0
60005bb6:	2702      	movs	r7, #2
60005bb8:	4680      	mov	r8, r0
60005bba:	4689      	mov	r9, r1
60005bbc:	07e8      	lsls	r0, r5, #31
60005bbe:	d509      	bpl.n	60005bd4 <_dtoa_r+0xb4c>
60005bc0:	e9d6 2300 	ldrd	r2, r3, [r6]
60005bc4:	4640      	mov	r0, r8
60005bc6:	4649      	mov	r1, r9
60005bc8:	f7fc ff66 	bl	60002a98 <__aeabi_dmul>
60005bcc:	3701      	adds	r7, #1
60005bce:	4680      	mov	r8, r0
60005bd0:	4689      	mov	r9, r1
60005bd2:	2301      	movs	r3, #1
60005bd4:	106d      	asrs	r5, r5, #1
60005bd6:	f106 0608 	add.w	r6, r6, #8
60005bda:	d1ef      	bne.n	60005bbc <_dtoa_r+0xb34>
60005bdc:	2b00      	cmp	r3, #0
60005bde:	f47f abca 	bne.w	60005376 <_dtoa_r+0x2ee>
60005be2:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
60005be6:	f7ff bbc6 	b.w	60005376 <_dtoa_r+0x2ee>
60005bea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
60005bec:	e4ca      	b.n	60005584 <_dtoa_r+0x4fc>
60005bee:	f8dd a018 	ldr.w	sl, [sp, #24]
60005bf2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
60005bf4:	4602      	mov	r2, r0
60005bf6:	460b      	mov	r3, r1
60005bf8:	f7fc fd98 	bl	6000272c <__adddf3>
60005bfc:	4602      	mov	r2, r0
60005bfe:	460b      	mov	r3, r1
60005c00:	e9cd 2306 	strd	r2, r3, [sp, #24]
60005c04:	3501      	adds	r5, #1
60005c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
60005c0a:	46a8      	mov	r8, r5
60005c0c:	f7fd f9d4 	bl	60002fb8 <__aeabi_dcmpgt>
60005c10:	b940      	cbnz	r0, 60005c24 <_dtoa_r+0xb9c>
60005c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
60005c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
60005c1a:	f7fd f9a5 	bl	60002f68 <__aeabi_dcmpeq>
60005c1e:	b118      	cbz	r0, 60005c28 <_dtoa_r+0xba0>
60005c20:	07f1      	lsls	r1, r6, #31
60005c22:	d501      	bpl.n	60005c28 <_dtoa_r+0xba0>
60005c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
60005c26:	e44a      	b.n	600054be <_dtoa_r+0x436>
60005c28:	463e      	mov	r6, r7
60005c2a:	e5c8      	b.n	600057be <_dtoa_r+0x736>
60005c2c:	6879      	ldr	r1, [r7, #4]
60005c2e:	9803      	ldr	r0, [sp, #12]
60005c30:	f010 fedc 	bl	600169ec <_Balloc>
60005c34:	4605      	mov	r5, r0
60005c36:	2800      	cmp	r0, #0
60005c38:	f000 8126 	beq.w	60005e88 <_dtoa_r+0xe00>
60005c3c:	693b      	ldr	r3, [r7, #16]
60005c3e:	3302      	adds	r3, #2
60005c40:	009a      	lsls	r2, r3, #2
60005c42:	f107 010c 	add.w	r1, r7, #12
60005c46:	300c      	adds	r0, #12
60005c48:	f7fd fd76 	bl	60003738 <memcpy>
60005c4c:	9803      	ldr	r0, [sp, #12]
60005c4e:	4629      	mov	r1, r5
60005c50:	2201      	movs	r2, #1
60005c52:	f011 f8db 	bl	60016e0c <__lshift>
60005c56:	4680      	mov	r8, r0
60005c58:	e60a      	b.n	60005870 <_dtoa_r+0x7e8>
60005c5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
60005c5c:	463c      	mov	r4, r7
60005c5e:	3501      	adds	r5, #1
60005c60:	4647      	mov	r7, r8
60005c62:	e57e      	b.n	60005762 <_dtoa_r+0x6da>
60005c64:	f8dd 800c 	ldr.w	r8, [sp, #12]
60005c68:	4639      	mov	r1, r7
60005c6a:	462a      	mov	r2, r5
60005c6c:	4640      	mov	r0, r8
60005c6e:	f011 f873 	bl	60016d58 <__pow5mult>
60005c72:	4652      	mov	r2, sl
60005c74:	4601      	mov	r1, r0
60005c76:	4607      	mov	r7, r0
60005c78:	4640      	mov	r0, r8
60005c7a:	f010 ffb7 	bl	60016bec <__multiply>
60005c7e:	4651      	mov	r1, sl
60005c80:	4682      	mov	sl, r0
60005c82:	4640      	mov	r0, r8
60005c84:	f010 fed8 	bl	60016a38 <_Bfree>
60005c88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60005c8a:	1b5b      	subs	r3, r3, r5
60005c8c:	930f      	str	r3, [sp, #60]	; 0x3c
60005c8e:	f43f ad07 	beq.w	600056a0 <_dtoa_r+0x618>
60005c92:	e4ff      	b.n	60005694 <_dtoa_r+0x60c>
60005c94:	6001bfc8 	.word	0x6001bfc8
60005c98:	7ff00000 	.word	0x7ff00000
60005c9c:	6001a488 	.word	0x6001a488
60005ca0:	6001a460 	.word	0x6001a460
60005ca4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
60005ca8:	f7fc fef6 	bl	60002a98 <__aeabi_dmul>
60005cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
60005cae:	701f      	strb	r7, [r3, #0]
60005cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
60005cb2:	2b01      	cmp	r3, #1
60005cb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
60005cb8:	f000 80c6 	beq.w	60005e48 <_dtoa_r+0xdc0>
60005cbc:	9f12      	ldr	r7, [sp, #72]	; 0x48
60005cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
60005cc0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
60005cc4:	441f      	add	r7, r3
60005cc6:	4b7c      	ldr	r3, [pc, #496]	; (60005eb8 <_dtoa_r+0xe30>)
60005cc8:	2200      	movs	r2, #0
60005cca:	4640      	mov	r0, r8
60005ccc:	4649      	mov	r1, r9
60005cce:	f7fc fee3 	bl	60002a98 <__aeabi_dmul>
60005cd2:	4689      	mov	r9, r1
60005cd4:	4680      	mov	r8, r0
60005cd6:	f7fd f979 	bl	60002fcc <__aeabi_d2iz>
60005cda:	4683      	mov	fp, r0
60005cdc:	f7fc fe72 	bl	600029c4 <__aeabi_i2d>
60005ce0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
60005ce4:	4602      	mov	r2, r0
60005ce6:	460b      	mov	r3, r1
60005ce8:	4640      	mov	r0, r8
60005cea:	4649      	mov	r1, r9
60005cec:	f7fc fd1c 	bl	60002728 <__aeabi_dsub>
60005cf0:	f806 bb01 	strb.w	fp, [r6], #1
60005cf4:	42b7      	cmp	r7, r6
60005cf6:	4680      	mov	r8, r0
60005cf8:	4689      	mov	r9, r1
60005cfa:	d1e4      	bne.n	60005cc6 <_dtoa_r+0xc3e>
60005cfc:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
60005d00:	4b6e      	ldr	r3, [pc, #440]	; (60005ebc <_dtoa_r+0xe34>)
60005d02:	2200      	movs	r2, #0
60005d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
60005d08:	f7fc fd10 	bl	6000272c <__adddf3>
60005d0c:	4602      	mov	r2, r0
60005d0e:	460b      	mov	r3, r1
60005d10:	4640      	mov	r0, r8
60005d12:	4649      	mov	r1, r9
60005d14:	f7fd f950 	bl	60002fb8 <__aeabi_dcmpgt>
60005d18:	2800      	cmp	r0, #0
60005d1a:	d167      	bne.n	60005dec <_dtoa_r+0xd64>
60005d1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
60005d20:	4966      	ldr	r1, [pc, #408]	; (60005ebc <_dtoa_r+0xe34>)
60005d22:	2000      	movs	r0, #0
60005d24:	f7fc fd00 	bl	60002728 <__aeabi_dsub>
60005d28:	4602      	mov	r2, r0
60005d2a:	460b      	mov	r3, r1
60005d2c:	4640      	mov	r0, r8
60005d2e:	4649      	mov	r1, r9
60005d30:	f7fd f924 	bl	60002f7c <__aeabi_dcmplt>
60005d34:	b948      	cbnz	r0, 60005d4a <_dtoa_r+0xcc2>
60005d36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
60005d38:	2b00      	cmp	r3, #0
60005d3a:	f6ff ac93 	blt.w	60005664 <_dtoa_r+0x5dc>
60005d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60005d40:	2b0e      	cmp	r3, #14
60005d42:	f73f ac8f 	bgt.w	60005664 <_dtoa_r+0x5dc>
60005d46:	f7ff bbfc 	b.w	60005542 <_dtoa_r+0x4ba>
60005d4a:	463e      	mov	r6, r7
60005d4c:	3f01      	subs	r7, #1
60005d4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
60005d52:	2b30      	cmp	r3, #48	; 0x30
60005d54:	d0f9      	beq.n	60005d4a <_dtoa_r+0xcc2>
60005d56:	9d19      	ldr	r5, [sp, #100]	; 0x64
60005d58:	3501      	adds	r5, #1
60005d5a:	e530      	b.n	600057be <_dtoa_r+0x736>
60005d5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
60005d5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
60005d62:	e704      	b.n	60005b6e <_dtoa_r+0xae6>
60005d64:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
60005d68:	2702      	movs	r7, #2
60005d6a:	f7ff bb04 	b.w	60005376 <_dtoa_r+0x2ee>
60005d6e:	9b06      	ldr	r3, [sp, #24]
60005d70:	2b00      	cmp	r3, #0
60005d72:	f43f abb8 	beq.w	600054e6 <_dtoa_r+0x45e>
60005d76:	9b18      	ldr	r3, [sp, #96]	; 0x60
60005d78:	2b00      	cmp	r3, #0
60005d7a:	f77f abd9 	ble.w	60005530 <_dtoa_r+0x4a8>
60005d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
60005d80:	9312      	str	r3, [sp, #72]	; 0x48
60005d82:	3a01      	subs	r2, #1
60005d84:	4b4c      	ldr	r3, [pc, #304]	; (60005eb8 <_dtoa_r+0xe30>)
60005d86:	9219      	str	r2, [sp, #100]	; 0x64
60005d88:	4640      	mov	r0, r8
60005d8a:	2200      	movs	r2, #0
60005d8c:	4649      	mov	r1, r9
60005d8e:	f7fc fe83 	bl	60002a98 <__aeabi_dmul>
60005d92:	4680      	mov	r8, r0
60005d94:	4689      	mov	r9, r1
60005d96:	1c78      	adds	r0, r7, #1
60005d98:	f7fc fe14 	bl	600029c4 <__aeabi_i2d>
60005d9c:	4642      	mov	r2, r8
60005d9e:	464b      	mov	r3, r9
60005da0:	f7fc fe7a 	bl	60002a98 <__aeabi_dmul>
60005da4:	4b46      	ldr	r3, [pc, #280]	; (60005ec0 <_dtoa_r+0xe38>)
60005da6:	2200      	movs	r2, #0
60005da8:	f7fc fcc0 	bl	6000272c <__adddf3>
60005dac:	4606      	mov	r6, r0
60005dae:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
60005db2:	f7ff bb01 	b.w	600053b8 <_dtoa_r+0x330>
60005db6:	f108 0801 	add.w	r8, r8, #1
60005dba:	2331      	movs	r3, #49	; 0x31
60005dbc:	f7ff bb86 	b.w	600054cc <_dtoa_r+0x444>
60005dc0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
60005dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
60005dc4:	46b3      	mov	fp, r6
60005dc6:	2339      	movs	r3, #57	; 0x39
60005dc8:	463c      	mov	r4, r7
60005dca:	f80b 3b01 	strb.w	r3, [fp], #1
60005dce:	3501      	adds	r5, #1
60005dd0:	4647      	mov	r7, r8
60005dd2:	e4d8      	b.n	60005786 <_dtoa_r+0x6fe>
60005dd4:	f04f 0900 	mov.w	r9, #0
60005dd8:	464f      	mov	r7, r9
60005dda:	e5f6      	b.n	600059ca <_dtoa_r+0x942>
60005ddc:	469b      	mov	fp, r3
60005dde:	e629      	b.n	60005a34 <_dtoa_r+0x9ac>
60005de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
60005de2:	461e      	mov	r6, r3
60005de4:	4413      	add	r3, r2
60005de6:	4414      	add	r4, r2
60005de8:	930b      	str	r3, [sp, #44]	; 0x2c
60005dea:	e51f      	b.n	6000582c <_dtoa_r+0x7a4>
60005dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
60005dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
60005df0:	f103 0801 	add.w	r8, r3, #1
60005df4:	f7ff bb63 	b.w	600054be <_dtoa_r+0x436>
60005df8:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
60005dfc:	e7ab      	b.n	60005d56 <_dtoa_r+0xcce>
60005dfe:	e9dd b41a 	ldrd	fp, r4, [sp, #104]	; 0x68
60005e02:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
60005e06:	f7ff bb93 	b.w	60005530 <_dtoa_r+0x4a8>
60005e0a:	2b39      	cmp	r3, #57	; 0x39
60005e0c:	d0d8      	beq.n	60005dc0 <_dtoa_r+0xd38>
60005e0e:	2d00      	cmp	r5, #0
60005e10:	f73f ada7 	bgt.w	60005962 <_dtoa_r+0x8da>
60005e14:	e5a7      	b.n	60005966 <_dtoa_r+0x8de>
60005e16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
60005e18:	2b02      	cmp	r3, #2
60005e1a:	dc0a      	bgt.n	60005e32 <_dtoa_r+0xdaa>
60005e1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
60005e1e:	9306      	str	r3, [sp, #24]
60005e20:	4649      	mov	r1, r9
60005e22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
60005e24:	f010 f838 	bl	60015e98 <quorem>
60005e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
60005e2a:	f100 0330 	add.w	r3, r0, #48	; 0x30
60005e2e:	7013      	strb	r3, [r2, #0]
60005e30:	e48d      	b.n	6000574e <_dtoa_r+0x6c6>
60005e32:	9b18      	ldr	r3, [sp, #96]	; 0x60
60005e34:	9306      	str	r3, [sp, #24]
60005e36:	950e      	str	r5, [sp, #56]	; 0x38
60005e38:	e5b6      	b.n	600059a8 <_dtoa_r+0x920>
60005e3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
60005e3c:	2b02      	cmp	r3, #2
60005e3e:	dcf8      	bgt.n	60005e32 <_dtoa_r+0xdaa>
60005e40:	9b18      	ldr	r3, [sp, #96]	; 0x60
60005e42:	950e      	str	r5, [sp, #56]	; 0x38
60005e44:	9306      	str	r3, [sp, #24]
60005e46:	e50b      	b.n	60005860 <_dtoa_r+0x7d8>
60005e48:	4637      	mov	r7, r6
60005e4a:	e759      	b.n	60005d00 <_dtoa_r+0xc78>
60005e4c:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
60005e50:	2702      	movs	r7, #2
60005e52:	f7ff ba90 	b.w	60005376 <_dtoa_r+0x2ee>
60005e56:	9b03      	ldr	r3, [sp, #12]
60005e58:	2100      	movs	r1, #0
60005e5a:	6459      	str	r1, [r3, #68]	; 0x44
60005e5c:	f7ff ba45 	b.w	600052ea <_dtoa_r+0x262>
60005e60:	9b03      	ldr	r3, [sp, #12]
60005e62:	2500      	movs	r5, #0
60005e64:	645d      	str	r5, [r3, #68]	; 0x44
60005e66:	4629      	mov	r1, r5
60005e68:	4618      	mov	r0, r3
60005e6a:	f010 fdbf 	bl	600169ec <_Balloc>
60005e6e:	900a      	str	r0, [sp, #40]	; 0x28
60005e70:	b9a8      	cbnz	r0, 60005e9e <_dtoa_r+0xe16>
60005e72:	4b14      	ldr	r3, [pc, #80]	; (60005ec4 <_dtoa_r+0xe3c>)
60005e74:	4814      	ldr	r0, [pc, #80]	; (60005ec8 <_dtoa_r+0xe40>)
60005e76:	2200      	movs	r2, #0
60005e78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
60005e7c:	f00c ff60 	bl	60012d40 <__assert_func>
60005e80:	2a00      	cmp	r2, #0
60005e82:	f77f ad70 	ble.w	60005966 <_dtoa_r+0x8de>
60005e86:	e55b      	b.n	60005940 <_dtoa_r+0x8b8>
60005e88:	4b0e      	ldr	r3, [pc, #56]	; (60005ec4 <_dtoa_r+0xe3c>)
60005e8a:	480f      	ldr	r0, [pc, #60]	; (60005ec8 <_dtoa_r+0xe40>)
60005e8c:	462a      	mov	r2, r5
60005e8e:	f240 21ea 	movw	r1, #746	; 0x2ea
60005e92:	f00c ff55 	bl	60012d40 <__assert_func>
60005e96:	4b0d      	ldr	r3, [pc, #52]	; (60005ecc <_dtoa_r+0xe44>)
60005e98:	930a      	str	r3, [sp, #40]	; 0x28
60005e9a:	f7ff b930 	b.w	600050fe <_dtoa_r+0x76>
60005e9e:	9b03      	ldr	r3, [sp, #12]
60005ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
60005ea2:	641a      	str	r2, [r3, #64]	; 0x40
60005ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60005ea8:	2201      	movs	r2, #1
60005eaa:	9529      	str	r5, [sp, #164]	; 0xa4
60005eac:	9318      	str	r3, [sp, #96]	; 0x60
60005eae:	920c      	str	r2, [sp, #48]	; 0x30
60005eb0:	9306      	str	r3, [sp, #24]
60005eb2:	f7ff bb3d 	b.w	60005530 <_dtoa_r+0x4a8>
60005eb6:	bf00      	nop
60005eb8:	40240000 	.word	0x40240000
60005ebc:	3fe00000 	.word	0x3fe00000
60005ec0:	401c0000 	.word	0x401c0000
60005ec4:	6001bfcc 	.word	0x6001bfcc
60005ec8:	6001bfe0 	.word	0x6001bfe0
60005ecc:	6001bfbc 	.word	0x6001bfbc

60005ed0 <process_ina219>:
#include "ina_219.h"

int process_ina219(const struct device *dev, struct ina_219_data *ina_sensor_data)
{
60005ed0:	b570      	push	{r4, r5, r6, lr}
60005ed2:	4604      	mov	r4, r0
60005ed4:	460e      	mov	r6, r1
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
60005ed6:	6883      	ldr	r3, [r0, #8]
60005ed8:	2139      	movs	r1, #57	; 0x39
60005eda:	68db      	ldr	r3, [r3, #12]
60005edc:	4798      	blx	r3
    int rc = sensor_sample_fetch(dev);
    if (rc) {
60005ede:	4605      	mov	r5, r0
60005ee0:	b120      	cbz	r0, 60005eec <process_ina219+0x1c>
        printf("\nCould not fetch sensor data.\n");
60005ee2:	480b      	ldr	r0, [pc, #44]	; (60005f10 <process_ina219+0x40>)
60005ee4:	f00d fa8a 	bl	600133fc <printf>
    sensor_channel_get(dev, SENSOR_CHAN_CURRENT, &ina_sensor_data->current);

    k_mutex_unlock(&ina_sensor_mutex);

    return rc;
}
60005ee8:	4628      	mov	r0, r5
60005eea:	bd70      	pop	{r4, r5, r6, pc}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
60005eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60005ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60005ef4:	4807      	ldr	r0, [pc, #28]	; (60005f14 <process_ina219+0x44>)
60005ef6:	f00a f8fb 	bl	600100f0 <z_impl_k_mutex_lock>
	return api->channel_get(dev, chan, val);
60005efa:	68a3      	ldr	r3, [r4, #8]
60005efc:	f106 0210 	add.w	r2, r6, #16
60005f00:	211f      	movs	r1, #31
60005f02:	4620      	mov	r0, r4
60005f04:	691b      	ldr	r3, [r3, #16]
60005f06:	4798      	blx	r3
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
60005f08:	4802      	ldr	r0, [pc, #8]	; (60005f14 <process_ina219+0x44>)
60005f0a:	f00a f9c1 	bl	60010290 <z_impl_k_mutex_unlock>
60005f0e:	e7eb      	b.n	60005ee8 <process_ina219+0x18>
60005f10:	6001c0fe 	.word	0x6001c0fe
60005f14:	202034b8 	.word	0x202034b8

60005f18 <read_pot_adc>:
{
60005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60005f1c:	b0a9      	sub	sp, #164	; 0xa4
	sequence.buffer_size = sizeof(buf);
60005f1e:	2302      	movs	r3, #2
	sequence.buffer = &buf;
60005f20:	4d38      	ldr	r5, [pc, #224]	; (60006004 <read_pot_adc+0xec>)
	float rawBuffer[WINDOW_SIZE] = {0};
60005f22:	228c      	movs	r2, #140	; 0x8c
	sequence.buffer = &buf;
60005f24:	4f38      	ldr	r7, [pc, #224]	; (60006008 <read_pot_adc+0xf0>)
	float rawBuffer[WINDOW_SIZE] = {0};
60005f26:	2100      	movs	r1, #0
60005f28:	a805      	add	r0, sp, #20
	sequence.buffer_size = sizeof(buf);
60005f2a:	60eb      	str	r3, [r5, #12]
	sequence.buffer = &buf;
60005f2c:	60af      	str	r7, [r5, #8]
	float rawBuffer[WINDOW_SIZE] = {0};
60005f2e:	f00d fa07 	bl	60013340 <memset>
	k_sleep(K_SECONDS(4));
60005f32:	f649 4040 	movw	r0, #40000	; 0x9c40
60005f36:	2100      	movs	r1, #0
60005f38:	f011 fc81 	bl	6001783e <k_sleep.isra.0>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
60005f3c:	4e33      	ldr	r6, [pc, #204]	; (6000600c <read_pot_adc+0xf4>)
60005f3e:	4630      	mov	r0, r6
60005f40:	f013 fc97 	bl	60019872 <z_device_is_ready>
		if (!device_is_ready(adc_channels[i].dev)) {
60005f44:	b918      	cbnz	r0, 60005f4e <read_pot_adc+0x36>
			printk("ADC controller device %s not ready\n", adc_channels[i].dev->name);
60005f46:	6831      	ldr	r1, [r6, #0]
60005f48:	4831      	ldr	r0, [pc, #196]	; (60006010 <read_pot_adc+0xf8>)
60005f4a:	f011 fd2e 	bl	600179aa <printk>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
60005f4e:	68b3      	ldr	r3, [r6, #8]
60005f50:	4930      	ldr	r1, [pc, #192]	; (60006014 <read_pot_adc+0xfc>)
60005f52:	681b      	ldr	r3, [r3, #0]
60005f54:	482d      	ldr	r0, [pc, #180]	; (6000600c <read_pot_adc+0xf4>)
60005f56:	4798      	blx	r3
		if (err < 0) {
60005f58:	1e02      	subs	r2, r0, #0
60005f5a:	da03      	bge.n	60005f64 <read_pot_adc+0x4c>
			printk("Could not setup channel #%d (%d)\n", i, err);
60005f5c:	2100      	movs	r1, #0
60005f5e:	482e      	ldr	r0, [pc, #184]	; (60006018 <read_pot_adc+0x100>)
60005f60:	f011 fd23 	bl	600179aa <printk>
	int currentIndex = 0;
60005f64:	2400      	movs	r4, #0
60005f66:	f04f 0800 	mov.w	r8, #0
60005f6a:	f04f 0900 	mov.w	r9, #0
		float sum = 0;
60005f6e:	f04f 0b00 	mov.w	fp, #0
	z_impl_k_timer_start(timer, duration, period);
60005f72:	220a      	movs	r2, #10
60005f74:	2300      	movs	r3, #0
60005f76:	4829      	ldr	r0, [pc, #164]	; (6000601c <read_pot_adc+0x104>)
60005f78:	e9cd 8900 	strd	r8, r9, [sp]
60005f7c:	f00c fb9c 	bl	600126b8 <z_impl_k_timer_start>
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
60005f80:	2302      	movs	r3, #2
		k_mutex_lock(&pot_adc_mutex, K_FOREVER);
60005f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60005f86:	4826      	ldr	r0, [pc, #152]	; (60006020 <read_pot_adc+0x108>)
60005f88:	606b      	str	r3, [r5, #4]
	seq->resolution = spec->resolution;
60005f8a:	230c      	movs	r3, #12
60005f8c:	822b      	strh	r3, [r5, #16]
60005f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60005f92:	f011 fc4e 	bl	60017832 <k_mutex_lock.constprop.0.isra.0>
	return api->read(dev, sequence);
60005f96:	68b3      	ldr	r3, [r6, #8]
60005f98:	491a      	ldr	r1, [pc, #104]	; (60006004 <read_pot_adc+0xec>)
60005f9a:	685b      	ldr	r3, [r3, #4]
60005f9c:	481b      	ldr	r0, [pc, #108]	; (6000600c <read_pot_adc+0xf4>)
60005f9e:	4798      	blx	r3
		if (err < 0) {
60005fa0:	1e01      	subs	r1, r0, #0
60005fa2:	da03      	bge.n	60005fac <read_pot_adc+0x94>
			printk("Could not read (%d)\n", err);
60005fa4:	481f      	ldr	r0, [pc, #124]	; (60006024 <read_pot_adc+0x10c>)
60005fa6:	f011 fd00 	bl	600179aa <printk>
			continue;
60005faa:	e7e2      	b.n	60005f72 <read_pot_adc+0x5a>
		k_mutex_unlock(&pot_adc_mutex);
60005fac:	481c      	ldr	r0, [pc, #112]	; (60006020 <read_pot_adc+0x108>)
60005fae:	f011 fc42 	bl	60017836 <k_mutex_unlock.isra.0>
		rawBuffer[currentIndex] = buf;
60005fb2:	ab28      	add	r3, sp, #160	; 0xa0
60005fb4:	8838      	ldrh	r0, [r7, #0]
60005fb6:	eb03 0a84 	add.w	sl, r3, r4, lsl #2
		currentIndex = (currentIndex + 1) % WINDOW_SIZE;
60005fba:	3401      	adds	r4, #1
		rawBuffer[currentIndex] = buf;
60005fbc:	f7fd f934 	bl	60003228 <__aeabi_ui2f>
		currentIndex = (currentIndex + 1) % WINDOW_SIZE;
60005fc0:	2323      	movs	r3, #35	; 0x23
		rawBuffer[currentIndex] = buf;
60005fc2:	f84a 0c8c 	str.w	r0, [sl, #-140]
		float sum = 0;
60005fc6:	46dc      	mov	ip, fp
		for (int i = 0; i < WINDOW_SIZE; ++i) {
60005fc8:	f04f 0a00 	mov.w	sl, #0
		currentIndex = (currentIndex + 1) % WINDOW_SIZE;
60005fcc:	fbb4 f2f3 	udiv	r2, r4, r3
60005fd0:	fb03 4412 	mls	r4, r3, r2, r4
		for (int i = 0; i < WINDOW_SIZE; ++i) {
60005fd4:	aa05      	add	r2, sp, #20
			sum += rawBuffer[i];
60005fd6:	f852 1b04 	ldr.w	r1, [r2], #4
		for (int i = 0; i < WINDOW_SIZE; ++i) {
60005fda:	f10a 0a01 	add.w	sl, sl, #1
			sum += rawBuffer[i];
60005fde:	4660      	mov	r0, ip
60005fe0:	9203      	str	r2, [sp, #12]
60005fe2:	f7fd f871 	bl	600030c8 <__addsf3>
		for (int i = 0; i < WINDOW_SIZE; ++i) {
60005fe6:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
			sum += rawBuffer[i];
60005fea:	4684      	mov	ip, r0
		for (int i = 0; i < WINDOW_SIZE; ++i) {
60005fec:	9a03      	ldr	r2, [sp, #12]
60005fee:	d1f2      	bne.n	60005fd6 <read_pot_adc+0xbe>
		filteredEncoderReading = sum / WINDOW_SIZE;
60005ff0:	490d      	ldr	r1, [pc, #52]	; (60006028 <read_pot_adc+0x110>)
60005ff2:	f7fd fa25 	bl	60003440 <__aeabi_fdiv>
60005ff6:	4b0d      	ldr	r3, [pc, #52]	; (6000602c <read_pot_adc+0x114>)
60005ff8:	6018      	str	r0, [r3, #0]
		k_timer_status_sync(&pot_adc_timer);
60005ffa:	4808      	ldr	r0, [pc, #32]	; (6000601c <read_pot_adc+0x104>)
60005ffc:	f011 fc1d 	bl	6001783a <k_timer_status_sync.isra.0>
60006000:	e7b7      	b.n	60005f72 <read_pot_adc+0x5a>
60006002:	bf00      	nop
60006004:	202046d4 	.word	0x202046d4
60006008:	20204e18 	.word	0x20204e18
6000600c:	60019c74 	.word	0x60019c74
60006010:	6001c11d 	.word	0x6001c11d
60006014:	6001a566 	.word	0x6001a566
60006018:	6001c141 	.word	0x6001c141
6000601c:	20203400 	.word	0x20203400
60006020:	202034e0 	.word	0x202034e0
60006024:	6001c163 	.word	0x6001c163
60006028:	420c0000 	.word	0x420c0000
6000602c:	202046d0 	.word	0x202046d0

60006030 <cadence_detection>:
{
60006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60006032:	4b2d      	ldr	r3, [pc, #180]	; (600060e8 <cadence_detection+0xb8>)
	for (int ii = 0; ii < DELAY - 1; ii++) {
60006034:	2200      	movs	r2, #0
	float sample = point->data;
60006036:	6901      	ldr	r1, [r0, #16]
	int count = point->count;
60006038:	6945      	ldr	r5, [r0, #20]
	for (int ii = 0; ii < DELAY - 1; ii++) {
6000603a:	461c      	mov	r4, r3
		point_arr[ii] = point_arr[ii + 1]; // shift
6000603c:	3201      	adds	r2, #1
6000603e:	6858      	ldr	r0, [r3, #4]
	for (int ii = 0; ii < DELAY - 1; ii++) {
60006040:	2a18      	cmp	r2, #24
		point_arr[ii] = point_arr[ii + 1]; // shift
60006042:	f843 0b04 	str.w	r0, [r3], #4
	for (int ii = 0; ii < DELAY - 1; ii++) {
60006046:	d1f9      	bne.n	6000603c <cadence_detection+0xc>
	if (point_arr[2] < 9) {
60006048:	68a6      	ldr	r6, [r4, #8]
	point_arr[DELAY - 1] = sample;
6000604a:	6621      	str	r1, [r4, #96]	; 0x60
	if (point_arr[2] < 9) {
6000604c:	4630      	mov	r0, r6
6000604e:	4927      	ldr	r1, [pc, #156]	; (600060ec <cadence_detection+0xbc>)
60006050:	f7fd fae0 	bl	60003614 <__aeabi_fcmplt>
60006054:	b110      	cbz	r0, 6000605c <cadence_detection+0x2c>
		ready = true;
60006056:	4b26      	ldr	r3, [pc, #152]	; (600060f0 <cadence_detection+0xc0>)
60006058:	2201      	movs	r2, #1
6000605a:	701a      	strb	r2, [r3, #0]
	if (point_arr[1] > point_arr[0] && point_arr[2] < point_arr[1] && ready == true) {
6000605c:	6867      	ldr	r7, [r4, #4]
6000605e:	6821      	ldr	r1, [r4, #0]
60006060:	4638      	mov	r0, r7
60006062:	f7fd faf5 	bl	60003650 <__aeabi_fcmpgt>
60006066:	2800      	cmp	r0, #0
60006068:	d03c      	beq.n	600060e4 <cadence_detection+0xb4>
6000606a:	4639      	mov	r1, r7
6000606c:	4630      	mov	r0, r6
6000606e:	f7fd fad1 	bl	60003614 <__aeabi_fcmplt>
60006072:	2800      	cmp	r0, #0
60006074:	d036      	beq.n	600060e4 <cadence_detection+0xb4>
60006076:	4e1e      	ldr	r6, [pc, #120]	; (600060f0 <cadence_detection+0xc0>)
60006078:	7833      	ldrb	r3, [r6, #0]
6000607a:	2b00      	cmp	r3, #0
6000607c:	d032      	beq.n	600060e4 <cadence_detection+0xb4>
		if (count > (loc + 120)) {
6000607e:	4c1d      	ldr	r4, [pc, #116]	; (600060f4 <cadence_detection+0xc4>)
60006080:	6823      	ldr	r3, [r4, #0]
60006082:	3378      	adds	r3, #120	; 0x78
60006084:	42ab      	cmp	r3, r5
60006086:	da2d      	bge.n	600060e4 <cadence_detection+0xb4>
			avg = mean_val(point_arr, 3);
60006088:	2103      	movs	r1, #3
6000608a:	4817      	ldr	r0, [pc, #92]	; (600060e8 <cadence_detection+0xb8>)
6000608c:	f011 fbde 	bl	6001784c <mean_val>
			if (avg > threshold) {
60006090:	4b19      	ldr	r3, [pc, #100]	; (600060f8 <cadence_detection+0xc8>)
60006092:	6819      	ldr	r1, [r3, #0]
60006094:	f7fd fadc 	bl	60003650 <__aeabi_fcmpgt>
60006098:	b320      	cbz	r0, 600060e4 <cadence_detection+0xb4>
				k_mutex_lock(&mpu_sensor_mutex, K_FOREVER);
6000609a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000609e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
600060a2:	4816      	ldr	r0, [pc, #88]	; (600060fc <cadence_detection+0xcc>)
600060a4:	f011 fbc5 	bl	60017832 <k_mutex_lock.constprop.0.isra.0>
				time_between_steps = (float)(count - loc) / 610;
600060a8:	6820      	ldr	r0, [r4, #0]
				cadence = 1 / time_between_steps;
600060aa:	4f15      	ldr	r7, [pc, #84]	; (60006100 <cadence_detection+0xd0>)
				time_between_steps = (float)(count - loc) / 610;
600060ac:	1a28      	subs	r0, r5, r0
600060ae:	f7fd f8bf 	bl	60003230 <__aeabi_i2f>
600060b2:	4914      	ldr	r1, [pc, #80]	; (60006104 <cadence_detection+0xd4>)
600060b4:	f7fd f9c4 	bl	60003440 <__aeabi_fdiv>
600060b8:	4b13      	ldr	r3, [pc, #76]	; (60006108 <cadence_detection+0xd8>)
600060ba:	6018      	str	r0, [r3, #0]
				cadence = 1 / time_between_steps;
600060bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
600060c0:	6819      	ldr	r1, [r3, #0]
600060c2:	f7fd f9bd 	bl	60003440 <__aeabi_fdiv>
600060c6:	6038      	str	r0, [r7, #0]
				k_mutex_unlock(&mpu_sensor_mutex);
600060c8:	480c      	ldr	r0, [pc, #48]	; (600060fc <cadence_detection+0xcc>)
600060ca:	f011 fbb4 	bl	60017836 <k_mutex_unlock.isra.0>
				printk("s%f\n", cadence);
600060ce:	6838      	ldr	r0, [r7, #0]
600060d0:	f7fc fc8a 	bl	600029e8 <__aeabi_f2d>
600060d4:	4602      	mov	r2, r0
600060d6:	460b      	mov	r3, r1
600060d8:	480c      	ldr	r0, [pc, #48]	; (6000610c <cadence_detection+0xdc>)
600060da:	f011 fc66 	bl	600179aa <printk>
				ready = false; // reset trigger bool
600060de:	2300      	movs	r3, #0
				loc = count;
600060e0:	6025      	str	r5, [r4, #0]
				ready = false; // reset trigger bool
600060e2:	7033      	strb	r3, [r6, #0]
}
600060e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600060e6:	bf00      	nop
600060e8:	20204728 	.word	0x20204728
600060ec:	41100000 	.word	0x41100000
600060f0:	20204e2c 	.word	0x20204e2c
600060f4:	202046b4 	.word	0x202046b4
600060f8:	2020307c 	.word	0x2020307c
600060fc:	202034cc 	.word	0x202034cc
60006100:	202046e8 	.word	0x202046e8
60006104:	44188000 	.word	0x44188000
60006108:	202046ec 	.word	0x202046ec
6000610c:	6001c180 	.word	0x6001c180

60006110 <base_swing>:
	ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
60006110:	2100      	movs	r1, #0
60006112:	481e      	ldr	r0, [pc, #120]	; (6000618c <base_swing+0x7c>)
{
60006114:	b510      	push	{r4, lr}
	ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
60006116:	f7fd fd0f 	bl	60003b38 <pwm_set_pulse_dt>
6000611a:	4c1d      	ldr	r4, [pc, #116]	; (60006190 <base_swing+0x80>)
	if (ret < 0) {
6000611c:	2800      	cmp	r0, #0
	ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
6000611e:	4601      	mov	r1, r0
60006120:	6020      	str	r0, [r4, #0]
	if (ret < 0) {
60006122:	da02      	bge.n	6000612a <base_swing+0x1a>
		printk("Error %d: failed to set pulse width for pin 28\n", ret);
60006124:	481b      	ldr	r0, [pc, #108]	; (60006194 <base_swing+0x84>)
60006126:	f011 fc40 	bl	600179aa <printk>
	k_msleep(700);
6000612a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
6000612e:	f011 fb88 	bl	60017842 <k_msleep.isra.0>
	ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
60006132:	2100      	movs	r1, #0
60006134:	4815      	ldr	r0, [pc, #84]	; (6000618c <base_swing+0x7c>)
60006136:	f7fd fcff 	bl	60003b38 <pwm_set_pulse_dt>
	if (ret < 0) {
6000613a:	2800      	cmp	r0, #0
	ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
6000613c:	4601      	mov	r1, r0
6000613e:	6020      	str	r0, [r4, #0]
	if (ret < 0) {
60006140:	da02      	bge.n	60006148 <base_swing+0x38>
		printk("Error %d: failed to set pulse width for pin 28\n", ret);
60006142:	4814      	ldr	r0, [pc, #80]	; (60006194 <base_swing+0x84>)
60006144:	f011 fc31 	bl	600179aa <printk>
	k_msleep(50);
60006148:	2032      	movs	r0, #50	; 0x32
6000614a:	f011 fb7a 	bl	60017842 <k_msleep.isra.0>
	ret = pwm_set_pulse_dt(&pwm_29, min_pulse_28);
6000614e:	2100      	movs	r1, #0
60006150:	4811      	ldr	r0, [pc, #68]	; (60006198 <base_swing+0x88>)
60006152:	f7fd fcf1 	bl	60003b38 <pwm_set_pulse_dt>
	if (ret < 0) {
60006156:	2800      	cmp	r0, #0
	ret = pwm_set_pulse_dt(&pwm_29, min_pulse_28);
60006158:	4601      	mov	r1, r0
6000615a:	6020      	str	r0, [r4, #0]
	if (ret < 0) {
6000615c:	da02      	bge.n	60006164 <base_swing+0x54>
		printk("Error %d: failed to set pulse width for pin 28\n", ret);
6000615e:	480d      	ldr	r0, [pc, #52]	; (60006194 <base_swing+0x84>)
60006160:	f011 fc23 	bl	600179aa <printk>
	k_msleep(700);
60006164:	f44f 702f 	mov.w	r0, #700	; 0x2bc
60006168:	f011 fb6b 	bl	60017842 <k_msleep.isra.0>
	ret = pwm_set_pulse_dt(&pwm_29, min_pulse_29);
6000616c:	2100      	movs	r1, #0
6000616e:	480a      	ldr	r0, [pc, #40]	; (60006198 <base_swing+0x88>)
60006170:	f7fd fce2 	bl	60003b38 <pwm_set_pulse_dt>
	if (ret < 0) {
60006174:	2800      	cmp	r0, #0
	ret = pwm_set_pulse_dt(&pwm_29, min_pulse_29);
60006176:	4601      	mov	r1, r0
60006178:	6020      	str	r0, [r4, #0]
	if (ret < 0) {
6000617a:	da02      	bge.n	60006182 <base_swing+0x72>
		printk("Error %d: failed to set pulse width for pin 28\n", ret);
6000617c:	4805      	ldr	r0, [pc, #20]	; (60006194 <base_swing+0x84>)
6000617e:	f011 fc14 	bl	600179aa <printk>
	k_msleep(50);
60006182:	2032      	movs	r0, #50	; 0x32
60006184:	f011 fb5d 	bl	60017842 <k_msleep.isra.0>
}
60006188:	6820      	ldr	r0, [r4, #0]
6000618a:	bd10      	pop	{r4, pc}
6000618c:	6001a580 	.word	0x6001a580
60006190:	202046f4 	.word	0x202046f4
60006194:	6001c18d 	.word	0x6001c18d
60006198:	6001a570 	.word	0x6001a570

6000619c <controlled_swing>:
{
6000619c:	b538      	push	{r3, r4, r5, lr}
	if (dir_flag == -1) {
6000619e:	4b26      	ldr	r3, [pc, #152]	; (60006238 <controlled_swing+0x9c>)
		ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
600061a0:	2100      	movs	r1, #0
600061a2:	4c26      	ldr	r4, [pc, #152]	; (6000623c <controlled_swing+0xa0>)
	if (dir_flag == -1) {
600061a4:	681b      	ldr	r3, [r3, #0]
600061a6:	1c5a      	adds	r2, r3, #1
600061a8:	d118      	bne.n	600061dc <controlled_swing+0x40>
		ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
600061aa:	4825      	ldr	r0, [pc, #148]	; (60006240 <controlled_swing+0xa4>)
600061ac:	f7fd fcc4 	bl	60003b38 <pwm_set_pulse_dt>
		if (ret < 0) {
600061b0:	2800      	cmp	r0, #0
		ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
600061b2:	4601      	mov	r1, r0
600061b4:	6020      	str	r0, [r4, #0]
		if (ret < 0) {
600061b6:	da02      	bge.n	600061be <controlled_swing+0x22>
			printk("Error %d: failed to set 0 pulse width for 28\n", ret);
600061b8:	4822      	ldr	r0, [pc, #136]	; (60006244 <controlled_swing+0xa8>)
600061ba:	f011 fbf6 	bl	600179aa <printk>
		ret = pwm_set_pulse_dt(&pwm_29, pwm_val);
600061be:	4d22      	ldr	r5, [pc, #136]	; (60006248 <controlled_swing+0xac>)
600061c0:	4822      	ldr	r0, [pc, #136]	; (6000624c <controlled_swing+0xb0>)
600061c2:	6829      	ldr	r1, [r5, #0]
600061c4:	f7fd fcb8 	bl	60003b38 <pwm_set_pulse_dt>
		if (ret < 0) {
600061c8:	2800      	cmp	r0, #0
		ret = pwm_set_pulse_dt(&pwm_29, pwm_val);
600061ca:	4601      	mov	r1, r0
600061cc:	6020      	str	r0, [r4, #0]
		if (ret < 0) {
600061ce:	da03      	bge.n	600061d8 <controlled_swing+0x3c>
			printk("Error %d: failed to set pulse %d width for pin 29\n", ret, pwm_val);
600061d0:	682a      	ldr	r2, [r5, #0]
600061d2:	481f      	ldr	r0, [pc, #124]	; (60006250 <controlled_swing+0xb4>)
			printk("Error %d: failed to set pulse %d width for pin 28\n", ret, pwm_val);
600061d4:	f011 fbe9 	bl	600179aa <printk>
}
600061d8:	6820      	ldr	r0, [r4, #0]
600061da:	bd38      	pop	{r3, r4, r5, pc}
	} else if (dir_flag == 1) {
600061dc:	2b01      	cmp	r3, #1
		ret = pwm_set_pulse_dt(&pwm_29, min_pulse_29);
600061de:	481b      	ldr	r0, [pc, #108]	; (6000624c <controlled_swing+0xb0>)
	} else if (dir_flag == 1) {
600061e0:	d114      	bne.n	6000620c <controlled_swing+0x70>
		ret = pwm_set_pulse_dt(&pwm_29, min_pulse_29);
600061e2:	f7fd fca9 	bl	60003b38 <pwm_set_pulse_dt>
		if (ret < 0) {
600061e6:	2800      	cmp	r0, #0
		ret = pwm_set_pulse_dt(&pwm_29, min_pulse_29);
600061e8:	4601      	mov	r1, r0
600061ea:	6020      	str	r0, [r4, #0]
		if (ret < 0) {
600061ec:	da02      	bge.n	600061f4 <controlled_swing+0x58>
			printk("Error %d: failed to set 0 pulse width for 29\n", ret);
600061ee:	4819      	ldr	r0, [pc, #100]	; (60006254 <controlled_swing+0xb8>)
600061f0:	f011 fbdb 	bl	600179aa <printk>
		ret = pwm_set_pulse_dt(&pwm_28, pwm_val);
600061f4:	4d14      	ldr	r5, [pc, #80]	; (60006248 <controlled_swing+0xac>)
600061f6:	4812      	ldr	r0, [pc, #72]	; (60006240 <controlled_swing+0xa4>)
600061f8:	6829      	ldr	r1, [r5, #0]
600061fa:	f7fd fc9d 	bl	60003b38 <pwm_set_pulse_dt>
		if (ret < 0) {
600061fe:	2800      	cmp	r0, #0
		ret = pwm_set_pulse_dt(&pwm_28, pwm_val);
60006200:	4601      	mov	r1, r0
60006202:	6020      	str	r0, [r4, #0]
		if (ret < 0) {
60006204:	dae8      	bge.n	600061d8 <controlled_swing+0x3c>
			printk("Error %d: failed to set pulse %d width for pin 28\n", ret, pwm_val);
60006206:	682a      	ldr	r2, [r5, #0]
60006208:	4813      	ldr	r0, [pc, #76]	; (60006258 <controlled_swing+0xbc>)
6000620a:	e7e3      	b.n	600061d4 <controlled_swing+0x38>
		ret = pwm_set_pulse_dt(&pwm_29, min_pulse_29);
6000620c:	f7fd fc94 	bl	60003b38 <pwm_set_pulse_dt>
		if (ret < 0) {
60006210:	2800      	cmp	r0, #0
		ret = pwm_set_pulse_dt(&pwm_29, min_pulse_29);
60006212:	4601      	mov	r1, r0
60006214:	6020      	str	r0, [r4, #0]
		if (ret < 0) {
60006216:	da02      	bge.n	6000621e <controlled_swing+0x82>
			printf("error %d: failed to set 0 pulse width\n", ret);
60006218:	4810      	ldr	r0, [pc, #64]	; (6000625c <controlled_swing+0xc0>)
6000621a:	f00d f8ef 	bl	600133fc <printf>
		ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
6000621e:	2100      	movs	r1, #0
60006220:	4807      	ldr	r0, [pc, #28]	; (60006240 <controlled_swing+0xa4>)
60006222:	f7fd fc89 	bl	60003b38 <pwm_set_pulse_dt>
		if (ret < 0) {
60006226:	2800      	cmp	r0, #0
		ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
60006228:	4601      	mov	r1, r0
6000622a:	6020      	str	r0, [r4, #0]
		if (ret < 0) {
6000622c:	dad4      	bge.n	600061d8 <controlled_swing+0x3c>
			printf("error %d: failed to set 0 pulse width\n", ret);
6000622e:	480b      	ldr	r0, [pc, #44]	; (6000625c <controlled_swing+0xc0>)
60006230:	f00d f8e4 	bl	600133fc <printf>
60006234:	e7d0      	b.n	600061d8 <controlled_swing+0x3c>
60006236:	bf00      	nop
60006238:	20203080 	.word	0x20203080
6000623c:	202046f4 	.word	0x202046f4
60006240:	6001a580 	.word	0x6001a580
60006244:	6001c1bd 	.word	0x6001c1bd
60006248:	202046f8 	.word	0x202046f8
6000624c:	6001a570 	.word	0x6001a570
60006250:	6001c1eb 	.word	0x6001c1eb
60006254:	6001c21e 	.word	0x6001c21e
60006258:	6001c24c 	.word	0x6001c24c
6000625c:	6001c27f 	.word	0x6001c27f

60006260 <motor_control>:
{
60006260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
60006262:	4c1e      	ldr	r4, [pc, #120]	; (600062dc <motor_control+0x7c>)
60006264:	4620      	mov	r0, r4
60006266:	f013 fb04 	bl	60019872 <z_device_is_ready>
	if (!device_is_ready(pwm_28.dev)) {
6000626a:	b918      	cbnz	r0, 60006274 <motor_control+0x14>
		printf("Error: PWM device %s is not ready\n", pwm_28.dev->name);
6000626c:	6821      	ldr	r1, [r4, #0]
6000626e:	481c      	ldr	r0, [pc, #112]	; (600062e0 <motor_control+0x80>)
60006270:	f00d f8c4 	bl	600133fc <printf>
60006274:	4819      	ldr	r0, [pc, #100]	; (600062dc <motor_control+0x7c>)
60006276:	f013 fafc 	bl	60019872 <z_device_is_ready>
	if (!device_is_ready(pwm_29.dev)) {
6000627a:	b918      	cbnz	r0, 60006284 <motor_control+0x24>
		printf("Error: PWM device %s is not ready\n", pwm_29.dev->name);
6000627c:	6821      	ldr	r1, [r4, #0]
6000627e:	4818      	ldr	r0, [pc, #96]	; (600062e0 <motor_control+0x80>)
60006280:	f00d f8bc 	bl	600133fc <printf>
	ret = pwm_set_pulse_dt(&pwm_29, min_pulse_29);
60006284:	2100      	movs	r1, #0
60006286:	4817      	ldr	r0, [pc, #92]	; (600062e4 <motor_control+0x84>)
60006288:	f7fd fc56 	bl	60003b38 <pwm_set_pulse_dt>
	if (ret < 0) {
6000628c:	1e01      	subs	r1, r0, #0
6000628e:	da02      	bge.n	60006296 <motor_control+0x36>
		printf("Error %d: failed to set pulse width\n", ret);
60006290:	4815      	ldr	r0, [pc, #84]	; (600062e8 <motor_control+0x88>)
60006292:	f00d f8b3 	bl	600133fc <printf>
	ret = pwm_set_pulse_dt(&pwm_28, min_pulse_28);
60006296:	2100      	movs	r1, #0
60006298:	4814      	ldr	r0, [pc, #80]	; (600062ec <motor_control+0x8c>)
6000629a:	f7fd fc4d 	bl	60003b38 <pwm_set_pulse_dt>
	if (ret < 0) {
6000629e:	1e01      	subs	r1, r0, #0
600062a0:	da02      	bge.n	600062a8 <motor_control+0x48>
		printf("Error %d: failed to set pulse width\n", ret);
600062a2:	4811      	ldr	r0, [pc, #68]	; (600062e8 <motor_control+0x88>)
600062a4:	f00d f8aa 	bl	600133fc <printf>
600062a8:	2600      	movs	r6, #0
600062aa:	2700      	movs	r7, #0
600062ac:	4c10      	ldr	r4, [pc, #64]	; (600062f0 <motor_control+0x90>)
		if (!motion_detect) {
600062ae:	4d11      	ldr	r5, [pc, #68]	; (600062f4 <motor_control+0x94>)
600062b0:	2300      	movs	r3, #0
600062b2:	220a      	movs	r2, #10
600062b4:	4620      	mov	r0, r4
600062b6:	e9cd 6700 	strd	r6, r7, [sp]
600062ba:	f00c f9fd 	bl	600126b8 <z_impl_k_timer_start>
600062be:	782b      	ldrb	r3, [r5, #0]
600062c0:	b93b      	cbnz	r3, 600062d2 <motor_control+0x72>
			res = base_swing();
600062c2:	f7ff ff25 	bl	60006110 <base_swing>
			if (res < 0.0) {
600062c6:	2800      	cmp	r0, #0
600062c8:	db06      	blt.n	600062d8 <motor_control+0x78>
		k_timer_status_sync(&motor_control_timer);
600062ca:	4620      	mov	r0, r4
600062cc:	f011 fab5 	bl	6001783a <k_timer_status_sync.isra.0>
	while (1) {
600062d0:	e7ee      	b.n	600062b0 <motor_control+0x50>
			res = controlled_swing();
600062d2:	f7ff ff63 	bl	6000619c <controlled_swing>
600062d6:	e7f6      	b.n	600062c6 <motor_control+0x66>
}
600062d8:	b003      	add	sp, #12
600062da:	bdf0      	pop	{r4, r5, r6, r7, pc}
600062dc:	60019ca4 	.word	0x60019ca4
600062e0:	6001c2a6 	.word	0x6001c2a6
600062e4:	6001a570 	.word	0x6001a570
600062e8:	6001c2c9 	.word	0x6001c2c9
600062ec:	6001a580 	.word	0x6001a580
600062f0:	20203390 	.word	0x20203390
600062f4:	20204e2d 	.word	0x20204e2d

600062f8 <sensors_init>:
{
600062f8:	b510      	push	{r4, lr}
	if (strcmp(sensor_compat, "mpu") == 0) {
600062fa:	4910      	ldr	r1, [pc, #64]	; (6000633c <sensors_init+0x44>)
{
600062fc:	4604      	mov	r4, r0
	if (strcmp(sensor_compat, "mpu") == 0) {
600062fe:	f7fc f853 	bl	600023a8 <strcmp>
60006302:	b190      	cbz	r0, 6000632a <sensors_init+0x32>
	} else if (strcmp(sensor_compat, "ina") == 0) {
60006304:	490e      	ldr	r1, [pc, #56]	; (60006340 <sensors_init+0x48>)
60006306:	4620      	mov	r0, r4
60006308:	f7fc f84e 	bl	600023a8 <strcmp>
6000630c:	b978      	cbnz	r0, 6000632e <sensors_init+0x36>
		dev = DEVICE_DT_GET_ONE(INA_COMPAT);
6000630e:	4c0d      	ldr	r4, [pc, #52]	; (60006344 <sensors_init+0x4c>)
		printk("\nDevice found on Teensy DTS\n");
60006310:	480d      	ldr	r0, [pc, #52]	; (60006348 <sensors_init+0x50>)
60006312:	f011 fb4a 	bl	600179aa <printk>
60006316:	4620      	mov	r0, r4
60006318:	f013 faab 	bl	60019872 <z_device_is_ready>
		printk("\nDevice %s is ready\n", dev->name);
6000631c:	6821      	ldr	r1, [r4, #0]
	if (device_is_ready(dev)) {
6000631e:	b140      	cbz	r0, 60006332 <sensors_init+0x3a>
		printk("\nDevice %s is ready\n", dev->name);
60006320:	480a      	ldr	r0, [pc, #40]	; (6000634c <sensors_init+0x54>)
60006322:	f011 fb42 	bl	600179aa <printk>
}
60006326:	4620      	mov	r0, r4
60006328:	bd10      	pop	{r4, pc}
		dev = DEVICE_DT_GET_ONE(MPU_COMPAT);
6000632a:	4c09      	ldr	r4, [pc, #36]	; (60006350 <sensors_init+0x58>)
6000632c:	e7f0      	b.n	60006310 <sensors_init+0x18>
	const struct device *dev = NULL;
6000632e:	2400      	movs	r4, #0
60006330:	e7f1      	b.n	60006316 <sensors_init+0x1e>
		printf("Device %s is not ready\n", dev->name);
60006332:	4808      	ldr	r0, [pc, #32]	; (60006354 <sensors_init+0x5c>)
60006334:	f00d f862 	bl	600133fc <printf>
	return dev;
60006338:	e7f5      	b.n	60006326 <sensors_init+0x2e>
6000633a:	bf00      	nop
6000633c:	6001c2ee 	.word	0x6001c2ee
60006340:	6001c2f2 	.word	0x6001c2f2
60006344:	60019cbc 	.word	0x60019cbc
60006348:	6001c2f6 	.word	0x6001c2f6
6000634c:	6001c313 	.word	0x6001c313
60006350:	60019cd4 	.word	0x60019cd4
60006354:	6001c328 	.word	0x6001c328

60006358 <ina_sensor_read>:
{
60006358:	b538      	push	{r3, r4, r5, lr}
	ina_dev = sensors_init(sensor_name);
6000635a:	4c06      	ldr	r4, [pc, #24]	; (60006374 <ina_sensor_read+0x1c>)
		int rc = process_ina219(ina_dev, &ina_data);
6000635c:	4d06      	ldr	r5, [pc, #24]	; (60006378 <ina_sensor_read+0x20>)
	ina_dev = sensors_init(sensor_name);
6000635e:	4807      	ldr	r0, [pc, #28]	; (6000637c <ina_sensor_read+0x24>)
60006360:	f7ff ffca 	bl	600062f8 <sensors_init>
60006364:	6020      	str	r0, [r4, #0]
		int rc = process_ina219(ina_dev, &ina_data);
60006366:	4629      	mov	r1, r5
60006368:	6820      	ldr	r0, [r4, #0]
6000636a:	f7ff fdb1 	bl	60005ed0 <process_ina219>
		if (rc != 0) {
6000636e:	2800      	cmp	r0, #0
60006370:	d0f9      	beq.n	60006366 <ina_sensor_read+0xe>
}
60006372:	bd38      	pop	{r3, r4, r5, pc}
60006374:	20204798 	.word	0x20204798
60006378:	202047a0 	.word	0x202047a0
6000637c:	6001c2f2 	.word	0x6001c2f2

60006380 <process_mpu6050>:
		 h, min, s, ms);
	return buf;
}

int process_mpu6050(const struct device *dev, struct mpu_6050_data *mpu_sensor_data)
{
60006380:	b570      	push	{r4, r5, r6, lr}
60006382:	4605      	mov	r5, r0
60006384:	460e      	mov	r6, r1
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
60006386:	6883      	ldr	r3, [r0, #8]
60006388:	2139      	movs	r1, #57	; 0x39
6000638a:	68db      	ldr	r3, [r3, #12]
6000638c:	4798      	blx	r3
6000638e:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
60006390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60006394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60006398:	4811      	ldr	r0, [pc, #68]	; (600063e0 <process_mpu6050+0x60>)
6000639a:	f009 fea9 	bl	600100f0 <z_impl_k_mutex_lock>
    extern struct k_mutex mpu_sensor_mutex; 

    k_mutex_lock(&mpu_sensor_mutex, K_FOREVER);


    if (rc == 0) {
6000639e:	b13c      	cbz	r4, 600063b0 <process_mpu6050+0x30>
	return z_impl_k_mutex_unlock(mutex);
600063a0:	480f      	ldr	r0, [pc, #60]	; (600063e0 <process_mpu6050+0x60>)
600063a2:	f009 ff75 	bl	60010290 <z_impl_k_mutex_unlock>
    k_mutex_unlock(&mpu_sensor_mutex);


	if (rc == 0) {
	} else {
		printk("sample fetch/get failed: %d\n", rc);
600063a6:	4621      	mov	r1, r4
600063a8:	480e      	ldr	r0, [pc, #56]	; (600063e4 <process_mpu6050+0x64>)
600063aa:	f011 fafe 	bl	600179aa <printk>
	}

	 

	return rc;
600063ae:	e015      	b.n	600063dc <process_mpu6050+0x5c>
	return api->channel_get(dev, chan, val);
600063b0:	68ab      	ldr	r3, [r5, #8]
600063b2:	4632      	mov	r2, r6
600063b4:	2103      	movs	r1, #3
600063b6:	4628      	mov	r0, r5
600063b8:	691b      	ldr	r3, [r3, #16]
600063ba:	4798      	blx	r3
	if (rc == 0) {
600063bc:	4604      	mov	r4, r0
600063be:	2800      	cmp	r0, #0
600063c0:	d1ee      	bne.n	600063a0 <process_mpu6050+0x20>
600063c2:	68ab      	ldr	r3, [r5, #8]
600063c4:	f106 0218 	add.w	r2, r6, #24
600063c8:	2107      	movs	r1, #7
600063ca:	4628      	mov	r0, r5
600063cc:	691b      	ldr	r3, [r3, #16]
600063ce:	4798      	blx	r3
600063d0:	4604      	mov	r4, r0
600063d2:	4803      	ldr	r0, [pc, #12]	; (600063e0 <process_mpu6050+0x60>)
600063d4:	f009 ff5c 	bl	60010290 <z_impl_k_mutex_unlock>
	if (rc == 0) {
600063d8:	2c00      	cmp	r4, #0
600063da:	d1e4      	bne.n	600063a6 <process_mpu6050+0x26>
600063dc:	4620      	mov	r0, r4
600063de:	bd70      	pop	{r4, r5, r6, pc}
600063e0:	202034cc 	.word	0x202034cc
600063e4:	6001c38c 	.word	0x6001c38c

600063e8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
600063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600063ec:	b091      	sub	sp, #68	; 0x44
600063ee:	4605      	mov	r5, r0
600063f0:	460e      	mov	r6, r1
600063f2:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
600063f4:	f002 0304 	and.w	r3, r2, #4
600063f8:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
600063fc:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
600063fe:	f3c2 03c2 	ubfx	r3, r2, #3, #3
{
60006402:	9202      	str	r2, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
60006404:	3301      	adds	r3, #1
60006406:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
60006408:	0783      	lsls	r3, r0, #30
6000640a:	f040 81fe 	bne.w	6000680a <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
6000640e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
60006410:	b130      	cbz	r0, 60006420 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
60006412:	2907      	cmp	r1, #7
60006414:	d809      	bhi.n	6000642a <cbvprintf_package+0x42>
		return -ENOSPC;
60006416:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
6000641a:	b011      	add	sp, #68	; 0x44
6000641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
60006420:	f001 0607 	and.w	r6, r1, #7
60006424:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
60006426:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
6000642a:	f04f 0800 	mov.w	r8, #0
	s = fmt--;
6000642e:	9b00      	ldr	r3, [sp, #0]
	align = VA_STACK_ALIGN(char *);
60006430:	f04f 0b04 	mov.w	fp, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
60006434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	s = fmt--;
60006438:	1e59      	subs	r1, r3, #1
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
6000643a:	4647      	mov	r7, r8
	bool parsing = false;
6000643c:	4643      	mov	r3, r8
	size = sizeof(char *);
6000643e:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
60006440:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
60006444:	b10d      	cbz	r5, 6000644a <cbvprintf_package+0x62>
				*(const char **)buf = s;
60006446:	9800      	ldr	r0, [sp, #0]
60006448:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
6000644a:	9804      	ldr	r0, [sp, #16]
6000644c:	2800      	cmp	r0, #0
6000644e:	f300 80e1 	bgt.w	60006614 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
60006452:	489c      	ldr	r0, [pc, #624]	; (600066c4 <cbvprintf_package+0x2dc>)
60006454:	f8dd c000 	ldr.w	ip, [sp]
60006458:	4584      	cmp	ip, r0
6000645a:	d303      	bcc.n	60006464 <cbvprintf_package+0x7c>
6000645c:	489a      	ldr	r0, [pc, #616]	; (600066c8 <cbvprintf_package+0x2e0>)
6000645e:	4584      	cmp	ip, r0
60006460:	f0c0 80d8 	bcc.w	60006614 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60006464:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60006468:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
6000646c:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60006470:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60006474:	f000 80e9 	beq.w	6000664a <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60006478:	f04f 0c00 	mov.w	ip, #0
6000647c:	e0d3      	b.n	60006626 <cbvprintf_package+0x23e>
			switch (*fmt) {
6000647e:	287a      	cmp	r0, #122	; 0x7a
60006480:	d864      	bhi.n	6000654c <cbvprintf_package+0x164>
60006482:	284b      	cmp	r0, #75	; 0x4b
60006484:	d80f      	bhi.n	600064a6 <cbvprintf_package+0xbe>
60006486:	2847      	cmp	r0, #71	; 0x47
60006488:	d860      	bhi.n	6000654c <cbvprintf_package+0x164>
6000648a:	2829      	cmp	r0, #41	; 0x29
6000648c:	d82f      	bhi.n	600064ee <cbvprintf_package+0x106>
6000648e:	2825      	cmp	r0, #37	; 0x25
60006490:	d05b      	beq.n	6000654a <cbvprintf_package+0x162>
60006492:	d85b      	bhi.n	6000654c <cbvprintf_package+0x164>
60006494:	2820      	cmp	r0, #32
60006496:	d07f      	beq.n	60006598 <cbvprintf_package+0x1b0>
60006498:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
6000649c:	f1d9 0300 	rsbs	r3, r9, #0
600064a0:	eb43 0309 	adc.w	r3, r3, r9
600064a4:	e078      	b.n	60006598 <cbvprintf_package+0x1b0>
600064a6:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
600064aa:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
600064ae:	d84d      	bhi.n	6000654c <cbvprintf_package+0x164>
600064b0:	e8df f00e 	tbb	[pc, lr]
600064b4:	4c4c4c72 	.word	0x4c4c4c72
600064b8:	4c4c4c4c 	.word	0x4c4c4c4c
600064bc:	4c4c4c4c 	.word	0x4c4c4c4c
600064c0:	4c4c4c4e 	.word	0x4c4c4c4e
600064c4:	4c4c4c4c 	.word	0x4c4c4c4c
600064c8:	4e4c5c4c 	.word	0x4e4c5c4c
600064cc:	5c5c5c4e 	.word	0x5c5c5c4e
600064d0:	4c6f4e72 	.word	0x4c6f4e72
600064d4:	4e184c72 	.word	0x4e184c72
600064d8:	814c4c18 	.word	0x814c4c18
600064dc:	4c4c4e7e 	.word	0x4c4c4e7e
600064e0:	4c4e      	.short	0x4c4e
600064e2:	7e          	.byte	0x7e
600064e3:	00          	.byte	0x00
600064e4:	2000      	movs	r0, #0
600064e6:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
600064e8:	f04f 0b04 	mov.w	fp, #4
600064ec:	e03c      	b.n	60006568 <cbvprintf_package+0x180>
			switch (*fmt) {
600064ee:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
600064f2:	2001      	movs	r0, #1
600064f4:	fa5f fe8e 	uxtb.w	lr, lr
600064f8:	fa00 fe0e 	lsl.w	lr, r0, lr
600064fc:	f64f 70da 	movw	r0, #65498	; 0xffda
60006500:	ea1e 0f00 	tst.w	lr, r0
60006504:	d148      	bne.n	60006598 <cbvprintf_package+0x1b0>
60006506:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
6000650a:	d12f      	bne.n	6000656c <cbvprintf_package+0x184>
6000650c:	f01e 0301 	ands.w	r3, lr, #1
60006510:	d042      	beq.n	60006598 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
60006512:	3c01      	subs	r4, #1
60006514:	f1cb 0e00 	rsb	lr, fp, #0
60006518:	445c      	add	r4, fp
6000651a:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
6000651e:	2d00      	cmp	r5, #0
60006520:	d05e      	beq.n	600065e0 <cbvprintf_package+0x1f8>
60006522:	ebaa 0e05 	sub.w	lr, sl, r5
60006526:	44a6      	add	lr, r4
60006528:	4576      	cmp	r6, lr
6000652a:	f4ff af74 	bcc.w	60006416 <cbvprintf_package+0x2e>
		if (is_str_arg) {
6000652e:	2800      	cmp	r0, #0
60006530:	d168      	bne.n	60006604 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
60006532:	f1ba 0f04 	cmp.w	sl, #4
60006536:	d143      	bne.n	600065c0 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
60006538:	46e1      	mov	r9, ip
6000653a:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
6000653e:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
60006540:	3404      	adds	r4, #4
60006542:	46cc      	mov	ip, r9
60006544:	f04f 0a04 	mov.w	sl, #4
60006548:	e026      	b.n	60006598 <cbvprintf_package+0x1b0>
				arg_idx--;
6000654a:	3a01      	subs	r2, #1
				parsing = false;
6000654c:	2300      	movs	r3, #0
				continue;
6000654e:	e023      	b.n	60006598 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
60006550:	f811 3c01 	ldrb.w	r3, [r1, #-1]
60006554:	2b6c      	cmp	r3, #108	; 0x6c
60006556:	d130      	bne.n	600065ba <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
60006558:	f811 3c02 	ldrb.w	r3, [r1, #-2]
6000655c:	2000      	movs	r0, #0
6000655e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
60006560:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
60006562:	d1c1      	bne.n	600064e8 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
60006564:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
60006568:	46da      	mov	sl, fp
6000656a:	e7d2      	b.n	60006512 <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
6000656c:	f10c 0907 	add.w	r9, ip, #7
				buf = (void *) ROUND_UP(buf, align);
60006570:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
60006572:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
60006576:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
6000657a:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
6000657e:	b135      	cbz	r5, 6000658e <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
60006580:	9805      	ldr	r0, [sp, #20]
60006582:	4420      	add	r0, r4
60006584:	42b0      	cmp	r0, r6
60006586:	f63f af46 	bhi.w	60006416 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
6000658a:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
6000658e:	3408      	adds	r4, #8
				parsing = false;
60006590:	2300      	movs	r3, #0
			switch (*fmt) {
60006592:	f04f 0b08 	mov.w	fp, #8
60006596:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
60006598:	f811 0f01 	ldrb.w	r0, [r1, #1]!
6000659c:	2800      	cmp	r0, #0
6000659e:	f000 80bc 	beq.w	6000671a <cbvprintf_package+0x332>
			if (!parsing) {
600065a2:	2b00      	cmp	r3, #0
600065a4:	f47f af6b 	bne.w	6000647e <cbvprintf_package+0x96>
				if (*fmt == '%') {
600065a8:	2825      	cmp	r0, #37	; 0x25
600065aa:	d1f5      	bne.n	60006598 <cbvprintf_package+0x1b0>
					arg_idx++;
600065ac:	3201      	adds	r2, #1
					parsing = true;
600065ae:	2301      	movs	r3, #1
				align = VA_STACK_ALIGN(size_t);
600065b0:	f04f 0b04 	mov.w	fp, #4
600065b4:	e7ef      	b.n	60006596 <cbvprintf_package+0x1ae>
			switch (*fmt) {
600065b6:	4618      	mov	r0, r3
600065b8:	e795      	b.n	600064e6 <cbvprintf_package+0xfe>
600065ba:	2000      	movs	r0, #0
				parsing = false;
600065bc:	4603      	mov	r3, r0
600065be:	e7a8      	b.n	60006512 <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
600065c0:	f1ba 0f08 	cmp.w	sl, #8
600065c4:	f040 809b 	bne.w	600066fe <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
600065c8:	f10c 0907 	add.w	r9, ip, #7
600065cc:	f029 0c07 	bic.w	ip, r9, #7
600065d0:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
600065d4:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
600065d8:	3408      	adds	r4, #8
600065da:	f04f 0a08 	mov.w	sl, #8
600065de:	e7db      	b.n	60006598 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
600065e0:	b980      	cbnz	r0, 60006604 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
600065e2:	f1ba 0f04 	cmp.w	sl, #4
600065e6:	d102      	bne.n	600065ee <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
600065e8:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
600065ec:	e7a8      	b.n	60006540 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
600065ee:	f1ba 0f08 	cmp.w	sl, #8
600065f2:	f040 8084 	bne.w	600066fe <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
600065f6:	f10c 0907 	add.w	r9, ip, #7
600065fa:	f029 0907 	bic.w	r9, r9, #7
600065fe:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
60006602:	e7e9      	b.n	600065d8 <cbvprintf_package+0x1f0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60006604:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
60006606:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60006608:	3801      	subs	r0, #1
6000660a:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
6000660c:	f859 0b04 	ldr.w	r0, [r9], #4
60006610:	9000      	str	r0, [sp, #0]
60006612:	e717      	b.n	60006444 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
60006614:	9802      	ldr	r0, [sp, #8]
60006616:	0780      	lsls	r0, r0, #30
60006618:	d548      	bpl.n	600066ac <cbvprintf_package+0x2c4>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
6000661a:	eba4 0e05 	sub.w	lr, r4, r5
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
6000661e:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60006622:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60006626:	f5be 7f00 	cmp.w	lr, #512	; 0x200
6000662a:	d31d      	bcc.n	60006668 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
6000662c:	4927      	ldr	r1, [pc, #156]	; (600066cc <cbvprintf_package+0x2e4>)
6000662e:	f240 237b 	movw	r3, #635	; 0x27b
60006632:	4a27      	ldr	r2, [pc, #156]	; (600066d0 <cbvprintf_package+0x2e8>)
60006634:	4827      	ldr	r0, [pc, #156]	; (600066d4 <cbvprintf_package+0x2ec>)
60006636:	f011 fc64 	bl	60017f02 <assert_print>
6000663a:	4827      	ldr	r0, [pc, #156]	; (600066d8 <cbvprintf_package+0x2f0>)
6000663c:	f011 fc61 	bl	60017f02 <assert_print>
60006640:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
60006644:	4822      	ldr	r0, [pc, #136]	; (600066d0 <cbvprintf_package+0x2e8>)
60006646:	f011 fc55 	bl	60017ef4 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
6000664a:	2f0f      	cmp	r7, #15
6000664c:	d80e      	bhi.n	6000666c <cbvprintf_package+0x284>
				if (buf0 != NULL) {
6000664e:	2d00      	cmp	r5, #0
60006650:	d046      	beq.n	600066e0 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
60006652:	f107 0c40 	add.w	ip, r7, #64	; 0x40
60006656:	44ec      	add	ip, sp
60006658:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
6000665c:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
60006660:	9803      	ldr	r0, [sp, #12]
60006662:	3001      	adds	r0, #1
60006664:	9003      	str	r0, [sp, #12]
60006666:	e020      	b.n	600066aa <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
60006668:	2f0f      	cmp	r7, #15
6000666a:	d90c      	bls.n	60006686 <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
6000666c:	4917      	ldr	r1, [pc, #92]	; (600066cc <cbvprintf_package+0x2e4>)
6000666e:	f44f 7320 	mov.w	r3, #640	; 0x280
60006672:	4a17      	ldr	r2, [pc, #92]	; (600066d0 <cbvprintf_package+0x2e8>)
60006674:	4817      	ldr	r0, [pc, #92]	; (600066d4 <cbvprintf_package+0x2ec>)
60006676:	f011 fc44 	bl	60017f02 <assert_print>
6000667a:	4818      	ldr	r0, [pc, #96]	; (600066dc <cbvprintf_package+0x2f4>)
6000667c:	f011 fc41 	bl	60017f02 <assert_print>
60006680:	f44f 7120 	mov.w	r1, #640	; 0x280
60006684:	e7de      	b.n	60006644 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
60006686:	b1bd      	cbz	r5, 600066b8 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
60006688:	f107 0e40 	add.w	lr, r7, #64	; 0x40
6000668c:	b2c0      	uxtb	r0, r0
6000668e:	44ee      	add	lr, sp
60006690:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
60006694:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
60006698:	f1bc 0f00 	cmp.w	ip, #0
6000669c:	d0e0      	beq.n	60006660 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
6000669e:	f060 007f 	orn	r0, r0, #127	; 0x7f
						s_ro_cnt++;
600066a2:	f108 0801 	add.w	r8, r8, #1
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
600066a6:	f80e 0c20 	strb.w	r0, [lr, #-32]
				s_idx++;
600066aa:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
600066ac:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
600066b0:	3404      	adds	r4, #4
			is_str_arg = false;
600066b2:	46cc      	mov	ip, r9
					if (BUF_OFFSET + size > len) {
600066b4:	9005      	str	r0, [sp, #20]
600066b6:	e76f      	b.n	60006598 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
600066b8:	f1bc 0f00 	cmp.w	ip, #0
600066bc:	d010      	beq.n	600066e0 <cbvprintf_package+0x2f8>
					len += 1;
600066be:	3601      	adds	r6, #1
600066c0:	e7f3      	b.n	600066aa <cbvprintf_package+0x2c2>
600066c2:	bf00      	nop
600066c4:	60019a74 	.word	0x60019a74
600066c8:	6001ee9c 	.word	0x6001ee9c
600066cc:	6001c64e 	.word	0x6001c64e
600066d0:	6001c3a9 	.word	0x6001c3a9
600066d4:	6001c3d7 	.word	0x6001c3d7
600066d8:	6001c3f4 	.word	0x6001c3f4
600066dc:	6001c415 	.word	0x6001c415
				} else if (rws_pos_en) {
600066e0:	9801      	ldr	r0, [sp, #4]
					len += 2;
600066e2:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
600066e4:	2800      	cmp	r0, #0
600066e6:	d1e0      	bne.n	600066aa <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
600066e8:	9800      	ldr	r0, [sp, #0]
600066ea:	9205      	str	r2, [sp, #20]
600066ec:	e9cd 3106 	strd	r3, r1, [sp, #24]
600066f0:	f7fb fde6 	bl	600022c0 <strlen>
600066f4:	9a05      	ldr	r2, [sp, #20]
600066f6:	4406      	add	r6, r0
600066f8:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
600066fc:	e7d5      	b.n	600066aa <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
600066fe:	f240 23c5 	movw	r3, #709	; 0x2c5
60006702:	4a43      	ldr	r2, [pc, #268]	; (60006810 <cbvprintf_package+0x428>)
60006704:	4943      	ldr	r1, [pc, #268]	; (60006814 <cbvprintf_package+0x42c>)
60006706:	4844      	ldr	r0, [pc, #272]	; (60006818 <cbvprintf_package+0x430>)
60006708:	f011 fbfb 	bl	60017f02 <assert_print>
6000670c:	4651      	mov	r1, sl
6000670e:	4843      	ldr	r0, [pc, #268]	; (6000681c <cbvprintf_package+0x434>)
60006710:	f011 fbf7 	bl	60017f02 <assert_print>
60006714:	f240 21c5 	movw	r1, #709	; 0x2c5
60006718:	e794      	b.n	60006644 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
6000671a:	1b63      	subs	r3, r4, r5
6000671c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
60006720:	d30c      	bcc.n	6000673c <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
60006722:	493c      	ldr	r1, [pc, #240]	; (60006814 <cbvprintf_package+0x42c>)
60006724:	f240 23d1 	movw	r3, #721	; 0x2d1
60006728:	4a39      	ldr	r2, [pc, #228]	; (60006810 <cbvprintf_package+0x428>)
6000672a:	483b      	ldr	r0, [pc, #236]	; (60006818 <cbvprintf_package+0x430>)
6000672c:	f011 fbe9 	bl	60017f02 <assert_print>
60006730:	483b      	ldr	r0, [pc, #236]	; (60006820 <cbvprintf_package+0x438>)
60006732:	f011 fbe6 	bl	60017f02 <assert_print>
60006736:	f240 21d1 	movw	r1, #721	; 0x2d1
6000673a:	e783      	b.n	60006644 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
6000673c:	b91d      	cbnz	r5, 60006746 <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
6000673e:	f1a6 0408 	sub.w	r4, r6, #8
60006742:	18e0      	adds	r0, r4, r3
60006744:	e669      	b.n	6000641a <cbvprintf_package+0x32>
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
60006746:	089b      	lsrs	r3, r3, #2
	if (rws_pos_en) {
60006748:	9a01      	ldr	r2, [sp, #4]
	*(char **)buf0 = NULL;
6000674a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
6000674c:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
6000674e:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
60006752:	b1c2      	cbz	r2, 60006786 <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
60006754:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
60006756:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
6000675a:	f1b8 0f00 	cmp.w	r8, #0
6000675e:	d005      	beq.n	6000676c <cbvprintf_package+0x384>
60006760:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
60006762:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
60006764:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
60006768:	4297      	cmp	r7, r2
6000676a:	d10e      	bne.n	6000678a <cbvprintf_package+0x3a2>
		if (BUF_OFFSET + 1 + size > len) {
6000676c:	f1c5 0301 	rsb	r3, r5, #1
60006770:	f10d 0920 	add.w	r9, sp, #32
			*buf++ = str_ptr_arg[i];
60006774:	f04f 0a00 	mov.w	sl, #0
60006778:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
		if (BUF_OFFSET + 1 + size > len) {
6000677c:	9302      	str	r3, [sp, #8]
	for (i = 0; i < s_idx; i++) {
6000677e:	4557      	cmp	r7, sl
60006780:	d112      	bne.n	600067a8 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
60006782:	1b60      	subs	r0, r4, r5
60006784:	e649      	b.n	6000641a <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
60006786:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
60006788:	e7e5      	b.n	60006756 <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
6000678a:	f810 3b01 	ldrb.w	r3, [r0], #1
6000678e:	0619      	lsls	r1, r3, #24
60006790:	d508      	bpl.n	600067a4 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
60006792:	eb04 0e0c 	add.w	lr, r4, ip
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
60006796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
6000679a:	4576      	cmp	r6, lr
6000679c:	f4ff ae3b 	bcc.w	60006416 <cbvprintf_package+0x2e>
			*buf++ = pos;
600067a0:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
600067a4:	3201      	adds	r2, #1
600067a6:	e7df      	b.n	60006768 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
600067a8:	f1b8 0f00 	cmp.w	r8, #0
600067ac:	d003      	beq.n	600067b6 <cbvprintf_package+0x3ce>
600067ae:	f999 2000 	ldrsb.w	r2, [r9]
600067b2:	2a00      	cmp	r2, #0
600067b4:	db17      	blt.n	600067e6 <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
600067b6:	9b01      	ldr	r3, [sp, #4]
600067b8:	b1d3      	cbz	r3, 600067f0 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
600067ba:	f81a 200b 	ldrb.w	r2, [sl, fp]
600067be:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
600067c2:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
600067c4:	9b02      	ldr	r3, [sp, #8]
600067c6:	1898      	adds	r0, r3, r2
600067c8:	4420      	add	r0, r4
600067ca:	4286      	cmp	r6, r0
600067cc:	f4ff ae23 	bcc.w	60006416 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
600067d0:	f899 0000 	ldrb.w	r0, [r9]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
600067d4:	9900      	ldr	r1, [sp, #0]
600067d6:	f804 0b01 	strb.w	r0, [r4], #1
600067da:	4620      	mov	r0, r4
600067dc:	9203      	str	r2, [sp, #12]
600067de:	f7fc ffab 	bl	60003738 <memcpy>
		buf += size;
600067e2:	9a03      	ldr	r2, [sp, #12]
600067e4:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
600067e6:	f10a 0a01 	add.w	sl, sl, #1
600067ea:	f109 0901 	add.w	r9, r9, #1
600067ee:	e7c6      	b.n	6000677e <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
600067f0:	f899 2000 	ldrb.w	r2, [r9]
600067f4:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
600067f8:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
600067fa:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
600067fc:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
600067fe:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
60006802:	f7fb fd5d 	bl	600022c0 <strlen>
60006806:	1c42      	adds	r2, r0, #1
60006808:	e7dc      	b.n	600067c4 <cbvprintf_package+0x3dc>
		return -EFAULT;
6000680a:	f06f 000d 	mvn.w	r0, #13
6000680e:	e604      	b.n	6000641a <cbvprintf_package+0x32>
60006810:	6001c3a9 	.word	0x6001c3a9
60006814:	6001c64e 	.word	0x6001c64e
60006818:	6001c3d7 	.word	0x6001c3d7
6000681c:	6001c42f 	.word	0x6001c42f
60006820:	6001c444 	.word	0x6001c444

60006824 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
60006824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60006828:	b097      	sub	sp, #92	; 0x5c
	__ASSERT_NO_MSG(in_packaged != NULL);
6000682a:	4604      	mov	r4, r0
{
6000682c:	af00      	add	r7, sp, #0
6000682e:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
60006832:	61fb      	str	r3, [r7, #28]
60006834:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
	__ASSERT_NO_MSG(in_packaged != NULL);
60006838:	b958      	cbnz	r0, 60006852 <cbprintf_package_convert+0x2e>
6000683a:	49ab      	ldr	r1, [pc, #684]	; (60006ae8 <cbprintf_package_convert+0x2c4>)
6000683c:	f44f 7365 	mov.w	r3, #916	; 0x394
60006840:	4aaa      	ldr	r2, [pc, #680]	; (60006aec <cbprintf_package_convert+0x2c8>)
60006842:	48ab      	ldr	r0, [pc, #684]	; (60006af0 <cbprintf_package_convert+0x2cc>)
60006844:	f011 fb5d 	bl	60017f02 <assert_print>
60006848:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
6000684c:	48a7      	ldr	r0, [pc, #668]	; (60006aec <cbprintf_package_convert+0x2c8>)
6000684e:	f011 fb51 	bl	60017ef4 <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
60006852:	f3ca 03c0 	ubfx	r3, sl, #3, #1
60006856:	617b      	str	r3, [r7, #20]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
60006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
6000685a:	b953      	cbnz	r3, 60006872 <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
6000685c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
6000685e:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
60006860:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
60006862:	6abd      	ldr	r5, [r7, #40]	; 0x28
	buf += ros_nbr;
60006864:	eb00 0083 	add.w	r0, r0, r3, lsl #2
60006868:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
6000686a:	42b5      	cmp	r5, r6
6000686c:	d319      	bcc.n	600068a2 <cbprintf_package_convert+0x7e>
	return (size_t)(uintptr_t)(buf - start);
6000686e:	1b03      	subs	r3, r0, r4
60006870:	62bb      	str	r3, [r7, #40]	; 0x28
	rws_nbr = in_desc->rw_str_cnt;
60006872:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
60006874:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
60006878:	61bb      	str	r3, [r7, #24]
	ro_cpy = ros_nbr &&
6000687a:	f1bb 0f00 	cmp.w	fp, #0
6000687e:	d002      	beq.n	60006886 <cbprintf_package_convert+0x62>
60006880:	f01a 0f01 	tst.w	sl, #1
60006884:	d116      	bne.n	600068b4 <cbprintf_package_convert+0x90>
	rw_cpy = rws_nbr > 0 &&
60006886:	69bb      	ldr	r3, [r7, #24]
60006888:	bb53      	cbnz	r3, 600068e0 <cbprintf_package_convert+0xbc>
		if (cb) {
6000688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
6000688c:	b11b      	cbz	r3, 60006896 <cbprintf_package_convert+0x72>
			cb(in_packaged, in_len, ctx);
6000688e:	69fa      	ldr	r2, [r7, #28]
60006890:	4620      	mov	r0, r4
60006892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
60006894:	4798      	blx	r3
		return in_len;
60006896:	6abd      	ldr	r5, [r7, #40]	; 0x28

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
60006898:	4628      	mov	r0, r5
6000689a:	375c      	adds	r7, #92	; 0x5c
6000689c:	46bd      	mov	sp, r7
6000689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
600068a2:	f100 0801 	add.w	r8, r0, #1
	for (int i = 0; i < s_nbr; i++) {
600068a6:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
600068a8:	4640      	mov	r0, r8
600068aa:	f7fb fd09 	bl	600022c0 <strlen>
600068ae:	3001      	adds	r0, #1
600068b0:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
600068b2:	e7da      	b.n	6000686a <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
600068b4:	7823      	ldrb	r3, [r4, #0]
600068b6:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
600068b8:	627b      	str	r3, [r7, #36]	; 0x24
600068ba:	009b      	lsls	r3, r3, #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
600068bc:	623a      	str	r2, [r7, #32]
	args_size = in_desc->len * sizeof(int);
600068be:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
600068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600068c2:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
600068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
600068c8:	2b00      	cmp	r3, #0
600068ca:	f040 8101 	bne.w	60006ad0 <cbprintf_package_convert+0x2ac>
		out_len = (int)in_len;
600068ce:	6abd      	ldr	r5, [r7, #40]	; 0x28
		if (ro_cpy) {
600068d0:	46c8      	mov	r8, r9
600068d2:	eb09 030b 	add.w	r3, r9, fp
	size_t strl_cnt = 0;
600068d6:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
600068d8:	4543      	cmp	r3, r8
600068da:	d14e      	bne.n	6000697a <cbprintf_package_convert+0x156>
600068dc:	44d9      	add	r9, fp
600068de:	e013      	b.n	60006908 <cbprintf_package_convert+0xe4>
	rw_cpy = rws_nbr > 0 &&
600068e0:	f01a 0f02 	tst.w	sl, #2
600068e4:	d0d1      	beq.n	6000688a <cbprintf_package_convert+0x66>
	args_size = in_desc->len * sizeof(int);
600068e6:	7823      	ldrb	r3, [r4, #0]
600068e8:	4699      	mov	r9, r3
600068ea:	627b      	str	r3, [r7, #36]	; 0x24
600068ec:	009b      	lsls	r3, r3, #2
	uint8_t *str_pos = &buf[args_size];
600068ee:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	args_size = in_desc->len * sizeof(int);
600068f2:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
600068f4:	6863      	ldr	r3, [r4, #4]
600068f6:	623b      	str	r3, [r7, #32]
	if (cb == NULL) {
600068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
600068fa:	2b00      	cmp	r3, #0
600068fc:	d17c      	bne.n	600069f8 <cbprintf_package_convert+0x1d4>
		out_len = (int)in_len;
600068fe:	6abd      	ldr	r5, [r7, #40]	; 0x28
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
60006900:	f1bb 0f00 	cmp.w	fp, #0
60006904:	d150      	bne.n	600069a8 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
60006906:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
60006908:	f01a 0f05 	tst.w	sl, #5
6000690c:	bf0c      	ite	eq
6000690e:	2302      	moveq	r3, #2
60006910:	2301      	movne	r3, #1
60006912:	62fb      	str	r3, [r7, #44]	; 0x2c
60006914:	69bb      	ldr	r3, [r7, #24]
60006916:	eb09 0b43 	add.w	fp, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
6000691a:	f00a 0302 	and.w	r3, sl, #2
6000691e:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < rws_nbr; i++) {
60006920:	45d9      	cmp	r9, fp
60006922:	d0b9      	beq.n	60006898 <cbprintf_package_convert+0x74>
			uint8_t arg_idx = *str_pos++;
60006924:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
60006928:	f819 3c01 	ldrb.w	r3, [r9, #-1]
6000692c:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
60006930:	4b70      	ldr	r3, [pc, #448]	; (60006af4 <cbprintf_package_convert+0x2d0>)
60006932:	4598      	cmp	r8, r3
60006934:	d302      	bcc.n	6000693c <cbprintf_package_convert+0x118>
60006936:	4b70      	ldr	r3, [pc, #448]	; (60006af8 <cbprintf_package_convert+0x2d4>)
60006938:	4598      	cmp	r8, r3
6000693a:	d33b      	bcc.n	600069b4 <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
6000693c:	697b      	ldr	r3, [r7, #20]
6000693e:	2b00      	cmp	r3, #0
60006940:	d045      	beq.n	600069ce <cbprintf_package_convert+0x1aa>
60006942:	6a38      	ldr	r0, [r7, #32]
60006944:	f010 fff6 	bl	60017934 <is_ptr>
60006948:	2800      	cmp	r0, #0
6000694a:	d040      	beq.n	600069ce <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
6000694c:	46e8      	mov	r8, sp
6000694e:	b08a      	sub	sp, #40	; 0x28
60006950:	466a      	mov	r2, sp
60006952:	4b6a      	ldr	r3, [pc, #424]	; (60006afc <cbprintf_package_convert+0x2d8>)
60006954:	6153      	str	r3, [r2, #20]
60006956:	6a3b      	ldr	r3, [r7, #32]
60006958:	e9c2 3106 	strd	r3, r1, [r2, #24]
6000695c:	f44f 7300 	mov.w	r3, #512	; 0x200
60006960:	8413      	strh	r3, [r2, #32]
60006962:	4b67      	ldr	r3, [pc, #412]	; (60006b00 <cbprintf_package_convert+0x2dc>)
60006964:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
60006968:	2300      	movs	r3, #0
6000696a:	f44f 5112 	mov.w	r1, #9344	; 0x2480
6000696e:	4865      	ldr	r0, [pc, #404]	; (60006b04 <cbprintf_package_convert+0x2e0>)
				out_len -= 2;
60006970:	3d02      	subs	r5, #2
60006972:	f002 f8a7 	bl	60008ac4 <z_impl_z_log_msg_static_create>
60006976:	46c5      	mov	sp, r8
				continue;
60006978:	e7d2      	b.n	60006920 <cbprintf_package_convert+0xfc>
				const char *str = *(const char **)&buf32[*str_pos];
6000697a:	f818 2b01 	ldrb.w	r2, [r8], #1
6000697e:	62fb      	str	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
60006980:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
60006984:	f7fb fc9c 	bl	600022c0 <strlen>
				if (strl && strl_cnt < strl_len) {
60006988:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
		return 1 + strlen(str);
6000698c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
6000698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60006990:	b142      	cbz	r2, 600069a4 <cbprintf_package_convert+0x180>
60006992:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
60006996:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
60006998:	bf3e      	ittt	cc
6000699a:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
6000699e:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
600069a2:	3601      	addcc	r6, #1
				out_len += len;
600069a4:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
600069a6:	e797      	b.n	600068d8 <cbprintf_package_convert+0xb4>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
600069a8:	f01a 0604 	ands.w	r6, sl, #4
				str_pos += ros_nbr;
600069ac:	bf1c      	itt	ne
600069ae:	44d9      	addne	r9, fp
	size_t strl_cnt = 0;
600069b0:	6afe      	ldrne	r6, [r7, #44]	; 0x2c
600069b2:	e7a9      	b.n	60006908 <cbprintf_package_convert+0xe4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
600069b4:	697b      	ldr	r3, [r7, #20]
600069b6:	b123      	cbz	r3, 600069c2 <cbprintf_package_convert+0x19e>
600069b8:	6a38      	ldr	r0, [r7, #32]
600069ba:	f010 ffbb 	bl	60017934 <is_ptr>
600069be:	2800      	cmp	r0, #0
600069c0:	d1c4      	bne.n	6000694c <cbprintf_package_convert+0x128>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
600069c2:	f01a 0f01 	tst.w	sl, #1
600069c6:	d105      	bne.n	600069d4 <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
600069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
600069ca:	1aed      	subs	r5, r5, r3
600069cc:	e7a8      	b.n	60006920 <cbprintf_package_convert+0xfc>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
600069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
600069d0:	2b00      	cmp	r3, #0
600069d2:	d0a5      	beq.n	60006920 <cbprintf_package_convert+0xfc>
		return 1 + strlen(str);
600069d4:	4640      	mov	r0, r8
600069d6:	f7fb fc73 	bl	600022c0 <strlen>
				if (strl && strl_cnt < strl_len) {
600069da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
600069de:	b14b      	cbz	r3, 600069f4 <cbprintf_package_convert+0x1d0>
600069e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
600069e4:	429e      	cmp	r6, r3
		return 1 + strlen(str);
600069e6:	bf3f      	itttt	cc
600069e8:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
600069ea:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
600069ee:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
600069f2:	3601      	addcc	r6, #1
				out_len += (len - 1);
600069f4:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
600069f6:	e793      	b.n	60006920 <cbprintf_package_convert+0xfc>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
600069f8:	f1bb 0f00 	cmp.w	fp, #0
600069fc:	d06e      	beq.n	60006adc <cbprintf_package_convert+0x2b8>
600069fe:	f01a 0604 	ands.w	r6, sl, #4
60006a02:	d06e      	beq.n	60006ae2 <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
60006a04:	46d8      	mov	r8, fp
		scpy_cnt = 0;
60006a06:	2600      	movs	r6, #0
		dst = keep_str_pos;
60006a08:	f107 0048 	add.w	r0, r7, #72	; 0x48
60006a0c:	465a      	mov	r2, fp
60006a0e:	4649      	mov	r1, r9
60006a10:	f7fc fe92 	bl	60003738 <memcpy>
	str_pos += ros_nbr;
60006a14:	69bb      	ldr	r3, [r7, #24]
60006a16:	44d9      	add	r9, fp
	for (int i = 0; i < rws_nbr; i++) {
60006a18:	005b      	lsls	r3, r3, #1
60006a1a:	60fb      	str	r3, [r7, #12]
60006a1c:	69bb      	ldr	r3, [r7, #24]
60006a1e:	eb09 0343 	add.w	r3, r9, r3, lsl #1
60006a22:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
60006a24:	f00a 0302 	and.w	r3, sl, #2
60006a28:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
60006a2a:	68bb      	ldr	r3, [r7, #8]
60006a2c:	454b      	cmp	r3, r9
60006a2e:	d16b      	bne.n	60006b08 <cbprintf_package_convert+0x2e4>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
60006a30:	f01a 0f02 	tst.w	sl, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
60006a34:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
60006a36:	bf08      	it	eq
60006a38:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
60006a3c:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
60006a40:	bf18      	it	ne
60006a42:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
60006a44:	f01a 0f01 	tst.w	sl, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
60006a48:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
60006a4a:	f040 80e1 	bne.w	60006c10 <cbprintf_package_convert+0x3ec>
60006a4e:	f01a 0f04 	tst.w	sl, #4
60006a52:	bf14      	ite	ne
60006a54:	4640      	movne	r0, r8
60006a56:	2000      	moveq	r0, #0
60006a58:	623b      	str	r3, [r7, #32]
	*in_desc = out_desc;
60006a5a:	7062      	strb	r2, [r4, #1]
60006a5c:	70a0      	strb	r0, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
60006a5e:	4620      	mov	r0, r4
	*in_desc = out_desc;
60006a60:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
60006a62:	69fa      	ldr	r2, [r7, #28]
60006a64:	6939      	ldr	r1, [r7, #16]
60006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60006a68:	4798      	blx	r3
	if (rv < 0) {
60006a6a:	1e05      	subs	r5, r0, #0
60006a6c:	f6ff af14 	blt.w	60006898 <cbprintf_package_convert+0x74>
	*in_desc = in_desc_backup;
60006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	rv = cb(keep_str_pos, keep_cnt, ctx);
60006a72:	4641      	mov	r1, r8
60006a74:	69fa      	ldr	r2, [r7, #28]
60006a76:	f107 0048 	add.w	r0, r7, #72	; 0x48
	*in_desc = in_desc_backup;
60006a7a:	7023      	strb	r3, [r4, #0]
60006a7c:	6a3b      	ldr	r3, [r7, #32]
60006a7e:	f884 b002 	strb.w	fp, [r4, #2]
60006a82:	7063      	strb	r3, [r4, #1]
60006a84:	69bb      	ldr	r3, [r7, #24]
60006a86:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
60006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60006a8a:	4798      	blx	r3
	if (rv < 0) {
60006a8c:	f1b0 0800 	subs.w	r8, r0, #0
60006a90:	f2c0 80ec 	blt.w	60006c6c <cbprintf_package_convert+0x448>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
60006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
	rv = cb(str_pos, strs_len, ctx);
60006a96:	4648      	mov	r0, r9
60006a98:	69fa      	ldr	r2, [r7, #28]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
60006a9a:	eba3 010b 	sub.w	r1, r3, fp
60006a9e:	693b      	ldr	r3, [r7, #16]
60006aa0:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
60006aa2:	68fb      	ldr	r3, [r7, #12]
60006aa4:	1ac9      	subs	r1, r1, r3
60006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60006aa8:	4798      	blx	r3
	if (rv < 0) {
60006aaa:	2800      	cmp	r0, #0
60006aac:	f2c0 80e0 	blt.w	60006c70 <cbprintf_package_convert+0x44c>
	out_len += rv;
60006ab0:	44a8      	add	r8, r5
	for (int i = 0; i < scpy_cnt; i++) {
60006ab2:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
60006ab6:	f107 0a38 	add.w	sl, r7, #56	; 0x38
	out_len += rv;
60006aba:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
60006abe:	45b3      	cmp	fp, r6
60006ac0:	f2c0 80a8 	blt.w	60006c14 <cbprintf_package_convert+0x3f0>
	(void)cb(NULL, 0, ctx);
60006ac4:	2100      	movs	r1, #0
60006ac6:	69fa      	ldr	r2, [r7, #28]
60006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60006aca:	4608      	mov	r0, r1
60006acc:	4798      	blx	r3
	return out_len;
60006ace:	e6e3      	b.n	60006898 <cbprintf_package_convert+0x74>
	if (cb == NULL) {
60006ad0:	465e      	mov	r6, fp
60006ad2:	f04f 0800 	mov.w	r8, #0
60006ad6:	f107 0038 	add.w	r0, r7, #56	; 0x38
60006ada:	e797      	b.n	60006a0c <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
60006adc:	465e      	mov	r6, fp
		keep_cnt = 0;
60006ade:	46d8      	mov	r8, fp
60006ae0:	e798      	b.n	60006a14 <cbprintf_package_convert+0x1f0>
60006ae2:	46b0      	mov	r8, r6
60006ae4:	e796      	b.n	60006a14 <cbprintf_package_convert+0x1f0>
60006ae6:	bf00      	nop
60006ae8:	6001c45b 	.word	0x6001c45b
60006aec:	6001c3a9 	.word	0x6001c3a9
60006af0:	6001c3d7 	.word	0x6001c3d7
60006af4:	60019a74 	.word	0x60019a74
60006af8:	6001ee9c 	.word	0x6001ee9c
60006afc:	6001c476 	.word	0x6001c476
60006b00:	01000004 	.word	0x01000004
60006b04:	6001a3a4 	.word	0x6001a3a4
		uint8_t arg_idx = *str_pos++;
60006b08:	f819 1b02 	ldrb.w	r1, [r9], #2
60006b0c:	4b59      	ldr	r3, [pc, #356]	; (60006c74 <cbprintf_package_convert+0x450>)
		uint8_t arg_pos = *str_pos++;
60006b0e:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
60006b12:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
60006b16:	4298      	cmp	r0, r3
60006b18:	d302      	bcc.n	60006b20 <cbprintf_package_convert+0x2fc>
60006b1a:	4b57      	ldr	r3, [pc, #348]	; (60006c78 <cbprintf_package_convert+0x454>)
60006b1c:	4298      	cmp	r0, r3
60006b1e:	d316      	bcc.n	60006b4e <cbprintf_package_convert+0x32a>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
60006b20:	697b      	ldr	r3, [r7, #20]
60006b22:	b12b      	cbz	r3, 60006b30 <cbprintf_package_convert+0x30c>
60006b24:	6a38      	ldr	r0, [r7, #32]
60006b26:	f010 ff05 	bl	60017934 <is_ptr>
60006b2a:	2800      	cmp	r0, #0
60006b2c:	f47f af7d 	bne.w	60006a2a <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
60006b30:	687b      	ldr	r3, [r7, #4]
60006b32:	2b00      	cmp	r3, #0
60006b34:	d04a      	beq.n	60006bcc <cbprintf_package_convert+0x3a8>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
60006b36:	2e0f      	cmp	r6, #15
60006b38:	d93e      	bls.n	60006bb8 <cbprintf_package_convert+0x394>
60006b3a:	4950      	ldr	r1, [pc, #320]	; (60006c7c <cbprintf_package_convert+0x458>)
60006b3c:	f44f 6389 	mov.w	r3, #1096	; 0x448
60006b40:	4a4f      	ldr	r2, [pc, #316]	; (60006c80 <cbprintf_package_convert+0x45c>)
60006b42:	4850      	ldr	r0, [pc, #320]	; (60006c84 <cbprintf_package_convert+0x460>)
60006b44:	f011 f9dd 	bl	60017f02 <assert_print>
60006b48:	f44f 6189 	mov.w	r1, #1096	; 0x448
60006b4c:	e67e      	b.n	6000684c <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
60006b4e:	697b      	ldr	r3, [r7, #20]
60006b50:	b12b      	cbz	r3, 60006b5e <cbprintf_package_convert+0x33a>
60006b52:	6a38      	ldr	r0, [r7, #32]
60006b54:	f010 feee 	bl	60017934 <is_ptr>
60006b58:	2800      	cmp	r0, #0
60006b5a:	f47f af66 	bne.w	60006a2a <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
60006b5e:	f01a 0f01 	tst.w	sl, #1
60006b62:	d00b      	beq.n	60006b7c <cbprintf_package_convert+0x358>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
60006b64:	2e0f      	cmp	r6, #15
60006b66:	d927      	bls.n	60006bb8 <cbprintf_package_convert+0x394>
60006b68:	4944      	ldr	r1, [pc, #272]	; (60006c7c <cbprintf_package_convert+0x458>)
60006b6a:	f240 433e 	movw	r3, #1086	; 0x43e
60006b6e:	4a44      	ldr	r2, [pc, #272]	; (60006c80 <cbprintf_package_convert+0x45c>)
60006b70:	4844      	ldr	r0, [pc, #272]	; (60006c84 <cbprintf_package_convert+0x460>)
60006b72:	f011 f9c6 	bl	60017f02 <assert_print>
60006b76:	f240 413e 	movw	r1, #1086	; 0x43e
60006b7a:	e667      	b.n	6000684c <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
60006b7c:	f01a 0f04 	tst.w	sl, #4
60006b80:	f43f af53 	beq.w	60006a2a <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
60006b84:	f1b8 0f0f 	cmp.w	r8, #15
60006b88:	d909      	bls.n	60006b9e <cbprintf_package_convert+0x37a>
60006b8a:	493f      	ldr	r1, [pc, #252]	; (60006c88 <cbprintf_package_convert+0x464>)
60006b8c:	f240 4341 	movw	r3, #1089	; 0x441
60006b90:	4a3b      	ldr	r2, [pc, #236]	; (60006c80 <cbprintf_package_convert+0x45c>)
60006b92:	483c      	ldr	r0, [pc, #240]	; (60006c84 <cbprintf_package_convert+0x460>)
60006b94:	f011 f9b5 	bl	60017f02 <assert_print>
60006b98:	f240 4141 	movw	r1, #1089	; 0x441
60006b9c:	e656      	b.n	6000684c <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
60006b9e:	f108 0328 	add.w	r3, r8, #40	; 0x28
60006ba2:	f107 0230 	add.w	r2, r7, #48	; 0x30
60006ba6:	f108 0101 	add.w	r1, r8, #1
60006baa:	eb03 0802 	add.w	r8, r3, r2
60006bae:	f808 5c10 	strb.w	r5, [r8, #-16]
60006bb2:	fa5f f881 	uxtb.w	r8, r1
60006bb6:	e738      	b.n	60006a2a <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
60006bb8:	f106 0328 	add.w	r3, r6, #40	; 0x28
60006bbc:	f107 0230 	add.w	r2, r7, #48	; 0x30
60006bc0:	1c71      	adds	r1, r6, #1
60006bc2:	189e      	adds	r6, r3, r2
60006bc4:	f806 5c20 	strb.w	r5, [r6, #-32]
60006bc8:	b2ce      	uxtb	r6, r1
60006bca:	e72e      	b.n	60006a2a <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
60006bcc:	f1b8 0f0f 	cmp.w	r8, #15
60006bd0:	d909      	bls.n	60006be6 <cbprintf_package_convert+0x3c2>
60006bd2:	492d      	ldr	r1, [pc, #180]	; (60006c88 <cbprintf_package_convert+0x464>)
60006bd4:	f240 434b 	movw	r3, #1099	; 0x44b
60006bd8:	4a29      	ldr	r2, [pc, #164]	; (60006c80 <cbprintf_package_convert+0x45c>)
60006bda:	482a      	ldr	r0, [pc, #168]	; (60006c84 <cbprintf_package_convert+0x460>)
60006bdc:	f011 f991 	bl	60017f02 <assert_print>
60006be0:	f240 414b 	movw	r1, #1099	; 0x44b
60006be4:	e632      	b.n	6000684c <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
60006be6:	f108 0328 	add.w	r3, r8, #40	; 0x28
60006bea:	f107 0230 	add.w	r2, r7, #48	; 0x30
60006bee:	f108 0001 	add.w	r0, r8, #1
				keep_str_pos[keep_cnt++] = arg_pos;
60006bf2:	f108 0802 	add.w	r8, r8, #2
				keep_str_pos[keep_cnt++] = arg_idx;
60006bf6:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
60006bfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
60006bfe:	fa5f f888 	uxtb.w	r8, r8
60006c02:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
60006c06:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
60006c0a:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
60006c0e:	e70c      	b.n	60006a2a <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
60006c10:	2000      	movs	r0, #0
60006c12:	e721      	b.n	60006a58 <cbprintf_package_convert+0x234>
		uint8_t loc = cpy_str_pos[i];
60006c14:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
60006c18:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
60006c1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint16_t str_len = strl ? strl[i] : 0;
60006c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
60006c24:	b1fb      	cbz	r3, 60006c66 <cbprintf_package_convert+0x442>
60006c26:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
60006c2a:	69fa      	ldr	r2, [r7, #28]
60006c2c:	2101      	movs	r1, #1
60006c2e:	f107 0037 	add.w	r0, r7, #55	; 0x37
60006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60006c34:	4798      	blx	r3
		if (rv < 0) {
60006c36:	2800      	cmp	r0, #0
60006c38:	db1a      	blt.n	60006c70 <cbprintf_package_convert+0x44c>
		out_len += rv;
60006c3a:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
60006c3c:	f1b8 0f00 	cmp.w	r8, #0
60006c40:	d106      	bne.n	60006c50 <cbprintf_package_convert+0x42c>
60006c42:	4648      	mov	r0, r9
60006c44:	f7fb fb3c 	bl	600022c0 <strlen>
60006c48:	f100 0801 	add.w	r8, r0, #1
60006c4c:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
60006c50:	69fa      	ldr	r2, [r7, #28]
60006c52:	4641      	mov	r1, r8
60006c54:	4648      	mov	r0, r9
60006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
60006c58:	4798      	blx	r3
		if (rv < 0) {
60006c5a:	2800      	cmp	r0, #0
60006c5c:	db08      	blt.n	60006c70 <cbprintf_package_convert+0x44c>
		out_len += rv;
60006c5e:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
60006c60:	f10b 0b01 	add.w	fp, fp, #1
60006c64:	e72b      	b.n	60006abe <cbprintf_package_convert+0x29a>
		uint16_t str_len = strl ? strl[i] : 0;
60006c66:	f8d7 8084 	ldr.w	r8, [r7, #132]	; 0x84
60006c6a:	e7de      	b.n	60006c2a <cbprintf_package_convert+0x406>
60006c6c:	4645      	mov	r5, r8
60006c6e:	e613      	b.n	60006898 <cbprintf_package_convert+0x74>
60006c70:	4605      	mov	r5, r0
60006c72:	e611      	b.n	60006898 <cbprintf_package_convert+0x74>
60006c74:	60019a74 	.word	0x60019a74
60006c78:	6001ee9c 	.word	0x6001ee9c
60006c7c:	6001c519 	.word	0x6001c519
60006c80:	6001c3a9 	.word	0x6001c3a9
60006c84:	6001c3d7 	.word	0x6001c3d7
60006c88:	6001c538 	.word	0x6001c538

60006c8c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
60006c8c:	4b01      	ldr	r3, [pc, #4]	; (60006c94 <__printk_hook_install+0x8>)
60006c8e:	6018      	str	r0, [r3, #0]
}
60006c90:	4770      	bx	lr
60006c92:	bf00      	nop
60006c94:	202030d0 	.word	0x202030d0

60006c98 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
60006c98:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
60006c9a:	2500      	movs	r5, #0
{
60006c9c:	b087      	sub	sp, #28
60006c9e:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
60006ca0:	9500      	str	r5, [sp, #0]
	struct str_context ctx = { str, size, 0 };
60006ca2:	9505      	str	r5, [sp, #20]
60006ca4:	e9cd 0103 	strd	r0, r1, [sp, #12]
60006ca8:	a903      	add	r1, sp, #12
60006caa:	4805      	ldr	r0, [pc, #20]	; (60006cc0 <vsnprintk+0x28>)
60006cac:	f000 f9dc 	bl	60007068 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
60006cb0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
60006cb4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
60006cb6:	bfb8      	it	lt
60006cb8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
60006cba:	b007      	add	sp, #28
60006cbc:	bd30      	pop	{r4, r5, pc}
60006cbe:	bf00      	nop
60006cc0:	60017983 	.word	0x60017983

60006cc4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
60006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
60006cc6:	460f      	mov	r7, r1
60006cc8:	2900      	cmp	r1, #0
60006cca:	d03b      	beq.n	60006d44 <sys_heap_free+0x80>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
60006ccc:	6806      	ldr	r6, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
60006cce:	2201      	movs	r2, #1
	chunkid_t c = mem_to_chunkid(h, mem);
60006cd0:	4630      	mov	r0, r6
60006cd2:	f010 fec6 	bl	60017a62 <mem_to_chunkid>
60006cd6:	4601      	mov	r1, r0
60006cd8:	4604      	mov	r4, r0
60006cda:	4630      	mov	r0, r6
60006cdc:	f010 fe89 	bl	600179f2 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
60006ce0:	07c3      	lsls	r3, r0, #31
60006ce2:	d40d      	bmi.n	60006d00 <sys_heap_free+0x3c>
60006ce4:	23af      	movs	r3, #175	; 0xaf
60006ce6:	4a18      	ldr	r2, [pc, #96]	; (60006d48 <sys_heap_free+0x84>)
60006ce8:	4918      	ldr	r1, [pc, #96]	; (60006d4c <sys_heap_free+0x88>)
60006cea:	4819      	ldr	r0, [pc, #100]	; (60006d50 <sys_heap_free+0x8c>)
60006cec:	f011 f909 	bl	60017f02 <assert_print>
60006cf0:	4639      	mov	r1, r7
60006cf2:	4818      	ldr	r0, [pc, #96]	; (60006d54 <sys_heap_free+0x90>)
60006cf4:	f011 f905 	bl	60017f02 <assert_print>
60006cf8:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
60006cfa:	4813      	ldr	r0, [pc, #76]	; (60006d48 <sys_heap_free+0x84>)
60006cfc:	f011 f8fa 	bl	60017ef4 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
60006d00:	4621      	mov	r1, r4
60006d02:	4630      	mov	r0, r6
60006d04:	f010 fe8b 	bl	60017a1e <chunk_size>
60006d08:	1825      	adds	r5, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
60006d0a:	2200      	movs	r2, #0
60006d0c:	4630      	mov	r0, r6
60006d0e:	4629      	mov	r1, r5
60006d10:	f010 fe6f 	bl	600179f2 <chunk_field>
60006d14:	1a2d      	subs	r5, r5, r0
60006d16:	42ac      	cmp	r4, r5
60006d18:	d00b      	beq.n	60006d32 <sys_heap_free+0x6e>
60006d1a:	23b7      	movs	r3, #183	; 0xb7
60006d1c:	4a0a      	ldr	r2, [pc, #40]	; (60006d48 <sys_heap_free+0x84>)
60006d1e:	490e      	ldr	r1, [pc, #56]	; (60006d58 <sys_heap_free+0x94>)
60006d20:	480b      	ldr	r0, [pc, #44]	; (60006d50 <sys_heap_free+0x8c>)
60006d22:	f011 f8ee 	bl	60017f02 <assert_print>
60006d26:	4639      	mov	r1, r7
60006d28:	480c      	ldr	r0, [pc, #48]	; (60006d5c <sys_heap_free+0x98>)
60006d2a:	f011 f8ea 	bl	60017f02 <assert_print>
60006d2e:	21b7      	movs	r1, #183	; 0xb7
60006d30:	e7e3      	b.n	60006cfa <sys_heap_free+0x36>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
60006d32:	4621      	mov	r1, r4
60006d34:	4630      	mov	r0, r6
60006d36:	f010 fe78 	bl	60017a2a <set_chunk_used>
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
60006d3a:	4621      	mov	r1, r4
}
60006d3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
60006d40:	f010 bfb5 	b.w	60017cae <free_chunk>
}
60006d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60006d46:	bf00      	nop
60006d48:	6001c569 	.word	0x6001c569
60006d4c:	6001c58a 	.word	0x6001c58a
60006d50:	6001c3d7 	.word	0x6001c3d7
60006d54:	6001c59b 	.word	0x6001c59b
60006d58:	6001c5d3 	.word	0x6001c5d3
60006d5c:	6001c5f9 	.word	0x6001c5f9

60006d60 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
60006d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
60006d64:	6806      	ldr	r6, [r0, #0]
{
60006d66:	4614      	mov	r4, r2
60006d68:	460f      	mov	r7, r1
60006d6a:	1e4b      	subs	r3, r1, #1
	return big_heap_chunks(h->end_chunk);
60006d6c:	68b2      	ldr	r2, [r6, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
60006d6e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
60006d72:	bf34      	ite	cc
60006d74:	2104      	movcc	r1, #4
60006d76:	2108      	movcs	r1, #8
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
60006d78:	403b      	ands	r3, r7
60006d7a:	d00f      	beq.n	60006d9c <sys_heap_aligned_alloc+0x3c>
	rew = align & -align;
60006d7c:	f1c7 0900 	rsb	r9, r7, #0
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
60006d80:	1e58      	subs	r0, r3, #1
	rew = align & -align;
60006d82:	ea09 0907 	and.w	r9, r9, r7
60006d86:	4549      	cmp	r1, r9
60006d88:	bf28      	it	cs
60006d8a:	4649      	movcs	r1, r9
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
60006d8c:	4218      	tst	r0, r3
60006d8e:	d10c      	bne.n	60006daa <sys_heap_aligned_alloc+0x4a>
60006d90:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
60006d92:	b9dc      	cbnz	r4, 60006dcc <sys_heap_aligned_alloc+0x6c>
		return NULL;
60006d94:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
60006d96:	4628      	mov	r0, r5
60006d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
60006d9c:	428f      	cmp	r7, r1
60006d9e:	d813      	bhi.n	60006dc8 <sys_heap_aligned_alloc+0x68>
			return sys_heap_alloc(heap, bytes);
60006da0:	4621      	mov	r1, r4
}
60006da2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
60006da6:	f010 bfc4 	b.w	60017d32 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
60006daa:	492f      	ldr	r1, [pc, #188]	; (60006e68 <sys_heap_aligned_alloc+0x108>)
60006dac:	f44f 73a2 	mov.w	r3, #324	; 0x144
60006db0:	4a2e      	ldr	r2, [pc, #184]	; (60006e6c <sys_heap_aligned_alloc+0x10c>)
60006db2:	482f      	ldr	r0, [pc, #188]	; (60006e70 <sys_heap_aligned_alloc+0x110>)
60006db4:	f011 f8a5 	bl	60017f02 <assert_print>
60006db8:	482e      	ldr	r0, [pc, #184]	; (60006e74 <sys_heap_aligned_alloc+0x114>)
60006dba:	f011 f8a2 	bl	60017f02 <assert_print>
60006dbe:	f44f 71a2 	mov.w	r1, #324	; 0x144
60006dc2:	482a      	ldr	r0, [pc, #168]	; (60006e6c <sys_heap_aligned_alloc+0x10c>)
60006dc4:	f011 f896 	bl	60017ef4 <assert_post_action>
		rew = 0;
60006dc8:	4699      	mov	r9, r3
60006dca:	e7e2      	b.n	60006d92 <sys_heap_aligned_alloc+0x32>
	if (bytes == 0 || size_too_big(h, bytes)) {
60006dcc:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
60006dd0:	d9e0      	bls.n	60006d94 <sys_heap_aligned_alloc+0x34>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
60006dd2:	19e3      	adds	r3, r4, r7
60006dd4:	4610      	mov	r0, r2
60006dd6:	1a59      	subs	r1, r3, r1
60006dd8:	f010 fe4d 	bl	60017a76 <bytes_to_chunksz.isra.0>
60006ddc:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
60006dde:	4630      	mov	r0, r6
60006de0:	f010 fea4 	bl	60017b2c <alloc_chunk>
	if (c0 == 0) {
60006de4:	4680      	mov	r8, r0
60006de6:	2800      	cmp	r0, #0
60006de8:	d0d4      	beq.n	60006d94 <sys_heap_aligned_alloc+0x34>
60006dea:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
60006dec:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
	chunkid_t c = mem_to_chunkid(h, mem);
60006df0:	4630      	mov	r0, r6
60006df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
60006df6:	bf34      	ite	cc
60006df8:	2304      	movcc	r3, #4
60006dfa:	2308      	movcs	r3, #8
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
60006dfc:	441d      	add	r5, r3
60006dfe:	1e7b      	subs	r3, r7, #1
60006e00:	427f      	negs	r7, r7
60006e02:	4435      	add	r5, r6
60006e04:	441d      	add	r5, r3
60006e06:	403d      	ands	r5, r7
60006e08:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
60006e0c:	442c      	add	r4, r5
	chunkid_t c = mem_to_chunkid(h, mem);
60006e0e:	4629      	mov	r1, r5
60006e10:	f010 fe27 	bl	60017a62 <mem_to_chunkid>
	if (c > c0) {
60006e14:	4580      	cmp	r8, r0
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
60006e16:	f104 0407 	add.w	r4, r4, #7
	chunkid_t c = mem_to_chunkid(h, mem);
60006e1a:	4607      	mov	r7, r0
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
60006e1c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
60006e20:	eba4 0406 	sub.w	r4, r4, r6
60006e24:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
60006e28:	d208      	bcs.n	60006e3c <sys_heap_aligned_alloc+0xdc>
		split_chunks(h, c0, c);
60006e2a:	4602      	mov	r2, r0
60006e2c:	4641      	mov	r1, r8
60006e2e:	4630      	mov	r0, r6
60006e30:	f010 feb6 	bl	60017ba0 <split_chunks>
		free_list_add(h, c0);
60006e34:	4641      	mov	r1, r8
60006e36:	4630      	mov	r0, r6
60006e38:	f010 fef7 	bl	60017c2a <free_list_add>
	return c + chunk_size(h, c);
60006e3c:	4639      	mov	r1, r7
60006e3e:	4630      	mov	r0, r6
60006e40:	f010 fded 	bl	60017a1e <chunk_size>
60006e44:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
60006e46:	4284      	cmp	r4, r0
60006e48:	d208      	bcs.n	60006e5c <sys_heap_aligned_alloc+0xfc>
		split_chunks(h, c, c_end);
60006e4a:	4639      	mov	r1, r7
60006e4c:	4630      	mov	r0, r6
60006e4e:	4622      	mov	r2, r4
60006e50:	f010 fea6 	bl	60017ba0 <split_chunks>
		free_list_add(h, c_end);
60006e54:	4621      	mov	r1, r4
60006e56:	4630      	mov	r0, r6
60006e58:	f010 fee7 	bl	60017c2a <free_list_add>
	set_chunk_used(h, c, true);
60006e5c:	2201      	movs	r2, #1
60006e5e:	4639      	mov	r1, r7
60006e60:	4630      	mov	r0, r6
60006e62:	f010 fde2 	bl	60017a2a <set_chunk_used>
	return mem;
60006e66:	e796      	b.n	60006d96 <sys_heap_aligned_alloc+0x36>
60006e68:	6001c635 	.word	0x6001c635
60006e6c:	6001c569 	.word	0x6001c569
60006e70:	6001c3d7 	.word	0x6001c3d7
60006e74:	6001c650 	.word	0x6001c650

60006e78 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
60006e78:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
60006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60006e7e:	d210      	bcs.n	60006ea2 <sys_heap_init+0x2a>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
60006e80:	2a04      	cmp	r2, #4
60006e82:	d828      	bhi.n	60006ed6 <sys_heap_init+0x5e>
60006e84:	4941      	ldr	r1, [pc, #260]	; (60006f8c <sys_heap_init+0x114>)
60006e86:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
60006e8a:	4a41      	ldr	r2, [pc, #260]	; (60006f90 <sys_heap_init+0x118>)
60006e8c:	4841      	ldr	r0, [pc, #260]	; (60006f94 <sys_heap_init+0x11c>)
60006e8e:	f011 f838 	bl	60017f02 <assert_print>
60006e92:	4841      	ldr	r0, [pc, #260]	; (60006f98 <sys_heap_init+0x120>)
60006e94:	f011 f835 	bl	60017f02 <assert_print>
60006e98:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
60006e9c:	483c      	ldr	r0, [pc, #240]	; (60006f90 <sys_heap_init+0x118>)
60006e9e:	f011 f829 	bl	60017ef4 <assert_post_action>
60006ea2:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
60006ea4:	1ad2      	subs	r2, r2, r3
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
60006ea6:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
60006ea8:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
60006eaa:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
60006eae:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
60006eb2:	1b09      	subs	r1, r1, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
60006eb4:	2917      	cmp	r1, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
60006eb6:	ea4f 06d1 	mov.w	r6, r1, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
60006eba:	d80e      	bhi.n	60006eda <sys_heap_init+0x62>
60006ebc:	4937      	ldr	r1, [pc, #220]	; (60006f9c <sys_heap_init+0x124>)
60006ebe:	f240 13fb 	movw	r3, #507	; 0x1fb
60006ec2:	4a33      	ldr	r2, [pc, #204]	; (60006f90 <sys_heap_init+0x118>)
60006ec4:	4833      	ldr	r0, [pc, #204]	; (60006f94 <sys_heap_init+0x11c>)
60006ec6:	f011 f81c 	bl	60017f02 <assert_print>
60006eca:	4833      	ldr	r0, [pc, #204]	; (60006f98 <sys_heap_init+0x120>)
60006ecc:	f011 f819 	bl	60017f02 <assert_print>
60006ed0:	f240 11fb 	movw	r1, #507	; 0x1fb
60006ed4:	e7e2      	b.n	60006e9c <sys_heap_init+0x24>
60006ed6:	2304      	movs	r3, #4
60006ed8:	e7e4      	b.n	60006ea4 <sys_heap_init+0x2c>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
60006eda:	2700      	movs	r7, #0
	heap->heap = h;
60006edc:	6004      	str	r4, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
60006ede:	4631      	mov	r1, r6
60006ee0:	4630      	mov	r0, r6
	h->end_chunk = heap_sz;
60006ee2:	60a6      	str	r6, [r4, #8]
	h->avail_buckets = 0;
60006ee4:	60e7      	str	r7, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
60006ee6:	f010 fdd0 	bl	60017a8a <bucket_idx.isra.0>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
60006eea:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
60006eec:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
60006eee:	4602      	mov	r2, r0
60006ef0:	4630      	mov	r0, r6
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
60006ef2:	351b      	adds	r5, #27
	return bytes_to_chunksz(h, 1);
60006ef4:	f010 fdbf 	bl	60017a76 <bytes_to_chunksz.isra.0>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
60006ef8:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
60006efa:	4428      	add	r0, r5
60006efc:	42b0      	cmp	r0, r6
60006efe:	d834      	bhi.n	60006f6a <sys_heap_init+0xf2>
60006f00:	f104 010c 	add.w	r1, r4, #12

	for (int i = 0; i < nb_buckets; i++) {
60006f04:	463b      	mov	r3, r7
		h->buckets[i].next = 0;
60006f06:	4638      	mov	r0, r7
	for (int i = 0; i < nb_buckets; i++) {
60006f08:	429a      	cmp	r2, r3
60006f0a:	da3b      	bge.n	60006f84 <sys_heap_init+0x10c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
60006f0c:	462a      	mov	r2, r5
60006f0e:	4620      	mov	r0, r4
60006f10:	2100      	movs	r1, #0
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
60006f12:	1b77      	subs	r7, r6, r5
	set_chunk_size(h, 0, chunk0_size);
60006f14:	f010 fda1 	bl	60017a5a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
60006f18:	2300      	movs	r3, #0
60006f1a:	4620      	mov	r0, r4
60006f1c:	461a      	mov	r2, r3
60006f1e:	4619      	mov	r1, r3
60006f20:	f010 fd72 	bl	60017a08 <chunk_set>
	set_chunk_used(h, 0, true);
60006f24:	4619      	mov	r1, r3
60006f26:	4620      	mov	r0, r4
60006f28:	2201      	movs	r2, #1
60006f2a:	f010 fd7e 	bl	60017a2a <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
60006f2e:	463a      	mov	r2, r7
60006f30:	4629      	mov	r1, r5
60006f32:	f010 fd92 	bl	60017a5a <set_chunk_size>
60006f36:	462b      	mov	r3, r5
60006f38:	2200      	movs	r2, #0
60006f3a:	4629      	mov	r1, r5
60006f3c:	4620      	mov	r0, r4
60006f3e:	f010 fd63 	bl	60017a08 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
60006f42:	4631      	mov	r1, r6
60006f44:	4620      	mov	r0, r4
60006f46:	f010 fd88 	bl	60017a5a <set_chunk_size>
60006f4a:	463b      	mov	r3, r7
60006f4c:	4631      	mov	r1, r6
60006f4e:	4620      	mov	r0, r4
60006f50:	2200      	movs	r2, #0
60006f52:	f010 fd59 	bl	60017a08 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
60006f56:	4631      	mov	r1, r6
60006f58:	4620      	mov	r0, r4
60006f5a:	2201      	movs	r2, #1
60006f5c:	f010 fd65 	bl	60017a2a <set_chunk_used>

	free_list_add(h, chunk0_size);
60006f60:	4629      	mov	r1, r5
}
60006f62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
60006f66:	f010 be60 	b.w	60017c2a <free_list_add>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
60006f6a:	490d      	ldr	r1, [pc, #52]	; (60006fa0 <sys_heap_init+0x128>)
60006f6c:	f44f 7303 	mov.w	r3, #524	; 0x20c
60006f70:	4a07      	ldr	r2, [pc, #28]	; (60006f90 <sys_heap_init+0x118>)
60006f72:	4808      	ldr	r0, [pc, #32]	; (60006f94 <sys_heap_init+0x11c>)
60006f74:	f010 ffc5 	bl	60017f02 <assert_print>
60006f78:	4807      	ldr	r0, [pc, #28]	; (60006f98 <sys_heap_init+0x120>)
60006f7a:	f010 ffc2 	bl	60017f02 <assert_print>
60006f7e:	f44f 7103 	mov.w	r1, #524	; 0x20c
60006f82:	e78b      	b.n	60006e9c <sys_heap_init+0x24>
	for (int i = 0; i < nb_buckets; i++) {
60006f84:	3301      	adds	r3, #1
		h->buckets[i].next = 0;
60006f86:	f841 0f04 	str.w	r0, [r1, #4]!
	for (int i = 0; i < nb_buckets; i++) {
60006f8a:	e7bd      	b.n	60006f08 <sys_heap_init+0x90>
60006f8c:	6001c66d 	.word	0x6001c66d
60006f90:	6001c569 	.word	0x6001c569
60006f94:	6001c3d7 	.word	0x6001c3d7
60006f98:	6001c68e 	.word	0x6001c68e
60006f9c:	6001c6a7 	.word	0x6001c6a7
60006fa0:	6001c6d0 	.word	0x6001c6d0

60006fa4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
60006fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
60006fa6:	4602      	mov	r2, r0
60006fa8:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
60006faa:	4e08      	ldr	r6, [pc, #32]	; (60006fcc <extract_decimal+0x28>)
	size_t val = 0;
60006fac:	2000      	movs	r0, #0
		val = 10U * val + *sp++ - '0';
60006fae:	270a      	movs	r7, #10
60006fb0:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
60006fb2:	3101      	adds	r1, #1
60006fb4:	781c      	ldrb	r4, [r3, #0]
60006fb6:	5d35      	ldrb	r5, [r6, r4]
60006fb8:	076d      	lsls	r5, r5, #29
60006fba:	d401      	bmi.n	60006fc0 <extract_decimal+0x1c>
	}
	*str = sp;
60006fbc:	6013      	str	r3, [r2, #0]
	return val;
}
60006fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
60006fc0:	fb07 4300 	mla	r3, r7, r0, r4
60006fc4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
60006fc8:	e7f2      	b.n	60006fb0 <extract_decimal+0xc>
60006fca:	bf00      	nop
60006fcc:	6001be35 	.word	0x6001be35

60006fd0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
60006fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60006fd4:	4615      	mov	r5, r2
60006fd6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
60006fd8:	78d3      	ldrb	r3, [r2, #3]
{
60006fda:	4680      	mov	r8, r0
	bool upcase = isupper((int)conv->specifier);
60006fdc:	4a21      	ldr	r2, [pc, #132]	; (60007064 <encode_uint+0x94>)
{
60006fde:	460f      	mov	r7, r1
	switch (specifier) {
60006fe0:	2b6f      	cmp	r3, #111	; 0x6f
60006fe2:	f812 b003 	ldrb.w	fp, [r2, r3]
60006fe6:	f00b 0b03 	and.w	fp, fp, #3
60006fea:	d029      	beq.n	60007040 <encode_uint+0x70>
60006fec:	d824      	bhi.n	60007038 <encode_uint+0x68>
		return 10;
60006fee:	2b58      	cmp	r3, #88	; 0x58
60006ff0:	bf0c      	ite	eq
60006ff2:	2610      	moveq	r6, #16
60006ff4:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
60006ff6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
60006ffa:	4632      	mov	r2, r6
60006ffc:	2300      	movs	r3, #0
60006ffe:	4640      	mov	r0, r8
60007000:	4639      	mov	r1, r7
60007002:	f7fc fb7f 	bl	60003704 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
60007006:	2a09      	cmp	r2, #9
60007008:	b2d4      	uxtb	r4, r2
6000700a:	d81e      	bhi.n	6000704a <encode_uint+0x7a>
6000700c:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
6000700e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
60007010:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
60007012:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
60007016:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
6000701a:	d301      	bcc.n	60007020 <encode_uint+0x50>
6000701c:	45d1      	cmp	r9, sl
6000701e:	d811      	bhi.n	60007044 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
60007020:	782b      	ldrb	r3, [r5, #0]
60007022:	069b      	lsls	r3, r3, #26
60007024:	d505      	bpl.n	60007032 <encode_uint+0x62>
		if (radix == 8) {
60007026:	2e08      	cmp	r6, #8
60007028:	d115      	bne.n	60007056 <encode_uint+0x86>
			conv->altform_0 = true;
6000702a:	78ab      	ldrb	r3, [r5, #2]
6000702c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
60007030:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
60007032:	4648      	mov	r0, r9
60007034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
60007038:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
6000703c:	2b70      	cmp	r3, #112	; 0x70
6000703e:	e7d7      	b.n	60006ff0 <encode_uint+0x20>
	switch (specifier) {
60007040:	2608      	movs	r6, #8
60007042:	e7d8      	b.n	60006ff6 <encode_uint+0x26>
		value /= radix;
60007044:	4680      	mov	r8, r0
60007046:	460f      	mov	r7, r1
60007048:	e7d7      	b.n	60006ffa <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
6000704a:	f1bb 0f01 	cmp.w	fp, #1
6000704e:	bf0c      	ite	eq
60007050:	3437      	addeq	r4, #55	; 0x37
60007052:	3457      	addne	r4, #87	; 0x57
60007054:	e7db      	b.n	6000700e <encode_uint+0x3e>
		} else if (radix == 16) {
60007056:	2e10      	cmp	r6, #16
60007058:	d1eb      	bne.n	60007032 <encode_uint+0x62>
			conv->altform_0c = true;
6000705a:	78ab      	ldrb	r3, [r5, #2]
6000705c:	f043 0310 	orr.w	r3, r3, #16
60007060:	e7e6      	b.n	60007030 <encode_uint+0x60>
60007062:	bf00      	nop
60007064:	6001be35 	.word	0x6001be35

60007068 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
60007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000706c:	4682      	mov	sl, r0
6000706e:	b09f      	sub	sp, #124	; 0x7c
60007070:	4616      	mov	r6, r2
60007072:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
60007074:	2500      	movs	r5, #0
{
60007076:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
60007078:	7830      	ldrb	r0, [r6, #0]
6000707a:	b910      	cbnz	r0, 60007082 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
6000707c:	4628      	mov	r0, r5
6000707e:	f000 bd85 	b.w	60007b8c <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
60007082:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
60007084:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
60007086:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
60007088:	d006      	beq.n	60007098 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
6000708a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
6000708c:	47d0      	blx	sl
6000708e:	2800      	cmp	r0, #0
60007090:	f2c0 857c 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
60007094:	3501      	adds	r5, #1
		if (bps == NULL) {
60007096:	e21f      	b.n	600074d8 <z_cbvprintf_impl+0x470>
		} state = {
60007098:	2218      	movs	r2, #24
6000709a:	2100      	movs	r1, #0
6000709c:	a810      	add	r0, sp, #64	; 0x40
6000709e:	f00c f94f 	bl	60013340 <memset>
	if (*sp == '%') {
600070a2:	7873      	ldrb	r3, [r6, #1]
600070a4:	2b25      	cmp	r3, #37	; 0x25
600070a6:	f000 80bc 	beq.w	60007222 <z_cbvprintf_impl+0x1ba>
600070aa:	2300      	movs	r3, #0
600070ac:	1c71      	adds	r1, r6, #1
600070ae:	4698      	mov	r8, r3
600070b0:	469e      	mov	lr, r3
600070b2:	469c      	mov	ip, r3
600070b4:	4618      	mov	r0, r3
600070b6:	460f      	mov	r7, r1
		switch (*sp) {
600070b8:	f811 2b01 	ldrb.w	r2, [r1], #1
600070bc:	2a2b      	cmp	r2, #43	; 0x2b
600070be:	f000 80df 	beq.w	60007280 <z_cbvprintf_impl+0x218>
600070c2:	f200 80d6 	bhi.w	60007272 <z_cbvprintf_impl+0x20a>
600070c6:	2a20      	cmp	r2, #32
600070c8:	f000 80dd 	beq.w	60007286 <z_cbvprintf_impl+0x21e>
600070cc:	2a23      	cmp	r2, #35	; 0x23
600070ce:	f000 80dd 	beq.w	6000728c <z_cbvprintf_impl+0x224>
600070d2:	b12b      	cbz	r3, 600070e0 <z_cbvprintf_impl+0x78>
600070d4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
600070d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600070dc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
600070e0:	f1b8 0f00 	cmp.w	r8, #0
600070e4:	d005      	beq.n	600070f2 <z_cbvprintf_impl+0x8a>
600070e6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
600070ea:	f043 0320 	orr.w	r3, r3, #32
600070ee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
600070f2:	f1be 0f00 	cmp.w	lr, #0
600070f6:	d005      	beq.n	60007104 <z_cbvprintf_impl+0x9c>
600070f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
600070fc:	f043 0310 	orr.w	r3, r3, #16
60007100:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
60007104:	f1bc 0f00 	cmp.w	ip, #0
60007108:	d005      	beq.n	60007116 <z_cbvprintf_impl+0xae>
6000710a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
6000710e:	f043 0308 	orr.w	r3, r3, #8
60007112:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
60007116:	b128      	cbz	r0, 60007124 <z_cbvprintf_impl+0xbc>
60007118:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
6000711c:	f043 0304 	orr.w	r3, r3, #4
60007120:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
60007124:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
60007128:	f003 0144 	and.w	r1, r3, #68	; 0x44
6000712c:	2944      	cmp	r1, #68	; 0x44
6000712e:	d103      	bne.n	60007138 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
60007130:	f36f 1386 	bfc	r3, #6, #1
60007134:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
60007138:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
6000713c:	2a2a      	cmp	r2, #42	; 0x2a
6000713e:	970e      	str	r7, [sp, #56]	; 0x38
	conv->width_present = true;
60007140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
60007144:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
60007148:	f040 80a5 	bne.w	60007296 <z_cbvprintf_impl+0x22e>
		conv->width_star = true;
6000714c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
60007150:	f043 0301 	orr.w	r3, r3, #1
60007154:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
60007158:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
6000715a:	781a      	ldrb	r2, [r3, #0]
6000715c:	2a2e      	cmp	r2, #46	; 0x2e
6000715e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
60007162:	bf0c      	ite	eq
60007164:	2101      	moveq	r1, #1
60007166:	2100      	movne	r1, #0
60007168:	f361 0241 	bfi	r2, r1, #1, #1
6000716c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
60007170:	d10c      	bne.n	6000718c <z_cbvprintf_impl+0x124>
	++sp;
60007172:	1c5a      	adds	r2, r3, #1
60007174:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
60007176:	785a      	ldrb	r2, [r3, #1]
60007178:	2a2a      	cmp	r2, #42	; 0x2a
6000717a:	f040 809c 	bne.w	600072b6 <z_cbvprintf_impl+0x24e>
		conv->prec_star = true;
6000717e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
60007182:	3302      	adds	r3, #2
		conv->prec_star = true;
60007184:	f042 0204 	orr.w	r2, r2, #4
60007188:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
6000718c:	781a      	ldrb	r2, [r3, #0]
6000718e:	2a6c      	cmp	r2, #108	; 0x6c
60007190:	f000 80bd 	beq.w	6000730e <z_cbvprintf_impl+0x2a6>
60007194:	f200 809f 	bhi.w	600072d6 <z_cbvprintf_impl+0x26e>
60007198:	2a68      	cmp	r2, #104	; 0x68
6000719a:	f000 80a5 	beq.w	600072e8 <z_cbvprintf_impl+0x280>
6000719e:	2a6a      	cmp	r2, #106	; 0x6a
600071a0:	f000 80be 	beq.w	60007320 <z_cbvprintf_impl+0x2b8>
600071a4:	2a4c      	cmp	r2, #76	; 0x4c
600071a6:	f000 80c3 	beq.w	60007330 <z_cbvprintf_impl+0x2c8>
	conv->specifier = *sp++;
600071aa:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
600071ae:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
600071b0:	9306      	str	r3, [sp, #24]
600071b2:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
600071b6:	f200 8105 	bhi.w	600073c4 <z_cbvprintf_impl+0x35c>
600071ba:	2a6d      	cmp	r2, #109	; 0x6d
600071bc:	f200 80c5 	bhi.w	6000734a <z_cbvprintf_impl+0x2e2>
600071c0:	2a69      	cmp	r2, #105	; 0x69
600071c2:	f200 80ff 	bhi.w	600073c4 <z_cbvprintf_impl+0x35c>
600071c6:	2a57      	cmp	r2, #87	; 0x57
600071c8:	f200 80de 	bhi.w	60007388 <z_cbvprintf_impl+0x320>
600071cc:	2a41      	cmp	r2, #65	; 0x41
600071ce:	d004      	beq.n	600071da <z_cbvprintf_impl+0x172>
600071d0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
600071d4:	2b02      	cmp	r3, #2
600071d6:	f200 80f5 	bhi.w	600073c4 <z_cbvprintf_impl+0x35c>
			|| (conv->specifier == 'A');
600071da:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
600071de:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
600071e2:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
600071e4:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
600071e8:	f361 0302 	bfi	r3, r1, #0, #3
		conv->specifier_a = (conv->specifier == 'a')
600071ec:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
			|| (conv->specifier == 'A');
600071f0:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_cat = SPECIFIER_FP;
600071f4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
600071f8:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
600071fc:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
60007200:	060a      	lsls	r2, r1, #24
60007202:	b2cb      	uxtb	r3, r1
		conv->specifier_a = (conv->specifier == 'a')
60007204:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
60007208:	f100 811b 	bmi.w	60007442 <z_cbvprintf_impl+0x3da>
		if (conv->length_mod == LENGTH_L) {
6000720c:	f003 0278 	and.w	r2, r3, #120	; 0x78
60007210:	2a18      	cmp	r2, #24
60007212:	f040 8105 	bne.w	60007420 <z_cbvprintf_impl+0x3b8>
			conv->length_mod = LENGTH_NONE;
60007216:	f36f 03c6 	bfc	r3, #3, #4
6000721a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
6000721e:	2300      	movs	r3, #0
60007220:	e0f4      	b.n	6000740c <z_cbvprintf_impl+0x3a4>
		conv->specifier = *sp++;
60007222:	1cb2      	adds	r2, r6, #2
60007224:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
60007228:	9206      	str	r2, [sp, #24]
		if (conv->width_star) {
6000722a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
6000722e:	07df      	lsls	r7, r3, #31
60007230:	f140 8109 	bpl.w	60007446 <z_cbvprintf_impl+0x3de>
			width = va_arg(ap, int);
60007234:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
60007238:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
6000723a:	9204      	str	r2, [sp, #16]
			if (width < 0) {
6000723c:	da08      	bge.n	60007250 <z_cbvprintf_impl+0x1e8>
				conv->flag_dash = true;
6000723e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
60007242:	f042 0204 	orr.w	r2, r2, #4
60007246:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
6000724a:	9a04      	ldr	r2, [sp, #16]
6000724c:	4252      	negs	r2, r2
		int width = -1;
6000724e:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
60007250:	0758      	lsls	r0, r3, #29
60007252:	f140 8100 	bpl.w	60007456 <z_cbvprintf_impl+0x3ee>
			int arg = va_arg(ap, int);
60007256:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
6000725a:	2f00      	cmp	r7, #0
6000725c:	f280 80ff 	bge.w	6000745e <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
60007260:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
60007264:	f36f 0341 	bfc	r3, #1, #1
60007268:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
6000726c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
60007270:	e0f5      	b.n	6000745e <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
60007272:	2a2d      	cmp	r2, #45	; 0x2d
60007274:	d00d      	beq.n	60007292 <z_cbvprintf_impl+0x22a>
60007276:	2a30      	cmp	r2, #48	; 0x30
60007278:	f47f af2b 	bne.w	600070d2 <z_cbvprintf_impl+0x6a>
6000727c:	2301      	movs	r3, #1
	} while (loop);
6000727e:	e71a      	b.n	600070b6 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
60007280:	f04f 0c01 	mov.w	ip, #1
60007284:	e717      	b.n	600070b6 <z_cbvprintf_impl+0x4e>
60007286:	f04f 0e01 	mov.w	lr, #1
6000728a:	e714      	b.n	600070b6 <z_cbvprintf_impl+0x4e>
6000728c:	f04f 0801 	mov.w	r8, #1
60007290:	e711      	b.n	600070b6 <z_cbvprintf_impl+0x4e>
60007292:	2001      	movs	r0, #1
60007294:	e70f      	b.n	600070b6 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
60007296:	a80e      	add	r0, sp, #56	; 0x38
60007298:	f7ff fe84 	bl	60006fa4 <extract_decimal>
	if (sp != wp) {
6000729c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
6000729e:	42bb      	cmp	r3, r7
600072a0:	f43f af5b 	beq.w	6000715a <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
600072a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
600072a8:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
600072aa:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
600072ac:	f360 0241 	bfi	r2, r0, #1, #1
600072b0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
600072b4:	e751      	b.n	6000715a <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
600072b6:	a80e      	add	r0, sp, #56	; 0x38
600072b8:	f7ff fe74 	bl	60006fa4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
600072bc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
600072c0:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
600072c2:	f3c3 0240 	ubfx	r2, r3, #1, #1
600072c6:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
600072ca:	f362 0341 	bfi	r3, r2, #1, #1
600072ce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
600072d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
600072d4:	e75a      	b.n	6000718c <z_cbvprintf_impl+0x124>
	switch (*sp) {
600072d6:	2a74      	cmp	r2, #116	; 0x74
600072d8:	d026      	beq.n	60007328 <z_cbvprintf_impl+0x2c0>
600072da:	2a7a      	cmp	r2, #122	; 0x7a
600072dc:	f47f af65 	bne.w	600071aa <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
600072e0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
600072e4:	2106      	movs	r1, #6
600072e6:	e00c      	b.n	60007302 <z_cbvprintf_impl+0x29a>
		if (*++sp == 'h') {
600072e8:	785a      	ldrb	r2, [r3, #1]
600072ea:	2a68      	cmp	r2, #104	; 0x68
600072ec:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
600072f0:	d106      	bne.n	60007300 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_HH;
600072f2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
600072f4:	f361 02c6 	bfi	r2, r1, #3, #4
			++sp;
600072f8:	3302      	adds	r3, #2
			conv->length_mod = LENGTH_LL;
600072fa:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
600072fe:	e754      	b.n	600071aa <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
60007300:	2102      	movs	r1, #2
60007302:	f361 02c6 	bfi	r2, r1, #3, #4
60007306:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
6000730a:	3301      	adds	r3, #1
6000730c:	e74d      	b.n	600071aa <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
6000730e:	785a      	ldrb	r2, [r3, #1]
60007310:	2a6c      	cmp	r2, #108	; 0x6c
60007312:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
60007316:	d101      	bne.n	6000731c <z_cbvprintf_impl+0x2b4>
			conv->length_mod = LENGTH_LL;
60007318:	2104      	movs	r1, #4
6000731a:	e7eb      	b.n	600072f4 <z_cbvprintf_impl+0x28c>
			conv->length_mod = LENGTH_L;
6000731c:	2103      	movs	r1, #3
6000731e:	e7f0      	b.n	60007302 <z_cbvprintf_impl+0x29a>
		conv->length_mod = LENGTH_J;
60007320:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
60007324:	2105      	movs	r1, #5
60007326:	e7ec      	b.n	60007302 <z_cbvprintf_impl+0x29a>
		conv->length_mod = LENGTH_T;
60007328:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
6000732c:	2107      	movs	r1, #7
6000732e:	e7e8      	b.n	60007302 <z_cbvprintf_impl+0x29a>
		conv->unsupported = true;
60007330:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
60007334:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
60007338:	f022 0202 	bic.w	r2, r2, #2
6000733c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
60007340:	f042 0202 	orr.w	r2, r2, #2
60007344:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
60007348:	e7df      	b.n	6000730a <z_cbvprintf_impl+0x2a2>
	switch (conv->specifier) {
6000734a:	3a6e      	subs	r2, #110	; 0x6e
6000734c:	b2d3      	uxtb	r3, r2
6000734e:	2201      	movs	r2, #1
60007350:	409a      	lsls	r2, r3
60007352:	f240 4382 	movw	r3, #1154	; 0x482
60007356:	421a      	tst	r2, r3
60007358:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
6000735c:	d139      	bne.n	600073d2 <z_cbvprintf_impl+0x36a>
6000735e:	f012 0f24 	tst.w	r2, #36	; 0x24
60007362:	d161      	bne.n	60007428 <z_cbvprintf_impl+0x3c0>
60007364:	07d1      	lsls	r1, r2, #31
60007366:	d52d      	bpl.n	600073c4 <z_cbvprintf_impl+0x35c>
		if (conv->length_mod == LENGTH_UPPER_L) {
60007368:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
6000736c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
60007370:	2103      	movs	r1, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
60007372:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
60007376:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
6000737a:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
6000737e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
60007382:	eb43 030c 	adc.w	r3, r3, ip
60007386:	e041      	b.n	6000740c <z_cbvprintf_impl+0x3a4>
	switch (conv->specifier) {
60007388:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
6000738c:	2001      	movs	r0, #1
6000738e:	b2c9      	uxtb	r1, r1
60007390:	fa00 f101 	lsl.w	r1, r0, r1
60007394:	f411 4f62 	tst.w	r1, #57856	; 0xe200
60007398:	f47f af1f 	bne.w	600071da <z_cbvprintf_impl+0x172>
6000739c:	f640 0301 	movw	r3, #2049	; 0x801
600073a0:	4219      	tst	r1, r3
600073a2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
600073a6:	d11a      	bne.n	600073de <z_cbvprintf_impl+0x376>
600073a8:	f411 3f04 	tst.w	r1, #135168	; 0x21000
600073ac:	d00a      	beq.n	600073c4 <z_cbvprintf_impl+0x35c>
		conv->specifier_cat = SPECIFIER_SINT;
600073ae:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
600073b2:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
600073b6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
600073ba:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
600073be:	2b40      	cmp	r3, #64	; 0x40
600073c0:	f47f af2d 	bne.w	6000721e <z_cbvprintf_impl+0x1b6>
		conv->invalid = true;
600073c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
600073c8:	f043 0301 	orr.w	r3, r3, #1
600073cc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
600073d0:	e725      	b.n	6000721e <z_cbvprintf_impl+0x1b6>
		conv->specifier_cat = SPECIFIER_UINT;
600073d2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
600073d6:	2102      	movs	r1, #2
600073d8:	f361 0202 	bfi	r2, r1, #0, #3
600073dc:	e7eb      	b.n	600073b6 <z_cbvprintf_impl+0x34e>
600073de:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
600073e2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
600073e4:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
600073e8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
600073ec:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
600073ee:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
600073f2:	bf02      	ittt	eq
600073f4:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
600073f8:	f041 0101 	orreq.w	r1, r1, #1
600073fc:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
60007400:	2a63      	cmp	r2, #99	; 0x63
60007402:	f47f af0c 	bne.w	6000721e <z_cbvprintf_impl+0x1b6>
			unsupported = (conv->length_mod != LENGTH_NONE);
60007406:	3b00      	subs	r3, #0
60007408:	bf18      	it	ne
6000740a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
6000740c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
60007410:	f3c2 0140 	ubfx	r1, r2, #1, #1
60007414:	430b      	orrs	r3, r1
60007416:	f363 0241 	bfi	r2, r3, #1, #1
6000741a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
6000741e:	e704      	b.n	6000722a <z_cbvprintf_impl+0x1c2>
		} else if ((conv->length_mod != LENGTH_NONE)
60007420:	f013 0f38 	tst.w	r3, #56	; 0x38
60007424:	d1ce      	bne.n	600073c4 <z_cbvprintf_impl+0x35c>
60007426:	e6fa      	b.n	6000721e <z_cbvprintf_impl+0x1b6>
		conv->specifier_cat = SPECIFIER_PTR;
60007428:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
6000742c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
6000742e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
60007432:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
60007436:	bf14      	ite	ne
60007438:	2301      	movne	r3, #1
6000743a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
6000743c:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
60007440:	e7e4      	b.n	6000740c <z_cbvprintf_impl+0x3a4>
			unsupported = true;
60007442:	2301      	movs	r3, #1
60007444:	e7e2      	b.n	6000740c <z_cbvprintf_impl+0x3a4>
		} else if (conv->width_present) {
60007446:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
6000744a:	2a00      	cmp	r2, #0
			width = conv->width_value;
6000744c:	bfb4      	ite	lt
6000744e:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
60007450:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
60007454:	e6fb      	b.n	6000724e <z_cbvprintf_impl+0x1e6>
		} else if (conv->prec_present) {
60007456:	0799      	lsls	r1, r3, #30
60007458:	f57f af08 	bpl.w	6000726c <z_cbvprintf_impl+0x204>
			precision = conv->prec_value;
6000745c:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
6000745e:	2300      	movs	r3, #0
60007460:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_pre_exp = 0;
60007464:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
60007468:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
6000746c:	f003 0207 	and.w	r2, r3, #7
60007470:	2a04      	cmp	r2, #4
60007472:	d107      	bne.n	60007484 <z_cbvprintf_impl+0x41c>
		    && !conv->prec_present) {
60007474:	078a      	lsls	r2, r1, #30
60007476:	d405      	bmi.n	60007484 <z_cbvprintf_impl+0x41c>
			if (conv->specifier_a) {
60007478:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
6000747c:	2a00      	cmp	r2, #0
6000747e:	bfac      	ite	ge
60007480:	2706      	movge	r7, #6
60007482:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
60007484:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
60007488:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
6000748c:	2b01      	cmp	r3, #1
6000748e:	d133      	bne.n	600074f8 <z_cbvprintf_impl+0x490>
			switch (length_mod) {
60007490:	1ecb      	subs	r3, r1, #3
60007492:	2b04      	cmp	r3, #4
60007494:	d804      	bhi.n	600074a0 <z_cbvprintf_impl+0x438>
60007496:	e8df f003 	tbb	[pc, r3]
6000749a:	4621      	.short	0x4621
6000749c:	2146      	.short	0x2146
6000749e:	21          	.byte	0x21
6000749f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
600074a0:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
600074a2:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
600074a4:	ea4f 72e3 	mov.w	r2, r3, asr #31
600074a8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
600074ac:	d11c      	bne.n	600074e8 <z_cbvprintf_impl+0x480>
				value->sint = (signed char)value->sint;
600074ae:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
600074b2:	17da      	asrs	r2, r3, #31
600074b4:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
600074b8:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
600074ba:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
600074be:	9307      	str	r3, [sp, #28]
600074c0:	079b      	lsls	r3, r3, #30
600074c2:	d050      	beq.n	60007566 <z_cbvprintf_impl+0x4fe>
			OUTS(sp, fp);
600074c4:	9b06      	ldr	r3, [sp, #24]
600074c6:	4632      	mov	r2, r6
600074c8:	9903      	ldr	r1, [sp, #12]
600074ca:	4650      	mov	r0, sl
600074cc:	f010 fc92 	bl	60017df4 <outs>
600074d0:	2800      	cmp	r0, #0
600074d2:	f2c0 835b 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
600074d6:	4405      	add	r5, r0
			continue;
600074d8:	9e06      	ldr	r6, [sp, #24]
600074da:	e5cd      	b.n	60007078 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
600074dc:	f854 3b04 	ldr.w	r3, [r4], #4
600074e0:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
600074e2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
600074e6:	e7e8      	b.n	600074ba <z_cbvprintf_impl+0x452>
			} else if (length_mod == LENGTH_H) {
600074e8:	2902      	cmp	r1, #2
600074ea:	d1e5      	bne.n	600074b8 <z_cbvprintf_impl+0x450>
				value->sint = (short)value->sint;
600074ec:	b21a      	sxth	r2, r3
600074ee:	f343 33c0 	sbfx	r3, r3, #15, #1
600074f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
600074f6:	e7df      	b.n	600074b8 <z_cbvprintf_impl+0x450>
		} else if (specifier_cat == SPECIFIER_UINT) {
600074f8:	2b02      	cmp	r3, #2
600074fa:	d124      	bne.n	60007546 <z_cbvprintf_impl+0x4de>
			switch (length_mod) {
600074fc:	1ecb      	subs	r3, r1, #3
600074fe:	2b04      	cmp	r3, #4
60007500:	d804      	bhi.n	6000750c <z_cbvprintf_impl+0x4a4>
60007502:	e8df f003 	tbb	[pc, r3]
60007506:	1018      	.short	0x1018
60007508:	1810      	.short	0x1810
6000750a:	18          	.byte	0x18
6000750b:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
6000750c:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
6000750e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
60007512:	f04f 0200 	mov.w	r2, #0
60007516:	d014      	beq.n	60007542 <z_cbvprintf_impl+0x4da>
			} else if (length_mod == LENGTH_H) {
60007518:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
6000751a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
6000751e:	d1cc      	bne.n	600074ba <z_cbvprintf_impl+0x452>
				value->uint = (unsigned short)value->uint;
60007520:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
60007522:	9310      	str	r3, [sp, #64]	; 0x40
60007524:	e7c9      	b.n	600074ba <z_cbvprintf_impl+0x452>
					(uint_value_type)va_arg(ap,
60007526:	3407      	adds	r4, #7
60007528:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
6000752c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
60007530:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
60007534:	e7c1      	b.n	600074ba <z_cbvprintf_impl+0x452>
					(uint_value_type)va_arg(ap, size_t);
60007536:	f854 3b04 	ldr.w	r3, [r4], #4
6000753a:	9310      	str	r3, [sp, #64]	; 0x40
6000753c:	2300      	movs	r3, #0
6000753e:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
60007540:	e7bb      	b.n	600074ba <z_cbvprintf_impl+0x452>
				value->uint = (unsigned char)value->uint;
60007542:	b2db      	uxtb	r3, r3
60007544:	e7cd      	b.n	600074e2 <z_cbvprintf_impl+0x47a>
		} else if (specifier_cat == SPECIFIER_FP) {
60007546:	2b04      	cmp	r3, #4
60007548:	d108      	bne.n	6000755c <z_cbvprintf_impl+0x4f4>
					(sint_value_type)va_arg(ap, long long);
6000754a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
6000754c:	f024 0407 	bic.w	r4, r4, #7
60007550:	e9d4 2300 	ldrd	r2, r3, [r4]
60007554:	3408      	adds	r4, #8
60007556:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
6000755a:	e7ae      	b.n	600074ba <z_cbvprintf_impl+0x452>
		} else if (specifier_cat == SPECIFIER_PTR) {
6000755c:	2b03      	cmp	r3, #3
6000755e:	d1ac      	bne.n	600074ba <z_cbvprintf_impl+0x452>
			value->ptr = va_arg(ap, void *);
60007560:	f854 3b04 	ldr.w	r3, [r4], #4
60007564:	e7dd      	b.n	60007522 <z_cbvprintf_impl+0x4ba>
		switch (conv->specifier) {
60007566:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
6000756a:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
6000756e:	d8b3      	bhi.n	600074d8 <z_cbvprintf_impl+0x470>
60007570:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
60007574:	d849      	bhi.n	6000760a <z_cbvprintf_impl+0x5a2>
60007576:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
6000757a:	f000 8091 	beq.w	600076a0 <z_cbvprintf_impl+0x638>
6000757e:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
60007582:	d9a9      	bls.n	600074d8 <z_cbvprintf_impl+0x470>
60007584:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
60007588:	d003      	beq.n	60007592 <z_cbvprintf_impl+0x52a>
6000758a:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
6000758e:	2a02      	cmp	r2, #2
60007590:	d8a2      	bhi.n	600074d8 <z_cbvprintf_impl+0x470>
	} u = {
60007592:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
60007596:	2a00      	cmp	r2, #0
60007598:	f2c0 8136 	blt.w	60007808 <z_cbvprintf_impl+0x7a0>
	} else if (conv->flag_plus) {
6000759c:	9b07      	ldr	r3, [sp, #28]
6000759e:	0718      	lsls	r0, r3, #28
600075a0:	f100 8135 	bmi.w	6000780e <z_cbvprintf_impl+0x7a6>
	} else if (conv->flag_space) {
600075a4:	f3c3 1900 	ubfx	r9, r3, #4, #1
600075a8:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
600075ac:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
600075b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
600075b4:	2800      	cmp	r0, #0
600075b6:	f040 812d 	bne.w	60007814 <z_cbvprintf_impl+0x7ac>
600075ba:	ea51 0602 	orrs.w	r6, r1, r2
600075be:	bf14      	ite	ne
600075c0:	2601      	movne	r6, #1
600075c2:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
600075c4:	02d2      	lsls	r2, r2, #11
		c = 'f';
600075c6:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	fract <<= EXPONENT_BITS;
600075ca:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
		c = 'f';
600075ce:	bf08      	it	eq
600075d0:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	fract <<= EXPONENT_BITS;
600075d4:	02c9      	lsls	r1, r1, #11
	if ((expo | fract) != 0) {
600075d6:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
600075da:	ea40 0e01 	orr.w	lr, r0, r1
600075de:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
600075e2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
600075e6:	f000 819d 	beq.w	60007924 <z_cbvprintf_impl+0x8bc>
		if (is_subnormal) {
600075ea:	2e00      	cmp	r6, #0
600075ec:	f040 8149 	bne.w	60007882 <z_cbvprintf_impl+0x81a>
		fract |= BIT_63;
600075f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
600075f2:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
600075f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
600075fa:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
600075fc:	2000      	movs	r0, #0
		fract *= 5U;
600075fe:	f04f 0c05 	mov.w	ip, #5
60007602:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
60007606:	4606      	mov	r6, r0
60007608:	e155      	b.n	600078b6 <z_cbvprintf_impl+0x84e>
		switch (conv->specifier) {
6000760a:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
6000760e:	2a20      	cmp	r2, #32
60007610:	f63f af62 	bhi.w	600074d8 <z_cbvprintf_impl+0x470>
60007614:	a001      	add	r0, pc, #4	; (adr r0, 6000761c <z_cbvprintf_impl+0x5b4>)
60007616:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
6000761a:	bf00      	nop
6000761c:	600077a7 	.word	0x600077a7
60007620:	600074d9 	.word	0x600074d9
60007624:	600074d9 	.word	0x600074d9
60007628:	600074d9 	.word	0x600074d9
6000762c:	600074d9 	.word	0x600074d9
60007630:	600074d9 	.word	0x600074d9
60007634:	600074d9 	.word	0x600074d9
60007638:	600074d9 	.word	0x600074d9
6000763c:	600074d9 	.word	0x600074d9
60007640:	60007593 	.word	0x60007593
60007644:	600074d9 	.word	0x600074d9
60007648:	6000772b 	.word	0x6000772b
6000764c:	6000773f 	.word	0x6000773f
60007650:	60007593 	.word	0x60007593
60007654:	60007593 	.word	0x60007593
60007658:	60007593 	.word	0x60007593
6000765c:	600074d9 	.word	0x600074d9
60007660:	6000773f 	.word	0x6000773f
60007664:	600074d9 	.word	0x600074d9
60007668:	600074d9 	.word	0x600074d9
6000766c:	600074d9 	.word	0x600074d9
60007670:	600074d9 	.word	0x600074d9
60007674:	600077e1 	.word	0x600077e1
60007678:	600077a7 	.word	0x600077a7
6000767c:	600077ad 	.word	0x600077ad
60007680:	600074d9 	.word	0x600074d9
60007684:	600074d9 	.word	0x600074d9
60007688:	600076a7 	.word	0x600076a7
6000768c:	600074d9 	.word	0x600074d9
60007690:	600077a7 	.word	0x600077a7
60007694:	600074d9 	.word	0x600074d9
60007698:	600074d9 	.word	0x600074d9
6000769c:	600077a7 	.word	0x600077a7
			OUTC('%');
600076a0:	9903      	ldr	r1, [sp, #12]
600076a2:	4658      	mov	r0, fp
600076a4:	e4f2      	b.n	6000708c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
600076a6:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
600076a8:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
600076aa:	db3a      	blt.n	60007722 <z_cbvprintf_impl+0x6ba>
				len = strnlen(bps, precision);
600076ac:	4639      	mov	r1, r7
600076ae:	4630      	mov	r0, r6
600076b0:	f00b feca 	bl	60013448 <strnlen>
			bpe = bps + len;
600076b4:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
600076b6:	2e00      	cmp	r6, #0
600076b8:	f43f af0e 	beq.w	600074d8 <z_cbvprintf_impl+0x470>
		char sign = 0;
600076bc:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
600076c0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
600076c4:	f013 0210 	ands.w	r2, r3, #16
600076c8:	9205      	str	r2, [sp, #20]
600076ca:	f000 8254 	beq.w	60007b76 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
600076ce:	3002      	adds	r0, #2
		if (conv->pad_fp) {
600076d0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
600076d4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
600076d8:	9308      	str	r3, [sp, #32]
		nj_len += conv->pad0_value;
600076da:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
600076dc:	bf18      	it	ne
600076de:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
600076e0:	f8cd 801c 	str.w	r8, [sp, #28]
			nj_len += conv->pad0_pre_exp;
600076e4:	bf18      	it	ne
600076e6:	18c0      	addne	r0, r0, r3
		if (width > 0) {
600076e8:	9b04      	ldr	r3, [sp, #16]
600076ea:	2b00      	cmp	r3, #0
600076ec:	f340 825e 	ble.w	60007bac <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
600076f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
600076f4:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
600076f6:	0750      	lsls	r0, r2, #29
600076f8:	f3c2 0b80 	ubfx	fp, r2, #2, #1
			width -= (int)nj_len;
600076fc:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
600076fe:	f100 8255 	bmi.w	60007bac <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
60007702:	0651      	lsls	r1, r2, #25
60007704:	f140 8245 	bpl.w	60007b92 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
60007708:	f1b9 0f00 	cmp.w	r9, #0
6000770c:	d007      	beq.n	6000771e <z_cbvprintf_impl+0x6b6>
						OUTC(sign);
6000770e:	9903      	ldr	r1, [sp, #12]
60007710:	4648      	mov	r0, r9
60007712:	47d0      	blx	sl
60007714:	2800      	cmp	r0, #0
60007716:	f2c0 8239 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
6000771a:	3501      	adds	r5, #1
						sign = 0;
6000771c:	46d9      	mov	r9, fp
					pad = '0';
6000771e:	2230      	movs	r2, #48	; 0x30
60007720:	e238      	b.n	60007b94 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
60007722:	4630      	mov	r0, r6
60007724:	f7fa fdcc 	bl	600022c0 <strlen>
60007728:	e7c4      	b.n	600076b4 <z_cbvprintf_impl+0x64c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
6000772a:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
6000772c:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
60007730:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
60007734:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
60007736:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
60007738:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (sign != 0) {
6000773c:	e7c0      	b.n	600076c0 <z_cbvprintf_impl+0x658>
			if (conv->flag_plus) {
6000773e:	9b07      	ldr	r3, [sp, #28]
60007740:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
60007742:	bf54      	ite	pl
60007744:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
				sign = '+';
60007748:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			sint = value->sint;
6000774c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
60007750:	bf58      	it	pl
60007752:	ea4f 1949 	movpl.w	r9, r9, lsl #5
			if (sint < 0) {
60007756:	2b00      	cmp	r3, #0
60007758:	da06      	bge.n	60007768 <z_cbvprintf_impl+0x700>
				value->uint = (uint_value_type)-sint;
6000775a:	4252      	negs	r2, r2
				sign = '-';
6000775c:	f04f 092d 	mov.w	r9, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
60007760:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
60007764:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			bps = encode_uint(value->uint, conv, buf, bpe);
60007768:	f10d 0375 	add.w	r3, sp, #117	; 0x75
6000776c:	aa12      	add	r2, sp, #72	; 0x48
6000776e:	9300      	str	r3, [sp, #0]
60007770:	ab17      	add	r3, sp, #92	; 0x5c
60007772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
60007776:	f7ff fc2b 	bl	60006fd0 <encode_uint>
6000777a:	4606      	mov	r6, r0
			if (precision >= 0) {
6000777c:	2f00      	cmp	r7, #0
6000777e:	db0c      	blt.n	6000779a <z_cbvprintf_impl+0x732>
				size_t len = bpe - bps;
60007780:	f10d 0375 	add.w	r3, sp, #117	; 0x75
				conv->flag_zero = false;
60007784:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
60007788:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
6000778a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
6000778e:	429f      	cmp	r7, r3
				conv->flag_zero = false;
60007790:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
60007794:	d901      	bls.n	6000779a <z_cbvprintf_impl+0x732>
					conv->pad0_value = precision - (int)len;
60007796:	1afb      	subs	r3, r7, r3
60007798:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
6000779a:	2e00      	cmp	r6, #0
6000779c:	f43f ae9c 	beq.w	600074d8 <z_cbvprintf_impl+0x470>
600077a0:	f10d 0775 	add.w	r7, sp, #117	; 0x75
600077a4:	e05b      	b.n	6000785e <z_cbvprintf_impl+0x7f6>
		switch (conv->specifier) {
600077a6:	f04f 0900 	mov.w	r9, #0
600077aa:	e7dd      	b.n	60007768 <z_cbvprintf_impl+0x700>
			if (value->ptr != NULL) {
600077ac:	9810      	ldr	r0, [sp, #64]	; 0x40
600077ae:	2800      	cmp	r0, #0
600077b0:	f000 81dc 	beq.w	60007b6c <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
600077b4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
600077b8:	aa12      	add	r2, sp, #72	; 0x48
600077ba:	2100      	movs	r1, #0
		char sign = 0;
600077bc:	f04f 0900 	mov.w	r9, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
600077c0:	9300      	str	r3, [sp, #0]
600077c2:	ab17      	add	r3, sp, #92	; 0x5c
600077c4:	f7ff fc04 	bl	60006fd0 <encode_uint>
				conv->altform_0c = true;
600077c8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
				bps = encode_uint((uintptr_t)value->ptr, conv,
600077cc:	4606      	mov	r6, r0
				conv->altform_0c = true;
600077ce:	f003 03ef 	and.w	r3, r3, #239	; 0xef
600077d2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
600077d6:	f043 0310 	orr.w	r3, r3, #16
600077da:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
				goto prec_int_pad0;
600077de:	e7cd      	b.n	6000777c <z_cbvprintf_impl+0x714>
				store_count(conv, value->ptr, count);
600077e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
600077e2:	2907      	cmp	r1, #7
600077e4:	f63f ae78 	bhi.w	600074d8 <z_cbvprintf_impl+0x470>
600077e8:	e8df f001 	tbb	[pc, r1]
600077ec:	0c06040c 	.word	0x0c06040c
600077f0:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
600077f4:	701d      	strb	r5, [r3, #0]
		break;
600077f6:	e66f      	b.n	600074d8 <z_cbvprintf_impl+0x470>
		*(short *)dp = (short)count;
600077f8:	801d      	strh	r5, [r3, #0]
		break;
600077fa:	e66d      	b.n	600074d8 <z_cbvprintf_impl+0x470>
		*(intmax_t *)dp = (intmax_t)count;
600077fc:	17ea      	asrs	r2, r5, #31
600077fe:	e9c3 5200 	strd	r5, r2, [r3]
		break;
60007802:	e669      	b.n	600074d8 <z_cbvprintf_impl+0x470>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
60007804:	601d      	str	r5, [r3, #0]
		break;
60007806:	e667      	b.n	600074d8 <z_cbvprintf_impl+0x470>
		*sign = '-';
60007808:	f04f 092d 	mov.w	r9, #45	; 0x2d
6000780c:	e6ce      	b.n	600075ac <z_cbvprintf_impl+0x544>
		*sign = '+';
6000780e:	f04f 092b 	mov.w	r9, #43	; 0x2b
60007812:	e6cb      	b.n	600075ac <z_cbvprintf_impl+0x544>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
60007814:	f240 76ff 	movw	r6, #2047	; 0x7ff
60007818:	42b0      	cmp	r0, r6
6000781a:	d12f      	bne.n	6000787c <z_cbvprintf_impl+0x814>
			if (isupper((unsigned char)c)) {
6000781c:	f10b 0301 	add.w	r3, fp, #1
60007820:	489d      	ldr	r0, [pc, #628]	; (60007a98 <z_cbvprintf_impl+0xa30>)
		if (fract == 0) {
60007822:	430a      	orrs	r2, r1
			if (isupper((unsigned char)c)) {
60007824:	b2db      	uxtb	r3, r3
60007826:	5cc3      	ldrb	r3, [r0, r3]
60007828:	f003 0303 	and.w	r3, r3, #3
		if (fract == 0) {
6000782c:	d11e      	bne.n	6000786c <z_cbvprintf_impl+0x804>
			if (isupper((unsigned char)c)) {
6000782e:	2b01      	cmp	r3, #1
60007830:	bf0b      	itete	eq
60007832:	2349      	moveq	r3, #73	; 0x49
60007834:	2369      	movne	r3, #105	; 0x69
60007836:	214e      	moveq	r1, #78	; 0x4e
60007838:	216e      	movne	r1, #110	; 0x6e
6000783a:	bf0c      	ite	eq
6000783c:	2246      	moveq	r2, #70	; 0x46
6000783e:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
60007840:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		*bpe = buf;
60007844:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
		conv->flag_zero = false;
60007848:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
6000784c:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
60007850:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
60007854:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
60007858:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
				bps = encode_float(value->dbl, conv, precision,
6000785c:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
6000785e:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
60007860:	f1b9 0f00 	cmp.w	r9, #0
60007864:	f43f af2c 	beq.w	600076c0 <z_cbvprintf_impl+0x658>
			nj_len += 1U;
60007868:	3001      	adds	r0, #1
6000786a:	e729      	b.n	600076c0 <z_cbvprintf_impl+0x658>
			if (isupper((unsigned char)c)) {
6000786c:	2b01      	cmp	r3, #1
6000786e:	bf15      	itete	ne
60007870:	236e      	movne	r3, #110	; 0x6e
60007872:	234e      	moveq	r3, #78	; 0x4e
60007874:	2161      	movne	r1, #97	; 0x61
60007876:	2141      	moveq	r1, #65	; 0x41
60007878:	461a      	mov	r2, r3
6000787a:	e7e1      	b.n	60007840 <z_cbvprintf_impl+0x7d8>
	bool is_subnormal = (expo == 0) && (fract != 0);
6000787c:	2600      	movs	r6, #0
6000787e:	e6a1      	b.n	600075c4 <z_cbvprintf_impl+0x55c>
				expo--;
60007880:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
60007882:	1849      	adds	r1, r1, r1
60007884:	4152      	adcs	r2, r2
60007886:	2a00      	cmp	r2, #0
60007888:	dafa      	bge.n	60007880 <z_cbvprintf_impl+0x818>
6000788a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
6000788e:	e6af      	b.n	600075f0 <z_cbvprintf_impl+0x588>
			fract >>= 1;
60007890:	0849      	lsrs	r1, r1, #1
60007892:	4640      	mov	r0, r8
			expo++;
60007894:	f108 0801 	add.w	r8, r8, #1
			fract >>= 1;
60007898:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
6000789c:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
6000789e:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
600078a2:	d2f5      	bcs.n	60007890 <z_cbvprintf_impl+0x828>
		fract *= 5U;
600078a4:	fb0c fe02 	mul.w	lr, ip, r2
		expo++;
600078a8:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
600078ac:	fba1 120c 	umull	r1, r2, r1, ip
		decexp--;
600078b0:	3e01      	subs	r6, #1
600078b2:	2001      	movs	r0, #1
		fract *= 5U;
600078b4:	4472      	add	r2, lr
	while (expo < -2) {
600078b6:	f118 0f02 	cmn.w	r8, #2
600078ba:	dbe9      	blt.n	60007890 <z_cbvprintf_impl+0x828>
600078bc:	b108      	cbz	r0, 600078c2 <z_cbvprintf_impl+0x85a>
600078be:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
600078c2:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
600078c6:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
600078ca:	dc2e      	bgt.n	6000792a <z_cbvprintf_impl+0x8c2>
	fract >>= (4 - expo);
600078cc:	f1c8 0004 	rsb	r0, r8, #4
600078d0:	f108 081c 	add.w	r8, r8, #28
600078d4:	f1a0 0c20 	sub.w	ip, r0, #32
600078d8:	40c2      	lsrs	r2, r0
600078da:	fa21 f300 	lsr.w	r3, r1, r0
600078de:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
600078e2:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
600078e6:	fa21 fc0c 	lsr.w	ip, r1, ip
600078ea:	ea42 0208 	orr.w	r2, r2, r8
600078ee:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
600078f0:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
600078f2:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
600078f6:	d139      	bne.n	6000796c <z_cbvprintf_impl+0x904>
		if (decexp < (-4 + 1) || decexp > precision) {
600078f8:	1cf3      	adds	r3, r6, #3
600078fa:	db01      	blt.n	60007900 <z_cbvprintf_impl+0x898>
600078fc:	42b7      	cmp	r7, r6
600078fe:	da2b      	bge.n	60007958 <z_cbvprintf_impl+0x8f0>
			c += 'e' - 'g';  /* e or E */
60007900:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
60007904:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
60007906:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
6000790a:	dd7e      	ble.n	60007a0a <z_cbvprintf_impl+0x9a2>
		if (!conv->flag_hash && (precision > 0)) {
6000790c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
				precision--;
60007910:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
60007912:	0680      	lsls	r0, r0, #26
60007914:	d479      	bmi.n	60007a0a <z_cbvprintf_impl+0x9a2>
60007916:	1e3b      	subs	r3, r7, #0
60007918:	bf18      	it	ne
6000791a:	2301      	movne	r3, #1
	bool prune_zero = false;
6000791c:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
6000791e:	f107 0801 	add.w	r8, r7, #1
60007922:	e02d      	b.n	60007980 <z_cbvprintf_impl+0x918>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
60007924:	f04f 0800 	mov.w	r8, #0
60007928:	e668      	b.n	600075fc <z_cbvprintf_impl+0x594>
		fract += 2;
6000792a:	3202      	adds	r2, #2
		_ldiv5(&fract);
6000792c:	a80c      	add	r0, sp, #48	; 0x30
		expo--;
6000792e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
60007932:	f106 0601 	add.w	r6, r6, #1
		fract += 2;
60007936:	f141 0100 	adc.w	r1, r1, #0
6000793a:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
6000793e:	f010 fa2a 	bl	60017d96 <_ldiv5>
		decexp++;
60007942:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
			fract <<= 1;
60007946:	1892      	adds	r2, r2, r2
			expo--;
60007948:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
6000794c:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
6000794e:	2900      	cmp	r1, #0
60007950:	daf9      	bge.n	60007946 <z_cbvprintf_impl+0x8de>
60007952:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
60007956:	e7b4      	b.n	600078c2 <z_cbvprintf_impl+0x85a>
		if (!conv->flag_hash && (precision > 0)) {
60007958:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
			precision -= decexp;
6000795c:	1bbf      	subs	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
6000795e:	0699      	lsls	r1, r3, #26
60007960:	d451      	bmi.n	60007a06 <z_cbvprintf_impl+0x99e>
60007962:	1e3b      	subs	r3, r7, #0
60007964:	bf18      	it	ne
60007966:	2301      	movne	r3, #1
	bool prune_zero = false;
60007968:	9305      	str	r3, [sp, #20]
6000796a:	e004      	b.n	60007976 <z_cbvprintf_impl+0x90e>
6000796c:	2300      	movs	r3, #0
	if (c == 'f') {
6000796e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
60007972:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
60007974:	d1d3      	bne.n	6000791e <z_cbvprintf_impl+0x8b6>
		if (decimals < 0) {
60007976:	eb17 0806 	adds.w	r8, r7, r6
6000797a:	f04f 0b66 	mov.w	fp, #102	; 0x66
6000797e:	d446      	bmi.n	60007a0e <z_cbvprintf_impl+0x9a6>
	if (decimals > 16) {
60007980:	f1b8 0f10 	cmp.w	r8, #16
60007984:	bfa8      	it	ge
60007986:	f04f 0810 	movge.w	r8, #16
6000798a:	2010      	movs	r0, #16
	uint64_t round = BIT64(59); /* 0.5 */
6000798c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
60007990:	900b      	str	r0, [sp, #44]	; 0x2c
60007992:	2000      	movs	r0, #0
60007994:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
60007998:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
6000799c:	f1b8 0f00 	cmp.w	r8, #0
600079a0:	d138      	bne.n	60007a14 <z_cbvprintf_impl+0x9ac>
	fract += round;
600079a2:	1812      	adds	r2, r2, r0
600079a4:	9908      	ldr	r1, [sp, #32]
600079a6:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
600079aa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
600079ae:	d23f      	bcs.n	60007a30 <z_cbvprintf_impl+0x9c8>
	fract += round;
600079b0:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
600079b4:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
600079b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
600079ba:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
600079be:	f040 80b4 	bne.w	60007b2a <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
600079c2:	2e00      	cmp	r6, #0
600079c4:	dc3f      	bgt.n	60007a46 <z_cbvprintf_impl+0x9de>
			*buf++ = '0';
600079c6:	2130      	movs	r1, #48	; 0x30
600079c8:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
600079cc:	2a00      	cmp	r2, #0
600079ce:	d165      	bne.n	60007a9c <z_cbvprintf_impl+0xa34>
600079d0:	2f00      	cmp	r7, #0
600079d2:	f340 81ac 	ble.w	60007d2e <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
600079d6:	222e      	movs	r2, #46	; 0x2e
600079d8:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
600079dc:	b186      	cbz	r6, 60007a00 <z_cbvprintf_impl+0x998>
			conv->pad0_value = -decexp;
600079de:	4272      	negs	r2, r6
			conv->pad_postdp = (conv->pad0_value > 0);
600079e0:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
600079e4:	42ba      	cmp	r2, r7
600079e6:	bfa8      	it	ge
600079e8:	463a      	movge	r2, r7
600079ea:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
600079ec:	eba7 0702 	sub.w	r7, r7, r2
600079f0:	9213      	str	r2, [sp, #76]	; 0x4c
			conv->pad_postdp = (conv->pad0_value > 0);
600079f2:	bfd4      	ite	le
600079f4:	2200      	movle	r2, #0
600079f6:	2201      	movgt	r2, #1
600079f8:	f362 1145 	bfi	r1, r2, #5, #1
600079fc:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
60007a00:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
60007a04:	e037      	b.n	60007a76 <z_cbvprintf_impl+0xa0e>
	bool prune_zero = false;
60007a06:	2300      	movs	r3, #0
60007a08:	e7ae      	b.n	60007968 <z_cbvprintf_impl+0x900>
60007a0a:	2300      	movs	r3, #0
60007a0c:	e786      	b.n	6000791c <z_cbvprintf_impl+0x8b4>
			decimals = 0;
60007a0e:	f04f 0800 	mov.w	r8, #0
60007a12:	e7ba      	b.n	6000798a <z_cbvprintf_impl+0x922>
	*v >>= 1;
60007a14:	0840      	lsrs	r0, r0, #1
60007a16:	9209      	str	r2, [sp, #36]	; 0x24
60007a18:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
60007a1c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
60007a20:	085b      	lsrs	r3, r3, #1
60007a22:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
60007a26:	a80e      	add	r0, sp, #56	; 0x38
60007a28:	f010 f9b5 	bl	60017d96 <_ldiv5>
60007a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
60007a2e:	e7b3      	b.n	60007998 <z_cbvprintf_impl+0x930>
	*v >>= 1;
60007a30:	0852      	lsrs	r2, r2, #1
	_ldiv5(v);
60007a32:	a80c      	add	r0, sp, #48	; 0x30
		decexp++;
60007a34:	3601      	adds	r6, #1
	*v >>= 1;
60007a36:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
60007a3a:	0849      	lsrs	r1, r1, #1
60007a3c:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
	_ldiv5(v);
60007a40:	f010 f9a9 	bl	60017d96 <_ldiv5>
		decexp++;
60007a44:	e7b6      	b.n	600079b4 <z_cbvprintf_impl+0x94c>
	char *buf = bps;
60007a46:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
60007a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
60007a4c:	2900      	cmp	r1, #0
60007a4e:	dd09      	ble.n	60007a64 <z_cbvprintf_impl+0x9fc>
				*buf++ = _get_digit(&fract, &digit_count);
60007a50:	a90b      	add	r1, sp, #44	; 0x2c
60007a52:	a80c      	add	r0, sp, #48	; 0x30
60007a54:	9207      	str	r2, [sp, #28]
60007a56:	f010 f9b6 	bl	60017dc6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
60007a5a:	3e01      	subs	r6, #1
60007a5c:	9a07      	ldr	r2, [sp, #28]
				*buf++ = _get_digit(&fract, &digit_count);
60007a5e:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
60007a62:	d1f2      	bne.n	60007a4a <z_cbvprintf_impl+0x9e2>
			conv->pad0_value = decexp;
60007a64:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
60007a66:	b99a      	cbnz	r2, 60007a90 <z_cbvprintf_impl+0xa28>
60007a68:	2f00      	cmp	r7, #0
60007a6a:	f340 815e 	ble.w	60007d2a <z_cbvprintf_impl+0xcc2>
			*buf++ = '.';
60007a6e:	212e      	movs	r1, #46	; 0x2e
60007a70:	f808 1b01 	strb.w	r1, [r8], #1
60007a74:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
60007a76:	2f00      	cmp	r7, #0
60007a78:	dd19      	ble.n	60007aae <z_cbvprintf_impl+0xa46>
60007a7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
60007a7c:	2a00      	cmp	r2, #0
60007a7e:	dd16      	ble.n	60007aae <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
60007a80:	a90b      	add	r1, sp, #44	; 0x2c
60007a82:	a80c      	add	r0, sp, #48	; 0x30
60007a84:	f010 f99f 	bl	60017dc6 <_get_digit>
		precision--;
60007a88:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
60007a8a:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
60007a8e:	e7f2      	b.n	60007a76 <z_cbvprintf_impl+0xa0e>
			*buf++ = '.';
60007a90:	222e      	movs	r2, #46	; 0x2e
60007a92:	f808 2b01 	strb.w	r2, [r8], #1
60007a96:	e7ed      	b.n	60007a74 <z_cbvprintf_impl+0xa0c>
60007a98:	6001be34 	.word	0x6001be34
60007a9c:	222e      	movs	r2, #46	; 0x2e
60007a9e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
60007aa2:	2e00      	cmp	r6, #0
60007aa4:	d0ac      	beq.n	60007a00 <z_cbvprintf_impl+0x998>
60007aa6:	2f00      	cmp	r7, #0
60007aa8:	dc99      	bgt.n	600079de <z_cbvprintf_impl+0x976>
			*buf++ = '.';
60007aaa:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
60007aae:	9b05      	ldr	r3, [sp, #20]
60007ab0:	2b00      	cmp	r3, #0
60007ab2:	d14e      	bne.n	60007b52 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
60007ab4:	9714      	str	r7, [sp, #80]	; 0x50
60007ab6:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
60007ab8:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
60007abc:	2a45      	cmp	r2, #69	; 0x45
60007abe:	d123      	bne.n	60007b08 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
60007ac0:	2e00      	cmp	r6, #0
		*buf++ = c;
60007ac2:	f887 b000 	strb.w	fp, [r7]
			decexp = -decexp;
60007ac6:	bfba      	itte	lt
60007ac8:	4276      	neglt	r6, r6
			*buf++ = '-';
60007aca:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
60007acc:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
60007ace:	2e63      	cmp	r6, #99	; 0x63
60007ad0:	707b      	strb	r3, [r7, #1]
			*buf++ = (decexp / 100) + '0';
60007ad2:	bfc9      	itett	gt
60007ad4:	2164      	movgt	r1, #100	; 0x64
			*buf++ = '-';
60007ad6:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
60007ad8:	1cfa      	addgt	r2, r7, #3
60007ada:	fbb6 f3f1 	udivgt	r3, r6, r1
			decexp %= 100;
60007ade:	bfc8      	it	gt
60007ae0:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
60007ae4:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
60007ae8:	bfc8      	it	gt
60007aea:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
60007aee:	fbb6 f3f1 	udiv	r3, r6, r1
			*buf++ = (decexp / 100) + '0';
60007af2:	bfc8      	it	gt
60007af4:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = (decexp / 10) + '0';
60007af6:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
60007afa:	fb01 6313 	mls	r3, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
60007afe:	4617      	mov	r7, r2
		*buf++ = (decexp % 10) + '0';
60007b00:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
60007b02:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
60007b06:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
60007b08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
60007b0a:	2b00      	cmp	r3, #0
60007b0c:	dc2c      	bgt.n	60007b68 <z_cbvprintf_impl+0xb00>
60007b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
60007b10:	2b00      	cmp	r3, #0
60007b12:	bfd4      	ite	le
60007b14:	2300      	movle	r3, #0
60007b16:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
60007b18:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
60007b1c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
60007b20:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
60007b22:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
60007b26:	703b      	strb	r3, [r7, #0]
	return bps;
60007b28:	e698      	b.n	6000785c <z_cbvprintf_impl+0x7f4>
		*buf = _get_digit(&fract, &digit_count);
60007b2a:	a90b      	add	r1, sp, #44	; 0x2c
60007b2c:	a80c      	add	r0, sp, #48	; 0x30
60007b2e:	9207      	str	r2, [sp, #28]
60007b30:	f010 f949 	bl	60017dc6 <_get_digit>
		if (*buf++ != '0') {
60007b34:	9a07      	ldr	r2, [sp, #28]
60007b36:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
60007b38:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			decexp--;
60007b3c:	bf18      	it	ne
60007b3e:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
60007b42:	b912      	cbnz	r2, 60007b4a <z_cbvprintf_impl+0xae2>
60007b44:	2f00      	cmp	r7, #0
60007b46:	f340 80f2 	ble.w	60007d2e <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
60007b4a:	222e      	movs	r2, #46	; 0x2e
60007b4c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
60007b50:	e756      	b.n	60007a00 <z_cbvprintf_impl+0x998>
		while (*--buf == '0') {
60007b52:	4647      	mov	r7, r8
60007b54:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
60007b58:	f817 2c01 	ldrb.w	r2, [r7, #-1]
60007b5c:	2a30      	cmp	r2, #48	; 0x30
60007b5e:	d0f8      	beq.n	60007b52 <z_cbvprintf_impl+0xaea>
60007b60:	2a2e      	cmp	r2, #46	; 0x2e
60007b62:	bf08      	it	eq
60007b64:	4647      	moveq	r7, r8
60007b66:	e7a7      	b.n	60007ab8 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
60007b68:	2301      	movs	r3, #1
60007b6a:	e7d5      	b.n	60007b18 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
60007b6c:	4f71      	ldr	r7, [pc, #452]	; (60007d34 <z_cbvprintf_impl+0xccc>)
		char sign = 0;
60007b6e:	4681      	mov	r9, r0
		size_t nj_len = (bpe - bps);
60007b70:	2005      	movs	r0, #5
			bps = "(nil)";
60007b72:	1f7e      	subs	r6, r7, #5
60007b74:	e5a4      	b.n	600076c0 <z_cbvprintf_impl+0x658>
		} else if (conv->altform_0) {
60007b76:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
60007b78:	bf48      	it	mi
60007b7a:	3001      	addmi	r0, #1
60007b7c:	e5a8      	b.n	600076d0 <z_cbvprintf_impl+0x668>
					OUTC(pad);
60007b7e:	4610      	mov	r0, r2
60007b80:	9209      	str	r2, [sp, #36]	; 0x24
60007b82:	9903      	ldr	r1, [sp, #12]
60007b84:	47d0      	blx	sl
60007b86:	2800      	cmp	r0, #0
60007b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
60007b8a:	da05      	bge.n	60007b98 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
60007b8c:	b01f      	add	sp, #124	; 0x7c
60007b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
60007b92:	2220      	movs	r2, #32
					pad = '0';
60007b94:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
60007b98:	4659      	mov	r1, fp
60007b9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
60007b9e:	2900      	cmp	r1, #0
60007ba0:	dced      	bgt.n	60007b7e <z_cbvprintf_impl+0xb16>
60007ba2:	9b04      	ldr	r3, [sp, #16]
60007ba4:	f8cd b010 	str.w	fp, [sp, #16]
60007ba8:	442b      	add	r3, r5
60007baa:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
60007bac:	f1b9 0f00 	cmp.w	r9, #0
60007bb0:	d005      	beq.n	60007bbe <z_cbvprintf_impl+0xb56>
			OUTC(sign);
60007bb2:	9903      	ldr	r1, [sp, #12]
60007bb4:	4648      	mov	r0, r9
60007bb6:	47d0      	blx	sl
60007bb8:	2800      	cmp	r0, #0
60007bba:	dbe7      	blt.n	60007b8c <z_cbvprintf_impl+0xb24>
60007bbc:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
60007bbe:	9b08      	ldr	r3, [sp, #32]
60007bc0:	2b00      	cmp	r3, #0
60007bc2:	d077      	beq.n	60007cb4 <z_cbvprintf_impl+0xc4c>
			if (conv->specifier_a) {
60007bc4:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
60007bc8:	2b00      	cmp	r3, #0
60007bca:	db28      	blt.n	60007c1e <z_cbvprintf_impl+0xbb6>
60007bcc:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
60007bce:	f8df 9168 	ldr.w	r9, [pc, #360]	; 60007d38 <z_cbvprintf_impl+0xcd0>
60007bd2:	7818      	ldrb	r0, [r3, #0]
60007bd4:	469b      	mov	fp, r3
60007bd6:	3301      	adds	r3, #1
60007bd8:	f819 2000 	ldrb.w	r2, [r9, r0]
60007bdc:	0752      	lsls	r2, r2, #29
60007bde:	d43f      	bmi.n	60007c60 <z_cbvprintf_impl+0xbf8>
				if (!conv->pad_postdp) {
60007be0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
60007be4:	1bae      	subs	r6, r5, r6
60007be6:	0698      	lsls	r0, r3, #26
60007be8:	445e      	add	r6, fp
60007bea:	d407      	bmi.n	60007bfc <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
60007bec:	4642      	mov	r2, r8
60007bee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
60007bf2:	2a00      	cmp	r2, #0
60007bf4:	dc3b      	bgt.n	60007c6e <z_cbvprintf_impl+0xc06>
60007bf6:	9b07      	ldr	r3, [sp, #28]
60007bf8:	4433      	add	r3, r6
60007bfa:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
60007bfc:	f89b 0000 	ldrb.w	r0, [fp]
60007c00:	282e      	cmp	r0, #46	; 0x2e
60007c02:	d10a      	bne.n	60007c1a <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
60007c04:	9903      	ldr	r1, [sp, #12]
60007c06:	47d0      	blx	sl
						OUTC('0');
60007c08:	2800      	cmp	r0, #0
60007c0a:	dbbf      	blt.n	60007b8c <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
60007c0c:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
60007c10:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
60007c14:	dc31      	bgt.n	60007c7a <z_cbvprintf_impl+0xc12>
					OUTC(*cp++);
60007c16:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
60007c1a:	465d      	mov	r5, fp
60007c1c:	e038      	b.n	60007c90 <z_cbvprintf_impl+0xc28>
60007c1e:	46b1      	mov	r9, r6
				while (*cp != 'p') {
60007c20:	f899 0000 	ldrb.w	r0, [r9]
60007c24:	46c8      	mov	r8, r9
60007c26:	f109 0901 	add.w	r9, r9, #1
60007c2a:	2870      	cmp	r0, #112	; 0x70
60007c2c:	d113      	bne.n	60007c56 <z_cbvprintf_impl+0xbee>
60007c2e:	1bae      	subs	r6, r5, r6
60007c30:	4446      	add	r6, r8
			while (pad_len-- > 0) {
60007c32:	9d14      	ldr	r5, [sp, #80]	; 0x50
60007c34:	4435      	add	r5, r6
60007c36:	1bab      	subs	r3, r5, r6
60007c38:	2b00      	cmp	r3, #0
60007c3a:	dc33      	bgt.n	60007ca4 <z_cbvprintf_impl+0xc3c>
			OUTS(cp, bpe);
60007c3c:	463b      	mov	r3, r7
60007c3e:	4642      	mov	r2, r8
60007c40:	9903      	ldr	r1, [sp, #12]
60007c42:	4650      	mov	r0, sl
60007c44:	f010 f8d6 	bl	60017df4 <outs>
60007c48:	2800      	cmp	r0, #0
60007c4a:	db9f      	blt.n	60007b8c <z_cbvprintf_impl+0xb24>
60007c4c:	4430      	add	r0, r6
60007c4e:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
60007c50:	4605      	mov	r5, r0
60007c52:	4406      	add	r6, r0
60007c54:	e064      	b.n	60007d20 <z_cbvprintf_impl+0xcb8>
					OUTC(*cp++);
60007c56:	9903      	ldr	r1, [sp, #12]
60007c58:	47d0      	blx	sl
60007c5a:	2800      	cmp	r0, #0
60007c5c:	dae0      	bge.n	60007c20 <z_cbvprintf_impl+0xbb8>
60007c5e:	e795      	b.n	60007b8c <z_cbvprintf_impl+0xb24>
60007c60:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
60007c62:	9903      	ldr	r1, [sp, #12]
60007c64:	47d0      	blx	sl
60007c66:	2800      	cmp	r0, #0
60007c68:	9b05      	ldr	r3, [sp, #20]
60007c6a:	dab2      	bge.n	60007bd2 <z_cbvprintf_impl+0xb6a>
60007c6c:	e78e      	b.n	60007b8c <z_cbvprintf_impl+0xb24>
						OUTC('0');
60007c6e:	9903      	ldr	r1, [sp, #12]
60007c70:	2030      	movs	r0, #48	; 0x30
60007c72:	47d0      	blx	sl
60007c74:	2800      	cmp	r0, #0
60007c76:	dab9      	bge.n	60007bec <z_cbvprintf_impl+0xb84>
60007c78:	e788      	b.n	60007b8c <z_cbvprintf_impl+0xb24>
						OUTC('0');
60007c7a:	9903      	ldr	r1, [sp, #12]
60007c7c:	2030      	movs	r0, #48	; 0x30
60007c7e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
60007c82:	47d0      	blx	sl
60007c84:	e7c0      	b.n	60007c08 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
60007c86:	9903      	ldr	r1, [sp, #12]
60007c88:	47d0      	blx	sl
60007c8a:	2800      	cmp	r0, #0
60007c8c:	f6ff af7e 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
60007c90:	7828      	ldrb	r0, [r5, #0]
60007c92:	46a8      	mov	r8, r5
60007c94:	3501      	adds	r5, #1
60007c96:	f819 3000 	ldrb.w	r3, [r9, r0]
60007c9a:	0759      	lsls	r1, r3, #29
60007c9c:	d4f3      	bmi.n	60007c86 <z_cbvprintf_impl+0xc1e>
60007c9e:	eba6 060b 	sub.w	r6, r6, fp
60007ca2:	e7c5      	b.n	60007c30 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
60007ca4:	9903      	ldr	r1, [sp, #12]
60007ca6:	2030      	movs	r0, #48	; 0x30
60007ca8:	47d0      	blx	sl
60007caa:	2800      	cmp	r0, #0
60007cac:	f6ff af6e 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
60007cb0:	3601      	adds	r6, #1
60007cb2:	e7c0      	b.n	60007c36 <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
60007cb4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
60007cb8:	06da      	lsls	r2, r3, #27
60007cba:	d401      	bmi.n	60007cc0 <z_cbvprintf_impl+0xc58>
60007cbc:	071b      	lsls	r3, r3, #28
60007cbe:	d506      	bpl.n	60007cce <z_cbvprintf_impl+0xc66>
				OUTC('0');
60007cc0:	9903      	ldr	r1, [sp, #12]
60007cc2:	2030      	movs	r0, #48	; 0x30
60007cc4:	47d0      	blx	sl
60007cc6:	2800      	cmp	r0, #0
60007cc8:	f6ff af60 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
60007ccc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
60007cce:	9b05      	ldr	r3, [sp, #20]
60007cd0:	b13b      	cbz	r3, 60007ce2 <z_cbvprintf_impl+0xc7a>
				OUTC(conv->specifier);
60007cd2:	9903      	ldr	r1, [sp, #12]
60007cd4:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
60007cd8:	47d0      	blx	sl
60007cda:	2800      	cmp	r0, #0
60007cdc:	f6ff af56 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
60007ce0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
60007ce2:	44a8      	add	r8, r5
60007ce4:	e006      	b.n	60007cf4 <z_cbvprintf_impl+0xc8c>
				OUTC('0');
60007ce6:	9903      	ldr	r1, [sp, #12]
60007ce8:	2030      	movs	r0, #48	; 0x30
60007cea:	47d0      	blx	sl
60007cec:	2800      	cmp	r0, #0
60007cee:	f6ff af4d 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
60007cf2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
60007cf4:	eba8 0305 	sub.w	r3, r8, r5
60007cf8:	2b00      	cmp	r3, #0
60007cfa:	dcf4      	bgt.n	60007ce6 <z_cbvprintf_impl+0xc7e>
			OUTS(bps, bpe);
60007cfc:	463b      	mov	r3, r7
60007cfe:	4632      	mov	r2, r6
60007d00:	9903      	ldr	r1, [sp, #12]
60007d02:	4650      	mov	r0, sl
60007d04:	f010 f876 	bl	60017df4 <outs>
60007d08:	2800      	cmp	r0, #0
60007d0a:	f6ff af3f 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
60007d0e:	4428      	add	r0, r5
60007d10:	e79d      	b.n	60007c4e <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
60007d12:	9903      	ldr	r1, [sp, #12]
60007d14:	2020      	movs	r0, #32
60007d16:	47d0      	blx	sl
60007d18:	2800      	cmp	r0, #0
60007d1a:	f6ff af37 	blt.w	60007b8c <z_cbvprintf_impl+0xb24>
60007d1e:	3501      	adds	r5, #1
		while (width > 0) {
60007d20:	1b73      	subs	r3, r6, r5
60007d22:	2b00      	cmp	r3, #0
60007d24:	dcf5      	bgt.n	60007d12 <z_cbvprintf_impl+0xcaa>
60007d26:	f7ff bbd7 	b.w	600074d8 <z_cbvprintf_impl+0x470>
			decexp = 0;
60007d2a:	4616      	mov	r6, r2
60007d2c:	e6bf      	b.n	60007aae <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
60007d2e:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
60007d32:	e6bc      	b.n	60007aae <z_cbvprintf_impl+0xa46>
60007d34:	6001c700 	.word	0x6001c700
60007d38:	6001be35 	.word	0x6001be35

60007d3c <ring_buf_put>:

	return 0;
}

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
60007d3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
60007d40:	4680      	mov	r8, r0
60007d42:	460e      	mov	r6, r1
60007d44:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
60007d46:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
60007d48:	462a      	mov	r2, r5
60007d4a:	a901      	add	r1, sp, #4
60007d4c:	4640      	mov	r0, r8
60007d4e:	f010 f868 	bl	60017e22 <ring_buf_put_claim>
60007d52:	4604      	mov	r4, r0
60007d54:	4602      	mov	r2, r0
60007d56:	4631      	mov	r1, r6
60007d58:	9801      	ldr	r0, [sp, #4]
		memcpy(dst, data, partial_size);
		total_size += partial_size;
60007d5a:	4427      	add	r7, r4
60007d5c:	f7fb fcec 	bl	60003738 <memcpy>
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
60007d60:	1b2d      	subs	r5, r5, r4
		data += partial_size;
60007d62:	4426      	add	r6, r4
	} while (size && partial_size);
60007d64:	d001      	beq.n	60007d6a <ring_buf_put+0x2e>
60007d66:	2c00      	cmp	r4, #0
60007d68:	d1ee      	bne.n	60007d48 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
60007d6a:	4639      	mov	r1, r7
60007d6c:	4640      	mov	r0, r8
60007d6e:	f010 f878 	bl	60017e62 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
60007d72:	b148      	cbz	r0, 60007d88 <ring_buf_put+0x4c>
60007d74:	4906      	ldr	r1, [pc, #24]	; (60007d90 <ring_buf_put+0x54>)
60007d76:	2349      	movs	r3, #73	; 0x49
60007d78:	4806      	ldr	r0, [pc, #24]	; (60007d94 <ring_buf_put+0x58>)
60007d7a:	4a07      	ldr	r2, [pc, #28]	; (60007d98 <ring_buf_put+0x5c>)
60007d7c:	f010 f8c1 	bl	60017f02 <assert_print>
60007d80:	2149      	movs	r1, #73	; 0x49
60007d82:	4805      	ldr	r0, [pc, #20]	; (60007d98 <ring_buf_put+0x5c>)
60007d84:	f010 f8b6 	bl	60017ef4 <assert_post_action>
	ARG_UNUSED(err);

	return total_size;
}
60007d88:	4638      	mov	r0, r7
60007d8a:	b002      	add	sp, #8
60007d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60007d90:	6001c729 	.word	0x6001c729
60007d94:	6001c3d7 	.word	0x6001c3d7
60007d98:	6001c701 	.word	0x6001c701

60007d9c <ring_buf_get>:

	return 0;
}

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
60007d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
60007da0:	4680      	mov	r8, r0
60007da2:	460d      	mov	r5, r1
60007da4:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
60007da6:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
60007da8:	4632      	mov	r2, r6
60007daa:	a901      	add	r1, sp, #4
60007dac:	4640      	mov	r0, r8
60007dae:	f010 f86d 	bl	60017e8c <ring_buf_get_claim>
60007db2:	4604      	mov	r4, r0
		if (data) {
60007db4:	b12d      	cbz	r5, 60007dc2 <ring_buf_get+0x26>
60007db6:	4602      	mov	r2, r0
60007db8:	4628      	mov	r0, r5
			memcpy(data, src, partial_size);
			data += partial_size;
60007dba:	4425      	add	r5, r4
60007dbc:	9901      	ldr	r1, [sp, #4]
60007dbe:	f7fb fcbb 	bl	60003738 <memcpy>
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
60007dc2:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
60007dc4:	4427      	add	r7, r4
	} while (size && partial_size);
60007dc6:	d001      	beq.n	60007dcc <ring_buf_get+0x30>
60007dc8:	2c00      	cmp	r4, #0
60007dca:	d1ed      	bne.n	60007da8 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
60007dcc:	4639      	mov	r1, r7
60007dce:	4640      	mov	r0, r8
60007dd0:	f010 f87b 	bl	60017eca <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
60007dd4:	b148      	cbz	r0, 60007dea <ring_buf_get+0x4e>
60007dd6:	4907      	ldr	r1, [pc, #28]	; (60007df4 <ring_buf_get+0x58>)
60007dd8:	238e      	movs	r3, #142	; 0x8e
60007dda:	4807      	ldr	r0, [pc, #28]	; (60007df8 <ring_buf_get+0x5c>)
60007ddc:	4a07      	ldr	r2, [pc, #28]	; (60007dfc <ring_buf_get+0x60>)
60007dde:	f010 f890 	bl	60017f02 <assert_print>
60007de2:	218e      	movs	r1, #142	; 0x8e
60007de4:	4805      	ldr	r0, [pc, #20]	; (60007dfc <ring_buf_get+0x60>)
60007de6:	f010 f885 	bl	60017ef4 <assert_post_action>
	ARG_UNUSED(err);

	return total_size;
}
60007dea:	4638      	mov	r0, r7
60007dec:	b002      	add	sp, #8
60007dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60007df2:	bf00      	nop
60007df4:	6001c729 	.word	0x6001c729
60007df8:	6001c3d7 	.word	0x6001c3d7
60007dfc:	6001c701 	.word	0x6001c701

60007e00 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
60007e00:	b538      	push	{r3, r4, r5, lr}
60007e02:	460d      	mov	r5, r1
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
60007e04:	2220      	movs	r2, #32
60007e06:	2100      	movs	r1, #0
60007e08:	4604      	mov	r4, r0
60007e0a:	f00b fa99 	bl	60013340 <memset>
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
60007e0e:	68eb      	ldr	r3, [r5, #12]
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
60007e10:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
60007e12:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
60007e14:	68ab      	ldr	r3, [r5, #8]
60007e16:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
60007e18:	682b      	ldr	r3, [r5, #0]
60007e1a:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
60007e1c:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
60007e1e:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
60007e20:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
60007e22:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
60007e24:	b123      	cbz	r3, 60007e30 <mpsc_pbuf_init+0x30>
60007e26:	1e59      	subs	r1, r3, #1
60007e28:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
60007e2a:	bf08      	it	eq
60007e2c:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
60007e30:	6122      	str	r2, [r4, #16]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
60007e32:	2201      	movs	r2, #1
60007e34:	2100      	movs	r1, #0
60007e36:	f104 002c 	add.w	r0, r4, #44	; 0x2c
60007e3a:	f011 fd60 	bl	600198fe <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
60007e3e:	b148      	cbz	r0, 60007e54 <mpsc_pbuf_init+0x54>
60007e40:	4905      	ldr	r1, [pc, #20]	; (60007e58 <mpsc_pbuf_init+0x58>)
60007e42:	232e      	movs	r3, #46	; 0x2e
60007e44:	4805      	ldr	r0, [pc, #20]	; (60007e5c <mpsc_pbuf_init+0x5c>)
60007e46:	4a06      	ldr	r2, [pc, #24]	; (60007e60 <mpsc_pbuf_init+0x60>)
60007e48:	f010 f85b 	bl	60017f02 <assert_print>
60007e4c:	212e      	movs	r1, #46	; 0x2e
60007e4e:	4804      	ldr	r0, [pc, #16]	; (60007e60 <mpsc_pbuf_init+0x60>)
60007e50:	f010 f850 	bl	60017ef4 <assert_post_action>
	ARG_UNUSED(err);
}
60007e54:	bd38      	pop	{r3, r4, r5, pc}
60007e56:	bf00      	nop
60007e58:	6001c729 	.word	0x6001c729
60007e5c:	6001c3d7 	.word	0x6001c3d7
60007e60:	6001c732 	.word	0x6001c732

60007e64 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
60007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60007e68:	b089      	sub	sp, #36	; 0x24
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
60007e6a:	2700      	movs	r7, #0
{
60007e6c:	4604      	mov	r4, r0
60007e6e:	4688      	mov	r8, r1

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
60007e70:	46ba      	mov	sl, r7
	union mpsc_pbuf_generic *dropped_item = NULL;
60007e72:	9705      	str	r7, [sp, #20]
	uint32_t tmp_wr_idx_shift = 0;
60007e74:	9707      	str	r7, [sp, #28]
{
60007e76:	e9cd 2301 	strd	r2, r3, [sp, #4]
	if (wlen > (buffer->size)) {
60007e7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
60007e7c:	428b      	cmp	r3, r1
60007e7e:	d353      	bcc.n	60007f28 <mpsc_pbuf_alloc+0xc4>

	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
60007e80:	f100 0614 	add.w	r6, r0, #20
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
60007e84:	f04f 0310 	mov.w	r3, #16
60007e88:	f3ef 8b11 	mrs	fp, BASEPRI
60007e8c:	f383 8812 	msr	BASEPRI_MAX, r3
60007e90:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60007e94:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
60007e96:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60007e98:	f007 ff98 	bl	6000fdcc <z_spin_lock_valid>
60007e9c:	b958      	cbnz	r0, 60007eb6 <mpsc_pbuf_alloc+0x52>
60007e9e:	2394      	movs	r3, #148	; 0x94
60007ea0:	4a4a      	ldr	r2, [pc, #296]	; (60007fcc <mpsc_pbuf_alloc+0x168>)
60007ea2:	494b      	ldr	r1, [pc, #300]	; (60007fd0 <mpsc_pbuf_alloc+0x16c>)
60007ea4:	484b      	ldr	r0, [pc, #300]	; (60007fd4 <mpsc_pbuf_alloc+0x170>)
60007ea6:	f010 f82c 	bl	60017f02 <assert_print>
60007eaa:	4631      	mov	r1, r6
60007eac:	484a      	ldr	r0, [pc, #296]	; (60007fd8 <mpsc_pbuf_alloc+0x174>)
60007eae:	f010 f828 	bl	60017f02 <assert_print>
60007eb2:	2194      	movs	r1, #148	; 0x94
60007eb4:	e05e      	b.n	60007f74 <mpsc_pbuf_alloc+0x110>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
60007eb6:	4630      	mov	r0, r6
60007eb8:	f007 ffa4 	bl	6000fe04 <z_spin_lock_set_owner>
		if (tmp_wr_idx_shift) {
60007ebc:	9a07      	ldr	r2, [sp, #28]
60007ebe:	b12a      	cbz	r2, 60007ecc <mpsc_pbuf_alloc+0x68>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
60007ec0:	4639      	mov	r1, r7
60007ec2:	4620      	mov	r0, r4
60007ec4:	f010 f8fc 	bl	600180c0 <post_drop_action>
			tmp_wr_idx_shift = 0;
60007ec8:	2300      	movs	r3, #0
60007eca:	9307      	str	r3, [sp, #28]
		}

		wrap = free_space(buffer, &free_wlen);
60007ecc:	a906      	add	r1, sp, #24
60007ece:	4620      	mov	r0, r4
60007ed0:	f010 f824 	bl	60017f1c <free_space>

		if (free_wlen >= wlen) {
60007ed4:	9906      	ldr	r1, [sp, #24]
		wrap = free_space(buffer, &free_wlen);
60007ed6:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
60007ed8:	4541      	cmp	r1, r8
60007eda:	d32e      	bcc.n	60007f3a <mpsc_pbuf_alloc+0xd6>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
60007edc:	6822      	ldr	r2, [r4, #0]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60007ede:	4620      	mov	r0, r4
			item =
60007ee0:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
60007ee2:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
60007ee6:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
60007eea:	f021 0103 	bic.w	r1, r1, #3
60007eee:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60007ef2:	4642      	mov	r2, r8
60007ef4:	6821      	ldr	r1, [r4, #0]
60007ef6:	f010 f835 	bl	60017f64 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60007efa:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60007efc:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60007efe:	4298      	cmp	r0, r3
60007f00:	d016      	beq.n	60007f30 <mpsc_pbuf_alloc+0xcc>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
60007f02:	2500      	movs	r5, #0
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60007f04:	4630      	mov	r0, r6
60007f06:	f007 ff6f 	bl	6000fde8 <z_spin_unlock_valid>
60007f0a:	b340      	cbz	r0, 60007f5e <mpsc_pbuf_alloc+0xfa>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
60007f0c:	f389 8811 	msr	BASEPRI, r9
60007f10:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
60007f14:	9905      	ldr	r1, [sp, #20]
60007f16:	b129      	cbz	r1, 60007f24 <mpsc_pbuf_alloc+0xc0>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
60007f18:	69a2      	ldr	r2, [r4, #24]
60007f1a:	b10a      	cbz	r2, 60007f20 <mpsc_pbuf_alloc+0xbc>
				buffer->notify_drop(buffer, dropped_item);
60007f1c:	4620      	mov	r0, r4
60007f1e:	4790      	blx	r2
			}
			dropped_item = NULL;
60007f20:	2300      	movs	r3, #0
60007f22:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
60007f24:	2d00      	cmp	r5, #0
60007f26:	d1ad      	bne.n	60007e84 <mpsc_pbuf_alloc+0x20>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
60007f28:	4650      	mov	r0, sl
60007f2a:	b009      	add	sp, #36	; 0x24
60007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
60007f30:	6923      	ldr	r3, [r4, #16]
60007f32:	f043 0308 	orr.w	r3, r3, #8
60007f36:	6123      	str	r3, [r4, #16]
60007f38:	e7e3      	b.n	60007f02 <mpsc_pbuf_alloc+0x9e>
		} else if (wrap) {
60007f3a:	b118      	cbz	r0, 60007f44 <mpsc_pbuf_alloc+0xe0>
			add_skip_item(buffer, free_wlen);
60007f3c:	4620      	mov	r0, r4
60007f3e:	f010 f82b 	bl	60017f98 <add_skip_item>
			cont = true;
60007f42:	e7df      	b.n	60007f04 <mpsc_pbuf_alloc+0xa0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
60007f44:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
60007f48:	4313      	orrs	r3, r2
60007f4a:	d036      	beq.n	60007fba <mpsc_pbuf_alloc+0x156>
60007f4c:	9103      	str	r1, [sp, #12]
60007f4e:	f011 fcba 	bl	600198c6 <k_is_in_isr>
60007f52:	9903      	ldr	r1, [sp, #12]
60007f54:	bb88      	cbnz	r0, 60007fba <mpsc_pbuf_alloc+0x156>
60007f56:	4630      	mov	r0, r6
60007f58:	f007 ff46 	bl	6000fde8 <z_spin_unlock_valid>
60007f5c:	b968      	cbnz	r0, 60007f7a <mpsc_pbuf_alloc+0x116>
60007f5e:	23c2      	movs	r3, #194	; 0xc2
60007f60:	4a1a      	ldr	r2, [pc, #104]	; (60007fcc <mpsc_pbuf_alloc+0x168>)
60007f62:	491e      	ldr	r1, [pc, #120]	; (60007fdc <mpsc_pbuf_alloc+0x178>)
60007f64:	481b      	ldr	r0, [pc, #108]	; (60007fd4 <mpsc_pbuf_alloc+0x170>)
60007f66:	f00f ffcc 	bl	60017f02 <assert_print>
60007f6a:	4631      	mov	r1, r6
60007f6c:	481c      	ldr	r0, [pc, #112]	; (60007fe0 <mpsc_pbuf_alloc+0x17c>)
60007f6e:	f00f ffc8 	bl	60017f02 <assert_print>
60007f72:	21c2      	movs	r1, #194	; 0xc2
60007f74:	4815      	ldr	r0, [pc, #84]	; (60007fcc <mpsc_pbuf_alloc+0x168>)
60007f76:	f00f ffbd 	bl	60017ef4 <assert_post_action>
60007f7a:	f38b 8811 	msr	BASEPRI, fp
60007f7e:	f3bf 8f6f 	isb	sy
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
60007f82:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
60007f86:	f104 002c 	add.w	r0, r4, #44	; 0x2c
60007f8a:	f008 fa4d 	bl	60010428 <z_impl_k_sem_take>
60007f8e:	4605      	mov	r5, r0
	__asm__ volatile(
60007f90:	f04f 0310 	mov.w	r3, #16
60007f94:	f3ef 8911 	mrs	r9, BASEPRI
60007f98:	f383 8812 	msr	BASEPRI_MAX, r3
60007f9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60007fa0:	4630      	mov	r0, r6
60007fa2:	f007 ff13 	bl	6000fdcc <z_spin_lock_valid>
60007fa6:	2800      	cmp	r0, #0
60007fa8:	f43f af79 	beq.w	60007e9e <mpsc_pbuf_alloc+0x3a>
			cont = (err == 0) ? true : false;
60007fac:	fab5 f585 	clz	r5, r5
	z_spin_lock_set_owner(l);
60007fb0:	4630      	mov	r0, r6
60007fb2:	f007 ff27 	bl	6000fe04 <z_spin_lock_set_owner>
60007fb6:	096d      	lsrs	r5, r5, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
60007fb8:	e7a4      	b.n	60007f04 <mpsc_pbuf_alloc+0xa0>
			cont = drop_item_locked(buffer, free_wlen,
60007fba:	ab07      	add	r3, sp, #28
60007fbc:	aa05      	add	r2, sp, #20
60007fbe:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
60007fc0:	6827      	ldr	r7, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
60007fc2:	f010 f806 	bl	60017fd2 <drop_item_locked>
60007fc6:	4605      	mov	r5, r0
60007fc8:	e79c      	b.n	60007f04 <mpsc_pbuf_alloc+0xa0>
60007fca:	bf00      	nop
60007fcc:	6001c758 	.word	0x6001c758
60007fd0:	6001c785 	.word	0x6001c785
60007fd4:	6001c3d7 	.word	0x6001c3d7
60007fd8:	6001c79a 	.word	0x6001c79a
60007fdc:	6001c7b2 	.word	0x6001c7b2
60007fe0:	6001c7c9 	.word	0x6001c7c9

60007fe4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
60007fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60007fe8:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
60007fea:	69c3      	ldr	r3, [r0, #28]
60007fec:	4608      	mov	r0, r1
{
60007fee:	460e      	mov	r6, r1

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
60007ff0:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
60007ff4:	4798      	blx	r3
60007ff6:	4607      	mov	r7, r0
60007ff8:	f04f 0310 	mov.w	r3, #16
60007ffc:	f3ef 8811 	mrs	r8, BASEPRI
60008000:	f383 8812 	msr	BASEPRI_MAX, r3
60008004:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60008008:	4628      	mov	r0, r5
6000800a:	f007 fedf 	bl	6000fdcc <z_spin_lock_valid>
6000800e:	b968      	cbnz	r0, 6000802c <mpsc_pbuf_commit+0x48>
60008010:	2394      	movs	r3, #148	; 0x94
60008012:	4a19      	ldr	r2, [pc, #100]	; (60008078 <mpsc_pbuf_commit+0x94>)
60008014:	4919      	ldr	r1, [pc, #100]	; (6000807c <mpsc_pbuf_commit+0x98>)
60008016:	481a      	ldr	r0, [pc, #104]	; (60008080 <mpsc_pbuf_commit+0x9c>)
60008018:	f00f ff73 	bl	60017f02 <assert_print>
6000801c:	4629      	mov	r1, r5
6000801e:	4819      	ldr	r0, [pc, #100]	; (60008084 <mpsc_pbuf_commit+0xa0>)
60008020:	f00f ff6f 	bl	60017f02 <assert_print>
60008024:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60008026:	4814      	ldr	r0, [pc, #80]	; (60008078 <mpsc_pbuf_commit+0x94>)
60008028:	f00f ff64 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
6000802c:	4628      	mov	r0, r5
6000802e:	f007 fee9 	bl	6000fe04 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
60008032:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
60008034:	463a      	mov	r2, r7
60008036:	4620      	mov	r0, r4
	item->hdr.valid = 1;
60008038:	f043 0301 	orr.w	r3, r3, #1
6000803c:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
6000803e:	6861      	ldr	r1, [r4, #4]
60008040:	f00f ff90 	bl	60017f64 <idx_inc>
60008044:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
60008046:	4620      	mov	r0, r4
60008048:	f010 f855 	bl	600180f6 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000804c:	4628      	mov	r0, r5
6000804e:	f007 fecb 	bl	6000fde8 <z_spin_unlock_valid>
60008052:	b958      	cbnz	r0, 6000806c <mpsc_pbuf_commit+0x88>
60008054:	23c2      	movs	r3, #194	; 0xc2
60008056:	4a08      	ldr	r2, [pc, #32]	; (60008078 <mpsc_pbuf_commit+0x94>)
60008058:	490b      	ldr	r1, [pc, #44]	; (60008088 <mpsc_pbuf_commit+0xa4>)
6000805a:	4809      	ldr	r0, [pc, #36]	; (60008080 <mpsc_pbuf_commit+0x9c>)
6000805c:	f00f ff51 	bl	60017f02 <assert_print>
60008060:	4629      	mov	r1, r5
60008062:	480a      	ldr	r0, [pc, #40]	; (6000808c <mpsc_pbuf_commit+0xa8>)
60008064:	f00f ff4d 	bl	60017f02 <assert_print>
60008068:	21c2      	movs	r1, #194	; 0xc2
6000806a:	e7dc      	b.n	60008026 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
6000806c:	f388 8811 	msr	BASEPRI, r8
60008070:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
60008074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60008078:	6001c758 	.word	0x6001c758
6000807c:	6001c785 	.word	0x6001c785
60008080:	6001c3d7 	.word	0x6001c3d7
60008084:	6001c79a 	.word	0x6001c79a
60008088:	6001c7b2 	.word	0x6001c7b2
6000808c:	6001c7c9 	.word	0x6001c7c9

60008090 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
60008090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
60008094:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
60008096:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
6000809a:	f04f 0310 	mov.w	r3, #16
6000809e:	f3ef 8811 	mrs	r8, BASEPRI
600080a2:	f383 8812 	msr	BASEPRI_MAX, r3
600080a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600080aa:	4638      	mov	r0, r7
600080ac:	f007 fe8e 	bl	6000fdcc <z_spin_lock_valid>
600080b0:	4605      	mov	r5, r0
600080b2:	b968      	cbnz	r0, 600080d0 <mpsc_pbuf_claim+0x40>
600080b4:	2394      	movs	r3, #148	; 0x94
600080b6:	4a34      	ldr	r2, [pc, #208]	; (60008188 <mpsc_pbuf_claim+0xf8>)
600080b8:	4934      	ldr	r1, [pc, #208]	; (6000818c <mpsc_pbuf_claim+0xfc>)
600080ba:	4835      	ldr	r0, [pc, #212]	; (60008190 <mpsc_pbuf_claim+0x100>)
600080bc:	f00f ff21 	bl	60017f02 <assert_print>
600080c0:	4639      	mov	r1, r7
600080c2:	4834      	ldr	r0, [pc, #208]	; (60008194 <mpsc_pbuf_claim+0x104>)
600080c4:	f00f ff1d 	bl	60017f02 <assert_print>
600080c8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600080ca:	482f      	ldr	r0, [pc, #188]	; (60008188 <mpsc_pbuf_claim+0xf8>)
600080cc:	f00f ff12 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
600080d0:	4638      	mov	r0, r7
600080d2:	f007 fe97 	bl	6000fe04 <z_spin_lock_set_owner>
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
600080d6:	6923      	ldr	r3, [r4, #16]
600080d8:	68a2      	ldr	r2, [r4, #8]
600080da:	f013 0f08 	tst.w	r3, #8
600080de:	d102      	bne.n	600080e6 <mpsc_pbuf_claim+0x56>
600080e0:	6863      	ldr	r3, [r4, #4]
600080e2:	429a      	cmp	r2, r3
600080e4:	d900      	bls.n	600080e8 <mpsc_pbuf_claim+0x58>
		*res = buffer->size - buffer->tmp_rd_idx;
600080e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
600080e8:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
600080ea:	2b00      	cmp	r3, #0
600080ec:	d03d      	beq.n	6000816a <mpsc_pbuf_claim+0xda>
		item = (union mpsc_pbuf_generic *)
600080ee:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
600080f0:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
600080f4:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
600080f8:	f013 0003 	ands.w	r0, r3, #3
600080fc:	d038      	beq.n	60008170 <mpsc_pbuf_claim+0xe0>
	if (item->hdr.busy && !item->hdr.valid) {
600080fe:	2802      	cmp	r0, #2
60008100:	d103      	bne.n	6000810a <mpsc_pbuf_claim+0x7a>
		return item->skip.len;
60008102:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
60008106:	08b6      	lsrs	r6, r6, #2
60008108:	d105      	bne.n	60008116 <mpsc_pbuf_claim+0x86>
6000810a:	07d8      	lsls	r0, r3, #31
6000810c:	d41d      	bmi.n	6000814a <mpsc_pbuf_claim+0xba>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
6000810e:	69e3      	ldr	r3, [r4, #28]
60008110:	4648      	mov	r0, r9
60008112:	4798      	blx	r3
60008114:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
60008116:	68a1      	ldr	r1, [r4, #8]
60008118:	4632      	mov	r2, r6
6000811a:	4620      	mov	r0, r4
6000811c:	f00f ff22 	bl	60017f64 <idx_inc>
				rd_idx_inc(buffer, inc);
60008120:	4631      	mov	r1, r6
				buffer->tmp_rd_idx =
60008122:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
60008124:	4620      	mov	r0, r4
60008126:	f00f ff2b 	bl	60017f80 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000812a:	4638      	mov	r0, r7
6000812c:	f007 fe5c 	bl	6000fde8 <z_spin_unlock_valid>
60008130:	bb00      	cbnz	r0, 60008174 <mpsc_pbuf_claim+0xe4>
60008132:	23c2      	movs	r3, #194	; 0xc2
60008134:	4a14      	ldr	r2, [pc, #80]	; (60008188 <mpsc_pbuf_claim+0xf8>)
60008136:	4918      	ldr	r1, [pc, #96]	; (60008198 <mpsc_pbuf_claim+0x108>)
60008138:	4815      	ldr	r0, [pc, #84]	; (60008190 <mpsc_pbuf_claim+0x100>)
6000813a:	f00f fee2 	bl	60017f02 <assert_print>
6000813e:	4639      	mov	r1, r7
60008140:	4816      	ldr	r0, [pc, #88]	; (6000819c <mpsc_pbuf_claim+0x10c>)
60008142:	f00f fede 	bl	60017f02 <assert_print>
60008146:	21c2      	movs	r1, #194	; 0xc2
60008148:	e7bf      	b.n	600080ca <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
6000814a:	f043 0302 	orr.w	r3, r3, #2
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
6000814e:	4648      	mov	r0, r9
				item->hdr.busy = 1;
60008150:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
60008154:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
60008156:	69e3      	ldr	r3, [r4, #28]
60008158:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
6000815a:	4629      	mov	r1, r5
						buffer->get_wlen(item));
6000815c:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
6000815e:	4620      	mov	r0, r4
60008160:	f00f ff00 	bl	60017f64 <idx_inc>
		cont = false;
60008164:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
60008166:	60a0      	str	r0, [r4, #8]
60008168:	e7df      	b.n	6000812a <mpsc_pbuf_claim+0x9a>
		cont = false;
6000816a:	461d      	mov	r5, r3
			item = NULL;
6000816c:	46a9      	mov	r9, r5
6000816e:	e7dc      	b.n	6000812a <mpsc_pbuf_claim+0x9a>
		cont = false;
60008170:	4605      	mov	r5, r0
60008172:	e7fb      	b.n	6000816c <mpsc_pbuf_claim+0xdc>
	__asm__ volatile(
60008174:	f388 8811 	msr	BASEPRI, r8
60008178:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
6000817c:	2d00      	cmp	r5, #0
6000817e:	d18c      	bne.n	6000809a <mpsc_pbuf_claim+0xa>

	return item;
}
60008180:	4648      	mov	r0, r9
60008182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
60008186:	bf00      	nop
60008188:	6001c758 	.word	0x6001c758
6000818c:	6001c785 	.word	0x6001c785
60008190:	6001c3d7 	.word	0x6001c3d7
60008194:	6001c79a 	.word	0x6001c79a
60008198:	6001c7b2 	.word	0x6001c7b2
6000819c:	6001c7c9 	.word	0x6001c7c9

600081a0 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
600081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
600081a4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
600081a6:	69c3      	ldr	r3, [r0, #28]
600081a8:	4608      	mov	r0, r1
{
600081aa:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
600081ac:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
600081b0:	4798      	blx	r3
600081b2:	4607      	mov	r7, r0
	__asm__ volatile(
600081b4:	f04f 0310 	mov.w	r3, #16
600081b8:	f3ef 8811 	mrs	r8, BASEPRI
600081bc:	f383 8812 	msr	BASEPRI_MAX, r3
600081c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600081c4:	4630      	mov	r0, r6
600081c6:	f007 fe01 	bl	6000fdcc <z_spin_lock_valid>
600081ca:	b968      	cbnz	r0, 600081e8 <mpsc_pbuf_free+0x48>
600081cc:	2394      	movs	r3, #148	; 0x94
600081ce:	4a26      	ldr	r2, [pc, #152]	; (60008268 <mpsc_pbuf_free+0xc8>)
600081d0:	4926      	ldr	r1, [pc, #152]	; (6000826c <mpsc_pbuf_free+0xcc>)
600081d2:	4827      	ldr	r0, [pc, #156]	; (60008270 <mpsc_pbuf_free+0xd0>)
600081d4:	f00f fe95 	bl	60017f02 <assert_print>
600081d8:	4631      	mov	r1, r6
600081da:	4826      	ldr	r0, [pc, #152]	; (60008274 <mpsc_pbuf_free+0xd4>)
600081dc:	f00f fe91 	bl	60017f02 <assert_print>
600081e0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600081e2:	4821      	ldr	r0, [pc, #132]	; (60008268 <mpsc_pbuf_free+0xc8>)
600081e4:	f00f fe86 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
600081e8:	4630      	mov	r0, r6
600081ea:	f007 fe0b 	bl	6000fe04 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
600081ee:	782b      	ldrb	r3, [r5, #0]
600081f0:	f36f 0300 	bfc	r3, #0, #1
600081f4:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
600081f6:	6923      	ldr	r3, [r4, #16]
600081f8:	079b      	lsls	r3, r3, #30
600081fa:	d505      	bpl.n	60008208 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
600081fc:	68e2      	ldr	r2, [r4, #12]
600081fe:	6a23      	ldr	r3, [r4, #32]
60008200:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
60008204:	429d      	cmp	r5, r3
60008206:	d120      	bne.n	6000824a <mpsc_pbuf_free+0xaa>
		witem->hdr.busy = 0;
60008208:	782b      	ldrb	r3, [r5, #0]
6000820a:	f36f 0341 	bfc	r3, #1, #1
6000820e:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
60008210:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
60008214:	4299      	cmp	r1, r3
60008216:	d104      	bne.n	60008222 <mpsc_pbuf_free+0x82>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
60008218:	463a      	mov	r2, r7
6000821a:	4620      	mov	r0, r4
6000821c:	f00f fea2 	bl	60017f64 <idx_inc>
60008220:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
60008222:	4639      	mov	r1, r7
60008224:	4620      	mov	r0, r4
60008226:	f00f feab 	bl	60017f80 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000822a:	4630      	mov	r0, r6
6000822c:	f007 fddc 	bl	6000fde8 <z_spin_unlock_valid>
60008230:	b980      	cbnz	r0, 60008254 <mpsc_pbuf_free+0xb4>
60008232:	23c2      	movs	r3, #194	; 0xc2
60008234:	4a0c      	ldr	r2, [pc, #48]	; (60008268 <mpsc_pbuf_free+0xc8>)
60008236:	4910      	ldr	r1, [pc, #64]	; (60008278 <mpsc_pbuf_free+0xd8>)
60008238:	480d      	ldr	r0, [pc, #52]	; (60008270 <mpsc_pbuf_free+0xd0>)
6000823a:	f00f fe62 	bl	60017f02 <assert_print>
6000823e:	4631      	mov	r1, r6
60008240:	480e      	ldr	r0, [pc, #56]	; (6000827c <mpsc_pbuf_free+0xdc>)
60008242:	f00f fe5e 	bl	60017f02 <assert_print>
60008246:	21c2      	movs	r1, #194	; 0xc2
60008248:	e7cb      	b.n	600081e2 <mpsc_pbuf_free+0x42>
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
6000824a:	682b      	ldr	r3, [r5, #0]
6000824c:	f367 039f 	bfi	r3, r7, #2, #30
60008250:	602b      	str	r3, [r5, #0]
60008252:	e7ea      	b.n	6000822a <mpsc_pbuf_free+0x8a>
	__asm__ volatile(
60008254:	f388 8811 	msr	BASEPRI, r8
60008258:	f3bf 8f6f 	isb	sy
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
6000825c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
60008260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
60008264:	f008 b8a2 	b.w	600103ac <z_impl_k_sem_give>
60008268:	6001c758 	.word	0x6001c758
6000826c:	6001c785 	.word	0x6001c785
60008270:	6001c3d7 	.word	0x6001c3d7
60008274:	6001c79a 	.word	0x6001c79a
60008278:	6001c7b2 	.word	0x6001c7b2
6000827c:	6001c7c9 	.word	0x6001c7c9

60008280 <imxrt_init>:
 *
 * @return 0
 */

static int imxrt_init(const struct device *arg)
{
60008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
60008282:	f04f 0310 	mov.w	r3, #16
60008286:	f3ef 8611 	mrs	r6, BASEPRI
6000828a:	f383 8812 	msr	BASEPRI_MAX, r3
6000828e:	f3bf 8f6f 	isb	sy
	unsigned int oldLevel; /* old interrupt lock level */

	/* disable interrupts */
	oldLevel = irq_lock();

	if ((SCB->CCR & SCB_CCR_DC_Msk) == 0) {
60008292:	4a4d      	ldr	r2, [pc, #308]	; (600083c8 <imxrt_init+0x148>)
60008294:	6953      	ldr	r3, [r2, #20]
60008296:	03dc      	lsls	r4, r3, #15
60008298:	d427      	bmi.n	600082ea <imxrt_init+0x6a>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
6000829a:	6953      	ldr	r3, [r2, #20]
6000829c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
600082a0:	d123      	bne.n	600082ea <imxrt_init+0x6a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
600082a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
600082a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
600082aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
600082ae:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
600082b2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
600082b6:	f3c3 334e 	ubfx	r3, r3, #13, #15
600082ba:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
600082bc:	ea03 0704 	and.w	r7, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
600082c0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
600082c2:	ea47 7581 	orr.w	r5, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
600082c6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
600082c8:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
600082cc:	d2f9      	bcs.n	600082c2 <imxrt_init+0x42>
    } while(sets-- != 0U);
600082ce:	3b20      	subs	r3, #32
600082d0:	f113 0f20 	cmn.w	r3, #32
600082d4:	d1f2      	bne.n	600082bc <imxrt_init+0x3c>
600082d6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
600082da:	6953      	ldr	r3, [r2, #20]
600082dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
600082e0:	6153      	str	r3, [r2, #20]
600082e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
600082e6:	f3bf 8f6f 	isb	sy
 *
 * @param freq The XTAL input clock frequency in Hz.
 */
static inline void CLOCK_SetXtalFreq(uint32_t freq)
{
    g_xtalFreq = freq;
600082ea:	4b38      	ldr	r3, [pc, #224]	; (600083cc <imxrt_init+0x14c>)
600082ec:	4a38      	ldr	r2, [pc, #224]	; (600083d0 <imxrt_init+0x150>)
600082ee:	601a      	str	r2, [r3, #0]
 *
 * @param freq The RTC XTAL input clock frequency in Hz.
 */
static inline void CLOCK_SetRtcXtalFreq(uint32_t freq)
{
    g_rtcXtalFreq = freq;
600082f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
600082f4:	4b37      	ldr	r3, [pc, #220]	; (600083d4 <imxrt_init+0x154>)
600082f6:	601a      	str	r2, [r3, #0]
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
600082f8:	4b37      	ldr	r3, [pc, #220]	; (600083d8 <imxrt_init+0x158>)
600082fa:	699a      	ldr	r2, [r3, #24]
600082fc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
60008300:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
60008304:	619a      	str	r2, [r3, #24]
60008306:	695a      	ldr	r2, [r3, #20]
60008308:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
6000830c:	615a      	str	r2, [r3, #20]
        while ((CCM->CDHIPR & ((1UL << busyShift))) != 0UL)
6000830e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
60008310:	0690      	lsls	r0, r2, #26
60008312:	d4fc      	bmi.n	6000830e <imxrt_init+0x8e>
	DCDC->REG3 = (DCDC->REG3 & (~DCDC_REG3_TRG_MASK)) | DCDC_REG3_TRG(CONFIG_DCDC_VALUE);
60008314:	4a31      	ldr	r2, [pc, #196]	; (600083dc <imxrt_init+0x15c>)
60008316:	68d3      	ldr	r3, [r2, #12]
60008318:	f023 031f 	bic.w	r3, r3, #31
6000831c:	f043 0313 	orr.w	r3, r3, #19
60008320:	60d3      	str	r3, [r2, #12]
			(DCDC_REG0_STS_DC_OK_MASK & DCDC->REG0)) {
60008322:	6813      	ldr	r3, [r2, #0]
	while (DCDC_REG0_STS_DC_OK_MASK !=
60008324:	2b00      	cmp	r3, #0
60008326:	dafc      	bge.n	60008322 <imxrt_init+0xa2>
	CLOCK_InitArmPll(&armPllConfig); /* Configure ARM PLL to 1200M */
60008328:	482d      	ldr	r0, [pc, #180]	; (600083e0 <imxrt_init+0x160>)
6000832a:	f005 fa31 	bl	6000d790 <CLOCK_InitArmPll>
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
6000832e:	4b2a      	ldr	r3, [pc, #168]	; (600083d8 <imxrt_init+0x158>)
60008330:	691a      	ldr	r2, [r3, #16]
60008332:	f022 0207 	bic.w	r2, r2, #7
60008336:	f042 0201 	orr.w	r2, r2, #1
6000833a:	611a      	str	r2, [r3, #16]
        while ((CCM->CDHIPR & ((uint32_t)(1UL << busyShift))) != 0UL)
6000833c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
6000833e:	03d1      	lsls	r1, r2, #15
60008340:	d4fc      	bmi.n	6000833c <imxrt_init+0xbc>
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60008342:	695a      	ldr	r2, [r3, #20]
60008344:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
60008348:	615a      	str	r2, [r3, #20]
        while ((CCM->CDHIPR & ((uint32_t)(1UL << busyShift))) != 0UL)
6000834a:	4b23      	ldr	r3, [pc, #140]	; (600083d8 <imxrt_init+0x158>)
6000834c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
6000834e:	0792      	lsls	r2, r2, #30
60008350:	d4fc      	bmi.n	6000834c <imxrt_init+0xcc>
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60008352:	695a      	ldr	r2, [r3, #20]
        while ((CCM->CDHIPR & ((1UL << busyShift))) != 0UL)
60008354:	4c20      	ldr	r4, [pc, #128]	; (600083d8 <imxrt_init+0x158>)
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60008356:	f442 7240 	orr.w	r2, r2, #768	; 0x300
6000835a:	615a      	str	r2, [r3, #20]
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
6000835c:	699a      	ldr	r2, [r3, #24]
6000835e:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
60008362:	619a      	str	r2, [r3, #24]
60008364:	695a      	ldr	r2, [r3, #20]
60008366:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
6000836a:	615a      	str	r2, [r3, #20]
        while ((CCM->CDHIPR & ((1UL << busyShift))) != 0UL)
6000836c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
6000836e:	f015 0520 	ands.w	r5, r5, #32
60008372:	d1fb      	bne.n	6000836c <imxrt_init+0xec>
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60008374:	6a63      	ldr	r3, [r4, #36]	; 0x24
	CLOCK_EnableUsbhs0PhyPllClock(kCLOCK_Usb480M,
60008376:	4628      	mov	r0, r5
60008378:	491a      	ldr	r1, [pc, #104]	; (600083e4 <imxrt_init+0x164>)
6000837a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
6000837e:	6263      	str	r3, [r4, #36]	; 0x24
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60008380:	6a63      	ldr	r3, [r4, #36]	; 0x24
60008382:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60008386:	6263      	str	r3, [r4, #36]	; 0x24
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60008388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
6000838a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
6000838e:	63a3      	str	r3, [r4, #56]	; 0x38
    CCM_TUPLE_REG(CCM, divider) = (CCM_TUPLE_REG(CCM, divider) & (~CCM_TUPLE_MASK(divider))) |
60008390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
60008392:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
60008396:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
6000839a:	63a3      	str	r3, [r4, #56]	; 0x38
6000839c:	f005 fa3c 	bl	6000d818 <CLOCK_EnableUsbhs0PhyPllClock>
	CLOCK_EnableUsbhs0Clock(kCLOCK_Usb480M,
600083a0:	4910      	ldr	r1, [pc, #64]	; (600083e4 <imxrt_init+0x164>)
600083a2:	4628      	mov	r0, r5
600083a4:	f005 f9cc 	bl	6000d740 <CLOCK_EnableUsbhs0Clock>
	USB_EhciPhyInit(kUSB_ControllerEhci0, CPU_XTAL_CLK_HZ, &usbPhyConfig);
600083a8:	4a0f      	ldr	r2, [pc, #60]	; (600083e8 <imxrt_init+0x168>)
600083aa:	4909      	ldr	r1, [pc, #36]	; (600083d0 <imxrt_init+0x150>)
600083ac:	2002      	movs	r0, #2
600083ae:	f010 fe76 	bl	6001909e <USB_EhciPhyInit>
    CCM->CLPCR = (CCM->CLPCR & ~CCM_CLPCR_LPM_MASK) | CCM_CLPCR_LPM((uint32_t)mode);
600083b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
600083b4:	f023 0303 	bic.w	r3, r3, #3
600083b8:	6563      	str	r3, [r4, #84]	; 0x54
	__asm__ volatile(
600083ba:	f386 8811 	msr	BASEPRI, r6
600083be:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	/* restore interrupt state */
	irq_unlock(oldLevel);
	return 0;
}
600083c2:	4628      	mov	r0, r5
600083c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600083c6:	bf00      	nop
600083c8:	e000ed00 	.word	0xe000ed00
600083cc:	20204cd4 	.word	0x20204cd4
600083d0:	016e3600 	.word	0x016e3600
600083d4:	20204cd0 	.word	0x20204cd0
600083d8:	400fc000 	.word	0x400fc000
600083dc:	40080000 	.word	0x40080000
600083e0:	6001a590 	.word	0x6001a590
600083e4:	1c9c3800 	.word	0x1c9c3800
600083e8:	202032b8 	.word	0x202032b8

600083ec <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
600083ec:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
600083ee:	2200      	movs	r2, #0
{
600083f0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
600083f2:	490f      	ldr	r1, [pc, #60]	; (60008430 <enable_logger+0x44>)
600083f4:	480f      	ldr	r0, [pc, #60]	; (60008434 <enable_logger+0x48>)
600083f6:	f011 fb0f 	bl	60019a18 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
600083fa:	2200      	movs	r2, #0
600083fc:	2300      	movs	r3, #0
600083fe:	2400      	movs	r4, #0
60008400:	4d0d      	ldr	r5, [pc, #52]	; (60008438 <enable_logger+0x4c>)
60008402:	490e      	ldr	r1, [pc, #56]	; (6000843c <enable_logger+0x50>)
60008404:	4628      	mov	r0, r5
60008406:	9400      	str	r4, [sp, #0]
60008408:	e9cd 2306 	strd	r2, r3, [sp, #24]
6000840c:	230e      	movs	r3, #14
6000840e:	f44f 6200 	mov.w	r2, #2048	; 0x800
60008412:	e9cd 3403 	strd	r3, r4, [sp, #12]
60008416:	e9cd 4401 	strd	r4, r4, [sp, #4]
6000841a:	4b09      	ldr	r3, [pc, #36]	; (60008440 <enable_logger+0x54>)
6000841c:	f007 fc1e 	bl	6000fc5c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
60008420:	4908      	ldr	r1, [pc, #32]	; (60008444 <enable_logger+0x58>)
60008422:	4628      	mov	r0, r5
60008424:	f011 fa55 	bl	600198d2 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
60008428:	4620      	mov	r0, r4
6000842a:	b009      	add	sp, #36	; 0x24
6000842c:	bd30      	pop	{r4, r5, pc}
6000842e:	bf00      	nop
60008430:	60008589 	.word	0x60008589
60008434:	20204428 	.word	0x20204428
60008438:	20203fa0 	.word	0x20203fa0
6000843c:	20206a40 	.word	0x20206a40
60008440:	6000886d 	.word	0x6000886d
60008444:	6001c7de 	.word	0x6001c7de

60008448 <activate_foreach_backend>:
{
60008448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000844c:	4604      	mov	r4, r0
	while (mask_cpy) {
6000844e:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
60008450:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
60008454:	f8df 8050 	ldr.w	r8, [pc, #80]	; 600084a8 <activate_foreach_backend+0x60>
	while (mask_cpy) {
60008458:	b914      	cbnz	r4, 60008460 <activate_foreach_backend+0x18>
}
6000845a:	4638      	mov	r0, r7
6000845c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
60008460:	fa94 f5a4 	rbit	r5, r4
60008464:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
60008468:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
6000846c:	012e      	lsls	r6, r5, #4
6000846e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
60008472:	ea6f 0a03 	mvn.w	sl, r3
60008476:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
6000847a:	7b2b      	ldrb	r3, [r5, #12]
6000847c:	2b00      	cmp	r3, #0
6000847e:	d0eb      	beq.n	60008458 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
60008480:	f858 3006 	ldr.w	r3, [r8, r6]
60008484:	691b      	ldr	r3, [r3, #16]
60008486:	b94b      	cbnz	r3, 6000849c <activate_foreach_backend+0x54>
					   backend->cb->ctx,
60008488:	4446      	add	r6, r8
			log_backend_enable(backend,
6000848a:	2204      	movs	r2, #4
6000848c:	4628      	mov	r0, r5
			mask &= ~BIT(i);
6000848e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
60008492:	6873      	ldr	r3, [r6, #4]
60008494:	6819      	ldr	r1, [r3, #0]
60008496:	f000 faef 	bl	60008a78 <log_backend_enable>
6000849a:	e7dd      	b.n	60008458 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
6000849c:	4628      	mov	r0, r5
6000849e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
600084a0:	2800      	cmp	r0, #0
600084a2:	d1d9      	bne.n	60008458 <activate_foreach_backend+0x10>
600084a4:	e7f0      	b.n	60008488 <activate_foreach_backend+0x40>
600084a6:	bf00      	nop
600084a8:	6001a424 	.word	0x6001a424

600084ac <z_log_init>:
{
600084ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
600084b0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 60008568 <z_log_init+0xbc>
600084b4:	4680      	mov	r8, r0
600084b6:	4c2d      	ldr	r4, [pc, #180]	; (6000856c <z_log_init+0xc0>)
600084b8:	460f      	mov	r7, r1
600084ba:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
600084be:	2b9f      	cmp	r3, #159	; 0x9f
600084c0:	d90b      	bls.n	600084da <z_log_init+0x2e>
600084c2:	492b      	ldr	r1, [pc, #172]	; (60008570 <z_log_init+0xc4>)
600084c4:	f44f 738b 	mov.w	r3, #278	; 0x116
600084c8:	4a2a      	ldr	r2, [pc, #168]	; (60008574 <z_log_init+0xc8>)
600084ca:	482b      	ldr	r0, [pc, #172]	; (60008578 <z_log_init+0xcc>)
600084cc:	f00f fd19 	bl	60017f02 <assert_print>
600084d0:	f44f 718b 	mov.w	r1, #278	; 0x116
	STRUCT_SECTION_FOREACH(log_backend, backend) {
600084d4:	4827      	ldr	r0, [pc, #156]	; (60008574 <z_log_init+0xc8>)
600084d6:	f00f fd0d 	bl	60017ef4 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
600084da:	4828      	ldr	r0, [pc, #160]	; (6000857c <z_log_init+0xd0>)
600084dc:	f00f fe3b 	bl	60018156 <atomic_inc>
600084e0:	4606      	mov	r6, r0
600084e2:	b360      	cbz	r0, 6000853e <z_log_init+0x92>
	uint32_t mask = 0;
600084e4:	2500      	movs	r5, #0
}
600084e6:	4628      	mov	r0, r5
600084e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
600084ec:	7b23      	ldrb	r3, [r4, #12]
600084ee:	b173      	cbz	r3, 6000850e <z_log_init+0x62>
	if (backend->api->init) {
600084f0:	6823      	ldr	r3, [r4, #0]
600084f2:	68db      	ldr	r3, [r3, #12]
600084f4:	b10b      	cbz	r3, 600084fa <z_log_init+0x4e>
		backend->api->init(backend);
600084f6:	4620      	mov	r0, r4
600084f8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
600084fa:	6823      	ldr	r3, [r4, #0]
600084fc:	691b      	ldr	r3, [r3, #16]
600084fe:	b9b3      	cbnz	r3, 6000852e <z_log_init+0x82>
				log_backend_enable(backend,
60008500:	6863      	ldr	r3, [r4, #4]
60008502:	2204      	movs	r2, #4
60008504:	4620      	mov	r0, r4
60008506:	6819      	ldr	r1, [r3, #0]
60008508:	f000 fab6 	bl	60008a78 <log_backend_enable>
			i++;
6000850c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000850e:	3410      	adds	r4, #16
60008510:	454c      	cmp	r4, r9
60008512:	d918      	bls.n	60008546 <z_log_init+0x9a>
60008514:	491a      	ldr	r1, [pc, #104]	; (60008580 <z_log_init+0xd4>)
60008516:	f240 1323 	movw	r3, #291	; 0x123
6000851a:	4a16      	ldr	r2, [pc, #88]	; (60008574 <z_log_init+0xc8>)
6000851c:	4816      	ldr	r0, [pc, #88]	; (60008578 <z_log_init+0xcc>)
6000851e:	f00f fcf0 	bl	60017f02 <assert_print>
60008522:	4818      	ldr	r0, [pc, #96]	; (60008584 <z_log_init+0xd8>)
60008524:	f00f fced 	bl	60017f02 <assert_print>
60008528:	f240 1123 	movw	r1, #291	; 0x123
6000852c:	e7d2      	b.n	600084d4 <z_log_init+0x28>
		return backend->api->is_ready(backend);
6000852e:	4620      	mov	r0, r4
60008530:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
60008532:	2800      	cmp	r0, #0
60008534:	d0e4      	beq.n	60008500 <z_log_init+0x54>
				mask |= BIT(i);
60008536:	fa0a f306 	lsl.w	r3, sl, r6
6000853a:	431d      	orrs	r5, r3
6000853c:	e7e6      	b.n	6000850c <z_log_init+0x60>
	uint32_t mask = 0;
6000853e:	4605      	mov	r5, r0
				mask |= BIT(i);
60008540:	f04f 0a01 	mov.w	sl, #1
60008544:	e7e4      	b.n	60008510 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60008546:	d3d1      	bcc.n	600084ec <z_log_init+0x40>
	if (blocking) {
60008548:	f1b8 0f00 	cmp.w	r8, #0
6000854c:	d0cb      	beq.n	600084e6 <z_log_init+0x3a>
		while (mask) {
6000854e:	2d00      	cmp	r5, #0
60008550:	d0c8      	beq.n	600084e4 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
60008552:	4628      	mov	r0, r5
60008554:	f7ff ff78 	bl	60008448 <activate_foreach_backend>
60008558:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
6000855a:	2f00      	cmp	r7, #0
6000855c:	d0f7      	beq.n	6000854e <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
6000855e:	2100      	movs	r1, #0
60008560:	2064      	movs	r0, #100	; 0x64
60008562:	f009 fb91 	bl	60011c88 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
60008566:	e7f2      	b.n	6000854e <z_log_init+0xa2>
60008568:	6001a434 	.word	0x6001a434
6000856c:	6001a424 	.word	0x6001a424
60008570:	6001c813 	.word	0x6001c813
60008574:	6001c7e6 	.word	0x6001c7e6
60008578:	6001c3d7 	.word	0x6001c3d7
6000857c:	202047fc 	.word	0x202047fc
60008580:	6001c837 	.word	0x6001c837
60008584:	6001c858 	.word	0x6001c858

60008588 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
60008588:	4801      	ldr	r0, [pc, #4]	; (60008590 <log_process_thread_timer_expiry_fn+0x8>)
6000858a:	f007 bf0f 	b.w	600103ac <z_impl_k_sem_give>
6000858e:	bf00      	nop
60008590:	20203534 	.word	0x20203534

60008594 <log_format_func_t_get>:
}
60008594:	4b01      	ldr	r3, [pc, #4]	; (6000859c <log_format_func_t_get+0x8>)
60008596:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
6000859a:	4770      	bx	lr
6000859c:	6001a5ac 	.word	0x6001a5ac

600085a0 <log_set_timestamp_func>:
{
600085a0:	b508      	push	{r3, lr}
600085a2:	4603      	mov	r3, r0
600085a4:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
600085a6:	b12b      	cbz	r3, 600085b4 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
600085a8:	4a04      	ldr	r2, [pc, #16]	; (600085bc <log_set_timestamp_func+0x1c>)
600085aa:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
600085ac:	f000 fd70 	bl	60009090 <log_output_timestamp_freq_set>
	return 0;
600085b0:	2000      	movs	r0, #0
}
600085b2:	bd08      	pop	{r3, pc}
		return -EINVAL;
600085b4:	f06f 0015 	mvn.w	r0, #21
600085b8:	e7fb      	b.n	600085b2 <log_set_timestamp_func+0x12>
600085ba:	bf00      	nop
600085bc:	202030d4 	.word	0x202030d4

600085c0 <z_log_notify_backend_enabled>:
{
600085c0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
600085c2:	4c04      	ldr	r4, [pc, #16]	; (600085d4 <z_log_notify_backend_enabled+0x14>)
600085c4:	7823      	ldrb	r3, [r4, #0]
600085c6:	b913      	cbnz	r3, 600085ce <z_log_notify_backend_enabled+0xe>
600085c8:	4803      	ldr	r0, [pc, #12]	; (600085d8 <z_log_notify_backend_enabled+0x18>)
600085ca:	f007 feef 	bl	600103ac <z_impl_k_sem_give>
	backend_attached = true;
600085ce:	2301      	movs	r3, #1
600085d0:	7023      	strb	r3, [r4, #0]
}
600085d2:	bd10      	pop	{r4, pc}
600085d4:	20204e2e 	.word	0x20204e2e
600085d8:	20203534 	.word	0x20203534

600085dc <z_log_dropped>:
{
600085dc:	b510      	push	{r4, lr}
600085de:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
600085e0:	4808      	ldr	r0, [pc, #32]	; (60008604 <z_log_dropped+0x28>)
600085e2:	f00f fdb8 	bl	60018156 <atomic_inc>
	if (buffered) {
600085e6:	b15c      	cbz	r4, 60008600 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
600085e8:	4b07      	ldr	r3, [pc, #28]	; (60008608 <z_log_dropped+0x2c>)
600085ea:	f3bf 8f5b 	dmb	ish
600085ee:	e853 1f00 	ldrex	r1, [r3]
600085f2:	3901      	subs	r1, #1
600085f4:	e843 1200 	strex	r2, r1, [r3]
600085f8:	2a00      	cmp	r2, #0
600085fa:	d1f8      	bne.n	600085ee <z_log_dropped+0x12>
600085fc:	f3bf 8f5b 	dmb	ish
}
60008600:	bd10      	pop	{r4, pc}
60008602:	bf00      	nop
60008604:	202047f4 	.word	0x202047f4
60008608:	202047f8 	.word	0x202047f8

6000860c <z_log_dropped_read_and_clear>:
}
6000860c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
6000860e:	4b06      	ldr	r3, [pc, #24]	; (60008628 <z_log_dropped_read_and_clear+0x1c>)
60008610:	f3bf 8f5b 	dmb	ish
60008614:	4601      	mov	r1, r0
60008616:	e853 0f00 	ldrex	r0, [r3]
6000861a:	e843 1200 	strex	r2, r1, [r3]
6000861e:	2a00      	cmp	r2, #0
60008620:	d1f9      	bne.n	60008616 <z_log_dropped_read_and_clear+0xa>
60008622:	f3bf 8f5b 	dmb	ish
60008626:	4770      	bx	lr
60008628:	202047f4 	.word	0x202047f4

6000862c <dropped_notify>:
{
6000862c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
6000862e:	f7ff ffed 	bl	6000860c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60008632:	4c10      	ldr	r4, [pc, #64]	; (60008674 <dropped_notify+0x48>)
	uint32_t dropped = z_log_dropped_read_and_clear();
60008634:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60008636:	4e10      	ldr	r6, [pc, #64]	; (60008678 <dropped_notify+0x4c>)
60008638:	42b4      	cmp	r4, r6
6000863a:	d919      	bls.n	60008670 <dropped_notify+0x44>
6000863c:	490f      	ldr	r1, [pc, #60]	; (6000867c <dropped_notify+0x50>)
6000863e:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
60008642:	4a0f      	ldr	r2, [pc, #60]	; (60008680 <dropped_notify+0x54>)
60008644:	480f      	ldr	r0, [pc, #60]	; (60008684 <dropped_notify+0x58>)
60008646:	f00f fc5c 	bl	60017f02 <assert_print>
6000864a:	480f      	ldr	r0, [pc, #60]	; (60008688 <dropped_notify+0x5c>)
6000864c:	f00f fc59 	bl	60017f02 <assert_print>
60008650:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
60008654:	480a      	ldr	r0, [pc, #40]	; (60008680 <dropped_notify+0x54>)
60008656:	f00f fc4d 	bl	60017ef4 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
6000865a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
6000865c:	795b      	ldrb	r3, [r3, #5]
6000865e:	b12b      	cbz	r3, 6000866c <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
60008660:	6823      	ldr	r3, [r4, #0]
60008662:	685b      	ldr	r3, [r3, #4]
60008664:	b113      	cbz	r3, 6000866c <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
60008666:	4629      	mov	r1, r5
60008668:	4620      	mov	r0, r4
6000866a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000866c:	3410      	adds	r4, #16
6000866e:	e7e3      	b.n	60008638 <dropped_notify+0xc>
60008670:	d3f3      	bcc.n	6000865a <dropped_notify+0x2e>
}
60008672:	bd70      	pop	{r4, r5, r6, pc}
60008674:	6001a424 	.word	0x6001a424
60008678:	6001a434 	.word	0x6001a434
6000867c:	6001c837 	.word	0x6001c837
60008680:	6001c7e6 	.word	0x6001c7e6
60008684:	6001c3d7 	.word	0x6001c3d7
60008688:	6001c858 	.word	0x6001c858

6000868c <z_log_msg_init>:
{
6000868c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
6000868e:	4c04      	ldr	r4, [pc, #16]	; (600086a0 <z_log_msg_init+0x14>)
60008690:	4904      	ldr	r1, [pc, #16]	; (600086a4 <z_log_msg_init+0x18>)
60008692:	4620      	mov	r0, r4
60008694:	f7ff fbb4 	bl	60007e00 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
60008698:	4b03      	ldr	r3, [pc, #12]	; (600086a8 <z_log_msg_init+0x1c>)
6000869a:	601c      	str	r4, [r3, #0]
}
6000869c:	bd10      	pop	{r4, pc}
6000869e:	bf00      	nop
600086a0:	202032e0 	.word	0x202032e0
600086a4:	6001a598 	.word	0x6001a598
600086a8:	202047ec 	.word	0x202047ec

600086ac <log_core_init>:
{
600086ac:	b508      	push	{r3, lr}
	panic_mode = false;
600086ae:	4a08      	ldr	r2, [pc, #32]	; (600086d0 <log_core_init+0x24>)
600086b0:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
600086b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
600086b6:	4807      	ldr	r0, [pc, #28]	; (600086d4 <log_core_init+0x28>)
	panic_mode = false;
600086b8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
600086ba:	4a07      	ldr	r2, [pc, #28]	; (600086d8 <log_core_init+0x2c>)
600086bc:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
600086be:	4a07      	ldr	r2, [pc, #28]	; (600086dc <log_core_init+0x30>)
600086c0:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
600086c2:	f7ff ff6d 	bl	600085a0 <log_set_timestamp_func>
}
600086c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
600086ca:	f7ff bfdf 	b.w	6000868c <z_log_msg_init>
600086ce:	bf00      	nop
600086d0:	20204e2f 	.word	0x20204e2f
600086d4:	60018171 	.word	0x60018171
600086d8:	202047f4 	.word	0x202047f4
600086dc:	202047f8 	.word	0x202047f8

600086e0 <z_log_msg_alloc>:
{
600086e0:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
600086e2:	2200      	movs	r2, #0
600086e4:	2300      	movs	r3, #0
600086e6:	4801      	ldr	r0, [pc, #4]	; (600086ec <z_log_msg_alloc+0xc>)
600086e8:	f7ff bbbc 	b.w	60007e64 <mpsc_pbuf_alloc>
600086ec:	202032e0 	.word	0x202032e0

600086f0 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
600086f0:	4801      	ldr	r0, [pc, #4]	; (600086f8 <z_log_msg_local_claim+0x8>)
600086f2:	f7ff bccd 	b.w	60008090 <mpsc_pbuf_claim>
600086f6:	bf00      	nop
600086f8:	202032e0 	.word	0x202032e0

600086fc <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
600086fc:	4b02      	ldr	r3, [pc, #8]	; (60008708 <z_log_msg_free+0xc>)
{
600086fe:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
60008700:	6818      	ldr	r0, [r3, #0]
60008702:	f7ff bd4d 	b.w	600081a0 <mpsc_pbuf_free>
60008706:	bf00      	nop
60008708:	202047ec 	.word	0x202047ec

6000870c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
6000870c:	4801      	ldr	r0, [pc, #4]	; (60008714 <z_log_msg_pending+0x8>)
6000870e:	f00f bcff 	b.w	60018110 <mpsc_pbuf_is_pending>
60008712:	bf00      	nop
60008714:	202032e0 	.word	0x202032e0

60008718 <z_impl_log_process>:
	if (!backend_attached) {
60008718:	4b2d      	ldr	r3, [pc, #180]	; (600087d0 <z_impl_log_process+0xb8>)
{
6000871a:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
6000871c:	7818      	ldrb	r0, [r3, #0]
6000871e:	2800      	cmp	r0, #0
60008720:	d054      	beq.n	600087cc <z_impl_log_process+0xb4>
	return z_log_msg_local_claim();
60008722:	f7ff ffe5 	bl	600086f0 <z_log_msg_local_claim>
	if (msg) {
60008726:	4605      	mov	r5, r0
60008728:	b360      	cbz	r0, 60008784 <z_impl_log_process+0x6c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
6000872a:	4b2a      	ldr	r3, [pc, #168]	; (600087d4 <z_impl_log_process+0xbc>)
6000872c:	f3bf 8f5b 	dmb	ish
60008730:	e853 1f00 	ldrex	r1, [r3]
60008734:	3901      	subs	r1, #1
60008736:	e843 1200 	strex	r2, r1, [r3]
6000873a:	2a00      	cmp	r2, #0
6000873c:	d1f8      	bne.n	60008730 <z_impl_log_process+0x18>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000873e:	4c26      	ldr	r4, [pc, #152]	; (600087d8 <z_impl_log_process+0xc0>)
60008740:	f3bf 8f5b 	dmb	ish
60008744:	4e25      	ldr	r6, [pc, #148]	; (600087dc <z_impl_log_process+0xc4>)
60008746:	42b4      	cmp	r4, r6
60008748:	d918      	bls.n	6000877c <z_impl_log_process+0x64>
6000874a:	4925      	ldr	r1, [pc, #148]	; (600087e0 <z_impl_log_process+0xc8>)
6000874c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
60008750:	4a24      	ldr	r2, [pc, #144]	; (600087e4 <z_impl_log_process+0xcc>)
60008752:	4825      	ldr	r0, [pc, #148]	; (600087e8 <z_impl_log_process+0xd0>)
60008754:	f00f fbd5 	bl	60017f02 <assert_print>
60008758:	4824      	ldr	r0, [pc, #144]	; (600087ec <z_impl_log_process+0xd4>)
6000875a:	f00f fbd2 	bl	60017f02 <assert_print>
6000875e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
60008762:	4820      	ldr	r0, [pc, #128]	; (600087e4 <z_impl_log_process+0xcc>)
60008764:	f00f fbc6 	bl	60017ef4 <assert_post_action>
	return backend->cb->active;
60008768:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
6000876a:	795b      	ldrb	r3, [r3, #5]
6000876c:	b123      	cbz	r3, 60008778 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
6000876e:	6823      	ldr	r3, [r4, #0]
60008770:	4629      	mov	r1, r5
60008772:	4620      	mov	r0, r4
60008774:	681b      	ldr	r3, [r3, #0]
60008776:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60008778:	3410      	adds	r4, #16
6000877a:	e7e4      	b.n	60008746 <z_impl_log_process+0x2e>
6000877c:	d3f4      	bcc.n	60008768 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
6000877e:	4628      	mov	r0, r5
60008780:	f7ff ffbc 	bl	600086fc <z_log_msg_free>
	return dropped_cnt > 0;
60008784:	4b1a      	ldr	r3, [pc, #104]	; (600087f0 <z_impl_log_process+0xd8>)
60008786:	4c1b      	ldr	r4, [pc, #108]	; (600087f4 <z_impl_log_process+0xdc>)
		if ((dropped_pend || unordered_pend) &&
60008788:	681b      	ldr	r3, [r3, #0]
6000878a:	2b00      	cmp	r3, #0
6000878c:	dd12      	ble.n	600087b4 <z_impl_log_process+0x9c>
	return z_impl_k_uptime_ticks();
6000878e:	f011 f91f 	bl	600199d0 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
60008792:	220a      	movs	r2, #10
60008794:	2300      	movs	r3, #0
60008796:	f7fa ffb5 	bl	60003704 <__aeabi_uldivmod>
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
6000879a:	e9d4 3200 	ldrd	r3, r2, [r4]
6000879e:	1ac0      	subs	r0, r0, r3
		if ((dropped_pend || unordered_pend) &&
600087a0:	f240 33e9 	movw	r3, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
600087a4:	eb61 0102 	sbc.w	r1, r1, r2
		if ((dropped_pend || unordered_pend) &&
600087a8:	4298      	cmp	r0, r3
600087aa:	f171 0100 	sbcs.w	r1, r1, #0
600087ae:	d301      	bcc.n	600087b4 <z_impl_log_process+0x9c>
				dropped_notify();
600087b0:	f7ff ff3c 	bl	6000862c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
600087b4:	e9d4 3200 	ldrd	r3, r2, [r4]
600087b8:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
600087bc:	f142 0200 	adc.w	r2, r2, #0
600087c0:	e9c4 3200 	strd	r3, r2, [r4]
}
600087c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
600087c8:	f7ff bfa0 	b.w	6000870c <z_log_msg_pending>
}
600087cc:	bd70      	pop	{r4, r5, r6, pc}
600087ce:	bf00      	nop
600087d0:	20204e2e 	.word	0x20204e2e
600087d4:	202047f8 	.word	0x202047f8
600087d8:	6001a424 	.word	0x6001a424
600087dc:	6001a434 	.word	0x6001a434
600087e0:	6001c837 	.word	0x6001c837
600087e4:	6001c7e6 	.word	0x6001c7e6
600087e8:	6001c3d7 	.word	0x6001c3d7
600087ec:	6001c858 	.word	0x6001c858
600087f0:	202047f4 	.word	0x202047f4
600087f4:	20204420 	.word	0x20204420

600087f8 <z_impl_log_panic>:
{
600087f8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
600087fa:	4d15      	ldr	r5, [pc, #84]	; (60008850 <z_impl_log_panic+0x58>)
600087fc:	7829      	ldrb	r1, [r5, #0]
600087fe:	bb29      	cbnz	r1, 6000884c <z_impl_log_panic+0x54>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60008800:	4c14      	ldr	r4, [pc, #80]	; (60008854 <z_impl_log_panic+0x5c>)
	(void)z_log_init(true, false);
60008802:	2001      	movs	r0, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60008804:	4e14      	ldr	r6, [pc, #80]	; (60008858 <z_impl_log_panic+0x60>)
	(void)z_log_init(true, false);
60008806:	f7ff fe51 	bl	600084ac <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000880a:	42b4      	cmp	r4, r6
6000880c:	d917      	bls.n	6000883e <z_impl_log_panic+0x46>
6000880e:	4913      	ldr	r1, [pc, #76]	; (6000885c <z_impl_log_panic+0x64>)
60008810:	f240 1385 	movw	r3, #389	; 0x185
60008814:	4a12      	ldr	r2, [pc, #72]	; (60008860 <z_impl_log_panic+0x68>)
60008816:	4813      	ldr	r0, [pc, #76]	; (60008864 <z_impl_log_panic+0x6c>)
60008818:	f00f fb73 	bl	60017f02 <assert_print>
6000881c:	4812      	ldr	r0, [pc, #72]	; (60008868 <z_impl_log_panic+0x70>)
6000881e:	f00f fb70 	bl	60017f02 <assert_print>
60008822:	f240 1185 	movw	r1, #389	; 0x185
60008826:	480e      	ldr	r0, [pc, #56]	; (60008860 <z_impl_log_panic+0x68>)
60008828:	f00f fb64 	bl	60017ef4 <assert_post_action>
	return backend->cb->active;
6000882c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
6000882e:	795b      	ldrb	r3, [r3, #5]
60008830:	b11b      	cbz	r3, 6000883a <z_impl_log_panic+0x42>
	backend->api->panic(backend);
60008832:	6823      	ldr	r3, [r4, #0]
60008834:	4620      	mov	r0, r4
60008836:	689b      	ldr	r3, [r3, #8]
60008838:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000883a:	3410      	adds	r4, #16
6000883c:	e7e5      	b.n	6000880a <z_impl_log_panic+0x12>
6000883e:	d3f5      	bcc.n	6000882c <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
60008840:	f7ff ff6a 	bl	60008718 <z_impl_log_process>
		while (log_process() == true) {
60008844:	2800      	cmp	r0, #0
60008846:	d1fb      	bne.n	60008840 <z_impl_log_panic+0x48>
	panic_mode = true;
60008848:	2301      	movs	r3, #1
6000884a:	702b      	strb	r3, [r5, #0]
}
6000884c:	bd70      	pop	{r4, r5, r6, pc}
6000884e:	bf00      	nop
60008850:	20204e2f 	.word	0x20204e2f
60008854:	6001a424 	.word	0x6001a424
60008858:	6001a434 	.word	0x6001a434
6000885c:	6001c837 	.word	0x6001c837
60008860:	6001c7e6 	.word	0x6001c7e6
60008864:	6001c3d7 	.word	0x6001c3d7
60008868:	6001c858 	.word	0x6001c858

6000886c <log_process_thread_func>:
	STRUCT_SECTION_COUNT(log_backend, &cnt);
6000886c:	4b30      	ldr	r3, [pc, #192]	; (60008930 <log_process_thread_func+0xc4>)
{
6000886e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60008872:	4f30      	ldr	r7, [pc, #192]	; (60008934 <log_process_thread_func+0xc8>)
60008874:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
60008876:	091b      	lsrs	r3, r3, #4
60008878:	d10b      	bne.n	60008892 <log_process_thread_func+0x26>
6000887a:	492f      	ldr	r1, [pc, #188]	; (60008938 <log_process_thread_func+0xcc>)
6000887c:	f44f 7352 	mov.w	r3, #840	; 0x348
60008880:	4a2e      	ldr	r2, [pc, #184]	; (6000893c <log_process_thread_func+0xd0>)
60008882:	482f      	ldr	r0, [pc, #188]	; (60008940 <log_process_thread_func+0xd4>)
60008884:	f00f fb3d 	bl	60017f02 <assert_print>
60008888:	f44f 7152 	mov.w	r1, #840	; 0x348
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000888c:	482b      	ldr	r0, [pc, #172]	; (6000893c <log_process_thread_func+0xd0>)
6000888e:	f00f fb31 	bl	60017ef4 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
60008892:	2100      	movs	r1, #0
60008894:	4608      	mov	r0, r1
60008896:	f7ff fe09 	bl	600084ac <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
6000889a:	4604      	mov	r4, r0
6000889c:	b340      	cbz	r0, 600088f0 <log_process_thread_func+0x84>
6000889e:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
600088a2:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
600088a6:	f009 fa21 	bl	60011cec <z_impl_z_current_get>
	proc_tid = process_tid;
600088aa:	4b26      	ldr	r3, [pc, #152]	; (60008944 <log_process_thread_func+0xd8>)
600088ac:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
600088ae:	b130      	cbz	r0, 600088be <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
600088b0:	4b25      	ldr	r3, [pc, #148]	; (60008948 <log_process_thread_func+0xdc>)
	    process_tid &&
600088b2:	681b      	ldr	r3, [r3, #0]
600088b4:	2b09      	cmp	r3, #9
600088b6:	dd02      	ble.n	600088be <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
600088b8:	4824      	ldr	r0, [pc, #144]	; (6000894c <log_process_thread_func+0xe0>)
600088ba:	f007 fd77 	bl	600103ac <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
600088be:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
600088c0:	f8df a088 	ldr.w	sl, [pc, #136]	; 6000894c <log_process_thread_func+0xe0>
		if (activate_mask) {
600088c4:	b144      	cbz	r4, 600088d8 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
600088c6:	4620      	mov	r0, r4
600088c8:	f7ff fdbe 	bl	60008448 <activate_foreach_backend>
			if (!activate_mask) {
600088cc:	4604      	mov	r4, r0
600088ce:	b918      	cbnz	r0, 600088d8 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
600088d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
600088d4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
600088d8:	f7ff ff1e 	bl	60008718 <z_impl_log_process>
		if (log_process() == false) {
600088dc:	4606      	mov	r6, r0
600088de:	b928      	cbnz	r0, 600088ec <log_process_thread_func+0x80>
			if (processed_any) {
600088e0:	b95d      	cbnz	r5, 600088fa <log_process_thread_func+0x8e>
600088e2:	4642      	mov	r2, r8
600088e4:	464b      	mov	r3, r9
600088e6:	4650      	mov	r0, sl
600088e8:	f007 fd9e 	bl	60010428 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
600088ec:	4635      	mov	r5, r6
600088ee:	e7e9      	b.n	600088c4 <log_process_thread_func+0x58>
600088f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
600088f4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
600088f8:	e7d5      	b.n	600088a6 <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
600088fa:	4d0d      	ldr	r5, [pc, #52]	; (60008930 <log_process_thread_func+0xc4>)
600088fc:	e008      	b.n	60008910 <log_process_thread_func+0xa4>
600088fe:	d2f0      	bcs.n	600088e2 <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
60008900:	682b      	ldr	r3, [r5, #0]
60008902:	699b      	ldr	r3, [r3, #24]
60008904:	b11b      	cbz	r3, 6000890e <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
60008906:	2200      	movs	r2, #0
60008908:	4628      	mov	r0, r5
6000890a:	4611      	mov	r1, r2
6000890c:	4798      	blx	r3
6000890e:	3510      	adds	r5, #16
60008910:	42bd      	cmp	r5, r7
60008912:	d9f4      	bls.n	600088fe <log_process_thread_func+0x92>
60008914:	490e      	ldr	r1, [pc, #56]	; (60008950 <log_process_thread_func+0xe4>)
60008916:	f44f 734f 	mov.w	r3, #828	; 0x33c
6000891a:	4a08      	ldr	r2, [pc, #32]	; (6000893c <log_process_thread_func+0xd0>)
6000891c:	4808      	ldr	r0, [pc, #32]	; (60008940 <log_process_thread_func+0xd4>)
6000891e:	f00f faf0 	bl	60017f02 <assert_print>
60008922:	480c      	ldr	r0, [pc, #48]	; (60008954 <log_process_thread_func+0xe8>)
60008924:	f00f faed 	bl	60017f02 <assert_print>
60008928:	f44f 714f 	mov.w	r1, #828	; 0x33c
6000892c:	e7ae      	b.n	6000888c <log_process_thread_func+0x20>
6000892e:	bf00      	nop
60008930:	6001a424 	.word	0x6001a424
60008934:	6001a434 	.word	0x6001a434
60008938:	6001c877 	.word	0x6001c877
6000893c:	6001c7e6 	.word	0x6001c7e6
60008940:	6001c3d7 	.word	0x6001c3d7
60008944:	202047f0 	.word	0x202047f0
60008948:	202047f8 	.word	0x202047f8
6000894c:	20203534 	.word	0x20203534
60008950:	6001c837 	.word	0x6001c837
60008954:	6001c858 	.word	0x6001c858

60008958 <z_log_msg_post_finalize>:
{
60008958:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
6000895a:	482b      	ldr	r0, [pc, #172]	; (60008a08 <z_log_msg_post_finalize+0xb0>)
6000895c:	f00f fbfb 	bl	60018156 <atomic_inc>
	if (panic_mode) {
60008960:	4b2a      	ldr	r3, [pc, #168]	; (60008a0c <z_log_msg_post_finalize+0xb4>)
60008962:	781b      	ldrb	r3, [r3, #0]
60008964:	2b00      	cmp	r3, #0
60008966:	d034      	beq.n	600089d2 <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
60008968:	f04f 0310 	mov.w	r3, #16
6000896c:	f3ef 8411 	mrs	r4, BASEPRI
60008970:	f383 8812 	msr	BASEPRI_MAX, r3
60008974:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60008978:	4825      	ldr	r0, [pc, #148]	; (60008a10 <z_log_msg_post_finalize+0xb8>)
6000897a:	f007 fa27 	bl	6000fdcc <z_spin_lock_valid>
6000897e:	b968      	cbnz	r0, 6000899c <z_log_msg_post_finalize+0x44>
60008980:	2394      	movs	r3, #148	; 0x94
60008982:	4a24      	ldr	r2, [pc, #144]	; (60008a14 <z_log_msg_post_finalize+0xbc>)
60008984:	4924      	ldr	r1, [pc, #144]	; (60008a18 <z_log_msg_post_finalize+0xc0>)
60008986:	4825      	ldr	r0, [pc, #148]	; (60008a1c <z_log_msg_post_finalize+0xc4>)
60008988:	f00f fabb 	bl	60017f02 <assert_print>
6000898c:	4920      	ldr	r1, [pc, #128]	; (60008a10 <z_log_msg_post_finalize+0xb8>)
6000898e:	4824      	ldr	r0, [pc, #144]	; (60008a20 <z_log_msg_post_finalize+0xc8>)
60008990:	f00f fab7 	bl	60017f02 <assert_print>
60008994:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60008996:	481f      	ldr	r0, [pc, #124]	; (60008a14 <z_log_msg_post_finalize+0xbc>)
60008998:	f00f faac 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
6000899c:	481c      	ldr	r0, [pc, #112]	; (60008a10 <z_log_msg_post_finalize+0xb8>)
6000899e:	f007 fa31 	bl	6000fe04 <z_spin_lock_set_owner>
600089a2:	f7ff feb9 	bl	60008718 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600089a6:	481a      	ldr	r0, [pc, #104]	; (60008a10 <z_log_msg_post_finalize+0xb8>)
600089a8:	f007 fa1e 	bl	6000fde8 <z_spin_unlock_valid>
600089ac:	b958      	cbnz	r0, 600089c6 <z_log_msg_post_finalize+0x6e>
600089ae:	23c2      	movs	r3, #194	; 0xc2
600089b0:	4a18      	ldr	r2, [pc, #96]	; (60008a14 <z_log_msg_post_finalize+0xbc>)
600089b2:	491c      	ldr	r1, [pc, #112]	; (60008a24 <z_log_msg_post_finalize+0xcc>)
600089b4:	4819      	ldr	r0, [pc, #100]	; (60008a1c <z_log_msg_post_finalize+0xc4>)
600089b6:	f00f faa4 	bl	60017f02 <assert_print>
600089ba:	4915      	ldr	r1, [pc, #84]	; (60008a10 <z_log_msg_post_finalize+0xb8>)
600089bc:	481a      	ldr	r0, [pc, #104]	; (60008a28 <z_log_msg_post_finalize+0xd0>)
600089be:	f00f faa0 	bl	60017f02 <assert_print>
600089c2:	21c2      	movs	r1, #194	; 0xc2
600089c4:	e7e7      	b.n	60008996 <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
600089c6:	f384 8811 	msr	BASEPRI, r4
600089ca:	f3bf 8f6f 	isb	sy
}
600089ce:	b002      	add	sp, #8
600089d0:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
600089d2:	4b16      	ldr	r3, [pc, #88]	; (60008a2c <z_log_msg_post_finalize+0xd4>)
600089d4:	681b      	ldr	r3, [r3, #0]
600089d6:	2b00      	cmp	r3, #0
600089d8:	d0f9      	beq.n	600089ce <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
600089da:	b950      	cbnz	r0, 600089f2 <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
600089dc:	2200      	movs	r2, #0
600089de:	2300      	movs	r3, #0
600089e0:	4813      	ldr	r0, [pc, #76]	; (60008a30 <z_log_msg_post_finalize+0xd8>)
600089e2:	e9cd 2300 	strd	r2, r3, [sp]
600089e6:	f242 7210 	movw	r2, #10000	; 0x2710
600089ea:	2300      	movs	r3, #0
600089ec:	f009 fe64 	bl	600126b8 <z_impl_k_timer_start>
600089f0:	e7ed      	b.n	600089ce <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
600089f2:	280a      	cmp	r0, #10
600089f4:	d1eb      	bne.n	600089ce <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
600089f6:	480e      	ldr	r0, [pc, #56]	; (60008a30 <z_log_msg_post_finalize+0xd8>)
600089f8:	f011 f81a 	bl	60019a30 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
600089fc:	480d      	ldr	r0, [pc, #52]	; (60008a34 <z_log_msg_post_finalize+0xdc>)
}
600089fe:	b002      	add	sp, #8
60008a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
60008a04:	f007 bcd2 	b.w	600103ac <z_impl_k_sem_give>
60008a08:	202047f8 	.word	0x202047f8
60008a0c:	20204e2f 	.word	0x20204e2f
60008a10:	202047e8 	.word	0x202047e8
60008a14:	6001c758 	.word	0x6001c758
60008a18:	6001c785 	.word	0x6001c785
60008a1c:	6001c3d7 	.word	0x6001c3d7
60008a20:	6001c79a 	.word	0x6001c79a
60008a24:	6001c7b2 	.word	0x6001c7b2
60008a28:	6001c7c9 	.word	0x6001c7c9
60008a2c:	202047f0 	.word	0x202047f0
60008a30:	20204428 	.word	0x20204428
60008a34:	20203534 	.word	0x20203534

60008a38 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
60008a38:	4b06      	ldr	r3, [pc, #24]	; (60008a54 <z_log_msg_commit+0x1c>)
{
60008a3a:	b510      	push	{r4, lr}
60008a3c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
60008a3e:	681b      	ldr	r3, [r3, #0]
60008a40:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
60008a42:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
60008a44:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
60008a46:	4804      	ldr	r0, [pc, #16]	; (60008a58 <z_log_msg_commit+0x20>)
60008a48:	f7ff facc 	bl	60007fe4 <mpsc_pbuf_commit>
}
60008a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
60008a50:	f7ff bf82 	b.w	60008958 <z_log_msg_post_finalize>
60008a54:	202030d4 	.word	0x202030d4
60008a58:	202032e0 	.word	0x202032e0

60008a5c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
60008a5c:	4a04      	ldr	r2, [pc, #16]	; (60008a70 <log_source_name_get+0x14>)
60008a5e:	4b05      	ldr	r3, [pc, #20]	; (60008a74 <log_source_name_get+0x18>)
60008a60:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
60008a62:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
60008a66:	bf34      	ite	cc
60008a68:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
60008a6c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
60008a6e:	4770      	bx	lr
60008a70:	6001a38c 	.word	0x6001a38c
60008a74:	6001a424 	.word	0x6001a424

60008a78 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
60008a78:	4b0e      	ldr	r3, [pc, #56]	; (60008ab4 <log_backend_enable+0x3c>)
60008a7a:	1ac3      	subs	r3, r0, r3
60008a7c:	111b      	asrs	r3, r3, #4
60008a7e:	3301      	adds	r3, #1
{
60008a80:	b510      	push	{r4, lr}

	log_backend_id_set(backend, id);
60008a82:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
60008a84:	b948      	cbnz	r0, 60008a9a <log_backend_enable+0x22>
60008a86:	490c      	ldr	r1, [pc, #48]	; (60008ab8 <log_backend_enable+0x40>)
60008a88:	23de      	movs	r3, #222	; 0xde
60008a8a:	480c      	ldr	r0, [pc, #48]	; (60008abc <log_backend_enable+0x44>)
60008a8c:	4a0c      	ldr	r2, [pc, #48]	; (60008ac0 <log_backend_enable+0x48>)
60008a8e:	f00f fa38 	bl	60017f02 <assert_print>
60008a92:	21de      	movs	r1, #222	; 0xde
60008a94:	480a      	ldr	r0, [pc, #40]	; (60008ac0 <log_backend_enable+0x48>)
60008a96:	f00f fa2d 	bl	60017ef4 <assert_post_action>
	backend->cb->id = id;
60008a9a:	6844      	ldr	r4, [r0, #4]
60008a9c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
60008a9e:	6843      	ldr	r3, [r0, #4]
60008aa0:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
60008aa2:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
60008aa4:	6843      	ldr	r3, [r0, #4]
60008aa6:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
60008aa8:	6843      	ldr	r3, [r0, #4]
60008aaa:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
60008aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
60008ab0:	f7ff bd86 	b.w	600085c0 <z_log_notify_backend_enabled>
60008ab4:	6001a424 	.word	0x6001a424
60008ab8:	6001c917 	.word	0x6001c917
60008abc:	6001c3d7 	.word	0x6001c3d7
60008ac0:	6001c8df 	.word	0x6001c8df

60008ac4 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
60008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
60008ac8:	f3c1 44cb 	ubfx	r4, r1, #19, #12
60008acc:	b08f      	sub	sp, #60	; 0x3c
60008ace:	f3c1 2649 	ubfx	r6, r1, #9, #10
60008ad2:	460d      	mov	r5, r1
60008ad4:	4690      	mov	r8, r2
60008ad6:	4699      	mov	r9, r3
60008ad8:	3417      	adds	r4, #23
60008ada:	9005      	str	r0, [sp, #20]

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
60008adc:	2e00      	cmp	r6, #0
60008ade:	d03d      	beq.n	60008b5c <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
60008ae0:	f04f 0b04 	mov.w	fp, #4
60008ae4:	af09      	add	r7, sp, #36	; 0x24
60008ae6:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
60008aea:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
60008aec:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
60008aee:	ab0b      	add	r3, sp, #44	; 0x2c
60008af0:	4640      	mov	r0, r8
60008af2:	f8cd b008 	str.w	fp, [sp, #8]
60008af6:	9701      	str	r7, [sp, #4]
60008af8:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
60008afc:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
60008afe:	9607      	str	r6, [sp, #28]
	struct z_cbprintf_buf_desc buf_desc = {
60008b00:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
60008b04:	f7fd fe8e 	bl	60006824 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
60008b08:	f3c0 0309 	ubfx	r3, r0, #0, #10
60008b0c:	1918      	adds	r0, r3, r4
60008b0e:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
60008b10:	f363 2552 	bfi	r5, r3, #9, #10
60008b14:	9306      	str	r3, [sp, #24]
60008b16:	f020 0007 	bic.w	r0, r0, #7
60008b1a:	0880      	lsrs	r0, r0, #2
60008b1c:	f7ff fde0 	bl	600086e0 <z_log_msg_alloc>
		if (msg) {
60008b20:	4604      	mov	r4, r0
60008b22:	b308      	cbz	r0, 60008b68 <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
60008b24:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
60008b26:	3010      	adds	r0, #16
60008b28:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
60008b2a:	9907      	ldr	r1, [sp, #28]
	struct z_cbprintf_buf_desc buf_desc = {
60008b2c:	900b      	str	r0, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
60008b2e:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
60008b30:	930c      	str	r3, [sp, #48]	; 0x30
	return cbprintf_package_convert(in_packaged, in_len,
60008b32:	ab0b      	add	r3, sp, #44	; 0x2c
	struct z_cbprintf_buf_desc buf_desc = {
60008b34:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
60008b36:	f8cd a000 	str.w	sl, [sp]
60008b3a:	4a11      	ldr	r2, [pc, #68]	; (60008b80 <z_impl_z_log_msg_static_create+0xbc>)
60008b3c:	e9cd 7b01 	strd	r7, fp, [sp, #4]
60008b40:	f7fd fe70 	bl	60006824 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
60008b44:	2800      	cmp	r0, #0
60008b46:	da0f      	bge.n	60008b68 <z_impl_z_log_msg_static_create+0xa4>
60008b48:	490e      	ldr	r1, [pc, #56]	; (60008b84 <z_impl_z_log_msg_static_create+0xc0>)
60008b4a:	2349      	movs	r3, #73	; 0x49
60008b4c:	480e      	ldr	r0, [pc, #56]	; (60008b88 <z_impl_z_log_msg_static_create+0xc4>)
60008b4e:	4a0f      	ldr	r2, [pc, #60]	; (60008b8c <z_impl_z_log_msg_static_create+0xc8>)
60008b50:	f00f f9d7 	bl	60017f02 <assert_print>
60008b54:	2149      	movs	r1, #73	; 0x49
60008b56:	480d      	ldr	r0, [pc, #52]	; (60008b8c <z_impl_z_log_msg_static_create+0xc8>)
60008b58:	f00f f9cc 	bl	60017ef4 <assert_post_action>
60008b5c:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
60008b60:	0880      	lsrs	r0, r0, #2
60008b62:	f7ff fdbd 	bl	600086e0 <z_log_msg_alloc>
60008b66:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
60008b68:	f366 2552 	bfi	r5, r6, #9, #10
60008b6c:	464b      	mov	r3, r9
60008b6e:	9905      	ldr	r1, [sp, #20]
60008b70:	4620      	mov	r0, r4
60008b72:	462a      	mov	r2, r5
}
60008b74:	b00f      	add	sp, #60	; 0x3c
60008b76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
60008b7a:	f00f bb2a 	b.w	600181d2 <z_log_msg_finalize>
60008b7e:	bf00      	nop
60008b80:	600181a7 	.word	0x600181a7
60008b84:	6001c964 	.word	0x6001c964
60008b88:	6001c3d7 	.word	0x6001c3d7
60008b8c:	6001c937 	.word	0x6001c937

60008b90 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
60008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60008b94:	b087      	sub	sp, #28
60008b96:	4604      	mov	r4, r0
60008b98:	460f      	mov	r7, r1
60008b9a:	4693      	mov	fp, r2
60008b9c:	4698      	mov	r8, r3
60008b9e:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
60008ba2:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
60008ba6:	b1ae      	cbz	r6, 60008bd4 <z_impl_z_log_msg_runtime_vcreate+0x44>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
60008ba8:	2110      	movs	r1, #16
60008baa:	4633      	mov	r3, r6
60008bac:	4652      	mov	r2, sl
60008bae:	2000      	movs	r0, #0
60008bb0:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
60008bb4:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
60008bb8:	f7fd fc16 	bl	600063e8 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
60008bbc:	1e01      	subs	r1, r0, #0
60008bbe:	da0a      	bge.n	60008bd6 <z_impl_z_log_msg_runtime_vcreate+0x46>
60008bc0:	4920      	ldr	r1, [pc, #128]	; (60008c44 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
60008bc2:	2368      	movs	r3, #104	; 0x68
60008bc4:	4a20      	ldr	r2, [pc, #128]	; (60008c48 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
60008bc6:	4821      	ldr	r0, [pc, #132]	; (60008c4c <z_impl_z_log_msg_runtime_vcreate+0xbc>)
60008bc8:	f00f f99b 	bl	60017f02 <assert_print>
60008bcc:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
60008bce:	481e      	ldr	r0, [pc, #120]	; (60008c48 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
60008bd0:	f00f f990 	bl	60017ef4 <assert_post_action>
		plen = 0;
60008bd4:	4631      	mov	r1, r6
	struct log_msg_desc desc =
60008bd6:	f004 0407 	and.w	r4, r4, #7
60008bda:	f00b 0b07 	and.w	fp, fp, #7
60008bde:	4b1c      	ldr	r3, [pc, #112]	; (60008c50 <z_impl_z_log_msg_runtime_vcreate+0xc0>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
60008be0:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
60008be4:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
60008be6:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
60008be8:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
60008bec:	4408      	add	r0, r1
	struct log_msg_desc desc =
60008bee:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
60008bf2:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
60008bf6:	431c      	orrs	r4, r3
60008bf8:	4b16      	ldr	r3, [pc, #88]	; (60008c54 <z_impl_z_log_msg_runtime_vcreate+0xc4>)
		msg = z_log_msg_alloc(msg_wlen);
60008bfa:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
60008bfc:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
60008c00:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
60008c02:	f7ff fd6d 	bl	600086e0 <z_log_msg_alloc>
			pkg = msg ? msg->data : NULL;
60008c06:	4605      	mov	r5, r0
60008c08:	b190      	cbz	r0, 60008c30 <z_impl_z_log_msg_runtime_vcreate+0xa0>
	if (pkg && fmt) {
60008c0a:	b18e      	cbz	r6, 60008c30 <z_impl_z_log_msg_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
60008c0c:	4633      	mov	r3, r6
60008c0e:	4652      	mov	r2, sl
60008c10:	9903      	ldr	r1, [sp, #12]
60008c12:	3010      	adds	r0, #16
60008c14:	f8cd 9000 	str.w	r9, [sp]
60008c18:	f7fd fbe6 	bl	600063e8 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
60008c1c:	2800      	cmp	r0, #0
60008c1e:	da07      	bge.n	60008c30 <z_impl_z_log_msg_runtime_vcreate+0xa0>
60008c20:	4908      	ldr	r1, [pc, #32]	; (60008c44 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
60008c22:	2382      	movs	r3, #130	; 0x82
60008c24:	4a08      	ldr	r2, [pc, #32]	; (60008c48 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
60008c26:	4809      	ldr	r0, [pc, #36]	; (60008c4c <z_impl_z_log_msg_runtime_vcreate+0xbc>)
60008c28:	f00f f96b 	bl	60017f02 <assert_print>
60008c2c:	2182      	movs	r1, #130	; 0x82
60008c2e:	e7ce      	b.n	60008bce <z_impl_z_log_msg_runtime_vcreate+0x3e>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
60008c30:	4643      	mov	r3, r8
60008c32:	4622      	mov	r2, r4
60008c34:	4639      	mov	r1, r7
60008c36:	4628      	mov	r0, r5
	}
}
60008c38:	b007      	add	sp, #28
60008c3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
60008c3e:	f00f bac8 	b.w	600181d2 <z_log_msg_finalize>
60008c42:	bf00      	nop
60008c44:	6001c963 	.word	0x6001c963
60008c48:	6001c937 	.word	0x6001c937
60008c4c:	6001c3d7 	.word	0x6001c3d7
60008c50:	0007fe00 	.word	0x0007fe00
60008c54:	7ff80000 	.word	0x7ff80000

60008c58 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
60008c58:	b40e      	push	{r1, r2, r3}
60008c5a:	b503      	push	{r0, r1, lr}
60008c5c:	ab03      	add	r3, sp, #12
60008c5e:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
60008c60:	4805      	ldr	r0, [pc, #20]	; (60008c78 <print_formatted+0x20>)
{
60008c62:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
60008c66:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
60008c68:	f00f fada 	bl	60018220 <cbvprintf>
	va_end(args);

	return length;
}
60008c6c:	b002      	add	sp, #8
60008c6e:	f85d eb04 	ldr.w	lr, [sp], #4
60008c72:	b003      	add	sp, #12
60008c74:	4770      	bx	lr
60008c76:	bf00      	nop
60008c78:	60008c99 	.word	0x60008c99

60008c7c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
60008c7c:	06ca      	lsls	r2, r1, #27
60008c7e:	d405      	bmi.n	60008c8c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
60008c80:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
60008c82:	bf4c      	ite	mi
60008c84:	4902      	ldrmi	r1, [pc, #8]	; (60008c90 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
60008c86:	4903      	ldrpl	r1, [pc, #12]	; (60008c94 <newline_print+0x18>)
60008c88:	f7ff bfe6 	b.w	60008c58 <print_formatted>
	}
}
60008c8c:	4770      	bx	lr
60008c8e:	bf00      	nop
60008c90:	6001e924 	.word	0x6001e924
60008c94:	6001c96d 	.word	0x6001c96d

60008c98 <out_func>:
{
60008c98:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
60008c9a:	684b      	ldr	r3, [r1, #4]
{
60008c9c:	4605      	mov	r5, r0
60008c9e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
60008ca0:	681a      	ldr	r2, [r3, #0]
60008ca2:	68cb      	ldr	r3, [r1, #12]
60008ca4:	429a      	cmp	r2, r3
60008ca6:	d102      	bne.n	60008cae <out_func+0x16>
		log_output_flush(out_ctx);
60008ca8:	4608      	mov	r0, r1
60008caa:	f00f fac0 	bl	6001822e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
60008cae:	6863      	ldr	r3, [r4, #4]
60008cb0:	f3bf 8f5b 	dmb	ish
60008cb4:	e853 2f00 	ldrex	r2, [r3]
60008cb8:	1c51      	adds	r1, r2, #1
60008cba:	e843 1000 	strex	r0, r1, [r3]
60008cbe:	2800      	cmp	r0, #0
60008cc0:	d1f8      	bne.n	60008cb4 <out_func+0x1c>
60008cc2:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
60008cc6:	68a3      	ldr	r3, [r4, #8]
60008cc8:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
60008cca:	6863      	ldr	r3, [r4, #4]
60008ccc:	681a      	ldr	r2, [r3, #0]
60008cce:	68e3      	ldr	r3, [r4, #12]
60008cd0:	429a      	cmp	r2, r3
60008cd2:	d909      	bls.n	60008ce8 <out_func+0x50>
60008cd4:	4905      	ldr	r1, [pc, #20]	; (60008cec <out_func+0x54>)
60008cd6:	2379      	movs	r3, #121	; 0x79
60008cd8:	4805      	ldr	r0, [pc, #20]	; (60008cf0 <out_func+0x58>)
60008cda:	4a06      	ldr	r2, [pc, #24]	; (60008cf4 <out_func+0x5c>)
60008cdc:	f00f f911 	bl	60017f02 <assert_print>
60008ce0:	2179      	movs	r1, #121	; 0x79
60008ce2:	4804      	ldr	r0, [pc, #16]	; (60008cf4 <out_func+0x5c>)
60008ce4:	f00f f906 	bl	60017ef4 <assert_post_action>
}
60008ce8:	2000      	movs	r0, #0
60008cea:	bd38      	pop	{r3, r4, r5, pc}
60008cec:	6001c99f 	.word	0x6001c99f
60008cf0:	6001c3d7 	.word	0x6001c3d7
60008cf4:	6001c970 	.word	0x6001c970

60008cf8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
60008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60008cfc:	b089      	sub	sp, #36	; 0x24
60008cfe:	469a      	mov	sl, r3
60008d00:	4604      	mov	r4, r0
60008d02:	460d      	mov	r5, r1
60008d04:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
60008d08:	9e16      	ldr	r6, [sp, #88]	; 0x58
60008d0a:	9206      	str	r2, [sp, #24]
60008d0c:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
60008d10:	9305      	str	r3, [sp, #20]
60008d12:	9b15      	ldr	r3, [sp, #84]	; 0x54
60008d14:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
60008d16:	f1bb 0f00 	cmp.w	fp, #0
60008d1a:	f000 8085 	beq.w	60008e28 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
60008d1e:	f006 0308 	and.w	r3, r6, #8
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
60008d22:	f006 0902 	and.w	r9, r6, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
60008d26:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
60008d28:	f00f fa3b 	bl	600181a2 <z_log_get_tag>
	if (tag) {
60008d2c:	4602      	mov	r2, r0
60008d2e:	2800      	cmp	r0, #0
60008d30:	d049      	beq.n	60008dc6 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
60008d32:	498d      	ldr	r1, [pc, #564]	; (60008f68 <log_output_process+0x270>)
60008d34:	4620      	mov	r0, r4
60008d36:	f7ff ff8f 	bl	60008c58 <print_formatted>
60008d3a:	4680      	mov	r8, r0
	if (stamp) {
60008d3c:	f1b9 0f00 	cmp.w	r9, #0
60008d40:	d008      	beq.n	60008d54 <log_output_process+0x5c>
	if (!format) {
60008d42:	f016 0f44 	tst.w	r6, #68	; 0x44
60008d46:	d140      	bne.n	60008dca <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
60008d48:	462a      	mov	r2, r5
60008d4a:	4988      	ldr	r1, [pc, #544]	; (60008f6c <log_output_process+0x274>)
60008d4c:	4620      	mov	r0, r4
60008d4e:	f7ff ff83 	bl	60008c58 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
60008d52:	4480      	add	r8, r0
	if (color) {
60008d54:	f006 0301 	and.w	r3, r6, #1
60008d58:	b153      	cbz	r3, 60008d70 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
60008d5a:	4b85      	ldr	r3, [pc, #532]	; (60008f70 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
60008d5c:	4620      	mov	r0, r4
60008d5e:	4985      	ldr	r1, [pc, #532]	; (60008f74 <log_output_process+0x27c>)
		const char *log_color = start && (colors[level] != NULL) ?
60008d60:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
60008d64:	4b84      	ldr	r3, [pc, #528]	; (60008f78 <log_output_process+0x280>)
60008d66:	2a00      	cmp	r2, #0
60008d68:	bf08      	it	eq
60008d6a:	461a      	moveq	r2, r3
60008d6c:	f7ff ff74 	bl	60008c58 <print_formatted>
	if (level_on) {
60008d70:	f006 0308 	and.w	r3, r6, #8
60008d74:	2b00      	cmp	r3, #0
60008d76:	d054      	beq.n	60008e22 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
60008d78:	4b80      	ldr	r3, [pc, #512]	; (60008f7c <log_output_process+0x284>)
60008d7a:	4620      	mov	r0, r4
60008d7c:	4980      	ldr	r1, [pc, #512]	; (60008f80 <log_output_process+0x288>)
60008d7e:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
60008d82:	f7ff ff69 	bl	60008c58 <print_formatted>
60008d86:	4605      	mov	r5, r0
	if (domain) {
60008d88:	9b06      	ldr	r3, [sp, #24]
60008d8a:	b12b      	cbz	r3, 60008d98 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
60008d8c:	461a      	mov	r2, r3
60008d8e:	497d      	ldr	r1, [pc, #500]	; (60008f84 <log_output_process+0x28c>)
60008d90:	4620      	mov	r0, r4
60008d92:	f7ff ff61 	bl	60008c58 <print_formatted>
60008d96:	4405      	add	r5, r0
	if (source) {
60008d98:	f1ba 0f00 	cmp.w	sl, #0
60008d9c:	d005      	beq.n	60008daa <log_output_process+0xb2>
		total += print_formatted(output,
60008d9e:	4652      	mov	r2, sl
60008da0:	4979      	ldr	r1, [pc, #484]	; (60008f88 <log_output_process+0x290>)
60008da2:	4620      	mov	r0, r4
60008da4:	f7ff ff58 	bl	60008c58 <print_formatted>
60008da8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
60008daa:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
60008dac:	2f00      	cmp	r7, #0
60008dae:	d149      	bne.n	60008e44 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
60008db0:	9b04      	ldr	r3, [sp, #16]
60008db2:	2b00      	cmp	r3, #0
60008db4:	d160      	bne.n	60008e78 <log_output_process+0x180>
	if (color) {
60008db6:	07f3      	lsls	r3, r6, #31
60008db8:	f100 80cf 	bmi.w	60008f5a <log_output_process+0x262>
	newline_print(output, flags);
60008dbc:	4631      	mov	r1, r6
60008dbe:	4620      	mov	r0, r4
60008dc0:	f7ff ff5c 	bl	60008c7c <newline_print>
}
60008dc4:	e0c3      	b.n	60008f4e <log_output_process+0x256>
	uint32_t length = 0U;
60008dc6:	4680      	mov	r8, r0
60008dc8:	e7b8      	b.n	60008d3c <log_output_process+0x44>
	} else if (freq != 0U) {
60008dca:	4b70      	ldr	r3, [pc, #448]	; (60008f8c <log_output_process+0x294>)
60008dcc:	6818      	ldr	r0, [r3, #0]
60008dce:	2800      	cmp	r0, #0
60008dd0:	d0bf      	beq.n	60008d52 <log_output_process+0x5a>
		timestamp /= timestamp_div;
60008dd2:	4b6f      	ldr	r3, [pc, #444]	; (60008f90 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
60008dd4:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
60008dd8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
		mins = seconds / 60U;
60008ddc:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		timestamp /= timestamp_div;
60008de0:	681b      	ldr	r3, [r3, #0]
60008de2:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
60008de6:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
60008dea:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
60008dee:	fb09 f505 	mul.w	r5, r9, r5
60008df2:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
60008df6:	fbb5 fef0 	udiv	lr, r5, r0
60008dfa:	fb01 3112 	mls	r1, r1, r2, r3
60008dfe:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
60008e02:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
60008e06:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
60008e0a:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
60008e0e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
60008e12:	9100      	str	r1, [sp, #0]
60008e14:	4620      	mov	r0, r4
60008e16:	495f      	ldr	r1, [pc, #380]	; (60008f94 <log_output_process+0x29c>)
60008e18:	e9cd e501 	strd	lr, r5, [sp, #4]
60008e1c:	f7ff ff1c 	bl	60008c58 <print_formatted>
60008e20:	e797      	b.n	60008d52 <log_output_process+0x5a>
	int total = 0;
60008e22:	f006 0508 	and.w	r5, r6, #8
60008e26:	e7af      	b.n	60008d88 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
60008e28:	f1ba 0f01 	cmp.w	sl, #1
60008e2c:	d106      	bne.n	60008e3c <log_output_process+0x144>
	if (package) {
60008e2e:	b9ef      	cbnz	r7, 60008e6c <log_output_process+0x174>
	if (data_len) {
60008e30:	9b04      	ldr	r3, [sp, #16]
60008e32:	2b00      	cmp	r3, #0
60008e34:	f000 808b 	beq.w	60008f4e <log_output_process+0x256>
		prefix_offset = 0;
60008e38:	2500      	movs	r5, #0
60008e3a:	e01d      	b.n	60008e78 <log_output_process+0x180>
	if (package) {
60008e3c:	2f00      	cmp	r7, #0
60008e3e:	d0f7      	beq.n	60008e30 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
60008e40:	4855      	ldr	r0, [pc, #340]	; (60008f98 <log_output_process+0x2a0>)
60008e42:	e014      	b.n	60008e6e <log_output_process+0x176>
		cb = out_func;
60008e44:	4855      	ldr	r0, [pc, #340]	; (60008f9c <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
60008e46:	463b      	mov	r3, r7
60008e48:	4622      	mov	r2, r4
60008e4a:	4955      	ldr	r1, [pc, #340]	; (60008fa0 <log_output_process+0x2a8>)
60008e4c:	f00e fd41 	bl	600178d2 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
60008e50:	2800      	cmp	r0, #0
60008e52:	da0e      	bge.n	60008e72 <log_output_process+0x17a>
60008e54:	4953      	ldr	r1, [pc, #332]	; (60008fa4 <log_output_process+0x2ac>)
60008e56:	f44f 7300 	mov.w	r3, #512	; 0x200
60008e5a:	4853      	ldr	r0, [pc, #332]	; (60008fa8 <log_output_process+0x2b0>)
60008e5c:	4a53      	ldr	r2, [pc, #332]	; (60008fac <log_output_process+0x2b4>)
60008e5e:	f00f f850 	bl	60017f02 <assert_print>
60008e62:	f44f 7100 	mov.w	r1, #512	; 0x200
60008e66:	4851      	ldr	r0, [pc, #324]	; (60008fac <log_output_process+0x2b4>)
60008e68:	f00f f844 	bl	60017ef4 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
60008e6c:	484b      	ldr	r0, [pc, #300]	; (60008f9c <log_output_process+0x2a4>)
		prefix_offset = 0;
60008e6e:	465d      	mov	r5, fp
60008e70:	e7e9      	b.n	60008e46 <log_output_process+0x14e>
	if (data_len) {
60008e72:	9b04      	ldr	r3, [sp, #16]
60008e74:	2b00      	cmp	r3, #0
60008e76:	d066      	beq.n	60008f46 <log_output_process+0x24e>
		print_formatted(output, " ");
60008e78:	f8df 8134 	ldr.w	r8, [pc, #308]	; 60008fb0 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
60008e7c:	f8df 9134 	ldr.w	r9, [pc, #308]	; 60008fb4 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
60008e80:	9f04      	ldr	r7, [sp, #16]
	for (int i = 0; i < prefix_offset; i++) {
60008e82:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
60008e86:	4631      	mov	r1, r6
60008e88:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
60008e8a:	2f10      	cmp	r7, #16
60008e8c:	bf28      	it	cs
60008e8e:	2710      	movcs	r7, #16
	newline_print(output, flags);
60008e90:	f7ff fef4 	bl	60008c7c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
60008e94:	4555      	cmp	r5, sl
60008e96:	dc43      	bgt.n	60008f20 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
60008e98:	9b05      	ldr	r3, [sp, #20]
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
60008e9a:	f04f 0a01 	mov.w	sl, #1
			print_formatted(output, "%02x ", data[i]);
60008e9e:	4649      	mov	r1, r9
60008ea0:	4620      	mov	r0, r4
60008ea2:	781a      	ldrb	r2, [r3, #0]
60008ea4:	f7ff fed8 	bl	60008c58 <print_formatted>
		if (i > 0 && !(i % 8)) {
60008ea8:	f01a 0f07 	tst.w	sl, #7
60008eac:	d103      	bne.n	60008eb6 <log_output_process+0x1be>
			print_formatted(output, " ");
60008eae:	4641      	mov	r1, r8
60008eb0:	4620      	mov	r0, r4
60008eb2:	f7ff fed1 	bl	60008c58 <print_formatted>
		if (i < length) {
60008eb6:	4557      	cmp	r7, sl
60008eb8:	d939      	bls.n	60008f2e <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
60008eba:	9b05      	ldr	r3, [sp, #20]
60008ebc:	4649      	mov	r1, r9
60008ebe:	4620      	mov	r0, r4
60008ec0:	f813 200a 	ldrb.w	r2, [r3, sl]
60008ec4:	f7ff fec8 	bl	60008c58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
60008ec8:	f10a 0a01 	add.w	sl, sl, #1
60008ecc:	f1ba 0f10 	cmp.w	sl, #16
60008ed0:	d1ea      	bne.n	60008ea8 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
60008ed2:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
60008ed6:	4938      	ldr	r1, [pc, #224]	; (60008fb8 <log_output_process+0x2c0>)
60008ed8:	4620      	mov	r0, r4
60008eda:	f7ff febd 	bl	60008c58 <print_formatted>
		if (i < length) {
60008ede:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
60008ee0:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
60008ee2:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
60008ee4:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
60008ee6:	4b35      	ldr	r3, [pc, #212]	; (60008fbc <log_output_process+0x2c4>)
60008ee8:	5c99      	ldrb	r1, [r3, r2]
60008eea:	f011 0f97 	tst.w	r1, #151	; 0x97
60008eee:	4934      	ldr	r1, [pc, #208]	; (60008fc0 <log_output_process+0x2c8>)
60008ef0:	bf08      	it	eq
60008ef2:	222e      	moveq	r2, #46	; 0x2e
60008ef4:	f7ff feb0 	bl	60008c58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
60008ef8:	f10a 0a01 	add.w	sl, sl, #1
60008efc:	f1ba 0f10 	cmp.w	sl, #16
60008f00:	d01a      	beq.n	60008f38 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
60008f02:	f01a 0f07 	tst.w	sl, #7
60008f06:	d103      	bne.n	60008f10 <log_output_process+0x218>
			print_formatted(output, " ");
60008f08:	4641      	mov	r1, r8
60008f0a:	4620      	mov	r0, r4
60008f0c:	f7ff fea4 	bl	60008c58 <print_formatted>
		if (i < length) {
60008f10:	4557      	cmp	r7, sl
60008f12:	4652      	mov	r2, sl
60008f14:	d8e4      	bhi.n	60008ee0 <log_output_process+0x1e8>
			print_formatted(output, " ");
60008f16:	4641      	mov	r1, r8
60008f18:	4620      	mov	r0, r4
60008f1a:	f7ff fe9d 	bl	60008c58 <print_formatted>
60008f1e:	e7eb      	b.n	60008ef8 <log_output_process+0x200>
		print_formatted(output, " ");
60008f20:	4641      	mov	r1, r8
60008f22:	4620      	mov	r0, r4
	for (int i = 0; i < prefix_offset; i++) {
60008f24:	f10a 0a01 	add.w	sl, sl, #1
		print_formatted(output, " ");
60008f28:	f7ff fe96 	bl	60008c58 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
60008f2c:	e7b2      	b.n	60008e94 <log_output_process+0x19c>
			print_formatted(output, "   ");
60008f2e:	4925      	ldr	r1, [pc, #148]	; (60008fc4 <log_output_process+0x2cc>)
60008f30:	4620      	mov	r0, r4
60008f32:	f7ff fe91 	bl	60008c58 <print_formatted>
60008f36:	e7c7      	b.n	60008ec8 <log_output_process+0x1d0>
		data += length;
60008f38:	9b05      	ldr	r3, [sp, #20]
60008f3a:	443b      	add	r3, r7
60008f3c:	9305      	str	r3, [sp, #20]
	} while (len);
60008f3e:	9b04      	ldr	r3, [sp, #16]
60008f40:	1bdb      	subs	r3, r3, r7
60008f42:	9304      	str	r3, [sp, #16]
60008f44:	d19c      	bne.n	60008e80 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
60008f46:	f1bb 0f00 	cmp.w	fp, #0
60008f4a:	f47f af34 	bne.w	60008db6 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
60008f4e:	4620      	mov	r0, r4
}
60008f50:	b009      	add	sp, #36	; 0x24
60008f52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
60008f56:	f00f b96a 	b.w	6001822e <log_output_flush>
		print_formatted(output, "%s", log_color);
60008f5a:	4a07      	ldr	r2, [pc, #28]	; (60008f78 <log_output_process+0x280>)
60008f5c:	4620      	mov	r0, r4
60008f5e:	4905      	ldr	r1, [pc, #20]	; (60008f74 <log_output_process+0x27c>)
60008f60:	f7ff fe7a 	bl	60008c58 <print_formatted>
}
60008f64:	e72a      	b.n	60008dbc <log_output_process+0xc4>
60008f66:	bf00      	nop
60008f68:	6001c9d4 	.word	0x6001c9d4
60008f6c:	6001c9d8 	.word	0x6001c9d8
60008f70:	6001a5bc 	.word	0x6001a5bc
60008f74:	6001c9fd 	.word	0x6001c9fd
60008f78:	6001c9cf 	.word	0x6001c9cf
60008f7c:	6001a5d0 	.word	0x6001a5d0
60008f80:	6001ca00 	.word	0x6001ca00
60008f84:	6001ca06 	.word	0x6001ca06
60008f88:	6001ca0a 	.word	0x6001ca0a
60008f8c:	20204804 	.word	0x20204804
60008f90:	20204800 	.word	0x20204800
60008f94:	6001c9e1 	.word	0x6001c9e1
60008f98:	60018249 	.word	0x60018249
60008f9c:	60008c99 	.word	0x60008c99
60008fa0:	60018221 	.word	0x60018221
60008fa4:	6001ca0f 	.word	0x6001ca0f
60008fa8:	6001c3d7 	.word	0x6001c3d7
60008fac:	6001c970 	.word	0x6001c970
60008fb0:	6001ca20 	.word	0x6001ca20
60008fb4:	6001ca18 	.word	0x6001ca18
60008fb8:	6001ca22 	.word	0x6001ca22
60008fbc:	6001be35 	.word	0x6001be35
60008fc0:	6001ca24 	.word	0x6001ca24
60008fc4:	6001ca1e 	.word	0x6001ca1e

60008fc8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
60008fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
60008fcc:	880f      	ldrh	r7, [r1, #0]
60008fce:	b086      	sub	sp, #24
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
60008fd0:	684b      	ldr	r3, [r1, #4]
60008fd2:	4605      	mov	r5, r0
60008fd4:	460c      	mov	r4, r1
60008fd6:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
60008fd8:	688e      	ldr	r6, [r1, #8]
	return msg->hdr.desc.level;
60008fda:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
60008fde:	b15b      	cbz	r3, 60008ff8 <log_output_msg_process+0x30>
60008fe0:	4a14      	ldr	r2, [pc, #80]	; (60009034 <log_output_msg_process+0x6c>)
60008fe2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
60008fe4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
60008fe8:	2900      	cmp	r1, #0
60008fea:	db20      	blt.n	6000902e <log_output_msg_process+0x66>
	return msg->hdr.desc.domain;
60008fec:	7820      	ldrb	r0, [r4, #0]
60008fee:	f3c0 00c2 	ubfx	r0, r0, #3, #3
60008ff2:	f7ff fd33 	bl	60008a5c <log_source_name_get>
60008ff6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
60008ff8:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
60008ffa:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
60008ffc:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
60009000:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
60009004:	9700      	str	r7, [sp, #0]
	*len = msg->hdr.desc.package_len;
60009006:	f3c2 2249 	ubfx	r2, r2, #9, #10
6000900a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
6000900c:	eb01 0402 	add.w	r4, r1, r2
60009010:	f04f 0200 	mov.w	r2, #0
60009014:	bf08      	it	eq
60009016:	2100      	moveq	r1, #0
60009018:	e9cd 0803 	strd	r0, r8, [sp, #12]
6000901c:	e9cd 1401 	strd	r1, r4, [sp, #4]
60009020:	4628      	mov	r0, r5
60009022:	4631      	mov	r1, r6
60009024:	f7ff fe68 	bl	60008cf8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
60009028:	b006      	add	sp, #24
6000902a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
6000902e:	2300      	movs	r3, #0
60009030:	e7e2      	b.n	60008ff8 <log_output_msg_process+0x30>
60009032:	bf00      	nop
60009034:	6001a38c 	.word	0x6001a38c

60009038 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
60009038:	f242 730f 	movw	r3, #9999	; 0x270f
6000903c:	4a11      	ldr	r2, [pc, #68]	; (60009084 <log_output_dropped_process+0x4c>)
6000903e:	428b      	cmp	r3, r1
{
60009040:	b573      	push	{r0, r1, r4, r5, r6, lr}
60009042:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
60009044:	bf28      	it	cs
60009046:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
60009048:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
6000904a:	2105      	movs	r1, #5
6000904c:	4668      	mov	r0, sp
6000904e:	f00e fcb9 	bl	600179c4 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
60009052:	6863      	ldr	r3, [r4, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
60009054:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
60009056:	220b      	movs	r2, #11
60009058:	4628      	mov	r0, r5
6000905a:	685b      	ldr	r3, [r3, #4]
6000905c:	490a      	ldr	r1, [pc, #40]	; (60009088 <log_output_dropped_process+0x50>)
6000905e:	f00f f8d2 	bl	60018206 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
60009062:	6863      	ldr	r3, [r4, #4]
60009064:	4632      	mov	r2, r6
60009066:	4669      	mov	r1, sp
60009068:	4628      	mov	r0, r5
6000906a:	685b      	ldr	r3, [r3, #4]
6000906c:	f00f f8cb 	bl	60018206 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
60009070:	6863      	ldr	r3, [r4, #4]
60009072:	221b      	movs	r2, #27
60009074:	4905      	ldr	r1, [pc, #20]	; (6000908c <log_output_dropped_process+0x54>)
60009076:	685b      	ldr	r3, [r3, #4]
60009078:	4628      	mov	r0, r5
6000907a:	f00f f8c4 	bl	60018206 <buffer_write>
		     output->control_block->ctx);
}
6000907e:	b002      	add	sp, #8
60009080:	bd70      	pop	{r4, r5, r6, pc}
60009082:	bf00      	nop
60009084:	6001e7a3 	.word	0x6001e7a3
60009088:	6001ca43 	.word	0x6001ca43
6000908c:	6001ca27 	.word	0x6001ca27

60009090 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
60009090:	2100      	movs	r1, #0
60009092:	2301      	movs	r3, #1
60009094:	4a06      	ldr	r2, [pc, #24]	; (600090b0 <log_output_timestamp_freq_set+0x20>)
60009096:	4290      	cmp	r0, r2
60009098:	d806      	bhi.n	600090a8 <log_output_timestamp_freq_set+0x18>
6000909a:	4a06      	ldr	r2, [pc, #24]	; (600090b4 <log_output_timestamp_freq_set+0x24>)
6000909c:	b901      	cbnz	r1, 600090a0 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
6000909e:	2301      	movs	r3, #1
600090a0:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
600090a2:	4b05      	ldr	r3, [pc, #20]	; (600090b8 <log_output_timestamp_freq_set+0x28>)
600090a4:	6018      	str	r0, [r3, #0]
}
600090a6:	4770      	bx	lr
		frequency /= 2U;
600090a8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
600090aa:	2101      	movs	r1, #1
600090ac:	005b      	lsls	r3, r3, #1
600090ae:	e7f2      	b.n	60009096 <log_output_timestamp_freq_set+0x6>
600090b0:	000f4240 	.word	0x000f4240
600090b4:	20204800 	.word	0x20204800
600090b8:	20204804 	.word	0x20204804

600090bc <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
600090bc:	4b01      	ldr	r3, [pc, #4]	; (600090c4 <format_set+0x8>)
	return 0;
}
600090be:	2000      	movs	r0, #0
	log_format_current = log_type;
600090c0:	6019      	str	r1, [r3, #0]
}
600090c2:	4770      	bx	lr
600090c4:	2020481c 	.word	0x2020481c

600090c8 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
600090c8:	4b02      	ldr	r3, [pc, #8]	; (600090d4 <panic+0xc>)
600090ca:	2201      	movs	r2, #1
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
600090cc:	4802      	ldr	r0, [pc, #8]	; (600090d8 <panic+0x10>)
600090ce:	701a      	strb	r2, [r3, #0]
600090d0:	f00f b8ad 	b.w	6001822e <log_output_flush>
600090d4:	20204e31 	.word	0x20204e31
600090d8:	6001a600 	.word	0x6001a600

600090dc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
600090dc:	4801      	ldr	r0, [pc, #4]	; (600090e4 <dropped+0x8>)
600090de:	f7ff bfab 	b.w	60009038 <log_output_dropped_process>
600090e2:	bf00      	nop
600090e4:	6001a600 	.word	0x6001a600

600090e8 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
600090e8:	4b06      	ldr	r3, [pc, #24]	; (60009104 <process+0x1c>)
{
600090ea:	b510      	push	{r4, lr}
600090ec:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
600090ee:	6818      	ldr	r0, [r3, #0]
600090f0:	f7ff fa50 	bl	60008594 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
600090f4:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
600090f6:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
600090f8:	4621      	mov	r1, r4
600090fa:	4803      	ldr	r0, [pc, #12]	; (60009108 <process+0x20>)
}
600090fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
60009100:	4718      	bx	r3
60009102:	bf00      	nop
60009104:	2020481c 	.word	0x2020481c
60009108:	6001a600 	.word	0x6001a600

6000910c <char_out>:
{
6000910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000910e:	460d      	mov	r5, r1
60009110:	4604      	mov	r4, r0
60009112:	1846      	adds	r6, r0, r1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
60009114:	4f05      	ldr	r7, [pc, #20]	; (6000912c <char_out+0x20>)
		for (size_t i = 0; i < length; i++) {
60009116:	42b4      	cmp	r4, r6
60009118:	d101      	bne.n	6000911e <char_out+0x12>
}
6000911a:	4628      	mov	r0, r5
6000911c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
6000911e:	f814 1b01 	ldrb.w	r1, [r4], #1
60009122:	68bb      	ldr	r3, [r7, #8]
60009124:	4801      	ldr	r0, [pc, #4]	; (6000912c <char_out+0x20>)
60009126:	685b      	ldr	r3, [r3, #4]
60009128:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
6000912a:	e7f4      	b.n	60009116 <char_out+0xa>
6000912c:	60019b6c 	.word	0x60019b6c

60009130 <log_backend_uart_init>:
{
60009130:	b508      	push	{r3, lr}
60009132:	4807      	ldr	r0, [pc, #28]	; (60009150 <log_backend_uart_init+0x20>)
60009134:	f010 fb9d 	bl	60019872 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
60009138:	b948      	cbnz	r0, 6000914e <log_backend_uart_init+0x1e>
6000913a:	4906      	ldr	r1, [pc, #24]	; (60009154 <log_backend_uart_init+0x24>)
6000913c:	2370      	movs	r3, #112	; 0x70
6000913e:	4806      	ldr	r0, [pc, #24]	; (60009158 <log_backend_uart_init+0x28>)
60009140:	4a06      	ldr	r2, [pc, #24]	; (6000915c <log_backend_uart_init+0x2c>)
60009142:	f00e fede 	bl	60017f02 <assert_print>
60009146:	2170      	movs	r1, #112	; 0x70
60009148:	4804      	ldr	r0, [pc, #16]	; (6000915c <log_backend_uart_init+0x2c>)
6000914a:	f00e fed3 	bl	60017ef4 <assert_post_action>
}
6000914e:	bd08      	pop	{r3, pc}
60009150:	60019b6c 	.word	0x60019b6c
60009154:	6001caad 	.word	0x6001caad
60009158:	6001c3d7 	.word	0x6001c3d7
6000915c:	6001ca6f 	.word	0x6001ca6f

60009160 <custom_handler>:
	return -ENOTSUP;
}

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
60009160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60009164:	4605      	mov	r5, r0
60009166:	460e      	mov	r6, r1
60009168:	4617      	mov	r7, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000916a:	4c1a      	ldr	r4, [pc, #104]	; (600091d4 <custom_handler+0x74>)
6000916c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 600091d8 <custom_handler+0x78>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
60009170:	f8df 9068 	ldr.w	r9, [pc, #104]	; 600091dc <custom_handler+0x7c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60009174:	4544      	cmp	r4, r8
60009176:	d928      	bls.n	600091ca <custom_handler+0x6a>
60009178:	4919      	ldr	r1, [pc, #100]	; (600091e0 <custom_handler+0x80>)
6000917a:	f240 53d3 	movw	r3, #1491	; 0x5d3
6000917e:	4a19      	ldr	r2, [pc, #100]	; (600091e4 <custom_handler+0x84>)
60009180:	4819      	ldr	r0, [pc, #100]	; (600091e8 <custom_handler+0x88>)
60009182:	f00e febe 	bl	60017f02 <assert_print>
60009186:	4819      	ldr	r0, [pc, #100]	; (600091ec <custom_handler+0x8c>)
60009188:	f00e febb 	bl	60017f02 <assert_print>
6000918c:	f240 51d3 	movw	r1, #1491	; 0x5d3
60009190:	4814      	ldr	r0, [pc, #80]	; (600091e4 <custom_handler+0x84>)
60009192:	f00e feaf 	bl	60017ef4 <assert_post_action>
		if_descr = cfg_data->interface_descriptor;
60009196:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
60009198:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
6000919c:	429a      	cmp	r2, r3
6000919e:	d312      	bcc.n	600091c6 <custom_handler+0x66>
			continue;
		}

		if (iface->custom_handler == NULL) {
600091a0:	69a3      	ldr	r3, [r4, #24]
600091a2:	b183      	cbz	r3, 600091c6 <custom_handler+0x66>
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
600091a4:	7890      	ldrb	r0, [r2, #2]
600091a6:	7929      	ldrb	r1, [r5, #4]
600091a8:	4288      	cmp	r0, r1
600091aa:	d105      	bne.n	600091b8 <custom_handler+0x58>
			return iface->custom_handler(pSetup, len, data);
600091ac:	463a      	mov	r2, r7
600091ae:	4631      	mov	r1, r6
600091b0:	4628      	mov	r0, r5
			}
		}
	}

	return -ENOTSUP;
}
600091b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
600091b6:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
600091b8:	7952      	ldrb	r2, [r2, #5]
600091ba:	2a01      	cmp	r2, #1
600091bc:	d103      	bne.n	600091c6 <custom_handler+0x66>
				(void)iface->custom_handler(pSetup, len, data);
600091be:	463a      	mov	r2, r7
600091c0:	4631      	mov	r1, r6
600091c2:	4628      	mov	r0, r5
600091c4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600091c6:	3424      	adds	r4, #36	; 0x24
600091c8:	e7d4      	b.n	60009174 <custom_handler+0x14>
600091ca:	d3e4      	bcc.n	60009196 <custom_handler+0x36>
}
600091cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
600091d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
600091d4:	2020360c 	.word	0x2020360c
600091d8:	20203630 	.word	0x20203630
600091dc:	20204820 	.word	0x20204820
600091e0:	6001cb13 	.word	0x6001cb13
600091e4:	6001cae1 	.word	0x6001cae1
600091e8:	6001c3d7 	.word	0x6001c3d7
600091ec:	6001c858 	.word	0x6001c858

600091f0 <class_handler>:
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
600091f0:	4b15      	ldr	r3, [pc, #84]	; (60009248 <class_handler+0x58>)
{
600091f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600091f6:	4f15      	ldr	r7, [pc, #84]	; (6000924c <class_handler+0x5c>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
600091f8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600091fa:	4b15      	ldr	r3, [pc, #84]	; (60009250 <class_handler+0x60>)
600091fc:	42bb      	cmp	r3, r7
600091fe:	d91e      	bls.n	6000923e <class_handler+0x4e>
60009200:	4914      	ldr	r1, [pc, #80]	; (60009254 <class_handler+0x64>)
60009202:	f240 53b6 	movw	r3, #1462	; 0x5b6
60009206:	4a14      	ldr	r2, [pc, #80]	; (60009258 <class_handler+0x68>)
60009208:	4814      	ldr	r0, [pc, #80]	; (6000925c <class_handler+0x6c>)
6000920a:	f00e fe7a 	bl	60017f02 <assert_print>
6000920e:	4814      	ldr	r0, [pc, #80]	; (60009260 <class_handler+0x70>)
60009210:	f00e fe77 	bl	60017f02 <assert_print>
60009214:	f240 51b6 	movw	r1, #1462	; 0x5b6
60009218:	480f      	ldr	r0, [pc, #60]	; (60009258 <class_handler+0x68>)
6000921a:	f00e fe6b 	bl	60017ef4 <assert_post_action>
		if_descr = cfg_data->interface_descriptor;
6000921e:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
60009220:	42b5      	cmp	r5, r6
60009222:	d30a      	bcc.n	6000923a <class_handler+0x4a>
		if (iface->class_handler &&
60009224:	691c      	ldr	r4, [r3, #16]
60009226:	b144      	cbz	r4, 6000923a <class_handler+0x4a>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
60009228:	f895 c002 	ldrb.w	ip, [r5, #2]
6000922c:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
6000922e:	45ac      	cmp	ip, r5
60009230:	d103      	bne.n	6000923a <class_handler+0x4a>
			return iface->class_handler(pSetup, len, data);
60009232:	4623      	mov	r3, r4
}
60009234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return iface->class_handler(pSetup, len, data);
60009238:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000923a:	3324      	adds	r3, #36	; 0x24
6000923c:	e7de      	b.n	600091fc <class_handler+0xc>
6000923e:	d3ee      	bcc.n	6000921e <class_handler+0x2e>
}
60009240:	f06f 0085 	mvn.w	r0, #133	; 0x85
60009244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60009248:	20204820 	.word	0x20204820
6000924c:	20203630 	.word	0x20203630
60009250:	2020360c 	.word	0x2020360c
60009254:	6001cb13 	.word	0x6001cb13
60009258:	6001cae1 	.word	0x6001cae1
6000925c:	6001c3d7 	.word	0x6001c3d7
60009260:	6001c858 	.word	0x6001c858

60009264 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
60009264:	4b02      	ldr	r3, [pc, #8]	; (60009270 <usb_reset_alt_setting+0xc>)
60009266:	2200      	movs	r2, #0
60009268:	601a      	str	r2, [r3, #0]
6000926a:	605a      	str	r2, [r3, #4]
}
6000926c:	4770      	bx	lr
6000926e:	bf00      	nop
60009270:	202048db 	.word	0x202048db

60009274 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
60009274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60009278:	4605      	mov	r5, r0
6000927a:	460e      	mov	r6, r1
6000927c:	4617      	mov	r7, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000927e:	4c12      	ldr	r4, [pc, #72]	; (600092c8 <vendor_handler+0x54>)
60009280:	f8df 8048 	ldr.w	r8, [pc, #72]	; 600092cc <vendor_handler+0x58>
60009284:	4544      	cmp	r4, r8
60009286:	d91a      	bls.n	600092be <vendor_handler+0x4a>
60009288:	4911      	ldr	r1, [pc, #68]	; (600092d0 <vendor_handler+0x5c>)
6000928a:	f240 6303 	movw	r3, #1539	; 0x603
6000928e:	4a11      	ldr	r2, [pc, #68]	; (600092d4 <vendor_handler+0x60>)
60009290:	4811      	ldr	r0, [pc, #68]	; (600092d8 <vendor_handler+0x64>)
60009292:	f00e fe36 	bl	60017f02 <assert_print>
60009296:	4811      	ldr	r0, [pc, #68]	; (600092dc <vendor_handler+0x68>)
60009298:	f00e fe33 	bl	60017f02 <assert_print>
6000929c:	f240 6103 	movw	r1, #1539	; 0x603
600092a0:	480c      	ldr	r0, [pc, #48]	; (600092d4 <vendor_handler+0x60>)
600092a2:	f00e fe27 	bl	60017ef4 <assert_post_action>
		iface = &cfg_data->interface;
		if (iface->vendor_handler) {
600092a6:	6963      	ldr	r3, [r4, #20]
600092a8:	b90b      	cbnz	r3, 600092ae <vendor_handler+0x3a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600092aa:	3424      	adds	r4, #36	; 0x24
600092ac:	e7ea      	b.n	60009284 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
600092ae:	463a      	mov	r2, r7
600092b0:	4631      	mov	r1, r6
600092b2:	4628      	mov	r0, r5
600092b4:	4798      	blx	r3
600092b6:	2800      	cmp	r0, #0
600092b8:	d1f7      	bne.n	600092aa <vendor_handler+0x36>
			}
		}
	}

	return -ENOTSUP;
}
600092ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600092be:	d3f2      	bcc.n	600092a6 <vendor_handler+0x32>
	return -ENOTSUP;
600092c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
600092c4:	e7f9      	b.n	600092ba <vendor_handler+0x46>
600092c6:	bf00      	nop
600092c8:	2020360c 	.word	0x2020360c
600092cc:	20203630 	.word	0x20203630
600092d0:	6001cb13 	.word	0x6001cb13
600092d4:	6001cae1 	.word	0x6001cae1
600092d8:	6001c3d7 	.word	0x6001c3d7
600092dc:	6001c858 	.word	0x6001c858

600092e0 <is_ep_valid>:
	if (USB_EP_GET_IDX(ep) == 0) {
600092e0:	0643      	lsls	r3, r0, #25
{
600092e2:	b570      	push	{r4, r5, r6, lr}
	if (USB_EP_GET_IDX(ep) == 0) {
600092e4:	d020      	beq.n	60009328 <is_ep_valid+0x48>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600092e6:	4b13      	ldr	r3, [pc, #76]	; (60009334 <is_ep_valid+0x54>)
600092e8:	4c13      	ldr	r4, [pc, #76]	; (60009338 <is_ep_valid+0x58>)
600092ea:	42a3      	cmp	r3, r4
600092ec:	d91e      	bls.n	6000932c <is_ep_valid+0x4c>
600092ee:	4913      	ldr	r1, [pc, #76]	; (6000933c <is_ep_valid+0x5c>)
600092f0:	f240 33ef 	movw	r3, #1007	; 0x3ef
600092f4:	4a12      	ldr	r2, [pc, #72]	; (60009340 <is_ep_valid+0x60>)
600092f6:	4813      	ldr	r0, [pc, #76]	; (60009344 <is_ep_valid+0x64>)
600092f8:	f00e fe03 	bl	60017f02 <assert_print>
600092fc:	4812      	ldr	r0, [pc, #72]	; (60009348 <is_ep_valid+0x68>)
600092fe:	f00e fe00 	bl	60017f02 <assert_print>
60009302:	f240 31ef 	movw	r1, #1007	; 0x3ef
60009306:	480e      	ldr	r0, [pc, #56]	; (60009340 <is_ep_valid+0x60>)
60009308:	f00e fdf4 	bl	60017ef4 <assert_post_action>
		ep_data = cfg_data->endpoint;
6000930c:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
6000930e:	2200      	movs	r2, #0
60009310:	7f1e      	ldrb	r6, [r3, #28]
			if (ep_data[n].ep_addr == ep) {
60009312:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
60009314:	b2d5      	uxtb	r5, r2
60009316:	42ae      	cmp	r6, r5
60009318:	d801      	bhi.n	6000931e <is_ep_valid+0x3e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000931a:	3324      	adds	r3, #36	; 0x24
6000931c:	e7e5      	b.n	600092ea <is_ep_valid+0xa>
			if (ep_data[n].ep_addr == ep) {
6000931e:	3201      	adds	r2, #1
60009320:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
60009324:	4285      	cmp	r5, r0
60009326:	d1f5      	bne.n	60009314 <is_ep_valid+0x34>
		return true;
60009328:	2001      	movs	r0, #1
6000932a:	e001      	b.n	60009330 <is_ep_valid+0x50>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000932c:	d3ee      	bcc.n	6000930c <is_ep_valid+0x2c>
	return false;
6000932e:	2000      	movs	r0, #0
}
60009330:	bd70      	pop	{r4, r5, r6, pc}
60009332:	bf00      	nop
60009334:	2020360c 	.word	0x2020360c
60009338:	20203630 	.word	0x20203630
6000933c:	6001cb13 	.word	0x6001cb13
60009340:	6001cae1 	.word	0x6001cae1
60009344:	6001c3d7 	.word	0x6001c3d7
60009348:	6001c858 	.word	0x6001c858

6000934c <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
6000934c:	4809      	ldr	r0, [pc, #36]	; (60009374 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
6000934e:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
60009350:	7803      	ldrb	r3, [r0, #0]
60009352:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
60009356:	330a      	adds	r3, #10
60009358:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
6000935c:	b13b      	cbz	r3, 6000936e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
6000935e:	f100 0208 	add.w	r2, r0, #8
60009362:	f100 0110 	add.w	r1, r0, #16
60009366:	4798      	blx	r3
60009368:	43c0      	mvns	r0, r0
6000936a:	0fc0      	lsrs	r0, r0, #31
}
6000936c:	bd08      	pop	{r3, pc}
		return false;
6000936e:	4618      	mov	r0, r3
60009370:	e7fc      	b.n	6000936c <usb_handle_request.constprop.0+0x20>
60009372:	bf00      	nop
60009374:	20204820 	.word	0x20204820

60009378 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
60009378:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
6000937a:	4b07      	ldr	r3, [pc, #28]	; (60009398 <usb_device_init.part.0+0x20>)
6000937c:	aa04      	add	r2, sp, #16
6000937e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009382:	4806      	ldr	r0, [pc, #24]	; (6000939c <usb_device_init.part.0+0x24>)
60009384:	9305      	str	r3, [sp, #20]
60009386:	2302      	movs	r3, #2
60009388:	9304      	str	r3, [sp, #16]
6000938a:	f00e ff6b 	bl	60018264 <z_log_msg_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
6000938e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60009392:	b007      	add	sp, #28
60009394:	f85d fb04 	ldr.w	pc, [sp], #4
60009398:	6001cb36 	.word	0x6001cb36
6000939c:	6001a414 	.word	0x6001a414

600093a0 <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
600093a0:	b580      	push	{r7, lr}
600093a2:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
600093a4:	b088      	sub	sp, #32
600093a6:	466a      	mov	r2, sp
600093a8:	4b06      	ldr	r3, [pc, #24]	; (600093c4 <get_ep_bm_from_addr.part.0+0x24>)
600093aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
600093ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
600093b2:	2303      	movs	r3, #3
600093b4:	4804      	ldr	r0, [pc, #16]	; (600093c8 <get_ep_bm_from_addr.part.0+0x28>)
600093b6:	f842 3f10 	str.w	r3, [r2, #16]!
600093ba:	f00e ff53 	bl	60018264 <z_log_msg_static_create.constprop.0>
}
600093be:	2000      	movs	r0, #0
600093c0:	46bd      	mov	sp, r7
600093c2:	bd80      	pop	{r7, pc}
600093c4:	6001cb5b 	.word	0x6001cb5b
600093c8:	6001a414 	.word	0x6001a414

600093cc <disable_endpoint>:
{
600093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600093ce:	af00      	add	r7, sp, #0
600093d0:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
600093d2:	f002 fd8b 	bl	6000beec <usb_dc_ep_disable>
	if (ret == -EALREADY) {
600093d6:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
600093da:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
600093dc:	d11a      	bne.n	60009414 <disable_endpoint+0x48>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_addr);
600093de:	466c      	mov	r4, sp
600093e0:	b088      	sub	sp, #32
600093e2:	466a      	mov	r2, sp
600093e4:	4b15      	ldr	r3, [pc, #84]	; (6000943c <disable_endpoint+0x70>)
600093e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
600093ea:	4815      	ldr	r0, [pc, #84]	; (60009440 <disable_endpoint+0x74>)
600093ec:	e9c2 3505 	strd	r3, r5, [r2, #20]
600093f0:	2303      	movs	r3, #3
600093f2:	f842 3f10 	str.w	r3, [r2, #16]!
600093f6:	f00e ff35 	bl	60018264 <z_log_msg_static_create.constprop.0>
600093fa:	46a5      	mov	sp, r4
	ep_bm = get_ep_bm_from_addr(ep_addr);
600093fc:	4628      	mov	r0, r5
	return 0;
600093fe:	2400      	movs	r4, #0
	ep_bm = get_ep_bm_from_addr(ep_addr);
60009400:	f00e ff33 	bl	6001826a <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
60009404:	4a0f      	ldr	r2, [pc, #60]	; (60009444 <disable_endpoint+0x78>)
60009406:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
6000940a:	ea23 0300 	bic.w	r3, r3, r0
6000940e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
60009412:	e010      	b.n	60009436 <disable_endpoint+0x6a>
	} else if (ret) {
60009414:	2800      	cmp	r0, #0
60009416:	d0f1      	beq.n	600093fc <disable_endpoint+0x30>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
60009418:	466e      	mov	r6, sp
6000941a:	b088      	sub	sp, #32
6000941c:	466a      	mov	r2, sp
6000941e:	4b0a      	ldr	r3, [pc, #40]	; (60009448 <disable_endpoint+0x7c>)
60009420:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60009424:	4806      	ldr	r0, [pc, #24]	; (60009440 <disable_endpoint+0x74>)
60009426:	e9c2 3505 	strd	r3, r5, [r2, #20]
6000942a:	2303      	movs	r3, #3
6000942c:	f842 3f10 	str.w	r3, [r2, #16]!
60009430:	f00e ff18 	bl	60018264 <z_log_msg_static_create.constprop.0>
60009434:	46b5      	mov	sp, r6
}
60009436:	4620      	mov	r0, r4
60009438:	46bd      	mov	sp, r7
6000943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000943c:	6001cb76 	.word	0x6001cb76
60009440:	6001a414 	.word	0x6001a414
60009444:	20204820 	.word	0x20204820
60009448:	6001cb97 	.word	0x6001cb97

6000944c <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
6000944c:	2804      	cmp	r0, #4
{
6000944e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60009452:	4604      	mov	r4, r0
60009454:	460f      	mov	r7, r1
60009456:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 6000952c <forward_status_cb+0xe0>
	if (status == USB_DC_DISCONNECTED) {
6000945a:	d01a      	beq.n	60009492 <forward_status_cb+0x46>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
6000945c:	2801      	cmp	r0, #1
6000945e:	d134      	bne.n	600094ca <forward_status_cb+0x7e>
		if (usb_dev.configured) {
60009460:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 60009530 <forward_status_cb+0xe4>
60009464:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
60009468:	b37b      	cbz	r3, 600094ca <forward_status_cb+0x7e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000946a:	4d32      	ldr	r5, [pc, #200]	; (60009534 <forward_status_cb+0xe8>)
			usb_cancel_transfers();
6000946c:	f000 ffa8 	bl	6000a3c0 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60009470:	454d      	cmp	r5, r9
60009472:	d93a      	bls.n	600094ea <forward_status_cb+0x9e>
60009474:	4930      	ldr	r1, [pc, #192]	; (60009538 <forward_status_cb+0xec>)
60009476:	f240 43bd 	movw	r3, #1213	; 0x4bd
6000947a:	4a30      	ldr	r2, [pc, #192]	; (6000953c <forward_status_cb+0xf0>)
6000947c:	4830      	ldr	r0, [pc, #192]	; (60009540 <forward_status_cb+0xf4>)
6000947e:	f00e fd40 	bl	60017f02 <assert_print>
60009482:	4830      	ldr	r0, [pc, #192]	; (60009544 <forward_status_cb+0xf8>)
60009484:	f00e fd3d 	bl	60017f02 <assert_print>
60009488:	f240 41bd 	movw	r1, #1213	; 0x4bd
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000948c:	482b      	ldr	r0, [pc, #172]	; (6000953c <forward_status_cb+0xf0>)
6000948e:	f00e fd31 	bl	60017ef4 <assert_post_action>
		usb_reset_alt_setting();
60009492:	f7ff fee7 	bl	60009264 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
60009496:	e7e3      	b.n	60009460 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
60009498:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
6000949c:	9201      	str	r2, [sp, #4]
			if (ret < 0) {
6000949e:	f10a 0a01 	add.w	sl, sl, #1
	ret = usb_dc_ep_disable(ep_data->ep_addr);
600094a2:	7930      	ldrb	r0, [r6, #4]
600094a4:	f002 fd22 	bl	6000beec <usb_dc_ep_disable>
600094a8:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
600094aa:	7930      	ldrb	r0, [r6, #4]
600094ac:	f00e fedd 	bl	6001826a <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
600094b0:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
600094b4:	f1bb 0f00 	cmp.w	fp, #0
600094b8:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
600094ba:	ea23 0300 	bic.w	r3, r3, r0
600094be:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
600094c2:	da16      	bge.n	600094f2 <forward_status_cb+0xa6>
			usb_dev.configured = false;
600094c4:	2300      	movs	r3, #0
600094c6:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600094ca:	4d1a      	ldr	r5, [pc, #104]	; (60009534 <forward_status_cb+0xe8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600094cc:	454d      	cmp	r5, r9
600094ce:	d91f      	bls.n	60009510 <forward_status_cb+0xc4>
600094d0:	4919      	ldr	r1, [pc, #100]	; (60009538 <forward_status_cb+0xec>)
600094d2:	f240 43e9 	movw	r3, #1257	; 0x4e9
600094d6:	4a19      	ldr	r2, [pc, #100]	; (6000953c <forward_status_cb+0xf0>)
600094d8:	4819      	ldr	r0, [pc, #100]	; (60009540 <forward_status_cb+0xf4>)
600094da:	f00e fd12 	bl	60017f02 <assert_print>
600094de:	4819      	ldr	r0, [pc, #100]	; (60009544 <forward_status_cb+0xf8>)
600094e0:	f00e fd0f 	bl	60017f02 <assert_print>
600094e4:	f240 41e9 	movw	r1, #1257	; 0x4e9
600094e8:	e7d0      	b.n	6000948c <forward_status_cb+0x40>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600094ea:	d2eb      	bcs.n	600094c4 <forward_status_cb+0x78>
		ep_data = cfg_data->endpoint;
600094ec:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
600094ee:	f04f 0a00 	mov.w	sl, #0
600094f2:	7f2b      	ldrb	r3, [r5, #28]
600094f4:	fa5f f68a 	uxtb.w	r6, sl
600094f8:	42b3      	cmp	r3, r6
600094fa:	d8cd      	bhi.n	60009498 <forward_status_cb+0x4c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
600094fc:	3524      	adds	r5, #36	; 0x24
600094fe:	e7b7      	b.n	60009470 <forward_status_cb+0x24>
		if (cfg_data->cb_usb_status) {
60009500:	68eb      	ldr	r3, [r5, #12]
60009502:	b11b      	cbz	r3, 6000950c <forward_status_cb+0xc0>
			cfg_data->cb_usb_status(cfg_data, status, param);
60009504:	463a      	mov	r2, r7
60009506:	4621      	mov	r1, r4
60009508:	4628      	mov	r0, r5
6000950a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
6000950c:	3524      	adds	r5, #36	; 0x24
6000950e:	e7dd      	b.n	600094cc <forward_status_cb+0x80>
60009510:	d3f6      	bcc.n	60009500 <forward_status_cb+0xb4>
	if (usb_dev.user_status_callback) {
60009512:	4b07      	ldr	r3, [pc, #28]	; (60009530 <forward_status_cb+0xe4>)
60009514:	6a1b      	ldr	r3, [r3, #32]
60009516:	b12b      	cbz	r3, 60009524 <forward_status_cb+0xd8>
		usb_dev.user_status_callback(status, param);
60009518:	4639      	mov	r1, r7
6000951a:	4620      	mov	r0, r4
}
6000951c:	b003      	add	sp, #12
6000951e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
60009522:	4718      	bx	r3
}
60009524:	b003      	add	sp, #12
60009526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
6000952a:	bf00      	nop
6000952c:	20203630 	.word	0x20203630
60009530:	20204820 	.word	0x20204820
60009534:	2020360c 	.word	0x2020360c
60009538:	6001cb13 	.word	0x6001cb13
6000953c:	6001cae1 	.word	0x6001cae1
60009540:	6001c3d7 	.word	0x6001c3d7
60009544:	6001c858 	.word	0x6001c858

60009548 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
60009548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000954c:	b082      	sub	sp, #8
	uint8_t ep = setup->wIndex;
6000954e:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
60009550:	4688      	mov	r8, r1
60009552:	af00      	add	r7, sp, #0
	if (!is_ep_valid(ep)) {
60009554:	4620      	mov	r0, r4
	uint8_t ep = setup->wIndex;
60009556:	71fc      	strb	r4, [r7, #7]
	if (!is_ep_valid(ep)) {
60009558:	f7ff fec2 	bl	600092e0 <is_ep_valid>
6000955c:	4605      	mov	r5, r0
6000955e:	b308      	cbz	r0, 600095a4 <usb_halt_endpoint_req.isra.0+0x5c>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
60009560:	f014 0f7f 	tst.w	r4, #127	; 0x7f
60009564:	4e1f      	ldr	r6, [pc, #124]	; (600095e4 <usb_halt_endpoint_req.isra.0+0x9c>)
60009566:	d003      	beq.n	60009570 <usb_halt_endpoint_req.isra.0+0x28>
60009568:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
6000956c:	2b00      	cmp	r3, #0
6000956e:	d036      	beq.n	600095de <usb_halt_endpoint_req.isra.0+0x96>
		if (halt) {
60009570:	f1b8 0f00 	cmp.w	r8, #0
60009574:	d01b      	beq.n	600095ae <usb_halt_endpoint_req.isra.0+0x66>
			LOG_INF("Set halt ep 0x%02x", ep);
60009576:	46e8      	mov	r8, sp
60009578:	b088      	sub	sp, #32
6000957a:	466a      	mov	r2, sp
6000957c:	4b1a      	ldr	r3, [pc, #104]	; (600095e8 <usb_halt_endpoint_req.isra.0+0xa0>)
6000957e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
60009582:	481a      	ldr	r0, [pc, #104]	; (600095ec <usb_halt_endpoint_req.isra.0+0xa4>)
60009584:	e9c2 3405 	strd	r3, r4, [r2, #20]
60009588:	2303      	movs	r3, #3
6000958a:	f842 3f10 	str.w	r3, [r2, #16]!
6000958e:	f00e fe69 	bl	60018264 <z_log_msg_static_create.constprop.0>
60009592:	46c5      	mov	sp, r8
			usb_dc_ep_set_stall(ep);
60009594:	79f8      	ldrb	r0, [r7, #7]
60009596:	f002 fb51 	bl	6000bc3c <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
6000959a:	69f3      	ldr	r3, [r6, #28]
6000959c:	b113      	cbz	r3, 600095a4 <usb_halt_endpoint_req.isra.0+0x5c>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
6000959e:	1df9      	adds	r1, r7, #7
600095a0:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
600095a2:	4798      	blx	r3
}
600095a4:	4628      	mov	r0, r5
600095a6:	3708      	adds	r7, #8
600095a8:	46bd      	mov	sp, r7
600095aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
600095ae:	46e8      	mov	r8, sp
600095b0:	b088      	sub	sp, #32
600095b2:	466a      	mov	r2, sp
600095b4:	4b0e      	ldr	r3, [pc, #56]	; (600095f0 <usb_halt_endpoint_req.isra.0+0xa8>)
600095b6:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
600095ba:	480c      	ldr	r0, [pc, #48]	; (600095ec <usb_halt_endpoint_req.isra.0+0xa4>)
600095bc:	e9c2 3405 	strd	r3, r4, [r2, #20]
600095c0:	2303      	movs	r3, #3
600095c2:	f842 3f10 	str.w	r3, [r2, #16]!
600095c6:	f00e fe4d 	bl	60018264 <z_log_msg_static_create.constprop.0>
600095ca:	46c5      	mov	sp, r8
			usb_dc_ep_clear_stall(ep);
600095cc:	79f8      	ldrb	r0, [r7, #7]
600095ce:	f002 fb6d 	bl	6000bcac <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
600095d2:	69f3      	ldr	r3, [r6, #28]
600095d4:	2b00      	cmp	r3, #0
600095d6:	d0e5      	beq.n	600095a4 <usb_halt_endpoint_req.isra.0+0x5c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
600095d8:	1df9      	adds	r1, r7, #7
600095da:	2009      	movs	r0, #9
600095dc:	e7e1      	b.n	600095a2 <usb_halt_endpoint_req.isra.0+0x5a>
		return false;
600095de:	461d      	mov	r5, r3
600095e0:	e7e0      	b.n	600095a4 <usb_halt_endpoint_req.isra.0+0x5c>
600095e2:	bf00      	nop
600095e4:	20204820 	.word	0x20204820
600095e8:	6001cbb9 	.word	0x6001cbb9
600095ec:	6001a414 	.word	0x6001a414
600095f0:	6001cbcc 	.word	0x6001cbcc

600095f4 <set_endpoint>:
{
600095f4:	b5f0      	push	{r4, r5, r6, r7, lr}
600095f6:	b083      	sub	sp, #12
600095f8:	4604      	mov	r4, r0
	if (ep_bm & usb_dev.ep_bm) {
600095fa:	4d38      	ldr	r5, [pc, #224]	; (600096dc <set_endpoint+0xe8>)
{
600095fc:	af00      	add	r7, sp, #0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
600095fe:	7880      	ldrb	r0, [r0, #2]
60009600:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
60009602:	7923      	ldrb	r3, [r4, #4]
60009604:	7962      	ldrb	r2, [r4, #5]
60009606:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
6000960a:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
6000960c:	78e3      	ldrb	r3, [r4, #3]
6000960e:	f003 0303 	and.w	r3, r3, #3
60009612:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
60009614:	f00e fe29 	bl	6001826a <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
60009618:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
6000961c:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
6000961e:	4218      	tst	r0, r3
60009620:	d009      	beq.n	60009636 <set_endpoint+0x42>
		reset_endpoint(ep_desc);
60009622:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
60009624:	4620      	mov	r0, r4
60009626:	f000 fead 	bl	6000a384 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
6000962a:	4620      	mov	r0, r4
6000962c:	f7ff fece 	bl	600093cc <disable_endpoint>
	return z_impl_k_usleep(us);
60009630:	2096      	movs	r0, #150	; 0x96
60009632:	f010 f9b9 	bl	600199a8 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
60009636:	4638      	mov	r0, r7
60009638:	f002 fa44 	bl	6000bac4 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
6000963c:	f110 0f78 	cmn.w	r0, #120	; 0x78
60009640:	783b      	ldrb	r3, [r7, #0]
60009642:	d12d      	bne.n	600096a0 <set_endpoint+0xac>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
60009644:	466c      	mov	r4, sp
60009646:	b088      	sub	sp, #32
60009648:	466a      	mov	r2, sp
6000964a:	4925      	ldr	r1, [pc, #148]	; (600096e0 <set_endpoint+0xec>)
6000964c:	4825      	ldr	r0, [pc, #148]	; (600096e4 <set_endpoint+0xf0>)
6000964e:	e9c2 1305 	strd	r1, r3, [r2, #20]
60009652:	2303      	movs	r3, #3
60009654:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
60009658:	f842 3f10 	str.w	r3, [r2, #16]!
6000965c:	f00e fe02 	bl	60018264 <z_log_msg_static_create.constprop.0>
60009660:	46a5      	mov	sp, r4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
60009662:	7838      	ldrb	r0, [r7, #0]
60009664:	f002 fbd0 	bl	6000be08 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
60009668:	f110 0f78 	cmn.w	r0, #120	; 0x78
6000966c:	d12d      	bne.n	600096ca <set_endpoint+0xd6>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
6000966e:	466c      	mov	r4, sp
60009670:	b088      	sub	sp, #32
60009672:	783b      	ldrb	r3, [r7, #0]
60009674:	466a      	mov	r2, sp
60009676:	491c      	ldr	r1, [pc, #112]	; (600096e8 <set_endpoint+0xf4>)
60009678:	481a      	ldr	r0, [pc, #104]	; (600096e4 <set_endpoint+0xf0>)
6000967a:	e9c2 1305 	strd	r1, r3, [r2, #20]
6000967e:	2303      	movs	r3, #3
60009680:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
60009684:	f842 3f10 	str.w	r3, [r2, #16]!
60009688:	f00e fdec 	bl	60018264 <z_log_msg_static_create.constprop.0>
6000968c:	46a5      	mov	sp, r4
	usb_dev.ep_bm |= ep_bm;
6000968e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
60009692:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
60009694:	4333      	orrs	r3, r6
	usb_dev.configured = true;
60009696:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
6000969a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
6000969e:	e011      	b.n	600096c4 <set_endpoint+0xd0>
	} else if (ret) {
600096a0:	2800      	cmp	r0, #0
600096a2:	d0de      	beq.n	60009662 <set_endpoint+0x6e>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
600096a4:	466c      	mov	r4, sp
600096a6:	b088      	sub	sp, #32
600096a8:	466a      	mov	r2, sp
600096aa:	4910      	ldr	r1, [pc, #64]	; (600096ec <set_endpoint+0xf8>)
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
600096ac:	480d      	ldr	r0, [pc, #52]	; (600096e4 <set_endpoint+0xf0>)
600096ae:	e9c2 1305 	strd	r1, r3, [r2, #20]
600096b2:	2303      	movs	r3, #3
600096b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
600096b8:	f842 3f10 	str.w	r3, [r2, #16]!
600096bc:	f00e fdd2 	bl	60018264 <z_log_msg_static_create.constprop.0>
		return false;
600096c0:	2000      	movs	r0, #0
600096c2:	46a5      	mov	sp, r4
}
600096c4:	370c      	adds	r7, #12
600096c6:	46bd      	mov	sp, r7
600096c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (ret) {
600096ca:	2800      	cmp	r0, #0
600096cc:	d0df      	beq.n	6000968e <set_endpoint+0x9a>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
600096ce:	466c      	mov	r4, sp
600096d0:	b088      	sub	sp, #32
600096d2:	783b      	ldrb	r3, [r7, #0]
600096d4:	466a      	mov	r2, sp
600096d6:	4906      	ldr	r1, [pc, #24]	; (600096f0 <set_endpoint+0xfc>)
600096d8:	e7e8      	b.n	600096ac <set_endpoint+0xb8>
600096da:	bf00      	nop
600096dc:	20204820 	.word	0x20204820
600096e0:	6001cbe1 	.word	0x6001cbe1
600096e4:	6001a414 	.word	0x6001a414
600096e8:	6001cc28 	.word	0x6001cc28
600096ec:	6001cc04 	.word	0x6001cc04
600096f0:	6001cc48 	.word	0x6001cc48

600096f4 <usb_handle_standard_request>:
{
600096f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
600096f8:	4d92      	ldr	r5, [pc, #584]	; (60009944 <usb_handle_standard_request+0x250>)
{
600096fa:	4604      	mov	r4, r0
600096fc:	460e      	mov	r6, r1
600096fe:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
60009700:	69ab      	ldr	r3, [r5, #24]
60009702:	b9c3      	cbnz	r3, 60009736 <usb_handle_standard_request+0x42>
	switch (setup->RequestType.recipient) {
60009704:	7820      	ldrb	r0, [r4, #0]
60009706:	f000 001f 	and.w	r0, r0, #31
6000970a:	2801      	cmp	r0, #1
6000970c:	d076      	beq.n	600097fc <usb_handle_standard_request+0x108>
6000970e:	2802      	cmp	r0, #2
60009710:	f000 80dc 	beq.w	600098cc <usb_handle_standard_request+0x1d8>
60009714:	bb00      	cbnz	r0, 60009758 <usb_handle_standard_request+0x64>
	if (usb_reqtype_is_to_host(setup)) {
60009716:	f994 1000 	ldrsb.w	r1, [r4]
	uint8_t *data = *data_buf;
6000971a:	683a      	ldr	r2, [r7, #0]
	if (usb_reqtype_is_to_host(setup)) {
6000971c:	2900      	cmp	r1, #0
		switch (setup->bRequest) {
6000971e:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
60009720:	da2e      	bge.n	60009780 <usb_handle_standard_request+0x8c>
		switch (setup->bRequest) {
60009722:	2b06      	cmp	r3, #6
60009724:	d00c      	beq.n	60009740 <usb_handle_standard_request+0x4c>
60009726:	2b08      	cmp	r3, #8
60009728:	d025      	beq.n	60009776 <usb_handle_standard_request+0x82>
6000972a:	b9ab      	cbnz	r3, 60009758 <usb_handle_standard_request+0x64>
	data[1] = 0U;
6000972c:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
6000972e:	2301      	movs	r3, #1
60009730:	7013      	strb	r3, [r2, #0]
		*len = 2;
60009732:	2302      	movs	r3, #2
60009734:	e103      	b.n	6000993e <usb_handle_standard_request+0x24a>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
60009736:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
60009738:	2800      	cmp	r0, #0
6000973a:	d1e3      	bne.n	60009704 <usb_handle_standard_request+0x10>
		return 0;
6000973c:	2000      	movs	r0, #0
6000973e:	e00d      	b.n	6000975c <usb_handle_standard_request+0x68>
			return usb_get_descriptor(setup, len, data_buf);
60009740:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
60009742:	0a19      	lsrs	r1, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
60009744:	1f0a      	subs	r2, r1, #4
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
60009746:	468c      	mov	ip, r1
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
60009748:	2a01      	cmp	r2, #1
6000974a:	d905      	bls.n	60009758 <usb_handle_standard_request+0x64>
6000974c:	2907      	cmp	r1, #7
6000974e:	d803      	bhi.n	60009758 <usb_handle_standard_request+0x64>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
60009750:	b2da      	uxtb	r2, r3
	p = (uint8_t *)usb_dev.descriptors;
60009752:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
60009754:	781c      	ldrb	r4, [r3, #0]
60009756:	b91c      	cbnz	r4, 60009760 <usb_handle_standard_request+0x6c>
			rc = -EINVAL;
60009758:	f06f 0015 	mvn.w	r0, #21
}
6000975c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
60009760:	785d      	ldrb	r5, [r3, #1]
60009762:	4565      	cmp	r5, ip
60009764:	d103      	bne.n	6000976e <usb_handle_standard_request+0x7a>
			if (cur_index == index) {
60009766:	4282      	cmp	r2, r0
60009768:	f000 80e4 	beq.w	60009934 <usb_handle_standard_request+0x240>
			cur_index++;
6000976c:	3001      	adds	r0, #1
		p += p[DESC_bLength];
6000976e:	4423      	add	r3, r4
60009770:	e7f0      	b.n	60009754 <usb_handle_standard_request+0x60>
			*len = p[DESC_bLength];
60009772:	781b      	ldrb	r3, [r3, #0]
60009774:	e0e3      	b.n	6000993e <usb_handle_standard_request+0x24a>
			data[0] = usb_dev.configuration;
60009776:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
6000977a:	7013      	strb	r3, [r2, #0]
				*len = 1;
6000977c:	2301      	movs	r3, #1
6000977e:	e0de      	b.n	6000993e <usb_handle_standard_request+0x24a>
		switch (setup->bRequest) {
60009780:	2b05      	cmp	r3, #5
60009782:	d011      	beq.n	600097a8 <usb_handle_standard_request+0xb4>
60009784:	2b09      	cmp	r3, #9
60009786:	d1e7      	bne.n	60009758 <usb_handle_standard_request+0x64>
	if (setup->wValue == 0U) {
60009788:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
6000978a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (setup->wValue == 0U) {
6000978c:	2b00      	cmp	r3, #0
6000978e:	d132      	bne.n	600097f6 <usb_handle_standard_request+0x102>
		usb_reset_alt_setting();
60009790:	f7ff fd68 	bl	60009264 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
60009794:	8863      	ldrh	r3, [r4, #2]
60009796:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
		if (usb_dev.status_callback) {
6000979a:	69eb      	ldr	r3, [r5, #28]
6000979c:	2b00      	cmp	r3, #0
6000979e:	d0cd      	beq.n	6000973c <usb_handle_standard_request+0x48>
			usb_dev.status_callback(USB_DC_CONFIGURED,
600097a0:	4969      	ldr	r1, [pc, #420]	; (60009948 <usb_handle_standard_request+0x254>)
600097a2:	2003      	movs	r0, #3
600097a4:	4798      	blx	r3
600097a6:	e7c9      	b.n	6000973c <usb_handle_standard_request+0x48>
			return !usb_dc_set_address(setup->wValue);
600097a8:	78a0      	ldrb	r0, [r4, #2]
600097aa:	f002 f943 	bl	6000ba34 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
600097ae:	2800      	cmp	r0, #0
600097b0:	d0c4      	beq.n	6000973c <usb_handle_standard_request+0x48>
600097b2:	e7d1      	b.n	60009758 <usb_handle_standard_request+0x64>
		switch (p[DESC_bDescriptorType]) {
600097b4:	7873      	ldrb	r3, [r6, #1]
600097b6:	2b04      	cmp	r3, #4
600097b8:	d010      	beq.n	600097dc <usb_handle_standard_request+0xe8>
600097ba:	2b05      	cmp	r3, #5
600097bc:	d011      	beq.n	600097e2 <usb_handle_standard_request+0xee>
600097be:	2b02      	cmp	r3, #2
600097c0:	d104      	bne.n	600097cc <usb_handle_standard_request+0xd8>
			cur_config = p[CONF_DESC_bConfigurationValue];
600097c2:	7977      	ldrb	r7, [r6, #5]
			if (cur_config == setup->wValue) {
600097c4:	8863      	ldrh	r3, [r4, #2]
				found = true;
600097c6:	42bb      	cmp	r3, r7
600097c8:	bf08      	it	eq
600097ca:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
600097cc:	7833      	ldrb	r3, [r6, #0]
600097ce:	441e      	add	r6, r3
	while (p[DESC_bLength] != 0U) {
600097d0:	7833      	ldrb	r3, [r6, #0]
600097d2:	2b00      	cmp	r3, #0
600097d4:	d1ee      	bne.n	600097b4 <usb_handle_standard_request+0xc0>
	if (found) {
600097d6:	2800      	cmp	r0, #0
600097d8:	d0be      	beq.n	60009758 <usb_handle_standard_request+0x64>
600097da:	e7d9      	b.n	60009790 <usb_handle_standard_request+0x9c>
			cur_alt_setting =
600097dc:	f896 8003 	ldrb.w	r8, [r6, #3]
			break;
600097e0:	e7f4      	b.n	600097cc <usb_handle_standard_request+0xd8>
			if ((cur_config != setup->wValue) ||
600097e2:	8863      	ldrh	r3, [r4, #2]
600097e4:	42bb      	cmp	r3, r7
600097e6:	d1f1      	bne.n	600097cc <usb_handle_standard_request+0xd8>
600097e8:	f1b8 0f00 	cmp.w	r8, #0
600097ec:	d1ee      	bne.n	600097cc <usb_handle_standard_request+0xd8>
			found = set_endpoint((struct usb_ep_descriptor *)p);
600097ee:	4630      	mov	r0, r6
600097f0:	f7ff ff00 	bl	600095f4 <set_endpoint>
			break;
600097f4:	e7ea      	b.n	600097cc <usb_handle_standard_request+0xd8>
	uint8_t cur_config = 0xFF;
600097f6:	27ff      	movs	r7, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
600097f8:	46b8      	mov	r8, r7
600097fa:	e7e9      	b.n	600097d0 <usb_handle_standard_request+0xdc>
	if (!is_device_configured() ||
600097fc:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
60009800:	f8d7 c000 	ldr.w	ip, [r7]
60009804:	2b00      	cmp	r3, #0
60009806:	d0a7      	beq.n	60009758 <usb_handle_standard_request+0x64>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
60009808:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
6000980a:	88a2      	ldrh	r2, [r4, #4]
6000980c:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
60009810:	463b      	mov	r3, r7
	while (p[DESC_bLength] != 0U) {
60009812:	7818      	ldrb	r0, [r3, #0]
60009814:	2800      	cmp	r0, #0
60009816:	d09f      	beq.n	60009758 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
60009818:	7859      	ldrb	r1, [r3, #1]
6000981a:	2902      	cmp	r1, #2
6000981c:	d104      	bne.n	60009828 <usb_handle_standard_request+0x134>
			if (interface < cfg_descr->bNumInterfaces) {
6000981e:	f893 8004 	ldrb.w	r8, [r3, #4]
60009822:	45f0      	cmp	r8, lr
60009824:	f200 8092 	bhi.w	6000994c <usb_handle_standard_request+0x258>
		p += p[DESC_bLength];
60009828:	4403      	add	r3, r0
6000982a:	e7f2      	b.n	60009812 <usb_handle_standard_request+0x11e>
			data[0] = 0U;
6000982c:	f88c 3000 	strb.w	r3, [ip]
			data[1] = 0U;
60009830:	f88c 3001 	strb.w	r3, [ip, #1]
			*len = 2;
60009834:	6031      	str	r1, [r6, #0]
			return true;
60009836:	e781      	b.n	6000973c <usb_handle_standard_request+0x48>
		p += p[DESC_bLength];
60009838:	441f      	add	r7, r3
6000983a:	e093      	b.n	60009964 <usb_handle_standard_request+0x270>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
6000983c:	2b0b      	cmp	r3, #11
6000983e:	d18b      	bne.n	60009758 <usb_handle_standard_request+0x64>
	bool ret = false;
60009840:	2600      	movs	r6, #0
	uint8_t cur_iface = 0xFF;
60009842:	f04f 08ff 	mov.w	r8, #255	; 0xff
	const uint8_t *if_desc = NULL;
60009846:	46b2      	mov	sl, r6
	uint8_t cur_alt_setting = 0xFF;
60009848:	46c1      	mov	r9, r8
6000984a:	e006      	b.n	6000985a <usb_handle_standard_request+0x166>
		switch (p[DESC_bDescriptorType]) {
6000984c:	787b      	ldrb	r3, [r7, #1]
6000984e:	2b04      	cmp	r3, #4
60009850:	d00f      	beq.n	60009872 <usb_handle_standard_request+0x17e>
60009852:	2b05      	cmp	r3, #5
60009854:	d021      	beq.n	6000989a <usb_handle_standard_request+0x1a6>
		p += p[DESC_bLength];
60009856:	783b      	ldrb	r3, [r7, #0]
60009858:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
6000985a:	783b      	ldrb	r3, [r7, #0]
6000985c:	2b00      	cmp	r3, #0
6000985e:	d1f5      	bne.n	6000984c <usb_handle_standard_request+0x158>
	if (usb_dev.status_callback) {
60009860:	69eb      	ldr	r3, [r5, #28]
60009862:	b113      	cbz	r3, 6000986a <usb_handle_standard_request+0x176>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
60009864:	4651      	mov	r1, sl
60009866:	2007      	movs	r0, #7
60009868:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
6000986a:	2e00      	cmp	r6, #0
6000986c:	f47f af66 	bne.w	6000973c <usb_handle_standard_request+0x48>
60009870:	e772      	b.n	60009758 <usb_handle_standard_request+0x64>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
60009872:	f897 8002 	ldrb.w	r8, [r7, #2]
			if (cur_iface == setup->wIndex &&
60009876:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
60009878:	f897 9003 	ldrb.w	r9, [r7, #3]
			if (cur_iface == setup->wIndex &&
6000987c:	4598      	cmp	r8, r3
6000987e:	d1ea      	bne.n	60009856 <usb_handle_standard_request+0x162>
			    cur_alt_setting == setup->wValue) {
60009880:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
60009882:	4599      	cmp	r9, r3
60009884:	d1e7      	bne.n	60009856 <usb_handle_standard_request+0x162>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
60009886:	f1b8 0f07 	cmp.w	r8, #7
6000988a:	d81c      	bhi.n	600098c6 <usb_handle_standard_request+0x1d2>
		usb_dev.alt_setting[iface] = alt_setting;
6000988c:	eb05 0308 	add.w	r3, r5, r8
		return true;
60009890:	46ba      	mov	sl, r7
60009892:	2601      	movs	r6, #1
				ret = usb_set_alt_setting(setup->wIndex,
60009894:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
60009898:	e7dd      	b.n	60009856 <usb_handle_standard_request+0x162>
			if (cur_iface == setup->wIndex) {
6000989a:	88a3      	ldrh	r3, [r4, #4]
6000989c:	4543      	cmp	r3, r8
6000989e:	d1da      	bne.n	60009856 <usb_handle_standard_request+0x162>
	if (cur_alt_setting != alt_setting) {
600098a0:	78a3      	ldrb	r3, [r4, #2]
600098a2:	454b      	cmp	r3, r9
600098a4:	d00a      	beq.n	600098bc <usb_handle_standard_request+0x1c8>
		ret = reset_endpoint(ep_desc);
600098a6:	78be      	ldrb	r6, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
600098a8:	4630      	mov	r0, r6
600098aa:	f000 fd6b 	bl	6000a384 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
600098ae:	4630      	mov	r0, r6
600098b0:	f7ff fd8c 	bl	600093cc <disable_endpoint>
600098b4:	fab0 f680 	clz	r6, r0
600098b8:	0976      	lsrs	r6, r6, #5
600098ba:	e7cc      	b.n	60009856 <usb_handle_standard_request+0x162>
		ret = set_endpoint(ep_desc);
600098bc:	4638      	mov	r0, r7
600098be:	f7ff fe99 	bl	600095f4 <set_endpoint>
600098c2:	4606      	mov	r6, r0
600098c4:	e7c7      	b.n	60009856 <usb_handle_standard_request+0x162>
600098c6:	46ba      	mov	sl, r7
	return false;
600098c8:	2600      	movs	r6, #0
600098ca:	e7c4      	b.n	60009856 <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
600098cc:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
600098d0:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
600098d2:	2a00      	cmp	r2, #0
600098d4:	da18      	bge.n	60009908 <usb_handle_standard_request+0x214>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
600098d6:	2b00      	cmp	r3, #0
600098d8:	f47f af3e 	bne.w	60009758 <usb_handle_standard_request+0x64>
	uint8_t ep = setup->wIndex;
600098dc:	7924      	ldrb	r4, [r4, #4]
600098de:	683f      	ldr	r7, [r7, #0]
	if (!is_ep_valid(ep)) {
600098e0:	4620      	mov	r0, r4
600098e2:	f7ff fcfd 	bl	600092e0 <is_ep_valid>
600098e6:	2800      	cmp	r0, #0
600098e8:	f43f af36 	beq.w	60009758 <usb_handle_standard_request+0x64>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
600098ec:	0663      	lsls	r3, r4, #25
600098ee:	d004      	beq.n	600098fa <usb_handle_standard_request+0x206>
600098f0:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
600098f4:	2b00      	cmp	r3, #0
600098f6:	f43f af2f 	beq.w	60009758 <usb_handle_standard_request+0x64>
		usb_dc_ep_is_stalled(ep, &data[0]);
600098fa:	4639      	mov	r1, r7
600098fc:	4620      	mov	r0, r4
600098fe:	f002 fa41 	bl	6000bd84 <usb_dc_ep_is_stalled>
		data[1] = 0U;
60009902:	2300      	movs	r3, #0
60009904:	707b      	strb	r3, [r7, #1]
60009906:	e714      	b.n	60009732 <usb_handle_standard_request+0x3e>
		switch (setup->bRequest) {
60009908:	2b01      	cmp	r3, #1
6000990a:	d008      	beq.n	6000991e <usb_handle_standard_request+0x22a>
6000990c:	2b03      	cmp	r3, #3
6000990e:	f47f af23 	bne.w	60009758 <usb_handle_standard_request+0x64>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
60009912:	8863      	ldrh	r3, [r4, #2]
60009914:	2b00      	cmp	r3, #0
60009916:	f47f af1f 	bne.w	60009758 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
6000991a:	2101      	movs	r1, #1
6000991c:	e003      	b.n	60009926 <usb_handle_standard_request+0x232>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
6000991e:	8861      	ldrh	r1, [r4, #2]
60009920:	2900      	cmp	r1, #0
60009922:	f47f af19 	bne.w	60009758 <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
60009926:	88a0      	ldrh	r0, [r4, #4]
60009928:	f7ff fe0e 	bl	60009548 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
6000992c:	2800      	cmp	r0, #0
6000992e:	f47f af05 	bne.w	6000973c <usb_handle_standard_request+0x48>
60009932:	e711      	b.n	60009758 <usb_handle_standard_request+0x64>
		if (type == USB_DESC_CONFIGURATION) {
60009934:	2902      	cmp	r1, #2
		*data = p;
60009936:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
60009938:	f47f af1b 	bne.w	60009772 <usb_handle_standard_request+0x7e>
			*len = (p[CONF_DESC_wTotalLength]) |
6000993c:	885b      	ldrh	r3, [r3, #2]
		*len = 2;
6000993e:	6033      	str	r3, [r6, #0]
		return true;
60009940:	e6fc      	b.n	6000973c <usb_handle_standard_request+0x48>
60009942:	bf00      	nop
60009944:	20204820 	.word	0x20204820
60009948:	202048da 	.word	0x202048da
	if (usb_reqtype_is_to_host(setup)) {
6000994c:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
60009950:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
60009952:	2800      	cmp	r0, #0
60009954:	f6bf af72 	bge.w	6000983c <usb_handle_standard_request+0x148>
		switch (setup->bRequest) {
60009958:	2b00      	cmp	r3, #0
6000995a:	f43f af67 	beq.w	6000982c <usb_handle_standard_request+0x138>
6000995e:	2b0a      	cmp	r3, #10
60009960:	f47f aefa 	bne.w	60009758 <usb_handle_standard_request+0x64>
	while (p[DESC_bLength] != 0U) {
60009964:	783b      	ldrb	r3, [r7, #0]
60009966:	2b00      	cmp	r3, #0
60009968:	f43f aef6 	beq.w	60009758 <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
6000996c:	7879      	ldrb	r1, [r7, #1]
6000996e:	2904      	cmp	r1, #4
60009970:	f47f af62 	bne.w	60009838 <usb_handle_standard_request+0x144>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
60009974:	78b9      	ldrb	r1, [r7, #2]
			if (cur_iface == setup->wIndex) {
60009976:	428a      	cmp	r2, r1
60009978:	f47f af5e 	bne.w	60009838 <usb_handle_standard_request+0x144>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
6000997c:	2a07      	cmp	r2, #7
		return usb_dev.alt_setting[iface];
6000997e:	bf96      	itet	ls
60009980:	1952      	addls	r2, r2, r5
	return 0;
60009982:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
60009984:	f892 30bb 	ldrbls.w	r3, [r2, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
60009988:	f88c 3000 	strb.w	r3, [ip]
6000998c:	e6f6      	b.n	6000977c <usb_handle_standard_request+0x88>
6000998e:	bf00      	nop

60009990 <usb_write>:
{
60009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60009994:	b083      	sub	sp, #12
60009996:	4604      	mov	r4, r0
60009998:	4690      	mov	r8, r2
6000999a:	4699      	mov	r9, r3
6000999c:	2504      	movs	r5, #4
6000999e:	af00      	add	r7, sp, #0
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
600099a0:	4e12      	ldr	r6, [pc, #72]	; (600099ec <usb_write+0x5c>)
600099a2:	f04f 0a03 	mov.w	sl, #3
{
600099a6:	6079      	str	r1, [r7, #4]
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
600099a8:	464b      	mov	r3, r9
600099aa:	4642      	mov	r2, r8
600099ac:	6879      	ldr	r1, [r7, #4]
600099ae:	4620      	mov	r0, r4
600099b0:	f002 faec 	bl	6000bf8c <usb_dc_ep_write>
		if (ret == -EAGAIN) {
600099b4:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
600099b8:	4683      	mov	fp, r0
		if (ret == -EAGAIN) {
600099ba:	d112      	bne.n	600099e2 <usb_write+0x52>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
600099bc:	f8c7 d000 	str.w	sp, [r7]
600099c0:	b088      	sub	sp, #32
600099c2:	466a      	mov	r2, sp
600099c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
600099c8:	4809      	ldr	r0, [pc, #36]	; (600099f0 <usb_write+0x60>)
600099ca:	e9c2 6405 	strd	r6, r4, [r2, #20]
600099ce:	f842 af10 	str.w	sl, [r2, #16]!
600099d2:	f00e fc47 	bl	60018264 <z_log_msg_static_create.constprop.0>
600099d6:	f8d7 d000 	ldr.w	sp, [r7]
	z_impl_k_yield();
600099da:	f008 f81b 	bl	60011a14 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
600099de:	3d01      	subs	r5, #1
600099e0:	d1e2      	bne.n	600099a8 <usb_write+0x18>
}
600099e2:	4658      	mov	r0, fp
600099e4:	370c      	adds	r7, #12
600099e6:	46bd      	mov	sp, r7
600099e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
600099ec:	6001cc69 	.word	0x6001cc69
600099f0:	6001a414 	.word	0x6001a414

600099f4 <usb_data_to_host>:
{
600099f4:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
600099f6:	4c13      	ldr	r4, [pc, #76]	; (60009a44 <usb_data_to_host+0x50>)
600099f8:	7d23      	ldrb	r3, [r4, #20]
600099fa:	b9cb      	cbnz	r3, 60009a30 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
600099fc:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
600099fe:	ab01      	add	r3, sp, #4
60009a00:	68a1      	ldr	r1, [r4, #8]
60009a02:	2080      	movs	r0, #128	; 0x80
		uint32_t chunk = usb_dev.data_buf_residue;
60009a04:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
60009a06:	f7ff ffc3 	bl	60009990 <usb_write>
		usb_dev.data_buf += chunk;
60009a0a:	9a01      	ldr	r2, [sp, #4]
60009a0c:	68a3      	ldr	r3, [r4, #8]
60009a0e:	4413      	add	r3, r2
60009a10:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
60009a12:	68e3      	ldr	r3, [r4, #12]
60009a14:	1a9b      	subs	r3, r3, r2
60009a16:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
60009a18:	b943      	cbnz	r3, 60009a2c <usb_data_to_host+0x38>
60009a1a:	b13a      	cbz	r2, 60009a2c <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
60009a1c:	6923      	ldr	r3, [r4, #16]
60009a1e:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
60009a20:	429a      	cmp	r2, r3
60009a22:	dd03      	ble.n	60009a2c <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
60009a24:	069b      	lsls	r3, r3, #26
60009a26:	d101      	bne.n	60009a2c <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
60009a28:	2301      	movs	r3, #1
60009a2a:	7523      	strb	r3, [r4, #20]
}
60009a2c:	b002      	add	sp, #8
60009a2e:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
60009a30:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
60009a32:	2080      	movs	r0, #128	; 0x80
60009a34:	461a      	mov	r2, r3
60009a36:	4619      	mov	r1, r3
		usb_dev.zlp_flag = false;
60009a38:	7523      	strb	r3, [r4, #20]
}
60009a3a:	b002      	add	sp, #8
60009a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
60009a40:	f002 baa4 	b.w	6000bf8c <usb_dc_ep_write>
60009a44:	20204820 	.word	0x20204820

60009a48 <usb_handle_control_transfer>:
{
60009a48:	b570      	push	{r4, r5, r6, lr}
	uint32_t chunk = 0U;
60009a4a:	2300      	movs	r3, #0
{
60009a4c:	b08a      	sub	sp, #40	; 0x28
60009a4e:	460d      	mov	r5, r1
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
60009a50:	4606      	mov	r6, r0
	uint32_t chunk = 0U;
60009a52:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
60009a54:	2800      	cmp	r0, #0
60009a56:	d167      	bne.n	60009b28 <usb_handle_control_transfer+0xe0>
60009a58:	2900      	cmp	r1, #0
60009a5a:	d13f      	bne.n	60009adc <usb_handle_control_transfer+0x94>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
60009a5c:	2208      	movs	r2, #8
60009a5e:	460b      	mov	r3, r1
60009a60:	eb0d 0102 	add.w	r1, sp, r2
60009a64:	f00e fd1b 	bl	6001849e <usb_dc_ep_read>
60009a68:	2800      	cmp	r0, #0
60009a6a:	da03      	bge.n	60009a74 <usb_handle_control_transfer+0x2c>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
60009a6c:	2080      	movs	r0, #128	; 0x80
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
60009a6e:	f002 f8e5 	bl	6000bc3c <usb_dc_ep_set_stall>
			return;
60009a72:	e024      	b.n	60009abe <usb_handle_control_transfer+0x76>
		setup->bmRequestType = setup_raw.bmRequestType;
60009a74:	4c37      	ldr	r4, [pc, #220]	; (60009b54 <usb_handle_control_transfer+0x10c>)
60009a76:	9a02      	ldr	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
60009a78:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		setup->bmRequestType = setup_raw.bmRequestType;
60009a7c:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
60009a7e:	9a03      	ldr	r2, [sp, #12]
		usb_dev.zlp_flag = false;
60009a80:	7525      	strb	r5, [r4, #20]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
60009a82:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
60009a84:	f104 0238 	add.w	r2, r4, #56	; 0x38
60009a88:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
60009a8a:	f99d 2008 	ldrsb.w	r2, [sp, #8]
60009a8e:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
60009a90:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
60009a94:	db15      	blt.n	60009ac2 <usb_handle_control_transfer+0x7a>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
60009a96:	2b80      	cmp	r3, #128	; 0x80
60009a98:	d90e      	bls.n	60009ab8 <usb_handle_control_transfer+0x70>
				LOG_ERR("Request buffer too small");
60009a9a:	4b2f      	ldr	r3, [pc, #188]	; (60009b58 <usb_handle_control_transfer+0x110>)
60009a9c:	aa08      	add	r2, sp, #32
60009a9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009aa2:	482e      	ldr	r0, [pc, #184]	; (60009b5c <usb_handle_control_transfer+0x114>)
60009aa4:	9309      	str	r3, [sp, #36]	; 0x24
60009aa6:	2302      	movs	r3, #2
60009aa8:	9308      	str	r3, [sp, #32]
60009aaa:	f00e fbdb 	bl	60018264 <z_log_msg_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
60009aae:	2080      	movs	r0, #128	; 0x80
60009ab0:	f002 f8c4 	bl	6000bc3c <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
60009ab4:	4628      	mov	r0, r5
60009ab6:	e7da      	b.n	60009a6e <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
60009ab8:	b11b      	cbz	r3, 60009ac2 <usb_handle_control_transfer+0x7a>
				usb_dev.data_buf_residue = setup->wLength;
60009aba:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
60009abe:	b00a      	add	sp, #40	; 0x28
60009ac0:	bd70      	pop	{r4, r5, r6, pc}
		if (!usb_handle_request(setup,
60009ac2:	f7ff fc43 	bl	6000934c <usb_handle_request.constprop.0>
60009ac6:	2800      	cmp	r0, #0
60009ac8:	d0d0      	beq.n	60009a6c <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
60009aca:	88e2      	ldrh	r2, [r4, #6]
60009acc:	6923      	ldr	r3, [r4, #16]
60009ace:	429a      	cmp	r2, r3
60009ad0:	bfd4      	ite	le
60009ad2:	60e2      	strle	r2, [r4, #12]
60009ad4:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
60009ad6:	f7ff ff8d 	bl	600099f4 <usb_data_to_host>
60009ada:	e7f0      	b.n	60009abe <usb_handle_control_transfer+0x76>
		if (usb_dev.data_buf_residue <= 0) {
60009adc:	4c1d      	ldr	r4, [pc, #116]	; (60009b54 <usb_handle_control_transfer+0x10c>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
60009ade:	ab01      	add	r3, sp, #4
60009ae0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
60009ae4:	2a00      	cmp	r2, #0
60009ae6:	dc05      	bgt.n	60009af4 <usb_handle_control_transfer+0xac>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
60009ae8:	4602      	mov	r2, r0
60009aea:	f00e fcd8 	bl	6001849e <usb_dc_ep_read>
60009aee:	2800      	cmp	r0, #0
60009af0:	dae5      	bge.n	60009abe <usb_handle_control_transfer+0x76>
60009af2:	e7bb      	b.n	60009a6c <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
60009af4:	f00e fcd3 	bl	6001849e <usb_dc_ep_read>
60009af8:	2800      	cmp	r0, #0
60009afa:	da04      	bge.n	60009b06 <usb_handle_control_transfer+0xbe>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
60009afc:	2080      	movs	r0, #128	; 0x80
60009afe:	f002 f89d 	bl	6000bc3c <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
60009b02:	4630      	mov	r0, r6
60009b04:	e7b3      	b.n	60009a6e <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
60009b06:	9a01      	ldr	r2, [sp, #4]
60009b08:	68a3      	ldr	r3, [r4, #8]
60009b0a:	4413      	add	r3, r2
60009b0c:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
60009b0e:	68e3      	ldr	r3, [r4, #12]
60009b10:	1a9b      	subs	r3, r3, r2
60009b12:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
60009b14:	2b00      	cmp	r3, #0
60009b16:	d1d2      	bne.n	60009abe <usb_handle_control_transfer+0x76>
			usb_dev.data_buf = usb_dev.req_data;
60009b18:	f104 0338 	add.w	r3, r4, #56	; 0x38
60009b1c:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
60009b1e:	f7ff fc15 	bl	6000934c <usb_handle_request.constprop.0>
60009b22:	2800      	cmp	r0, #0
60009b24:	d1d7      	bne.n	60009ad6 <usb_handle_control_transfer+0x8e>
60009b26:	e7a1      	b.n	60009a6c <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
60009b28:	2880      	cmp	r0, #128	; 0x80
60009b2a:	d107      	bne.n	60009b3c <usb_handle_control_transfer+0xf4>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
60009b2c:	4b09      	ldr	r3, [pc, #36]	; (60009b54 <usb_handle_control_transfer+0x10c>)
60009b2e:	68da      	ldr	r2, [r3, #12]
60009b30:	2a00      	cmp	r2, #0
60009b32:	d1d0      	bne.n	60009ad6 <usb_handle_control_transfer+0x8e>
60009b34:	7d1b      	ldrb	r3, [r3, #20]
60009b36:	2b00      	cmp	r3, #0
60009b38:	d1cd      	bne.n	60009ad6 <usb_handle_control_transfer+0x8e>
60009b3a:	e7c0      	b.n	60009abe <usb_handle_control_transfer+0x76>
		__ASSERT_NO_MSG(false);
60009b3c:	4908      	ldr	r1, [pc, #32]	; (60009b60 <usb_handle_control_transfer+0x118>)
60009b3e:	f240 1387 	movw	r3, #391	; 0x187
60009b42:	4808      	ldr	r0, [pc, #32]	; (60009b64 <usb_handle_control_transfer+0x11c>)
60009b44:	4a08      	ldr	r2, [pc, #32]	; (60009b68 <usb_handle_control_transfer+0x120>)
60009b46:	f00e f9dc 	bl	60017f02 <assert_print>
60009b4a:	f240 1187 	movw	r1, #391	; 0x187
60009b4e:	4806      	ldr	r0, [pc, #24]	; (60009b68 <usb_handle_control_transfer+0x120>)
60009b50:	f00e f9d0 	bl	60017ef4 <assert_post_action>
60009b54:	20204820 	.word	0x20204820
60009b58:	6001cc90 	.word	0x6001cc90
60009b5c:	6001a414 	.word	0x6001a414
60009b60:	6001c64e 	.word	0x6001c64e
60009b64:	6001c3d7 	.word	0x6001c3d7
60009b68:	6001cae1 	.word	0x6001cae1

60009b6c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
60009b6c:	4b05      	ldr	r3, [pc, #20]	; (60009b84 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
60009b6e:	4a06      	ldr	r2, [pc, #24]	; (60009b88 <usb_set_config+0x1c>)
	usb_dev.descriptors = usb_descriptors;
60009b70:	6258      	str	r0, [r3, #36]	; 0x24
}
60009b72:	2000      	movs	r0, #0
	usb_dev.req_handlers[type] = handler;
60009b74:	629a      	str	r2, [r3, #40]	; 0x28
60009b76:	4a05      	ldr	r2, [pc, #20]	; (60009b8c <usb_set_config+0x20>)
60009b78:	62da      	str	r2, [r3, #44]	; 0x2c
60009b7a:	4a05      	ldr	r2, [pc, #20]	; (60009b90 <usb_set_config+0x24>)
60009b7c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
60009b7e:	4a05      	ldr	r2, [pc, #20]	; (60009b94 <usb_set_config+0x28>)
60009b80:	619a      	str	r2, [r3, #24]
}
60009b82:	4770      	bx	lr
60009b84:	20204820 	.word	0x20204820
60009b88:	600096f5 	.word	0x600096f5
60009b8c:	600091f1 	.word	0x600091f1
60009b90:	60009275 	.word	0x60009275
60009b94:	60009161 	.word	0x60009161

60009b98 <usb_device_init>:
	if (usb_dev.enabled == true) {
60009b98:	4b09      	ldr	r3, [pc, #36]	; (60009bc0 <usb_device_init+0x28>)
{
60009b9a:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
60009b9c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
60009ba0:	b954      	cbnz	r4, 60009bb8 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
60009ba2:	f000 f901 	bl	60009da8 <usb_get_device_descriptor>
	if (!device_descriptor) {
60009ba6:	b918      	cbnz	r0, 60009bb0 <usb_device_init+0x18>
}
60009ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
60009bac:	f7ff bbe4 	b.w	60009378 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
60009bb0:	f7ff ffdc 	bl	60009b6c <usb_set_config>
	return 0;
60009bb4:	4620      	mov	r0, r4
}
60009bb6:	bd10      	pop	{r4, pc}
		return -EALREADY;
60009bb8:	f06f 0077 	mvn.w	r0, #119	; 0x77
60009bbc:	e7fb      	b.n	60009bb6 <usb_device_init+0x1e>
60009bbe:	bf00      	nop
60009bc0:	20204820 	.word	0x20204820

60009bc4 <usb_enable>:
{
60009bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60009bc8:	4604      	mov	r4, r0
60009bca:	b086      	sub	sp, #24
	if (usb_dev.enabled == true) {
60009bcc:	4d47      	ldr	r5, [pc, #284]	; (60009cec <usb_enable+0x128>)
	return z_impl_k_mutex_lock(mutex, timeout);
60009bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60009bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60009bd6:	4846      	ldr	r0, [pc, #280]	; (60009cf0 <usb_enable+0x12c>)
60009bd8:	f006 fa8a 	bl	600100f0 <z_impl_k_mutex_lock>
60009bdc:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
60009be0:	b196      	cbz	r6, 60009c08 <usb_enable+0x44>
		LOG_WRN("USB device support already enabled");
60009be2:	4b44      	ldr	r3, [pc, #272]	; (60009cf4 <usb_enable+0x130>)
		ret = -EALREADY;
60009be4:	f06f 0477 	mvn.w	r4, #119	; 0x77
		LOG_WRN("USB device support already enabled");
60009be8:	aa04      	add	r2, sp, #16
60009bea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
60009bee:	9305      	str	r3, [sp, #20]
60009bf0:	2302      	movs	r3, #2
60009bf2:	4841      	ldr	r0, [pc, #260]	; (60009cf8 <usb_enable+0x134>)
60009bf4:	9304      	str	r3, [sp, #16]
60009bf6:	f00e fb35 	bl	60018264 <z_log_msg_static_create.constprop.0>
	return z_impl_k_mutex_unlock(mutex);
60009bfa:	483d      	ldr	r0, [pc, #244]	; (60009cf0 <usb_enable+0x12c>)
60009bfc:	f006 fb48 	bl	60010290 <z_impl_k_mutex_unlock>
}
60009c00:	4620      	mov	r0, r4
60009c02:	b006      	add	sp, #24
60009c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	usb_dev.status_callback = cb;
60009c08:	483c      	ldr	r0, [pc, #240]	; (60009cfc <usb_enable+0x138>)
	usb_dev.user_status_callback = status_cb;
60009c0a:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
60009c0c:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
60009c0e:	f002 fb49 	bl	6000c2a4 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
60009c12:	f001 fecf 	bl	6000b9b4 <usb_dc_attach>
	if (ret < 0) {
60009c16:	1e04      	subs	r4, r0, #0
60009c18:	dbef      	blt.n	60009bfa <usb_enable+0x36>
	ret = usb_transfer_init();
60009c1a:	f000 fbf5 	bl	6000a408 <usb_transfer_init>
	if (ret < 0) {
60009c1e:	1e04      	subs	r4, r0, #0
60009c20:	dbeb      	blt.n	60009bfa <usb_enable+0x36>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
60009c22:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
60009c24:	4668      	mov	r0, sp
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
60009c26:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
60009c2a:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
60009c2e:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
60009c32:	f001 ff47 	bl	6000bac4 <usb_dc_ep_configure>
	if (ret < 0) {
60009c36:	1e04      	subs	r4, r0, #0
60009c38:	dbdf      	blt.n	60009bfa <usb_enable+0x36>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
60009c3a:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
60009c3c:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
60009c3e:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
60009c42:	f001 ff3f 	bl	6000bac4 <usb_dc_ep_configure>
	if (ret < 0) {
60009c46:	1e04      	subs	r4, r0, #0
60009c48:	dbd7      	blt.n	60009bfa <usb_enable+0x36>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
60009c4a:	492d      	ldr	r1, [pc, #180]	; (60009d00 <usb_enable+0x13c>)
60009c4c:	4630      	mov	r0, r6
60009c4e:	f002 fafd 	bl	6000c24c <usb_dc_ep_set_callback>
	if (ret < 0) {
60009c52:	1e04      	subs	r4, r0, #0
60009c54:	dbd1      	blt.n	60009bfa <usb_enable+0x36>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
60009c56:	492a      	ldr	r1, [pc, #168]	; (60009d00 <usb_enable+0x13c>)
60009c58:	4638      	mov	r0, r7
60009c5a:	f002 faf7 	bl	6000c24c <usb_dc_ep_set_callback>
	if (ret < 0) {
60009c5e:	1e04      	subs	r4, r0, #0
60009c60:	dbcb      	blt.n	60009bfa <usb_enable+0x36>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60009c62:	4c28      	ldr	r4, [pc, #160]	; (60009d04 <usb_enable+0x140>)
60009c64:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 60009d08 <usb_enable+0x144>
60009c68:	4544      	cmp	r4, r8
60009c6a:	d923      	bls.n	60009cb4 <usb_enable+0xf0>
60009c6c:	4927      	ldr	r1, [pc, #156]	; (60009d0c <usb_enable+0x148>)
60009c6e:	f240 6313 	movw	r3, #1555	; 0x613
60009c72:	4a27      	ldr	r2, [pc, #156]	; (60009d10 <usb_enable+0x14c>)
60009c74:	4827      	ldr	r0, [pc, #156]	; (60009d14 <usb_enable+0x150>)
60009c76:	f00e f944 	bl	60017f02 <assert_print>
60009c7a:	4827      	ldr	r0, [pc, #156]	; (60009d18 <usb_enable+0x154>)
60009c7c:	f00e f941 	bl	60017f02 <assert_print>
60009c80:	f240 6113 	movw	r1, #1555	; 0x613
60009c84:	4822      	ldr	r0, [pc, #136]	; (60009d10 <usb_enable+0x14c>)
60009c86:	f00e f935 	bl	60017ef4 <assert_post_action>
		ep_data = cfg_data->endpoint;
60009c8a:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
60009c8c:	2600      	movs	r6, #0
60009c8e:	7f22      	ldrb	r2, [r4, #28]
60009c90:	b2f3      	uxtb	r3, r6
60009c92:	429a      	cmp	r2, r3
60009c94:	d801      	bhi.n	60009c9a <usb_enable+0xd6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60009c96:	3424      	adds	r4, #36	; 0x24
60009c98:	e7e6      	b.n	60009c68 <usb_enable+0xa4>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
60009c9a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
60009c9e:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
60009ca2:	3601      	adds	r6, #1
60009ca4:	7910      	ldrb	r0, [r2, #4]
60009ca6:	f002 fad1 	bl	6000c24c <usb_dc_ep_set_callback>
60009caa:	2800      	cmp	r0, #0
60009cac:	d0ef      	beq.n	60009c8e <usb_enable+0xca>
60009cae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
60009cb2:	e7a2      	b.n	60009bfa <usb_enable+0x36>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60009cb4:	d3e9      	bcc.n	60009c8a <usb_enable+0xc6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
60009cb6:	2000      	movs	r0, #0
60009cb8:	f002 f8a6 	bl	6000be08 <usb_dc_ep_enable>
	if (ret < 0) {
60009cbc:	1e04      	subs	r4, r0, #0
60009cbe:	db9c      	blt.n	60009bfa <usb_enable+0x36>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
60009cc0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
60009cc4:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
60009cc6:	f043 0301 	orr.w	r3, r3, #1
60009cca:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
60009cce:	f002 f89b 	bl	6000be08 <usb_dc_ep_enable>
	if (ret < 0) {
60009cd2:	1e04      	subs	r4, r0, #0
60009cd4:	db91      	blt.n	60009bfa <usb_enable+0x36>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
60009cd6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = 0;
60009cda:	2400      	movs	r4, #0
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
60009cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
60009ce0:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
60009ce4:	2301      	movs	r3, #1
60009ce6:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
60009cea:	e786      	b.n	60009bfa <usb_enable+0x36>
60009cec:	20204820 	.word	0x20204820
60009cf0:	202034f4 	.word	0x202034f4
60009cf4:	6001cca9 	.word	0x6001cca9
60009cf8:	6001a414 	.word	0x6001a414
60009cfc:	6000944d 	.word	0x6000944d
60009d00:	60009a49 	.word	0x60009a49
60009d04:	2020360c 	.word	0x2020360c
60009d08:	20203630 	.word	0x20203630
60009d0c:	6001cb13 	.word	0x6001cb13
60009d10:	6001cae1 	.word	0x6001cae1
60009d14:	6001c3d7 	.word	0x6001c3d7
60009d18:	6001c858 	.word	0x6001c858

60009d1c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
60009d1c:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
60009d1e:	4b20      	ldr	r3, [pc, #128]	; (60009da0 <usb_update_sn_string_descriptor+0x84>)
{
60009d20:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
60009d22:	f103 0510 	add.w	r5, r3, #16
60009d26:	aa05      	add	r2, sp, #20
60009d28:	6818      	ldr	r0, [r3, #0]
60009d2a:	3308      	adds	r3, #8
60009d2c:	f853 1c04 	ldr.w	r1, [r3, #-4]
60009d30:	4614      	mov	r4, r2
60009d32:	42ab      	cmp	r3, r5
60009d34:	c403      	stmia	r4!, {r0, r1}
60009d36:	4622      	mov	r2, r4
60009d38:	d1f6      	bne.n	60009d28 <usb_update_sn_string_descriptor+0xc>
60009d3a:	781b      	ldrb	r3, [r3, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
60009d3c:	2210      	movs	r2, #16
60009d3e:	2100      	movs	r1, #0
60009d40:	a801      	add	r0, sp, #4
	const char hex[] = "0123456789ABCDEF";
60009d42:	7023      	strb	r3, [r4, #0]
	memset(hwid, 0, sizeof(hwid));
60009d44:	f009 fafc 	bl	60013340 <memset>
	memset(sn, 0, sizeof(sn));
60009d48:	2212      	movs	r2, #18
60009d4a:	2100      	movs	r1, #0
60009d4c:	4815      	ldr	r0, [pc, #84]	; (60009da4 <usb_update_sn_string_descriptor+0x88>)
60009d4e:	f009 faf7 	bl	60013340 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
60009d52:	2110      	movs	r1, #16
60009d54:	a801      	add	r0, sp, #4
60009d56:	f003 fae9 	bl	6000d32c <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
60009d5a:	2800      	cmp	r0, #0
60009d5c:	dd1d      	ble.n	60009d9a <usb_update_sn_string_descriptor+0x7e>
		skip = MAX(0, hwlen - usblen);
60009d5e:	2808      	cmp	r0, #8
60009d60:	ab01      	add	r3, sp, #4
60009d62:	4910      	ldr	r1, [pc, #64]	; (60009da4 <usb_update_sn_string_descriptor+0x88>)
60009d64:	bfb8      	it	lt
60009d66:	2008      	movlt	r0, #8
60009d68:	3809      	subs	r0, #9
60009d6a:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
60009d6c:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
60009d6e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
60009d72:	ac0a      	add	r4, sp, #40	; 0x28
		for (int i = 0; i < usblen; i++) {
60009d74:	3001      	adds	r0, #1
60009d76:	3102      	adds	r1, #2
			sn[i * 2] = hex[hwid[i + skip] >> 4];
60009d78:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
60009d7c:	f003 030f 	and.w	r3, r3, #15
		for (int i = 0; i < usblen; i++) {
60009d80:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
60009d82:	f103 0328 	add.w	r3, r3, #40	; 0x28
			sn[i * 2] = hex[hwid[i + skip] >> 4];
60009d86:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
60009d8a:	446b      	add	r3, sp
			sn[i * 2] = hex[hwid[i + skip] >> 4];
60009d8c:	f801 4c02 	strb.w	r4, [r1, #-2]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
60009d90:	f813 3c14 	ldrb.w	r3, [r3, #-20]
60009d94:	f801 3c01 	strb.w	r3, [r1, #-1]
		for (int i = 0; i < usblen; i++) {
60009d98:	d1e9      	bne.n	60009d6e <usb_update_sn_string_descriptor+0x52>
		}
	}

	return sn;
}
60009d9a:	4802      	ldr	r0, [pc, #8]	; (60009da4 <usb_update_sn_string_descriptor+0x88>)
60009d9c:	b00b      	add	sp, #44	; 0x2c
60009d9e:	bd30      	pop	{r4, r5, pc}
60009da0:	6001ccd7 	.word	0x6001ccd7
60009da4:	20204e32 	.word	0x20204e32

60009da8 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
60009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60009dac:	b08b      	sub	sp, #44	; 0x2c
60009dae:	4c91      	ldr	r4, [pc, #580]	; (60009ff4 <usb_get_device_descriptor+0x24c>)
60009db0:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
60009db2:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
60009db4:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
60009db8:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
60009dba:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
60009dbc:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
60009dbe:	7823      	ldrb	r3, [r4, #0]
60009dc0:	b943      	cbnz	r3, 60009dd4 <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
60009dc2:	3402      	adds	r4, #2
60009dc4:	4b8c      	ldr	r3, [pc, #560]	; (60009ff8 <usb_get_device_descriptor+0x250>)
60009dc6:	429c      	cmp	r4, r3
60009dc8:	d1f3      	bne.n	60009db2 <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
60009dca:	488a      	ldr	r0, [pc, #552]	; (60009ff4 <usb_get_device_descriptor+0x24c>)
}
60009dcc:	372c      	adds	r7, #44	; 0x2c
60009dce:	46bd      	mov	sp, r7
60009dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
60009dd4:	7863      	ldrb	r3, [r4, #1]
60009dd6:	2b05      	cmp	r3, #5
60009dd8:	d805      	bhi.n	60009de6 <usb_get_device_descriptor+0x3e>
60009dda:	e8df f003 	tbb	[pc, r3]
60009dde:	04b3      	.short	0x04b3
60009de0:	4e07b303 	.word	0x4e07b303
60009de4:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
60009de6:	7823      	ldrb	r3, [r4, #0]
60009de8:	441c      	add	r4, r3
60009dea:	e7e8      	b.n	60009dbe <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
60009dec:	78e3      	ldrb	r3, [r4, #3]
60009dee:	2b00      	cmp	r3, #0
60009df0:	d1f9      	bne.n	60009de6 <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
60009df2:	78a3      	ldrb	r3, [r4, #2]
60009df4:	2b00      	cmp	r3, #0
60009df6:	d13b      	bne.n	60009e70 <usb_get_device_descriptor+0xc8>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60009df8:	4d80      	ldr	r5, [pc, #512]	; (60009ffc <usb_get_device_descriptor+0x254>)
60009dfa:	4b81      	ldr	r3, [pc, #516]	; (6000a000 <usb_get_device_descriptor+0x258>)
60009dfc:	e003      	b.n	60009e06 <usb_get_device_descriptor+0x5e>
		if (cfg_data->interface_descriptor == iface) {
60009dfe:	686a      	ldr	r2, [r5, #4]
60009e00:	4294      	cmp	r4, r2
60009e02:	d030      	beq.n	60009e66 <usb_get_device_descriptor+0xbe>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60009e04:	3524      	adds	r5, #36	; 0x24
60009e06:	429d      	cmp	r5, r3
60009e08:	d90e      	bls.n	60009e28 <usb_get_device_descriptor+0x80>
60009e0a:	497e      	ldr	r1, [pc, #504]	; (6000a004 <usb_get_device_descriptor+0x25c>)
60009e0c:	f44f 738f 	mov.w	r3, #286	; 0x11e
60009e10:	4a7d      	ldr	r2, [pc, #500]	; (6000a008 <usb_get_device_descriptor+0x260>)
60009e12:	487e      	ldr	r0, [pc, #504]	; (6000a00c <usb_get_device_descriptor+0x264>)
60009e14:	f00e f875 	bl	60017f02 <assert_print>
60009e18:	487d      	ldr	r0, [pc, #500]	; (6000a010 <usb_get_device_descriptor+0x268>)
60009e1a:	f00e f872 	bl	60017f02 <assert_print>
60009e1e:	f44f 718f 	mov.w	r1, #286	; 0x11e
		__ASSERT(buf[ascii_idx_max] > 0x1F && buf[ascii_idx_max] < 0x7F,
60009e22:	4879      	ldr	r0, [pc, #484]	; (6000a008 <usb_get_device_descriptor+0x260>)
60009e24:	f00e f866 	bl	60017ef4 <assert_post_action>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
60009e28:	d3e9      	bcc.n	60009dfe <usb_get_device_descriptor+0x56>
					LOG_ERR("There is no usb_cfg_data "
60009e2a:	466d      	mov	r5, sp
60009e2c:	b088      	sub	sp, #32
60009e2e:	466a      	mov	r2, sp
60009e30:	4b78      	ldr	r3, [pc, #480]	; (6000a014 <usb_get_device_descriptor+0x26c>)
60009e32:	e9c2 3405 	strd	r3, r4, [r2, #20]
60009e36:	2303      	movs	r3, #3
60009e38:	f842 3f10 	str.w	r3, [r2, #16]!
60009e3c:	2300      	movs	r3, #0
60009e3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60009e42:	4875      	ldr	r0, [pc, #468]	; (6000a018 <usb_get_device_descriptor+0x270>)
60009e44:	f7fe fe3e 	bl	60008ac4 <z_impl_z_log_msg_static_create>
60009e48:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
60009e4a:	4b74      	ldr	r3, [pc, #464]	; (6000a01c <usb_get_device_descriptor+0x274>)
60009e4c:	627b      	str	r3, [r7, #36]	; 0x24
60009e4e:	2302      	movs	r3, #2
60009e50:	623b      	str	r3, [r7, #32]
60009e52:	4871      	ldr	r0, [pc, #452]	; (6000a018 <usb_get_device_descriptor+0x270>)
60009e54:	2300      	movs	r3, #0
60009e56:	f107 0220 	add.w	r2, r7, #32
60009e5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009e5e:	f7fe fe31 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		return NULL;
60009e62:	2000      	movs	r0, #0
60009e64:	e7b2      	b.n	60009dcc <usb_get_device_descriptor+0x24>
				if (cfg_data->interface_config) {
60009e66:	68ab      	ldr	r3, [r5, #8]
60009e68:	b113      	cbz	r3, 60009e70 <usb_get_device_descriptor+0xc8>
					cfg_data->interface_config(head,
60009e6a:	4651      	mov	r1, sl
60009e6c:	4620      	mov	r0, r4
60009e6e:	4798      	blx	r3
			numof_ifaces++;
60009e70:	f10a 0a01 	add.w	sl, sl, #1
60009e74:	fa5f fa8a 	uxtb.w	sl, sl
			break;
60009e78:	e7b5      	b.n	60009de6 <usb_get_device_descriptor+0x3e>
			if (!cfg_data) {
60009e7a:	2d00      	cmp	r5, #0
60009e7c:	d160      	bne.n	60009f40 <usb_get_device_descriptor+0x198>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
60009e7e:	4b68      	ldr	r3, [pc, #416]	; (6000a020 <usb_get_device_descriptor+0x278>)
				LOG_ERR("Failed to validate endpoints");
60009e80:	627b      	str	r3, [r7, #36]	; 0x24
60009e82:	2302      	movs	r3, #2
60009e84:	623b      	str	r3, [r7, #32]
60009e86:	2300      	movs	r3, #0
60009e88:	f107 0220 	add.w	r2, r7, #32
60009e8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009e90:	4861      	ldr	r0, [pc, #388]	; (6000a018 <usb_get_device_descriptor+0x270>)
60009e92:	f7fe fe17 	bl	60008ac4 <z_impl_z_log_msg_static_create>
				return -1;
60009e96:	e7d8      	b.n	60009e4a <usb_get_device_descriptor+0xa2>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
60009e98:	6a29      	ldr	r1, [r5, #32]
60009e9a:	78a0      	ldrb	r0, [r4, #2]
60009e9c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
60009ea0:	790b      	ldrb	r3, [r1, #4]
60009ea2:	4298      	cmp	r0, r3
60009ea4:	d005      	beq.n	60009eb2 <usb_get_device_descriptor+0x10a>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
60009ea6:	3201      	adds	r2, #1
60009ea8:	7f2b      	ldrb	r3, [r5, #28]
60009eaa:	429a      	cmp	r2, r3
60009eac:	d3f4      	bcc.n	60009e98 <usb_get_device_descriptor+0xf0>
				LOG_ERR("Failed to validate endpoints");
60009eae:	4b5d      	ldr	r3, [pc, #372]	; (6000a024 <usb_get_device_descriptor+0x27c>)
60009eb0:	e7e6      	b.n	60009e80 <usb_get_device_descriptor+0xd8>
60009eb2:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
60009eb6:	78e0      	ldrb	r0, [r4, #3]
60009eb8:	fa5f f389 	uxtb.w	r3, r9
60009ebc:	f000 0003 	and.w	r0, r0, #3
60009ec0:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
60009ec2:	7920      	ldrb	r0, [r4, #4]
60009ec4:	f894 c005 	ldrb.w	ip, [r4, #5]
60009ec8:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
60009ecc:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
60009ece:	f994 0002 	ldrsb.w	r0, [r4, #2]
60009ed2:	2800      	cmp	r0, #0
60009ed4:	da26      	bge.n	60009f24 <usb_get_device_descriptor+0x17c>
				if ((*requested_ep & (1U << (idx + 16U)))) {
60009ed6:	f109 0010 	add.w	r0, r9, #16
60009eda:	f04f 0c01 	mov.w	ip, #1
60009ede:	fa0c f000 	lsl.w	r0, ip, r0
60009ee2:	ea10 0f0b 	tst.w	r0, fp
60009ee6:	d125      	bne.n	60009f34 <usb_get_device_descriptor+0x18c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
60009ee8:	f043 0080 	orr.w	r0, r3, #128	; 0x80
60009eec:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
60009eee:	f107 0010 	add.w	r0, r7, #16
60009ef2:	60fa      	str	r2, [r7, #12]
60009ef4:	e9c7 3101 	strd	r3, r1, [r7, #4]
60009ef8:	f001 fdbe 	bl	6000ba78 <usb_dc_ep_check_cap>
60009efc:	687b      	ldr	r3, [r7, #4]
60009efe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
60009f02:	b9b8      	cbnz	r0, 60009f34 <usb_get_device_descriptor+0x18c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
60009f04:	7c3a      	ldrb	r2, [r7, #16]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
60009f06:	f012 0f80 	tst.w	r2, #128	; 0x80
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
60009f0a:	70a2      	strb	r2, [r4, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
60009f0c:	710a      	strb	r2, [r1, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
60009f0e:	f04f 0201 	mov.w	r2, #1
					*requested_ep |= (1U << (idx + 16U));
60009f12:	bf17      	itett	ne
60009f14:	3310      	addne	r3, #16
					*requested_ep |= (1U << idx);
60009f16:	fa02 f209 	lsleq.w	r2, r2, r9
					*requested_ep |= (1U << (idx + 16U));
60009f1a:	b2db      	uxtbne	r3, r3
60009f1c:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
60009f1e:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
60009f22:	e760      	b.n	60009de6 <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
60009f24:	2001      	movs	r0, #1
60009f26:	fa00 f009 	lsl.w	r0, r0, r9
60009f2a:	ea10 0f0b 	tst.w	r0, fp
60009f2e:	d101      	bne.n	60009f34 <usb_get_device_descriptor+0x18c>
60009f30:	4618      	mov	r0, r3
60009f32:	e7db      	b.n	60009eec <usb_get_device_descriptor+0x144>
		for (uint8_t idx = 1; idx < 16U; idx++) {
60009f34:	f109 0901 	add.w	r9, r9, #1
60009f38:	f1b9 0f10 	cmp.w	r9, #16
60009f3c:	d1bb      	bne.n	60009eb6 <usb_get_device_descriptor+0x10e>
60009f3e:	e7b2      	b.n	60009ea6 <usb_get_device_descriptor+0xfe>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
60009f40:	2200      	movs	r2, #0
60009f42:	e7b1      	b.n	60009ea8 <usb_get_device_descriptor+0x100>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
60009f44:	2e03      	cmp	r6, #3
60009f46:	d12a      	bne.n	60009f9e <usb_get_device_descriptor+0x1f6>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
60009f48:	f7ff fee8 	bl	60009d1c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
60009f4c:	4681      	mov	r9, r0
60009f4e:	b1a8      	cbz	r0, 60009f7c <usb_get_device_descriptor+0x1d4>
	runtime_sn_len = strlen(runtime_sn);
60009f50:	f7f8 f9b6 	bl	600022c0 <strlen>
	if (!runtime_sn_len) {
60009f54:	60f8      	str	r0, [r7, #12]
60009f56:	b188      	cbz	r0, 60009f7c <usb_get_device_descriptor+0x1d4>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
60009f58:	4833      	ldr	r0, [pc, #204]	; (6000a028 <usb_get_device_descriptor+0x280>)
60009f5a:	f7f8 f9b1 	bl	600022c0 <strlen>
	if (runtime_sn_len != default_sn_len) {
60009f5e:	68fa      	ldr	r2, [r7, #12]
60009f60:	4282      	cmp	r2, r0
60009f62:	d017      	beq.n	60009f94 <usb_get_device_descriptor+0x1ec>
		LOG_ERR("the new SN descriptor doesn't have the same "
60009f64:	4b31      	ldr	r3, [pc, #196]	; (6000a02c <usb_get_device_descriptor+0x284>)
60009f66:	627b      	str	r3, [r7, #36]	; 0x24
60009f68:	2302      	movs	r3, #2
60009f6a:	623b      	str	r3, [r7, #32]
60009f6c:	2300      	movs	r3, #0
60009f6e:	f107 0220 	add.w	r2, r7, #32
60009f72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60009f76:	4828      	ldr	r0, [pc, #160]	; (6000a018 <usb_get_device_descriptor+0x270>)
60009f78:	f7fe fda4 	bl	60008ac4 <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
60009f7c:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
60009f7e:	f06f 0002 	mvn.w	r0, #2
60009f82:	18e2      	adds	r2, r4, r3
60009f84:	1b00      	subs	r0, r0, r4
60009f86:	eb04 0353 	add.w	r3, r4, r3, lsr #1
60009f8a:	42d0      	cmn	r0, r2
60009f8c:	d50e      	bpl.n	60009fac <usb_get_device_descriptor+0x204>
			str_descr_idx += 1U;
60009f8e:	3601      	adds	r6, #1
60009f90:	b2f6      	uxtb	r6, r6
			break;
60009f92:	e728      	b.n	60009de6 <usb_get_device_descriptor+0x3e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
60009f94:	4649      	mov	r1, r9
60009f96:	1ca0      	adds	r0, r4, #2
60009f98:	f7f9 fbce 	bl	60003738 <memcpy>
			if (str_descr_idx) {
60009f9c:	e7ee      	b.n	60009f7c <usb_get_device_descriptor+0x1d4>
60009f9e:	2e00      	cmp	r6, #0
60009fa0:	d1ec      	bne.n	60009f7c <usb_get_device_descriptor+0x1d4>
				if (!cfg_descr) {
60009fa2:	f1b8 0f00 	cmp.w	r8, #0
60009fa6:	d119      	bne.n	60009fdc <usb_get_device_descriptor+0x234>
					LOG_ERR("Incomplete device descriptor");
60009fa8:	4b21      	ldr	r3, [pc, #132]	; (6000a030 <usb_get_device_descriptor+0x288>)
60009faa:	e769      	b.n	60009e80 <usb_get_device_descriptor+0xd8>
		__ASSERT(buf[ascii_idx_max] > 0x1F && buf[ascii_idx_max] < 0x7F,
60009fac:	7819      	ldrb	r1, [r3, #0]
60009fae:	3920      	subs	r1, #32
60009fb0:	295e      	cmp	r1, #94	; 0x5e
60009fb2:	d90a      	bls.n	60009fca <usb_get_device_descriptor+0x222>
60009fb4:	491f      	ldr	r1, [pc, #124]	; (6000a034 <usb_get_device_descriptor+0x28c>)
60009fb6:	23b3      	movs	r3, #179	; 0xb3
60009fb8:	4a13      	ldr	r2, [pc, #76]	; (6000a008 <usb_get_device_descriptor+0x260>)
60009fba:	4814      	ldr	r0, [pc, #80]	; (6000a00c <usb_get_device_descriptor+0x264>)
60009fbc:	f00d ffa1 	bl	60017f02 <assert_print>
60009fc0:	481d      	ldr	r0, [pc, #116]	; (6000a038 <usb_get_device_descriptor+0x290>)
60009fc2:	f00d ff9e 	bl	60017f02 <assert_print>
60009fc6:	21b3      	movs	r1, #179	; 0xb3
60009fc8:	e72b      	b.n	60009e22 <usb_get_device_descriptor+0x7a>
		buf[i] = 0U;
60009fca:	f04f 0100 	mov.w	r1, #0
60009fce:	f802 1c01 	strb.w	r1, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
60009fd2:	f813 1901 	ldrb.w	r1, [r3], #-1
60009fd6:	f802 1d02 	strb.w	r1, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
60009fda:	e7d6      	b.n	60009f8a <usb_get_device_descriptor+0x1e2>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
60009fdc:	eba4 0308 	sub.w	r3, r4, r8
				cfg_descr->bNumInterfaces = numof_ifaces;
60009fe0:	f888 a004 	strb.w	sl, [r8, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
60009fe4:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
60009fe8:	f3c3 2307 	ubfx	r3, r3, #8, #8
60009fec:	f888 3003 	strb.w	r3, [r8, #3]
60009ff0:	e7cd      	b.n	60009f8e <usb_get_device_descriptor+0x1e6>
60009ff2:	bf00      	nop
60009ff4:	20203544 	.word	0x20203544
60009ff8:	2020360b 	.word	0x2020360b
60009ffc:	2020360c 	.word	0x2020360c
6000a000:	20203630 	.word	0x20203630
6000a004:	6001cb13 	.word	0x6001cb13
6000a008:	6001cce8 	.word	0x6001cce8
6000a00c:	6001c3d7 	.word	0x6001c3d7
6000a010:	6001c858 	.word	0x6001c858
6000a014:	6001cd1e 	.word	0x6001cd1e
6000a018:	6001a40c 	.word	0x6001a40c
6000a01c:	6001ce85 	.word	0x6001ce85
6000a020:	6001cd3e 	.word	0x6001cd3e
6000a024:	6001cd7f 	.word	0x6001cd7f
6000a028:	6001ccd7 	.word	0x6001ccd7
6000a02c:	6001cd9c 	.word	0x6001cd9c
6000a030:	6001ce68 	.word	0x6001ce68
6000a034:	6001cde7 	.word	0x6001cde7
6000a038:	6001ce1e 	.word	0x6001ce1e

6000a03c <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
6000a03c:	4b08      	ldr	r3, [pc, #32]	; (6000a060 <usb_ep_get_transfer+0x24>)
6000a03e:	2100      	movs	r1, #0
6000a040:	461a      	mov	r2, r3
{
6000a042:	b510      	push	{r4, lr}
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
6000a044:	781c      	ldrb	r4, [r3, #0]
6000a046:	4284      	cmp	r4, r0
6000a048:	d104      	bne.n	6000a054 <usb_ep_get_transfer+0x18>
6000a04a:	685c      	ldr	r4, [r3, #4]
6000a04c:	b114      	cbz	r4, 6000a054 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
6000a04e:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
6000a052:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
6000a054:	3101      	adds	r1, #1
6000a056:	3340      	adds	r3, #64	; 0x40
6000a058:	2904      	cmp	r1, #4
6000a05a:	d1f3      	bne.n	6000a044 <usb_ep_get_transfer+0x8>
	return NULL;
6000a05c:	2000      	movs	r0, #0
6000a05e:	e7f8      	b.n	6000a052 <usb_ep_get_transfer+0x16>
6000a060:	202048e8 	.word	0x202048e8

6000a064 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
6000a064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
6000a068:	b083      	sub	sp, #12
6000a06a:	4604      	mov	r4, r0
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
6000a06c:	f850 3c28 	ldr.w	r3, [r0, #-40]
{
6000a070:	af00      	add	r7, sp, #0
	ep = trans->ep;
6000a072:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
6000a076:	3310      	adds	r3, #16
6000a078:	d111      	bne.n	6000a09e <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
6000a07a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
6000a07c:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
6000a080:	f013 0602 	ands.w	r6, r3, #2
6000a084:	d04e      	beq.n	6000a124 <usb_transfer_work+0xc0>
		if (!trans->bsize) {
6000a086:	bb0a      	cbnz	r2, 6000a0cc <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
6000a088:	f013 0304 	ands.w	r3, r3, #4
6000a08c:	d104      	bne.n	6000a098 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
6000a08e:	461a      	mov	r2, r3
6000a090:	4619      	mov	r1, r3
6000a092:	4628      	mov	r0, r5
6000a094:	f7ff fc7c 	bl	60009990 <usb_write>
			}
			trans->status = 0;
6000a098:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
6000a09a:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
6000a09e:	f854 3c28 	ldr.w	r3, [r4, #-40]
6000a0a2:	3310      	adds	r3, #16
6000a0a4:	d00e      	beq.n	6000a0c4 <usb_transfer_work+0x60>
6000a0a6:	f854 6c18 	ldr.w	r6, [r4, #-24]
6000a0aa:	b15e      	cbz	r6, 6000a0c4 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
6000a0ac:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
6000a0b0:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
6000a0b4:	f00f fc07 	bl	600198c6 <k_is_in_isr>
6000a0b8:	2800      	cmp	r0, #0
6000a0ba:	d06f      	beq.n	6000a19c <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a0bc:	4621      	mov	r1, r4
6000a0be:	483f      	ldr	r0, [pc, #252]	; (6000a1bc <usb_transfer_work+0x158>)
6000a0c0:	f00f fc3b 	bl	6001993a <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
6000a0c4:	370c      	adds	r7, #12
6000a0c6:	46bd      	mov	sp, r7
6000a0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
6000a0cc:	f850 1c24 	ldr.w	r1, [r0, #-36]
6000a0d0:	1d3b      	adds	r3, r7, #4
6000a0d2:	4628      	mov	r0, r5
6000a0d4:	f7ff fc5c 	bl	60009990 <usb_write>
		if (ret) {
6000a0d8:	b198      	cbz	r0, 6000a102 <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
6000a0da:	466e      	mov	r6, sp
6000a0dc:	b088      	sub	sp, #32
6000a0de:	466a      	mov	r2, sp
6000a0e0:	4b37      	ldr	r3, [pc, #220]	; (6000a1c0 <usb_transfer_work+0x15c>)
6000a0e2:	61d5      	str	r5, [r2, #28]
6000a0e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
6000a0e8:	2304      	movs	r3, #4
6000a0ea:	f842 3f10 	str.w	r3, [r2, #16]!
6000a0ee:	2300      	movs	r3, #0
6000a0f0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
6000a0f4:	4833      	ldr	r0, [pc, #204]	; (6000a1c4 <usb_transfer_work+0x160>)
6000a0f6:	f7fe fce5 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000a0fa:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
6000a0fc:	f06f 0315 	mvn.w	r3, #21
6000a100:	e7cb      	b.n	6000a09a <usb_transfer_work+0x36>
		trans->buffer += bytes;
6000a102:	687a      	ldr	r2, [r7, #4]
6000a104:	f854 3c24 	ldr.w	r3, [r4, #-36]
6000a108:	4413      	add	r3, r2
6000a10a:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
6000a10e:	f854 3c20 	ldr.w	r3, [r4, #-32]
6000a112:	1a9b      	subs	r3, r3, r2
6000a114:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
6000a118:	f854 3c1c 	ldr.w	r3, [r4, #-28]
6000a11c:	4413      	add	r3, r2
6000a11e:	f844 3c1c 	str.w	r3, [r4, #-28]
6000a122:	e7bc      	b.n	6000a09e <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
6000a124:	f850 1c24 	ldr.w	r1, [r0, #-36]
6000a128:	1d3b      	adds	r3, r7, #4
6000a12a:	4628      	mov	r0, r5
6000a12c:	f001 ff84 	bl	6000c038 <usb_dc_ep_read_wait>
		if (ret) {
6000a130:	b188      	cbz	r0, 6000a156 <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
6000a132:	46e8      	mov	r8, sp
6000a134:	b088      	sub	sp, #32
6000a136:	466a      	mov	r2, sp
6000a138:	4b21      	ldr	r3, [pc, #132]	; (6000a1c0 <usb_transfer_work+0x15c>)
6000a13a:	61d5      	str	r5, [r2, #28]
6000a13c:	e9c2 3005 	strd	r3, r0, [r2, #20]
6000a140:	2304      	movs	r3, #4
6000a142:	f842 3f10 	str.w	r3, [r2, #16]!
6000a146:	f44f 5101 	mov.w	r1, #8256	; 0x2040
6000a14a:	4633      	mov	r3, r6
6000a14c:	481d      	ldr	r0, [pc, #116]	; (6000a1c4 <usb_transfer_work+0x160>)
6000a14e:	f7fe fcb9 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000a152:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
6000a154:	e7d2      	b.n	6000a0fc <usb_transfer_work+0x98>
		trans->buffer += bytes;
6000a156:	687e      	ldr	r6, [r7, #4]
6000a158:	f854 3c24 	ldr.w	r3, [r4, #-36]
6000a15c:	4433      	add	r3, r6
6000a15e:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
6000a162:	f854 3c20 	ldr.w	r3, [r4, #-32]
6000a166:	1b9b      	subs	r3, r3, r6
6000a168:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
6000a16c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
6000a170:	4433      	add	r3, r6
6000a172:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
6000a176:	2e00      	cmp	r6, #0
6000a178:	d08e      	beq.n	6000a098 <usb_transfer_work+0x34>
6000a17a:	4628      	mov	r0, r5
6000a17c:	f002 f898 	bl	6000c2b0 <usb_dc_ep_mps>
6000a180:	fbb6 f3f0 	udiv	r3, r6, r0
6000a184:	fb03 6610 	mls	r6, r3, r0, r6
6000a188:	2e00      	cmp	r6, #0
6000a18a:	d185      	bne.n	6000a098 <usb_transfer_work+0x34>
6000a18c:	f854 3c20 	ldr.w	r3, [r4, #-32]
6000a190:	2b00      	cmp	r3, #0
6000a192:	d081      	beq.n	6000a098 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
6000a194:	4628      	mov	r0, r5
6000a196:	f001 ffe7 	bl	6000c168 <usb_dc_ep_read_continue>
6000a19a:	e780      	b.n	6000a09e <usb_transfer_work+0x3a>
		trans->cb = NULL;
6000a19c:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
6000a1a0:	f1a4 0010 	sub.w	r0, r4, #16
6000a1a4:	f006 f902 	bl	600103ac <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
6000a1a8:	f854 3c28 	ldr.w	r3, [r4, #-40]
6000a1ac:	338c      	adds	r3, #140	; 0x8c
6000a1ae:	d089      	beq.n	6000a0c4 <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
6000a1b0:	464a      	mov	r2, r9
6000a1b2:	4641      	mov	r1, r8
6000a1b4:	4628      	mov	r0, r5
6000a1b6:	47b0      	blx	r6
6000a1b8:	e784      	b.n	6000a0c4 <usb_transfer_work+0x60>
6000a1ba:	bf00      	nop
6000a1bc:	20204460 	.word	0x20204460
6000a1c0:	6001ceb3 	.word	0x6001ceb3
6000a1c4:	6001a41c 	.word	0x6001a41c

6000a1c8 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
6000a1c8:	1e4b      	subs	r3, r1, #1
6000a1ca:	2b01      	cmp	r3, #1
{
6000a1cc:	b570      	push	{r4, r5, r6, lr}
6000a1ce:	4606      	mov	r6, r0
6000a1d0:	b088      	sub	sp, #32
6000a1d2:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
6000a1d4:	d818      	bhi.n	6000a208 <usb_transfer_ep_callback+0x40>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
6000a1d6:	f7ff ff31 	bl	6000a03c <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
6000a1da:	4604      	mov	r4, r0
6000a1dc:	b9b0      	cbnz	r0, 6000a20c <usb_transfer_ep_callback+0x44>
		if (status == USB_DC_EP_DATA_OUT) {
6000a1de:	2d01      	cmp	r5, #1
6000a1e0:	d112      	bne.n	6000a208 <usb_transfer_ep_callback+0x40>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
6000a1e2:	ab01      	add	r3, sp, #4
6000a1e4:	2201      	movs	r2, #1
6000a1e6:	a902      	add	r1, sp, #8
6000a1e8:	4630      	mov	r0, r6
6000a1ea:	f001 ff25 	bl	6000c038 <usb_dc_ep_read_wait>
			} while (bytes);
6000a1ee:	9b01      	ldr	r3, [sp, #4]
6000a1f0:	2b00      	cmp	r3, #0
6000a1f2:	d1f6      	bne.n	6000a1e2 <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
6000a1f4:	4a0f      	ldr	r2, [pc, #60]	; (6000a234 <usb_transfer_ep_callback+0x6c>)
6000a1f6:	9207      	str	r2, [sp, #28]
6000a1f8:	2202      	movs	r2, #2
6000a1fa:	9206      	str	r2, [sp, #24]
6000a1fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a200:	aa06      	add	r2, sp, #24
6000a202:	480d      	ldr	r0, [pc, #52]	; (6000a238 <usb_transfer_ep_callback+0x70>)
6000a204:	f7fe fc5e 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
6000a208:	b008      	add	sp, #32
6000a20a:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
6000a20c:	f00f fb5b 	bl	600198c6 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a210:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
6000a214:	b108      	cbz	r0, 6000a21a <usb_transfer_ep_callback+0x52>
6000a216:	2d01      	cmp	r5, #1
6000a218:	d105      	bne.n	6000a226 <usb_transfer_ep_callback+0x5e>
		usb_transfer_work(&trans->work);
6000a21a:	4608      	mov	r0, r1
}
6000a21c:	b008      	add	sp, #32
6000a21e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
6000a222:	f7ff bf1f 	b.w	6000a064 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a226:	4805      	ldr	r0, [pc, #20]	; (6000a23c <usb_transfer_ep_callback+0x74>)
}
6000a228:	b008      	add	sp, #32
6000a22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a22e:	f00f bb84 	b.w	6001993a <k_work_submit_to_queue>
6000a232:	bf00      	nop
6000a234:	6001ced0 	.word	0x6001ced0
6000a238:	6001a41c 	.word	0x6001a41c
6000a23c:	20204460 	.word	0x20204460

6000a240 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
6000a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000a244:	b08b      	sub	sp, #44	; 0x2c
6000a246:	4605      	mov	r5, r0
6000a248:	4616      	mov	r6, r2
6000a24a:	af00      	add	r7, sp, #0
6000a24c:	60b9      	str	r1, [r7, #8]
6000a24e:	60fb      	str	r3, [r7, #12]
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
6000a250:	f00e f848 	bl	600182e4 <usb_transfer_is_busy>
6000a254:	2800      	cmp	r0, #0
6000a256:	f040 8086 	bne.w	6000a366 <usb_transfer+0x126>
	__asm__ volatile(
6000a25a:	f04f 0310 	mov.w	r3, #16
6000a25e:	f3ef 8211 	mrs	r2, BASEPRI
6000a262:	f383 8812 	msr	BASEPRI_MAX, r3
6000a266:	f3bf 8f6f 	isb	sy
6000a26a:	f8df a100 	ldr.w	sl, [pc, #256]	; 6000a36c <usb_transfer+0x12c>
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
6000a26e:	4681      	mov	r9, r0
6000a270:	607a      	str	r2, [r7, #4]
	return z_impl_k_sem_take(sem, timeout);
6000a272:	2300      	movs	r3, #0
6000a274:	2200      	movs	r2, #0
6000a276:	4650      	mov	r0, sl
6000a278:	f006 f8d6 	bl	60010428 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
6000a27c:	4603      	mov	r3, r0
6000a27e:	b9e8      	cbnz	r0, 6000a2bc <usb_transfer+0x7c>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
6000a280:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 6000a370 <usb_transfer+0x130>
6000a284:	ea4f 1889 	mov.w	r8, r9, lsl #6
6000a288:	eb0b 1989 	add.w	r9, fp, r9, lsl #6
6000a28c:	f8d9 4004 	ldr.w	r4, [r9, #4]
6000a290:	f114 0f10 	cmn.w	r4, #16
6000a294:	d131      	bne.n	6000a2fa <usb_transfer+0xba>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
6000a296:	466e      	mov	r6, sp
6000a298:	b088      	sub	sp, #32
6000a29a:	466a      	mov	r2, sp
6000a29c:	4935      	ldr	r1, [pc, #212]	; (6000a374 <usb_transfer+0x134>)
6000a29e:	e9c2 1505 	strd	r1, r5, [r2, #20]
6000a2a2:	2103      	movs	r1, #3
6000a2a4:	f842 1f10 	str.w	r1, [r2, #16]!
6000a2a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000a2ac:	4832      	ldr	r0, [pc, #200]	; (6000a378 <usb_transfer+0x138>)
6000a2ae:	f7fe fc09 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000a2b2:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
6000a2b4:	4650      	mov	r0, sl
6000a2b6:	f006 f879 	bl	600103ac <z_impl_k_sem_give>
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
6000a2ba:	e014      	b.n	6000a2e6 <usb_transfer+0xa6>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
6000a2bc:	f109 0901 	add.w	r9, r9, #1
6000a2c0:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
6000a2c4:	f1b9 0f04 	cmp.w	r9, #4
6000a2c8:	d1d3      	bne.n	6000a272 <usb_transfer+0x32>
		LOG_ERR("No transfer slot available");
6000a2ca:	4b2c      	ldr	r3, [pc, #176]	; (6000a37c <usb_transfer+0x13c>)
6000a2cc:	627b      	str	r3, [r7, #36]	; 0x24
6000a2ce:	2302      	movs	r3, #2
6000a2d0:	623b      	str	r3, [r7, #32]
		ret = -ENOMEM;
6000a2d2:	f06f 040b 	mvn.w	r4, #11
6000a2d6:	2300      	movs	r3, #0
6000a2d8:	f107 0220 	add.w	r2, r7, #32
6000a2dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000a2e0:	4825      	ldr	r0, [pc, #148]	; (6000a378 <usb_transfer+0x138>)
6000a2e2:	f7fe fbef 	bl	60008ac4 <z_impl_z_log_msg_static_create>
	__asm__ volatile(
6000a2e6:	687b      	ldr	r3, [r7, #4]
6000a2e8:	f383 8811 	msr	BASEPRI, r3
6000a2ec:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
6000a2f0:	4620      	mov	r0, r4
6000a2f2:	372c      	adds	r7, #44	; 0x2c
6000a2f4:	46bd      	mov	sp, r7
6000a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->cb = cb;
6000a2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	trans->buffer = data;
6000a2fc:	68ba      	ldr	r2, [r7, #8]
	trans->cb = cb;
6000a2fe:	f8c9 3014 	str.w	r3, [r9, #20]
	trans->flags = flags;
6000a302:	68fb      	ldr	r3, [r7, #12]
	trans->tsize = 0;
6000a304:	f8c9 0010 	str.w	r0, [r9, #16]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
6000a308:	4628      	mov	r0, r5
	trans->flags = flags;
6000a30a:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	trans->priv = cb_data;
6000a30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	trans->ep = ep;
6000a310:	f80b 5008 	strb.w	r5, [fp, r8]
	trans->priv = cb_data;
6000a314:	f8c9 3018 	str.w	r3, [r9, #24]
	trans->status = -EBUSY;
6000a318:	f06f 030f 	mvn.w	r3, #15
	trans->bsize = dlen;
6000a31c:	e9c9 2602 	strd	r2, r6, [r9, #8]
	trans->status = -EBUSY;
6000a320:	f8c9 3004 	str.w	r3, [r9, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
6000a324:	f001 ffc4 	bl	6000c2b0 <usb_dc_ep_mps>
6000a328:	b168      	cbz	r0, 6000a346 <usb_transfer+0x106>
6000a32a:	4628      	mov	r0, r5
6000a32c:	f001 ffc0 	bl	6000c2b0 <usb_dc_ep_mps>
6000a330:	fbb6 f3f0 	udiv	r3, r6, r0
6000a334:	fb03 6610 	mls	r6, r3, r0, r6
6000a338:	b12e      	cbz	r6, 6000a346 <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
6000a33a:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
6000a33e:	f043 0304 	orr.w	r3, r3, #4
6000a342:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
6000a346:	68fb      	ldr	r3, [r7, #12]
6000a348:	079b      	lsls	r3, r3, #30
6000a34a:	d507      	bpl.n	6000a35c <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a34c:	f108 012c 	add.w	r1, r8, #44	; 0x2c
6000a350:	480b      	ldr	r0, [pc, #44]	; (6000a380 <usb_transfer+0x140>)
	int i, key, ret = 0;
6000a352:	2400      	movs	r4, #0
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a354:	4459      	add	r1, fp
6000a356:	f00f faf0 	bl	6001993a <k_work_submit_to_queue>
6000a35a:	e7c4      	b.n	6000a2e6 <usb_transfer+0xa6>
		ret = usb_dc_ep_read_continue(ep);
6000a35c:	4628      	mov	r0, r5
6000a35e:	f001 ff03 	bl	6000c168 <usb_dc_ep_read_continue>
6000a362:	4604      	mov	r4, r0
6000a364:	e7bf      	b.n	6000a2e6 <usb_transfer+0xa6>
		return -EBUSY;
6000a366:	f06f 040f 	mvn.w	r4, #15
6000a36a:	e7c1      	b.n	6000a2f0 <usb_transfer+0xb0>
6000a36c:	20204904 	.word	0x20204904
6000a370:	202048e8 	.word	0x202048e8
6000a374:	6001cf05 	.word	0x6001cf05
6000a378:	6001a41c 	.word	0x6001a41c
6000a37c:	6001ceea 	.word	0x6001ceea
6000a380:	20204460 	.word	0x20204460

6000a384 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
6000a384:	b510      	push	{r4, lr}
	__asm__ volatile(
6000a386:	f04f 0310 	mov.w	r3, #16
6000a38a:	f3ef 8411 	mrs	r4, BASEPRI
6000a38e:	f383 8812 	msr	BASEPRI_MAX, r3
6000a392:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
6000a396:	f7ff fe51 	bl	6000a03c <usb_ep_get_transfer>
	if (!trans) {
6000a39a:	b150      	cbz	r0, 6000a3b2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
6000a39c:	6843      	ldr	r3, [r0, #4]
6000a39e:	3310      	adds	r3, #16
6000a3a0:	d107      	bne.n	6000a3b2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
6000a3a2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a3a6:	f100 012c 	add.w	r1, r0, #44	; 0x2c
	trans->status = -ECANCELED;
6000a3aa:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a3ac:	4803      	ldr	r0, [pc, #12]	; (6000a3bc <usb_cancel_transfer+0x38>)
6000a3ae:	f00f fac4 	bl	6001993a <k_work_submit_to_queue>
	__asm__ volatile(
6000a3b2:	f384 8811 	msr	BASEPRI, r4
6000a3b6:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
6000a3ba:	bd10      	pop	{r4, pc}
6000a3bc:	20204460 	.word	0x20204460

6000a3c0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
6000a3c0:	b570      	push	{r4, r5, r6, lr}
6000a3c2:	4c0f      	ldr	r4, [pc, #60]	; (6000a400 <usb_cancel_transfers+0x40>)
6000a3c4:	2504      	movs	r5, #4
	__asm__ volatile(
6000a3c6:	f04f 0310 	mov.w	r3, #16
6000a3ca:	f3ef 8611 	mrs	r6, BASEPRI
6000a3ce:	f383 8812 	msr	BASEPRI_MAX, r3
6000a3d2:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
6000a3d6:	6863      	ldr	r3, [r4, #4]
6000a3d8:	3310      	adds	r3, #16
6000a3da:	d107      	bne.n	6000a3ec <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
6000a3dc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a3e0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
6000a3e4:	4807      	ldr	r0, [pc, #28]	; (6000a404 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
6000a3e6:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
6000a3e8:	f00f faa7 	bl	6001993a <k_work_submit_to_queue>
	__asm__ volatile(
6000a3ec:	f386 8811 	msr	BASEPRI, r6
6000a3f0:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
6000a3f4:	3d01      	subs	r5, #1
6000a3f6:	f104 0440 	add.w	r4, r4, #64	; 0x40
6000a3fa:	d1e4      	bne.n	6000a3c6 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
6000a3fc:	bd70      	pop	{r4, r5, r6, pc}
6000a3fe:	bf00      	nop
6000a400:	202048e8 	.word	0x202048e8
6000a404:	20204460 	.word	0x20204460

6000a408 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
6000a408:	b570      	push	{r4, r5, r6, lr}
6000a40a:	4c09      	ldr	r4, [pc, #36]	; (6000a430 <usb_transfer_init+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
6000a40c:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
6000a40e:	4e09      	ldr	r6, [pc, #36]	; (6000a434 <usb_transfer_init+0x2c>)
6000a410:	4631      	mov	r1, r6
6000a412:	4620      	mov	r0, r4
6000a414:	f006 fa34 	bl	60010880 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
6000a418:	2201      	movs	r2, #1
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
6000a41a:	3501      	adds	r5, #1
6000a41c:	f1a4 0010 	sub.w	r0, r4, #16
6000a420:	3440      	adds	r4, #64	; 0x40
6000a422:	4611      	mov	r1, r2
6000a424:	f00f fa6b 	bl	600198fe <z_impl_k_sem_init>
6000a428:	2d04      	cmp	r5, #4
6000a42a:	d1f1      	bne.n	6000a410 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
6000a42c:	2000      	movs	r0, #0
6000a42e:	bd70      	pop	{r4, r5, r6, pc}
6000a430:	20204914 	.word	0x20204914
6000a434:	6000a065 	.word	0x6000a065

6000a438 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
6000a438:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
6000a43a:	4804      	ldr	r0, [pc, #16]	; (6000a44c <cdc_acm_int_in+0x14>)
{
6000a43c:	b508      	push	{r3, lr}
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
6000a43e:	f00d ff3b 	bl	600182b8 <usb_get_dev_data_by_ep>
	if (common == NULL) {
6000a442:	b110      	cbz	r0, 6000a44a <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
6000a444:	2301      	movs	r3, #1
6000a446:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
6000a44a:	bd08      	pop	{r3, pc}
6000a44c:	202049e8 	.word	0x202049e8

6000a450 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
6000a450:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
6000a452:	2301      	movs	r3, #1
6000a454:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
6000a458:	680b      	ldr	r3, [r1, #0]
6000a45a:	b133      	cbz	r3, 6000a46a <cdc_acm_irq_rx_enable+0x1a>
6000a45c:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
6000a460:	b11b      	cbz	r3, 6000a46a <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
6000a462:	3108      	adds	r1, #8
6000a464:	4801      	ldr	r0, [pc, #4]	; (6000a46c <cdc_acm_irq_rx_enable+0x1c>)
6000a466:	f00f ba68 	b.w	6001993a <k_work_submit_to_queue>
	}
}
6000a46a:	4770      	bx	lr
6000a46c:	20204460 	.word	0x20204460

6000a470 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
6000a470:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
6000a472:	2301      	movs	r3, #1
6000a474:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
6000a478:	680b      	ldr	r3, [r1, #0]
6000a47a:	b133      	cbz	r3, 6000a48a <cdc_acm_irq_tx_enable+0x1a>
6000a47c:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
6000a480:	b11b      	cbz	r3, 6000a48a <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
6000a482:	3108      	adds	r1, #8
6000a484:	4801      	ldr	r0, [pc, #4]	; (6000a48c <cdc_acm_irq_tx_enable+0x1c>)
6000a486:	f00f ba58 	b.w	6001993a <k_work_submit_to_queue>
}
6000a48a:	4770      	bx	lr
6000a48c:	20204460 	.word	0x20204460

6000a490 <cdc_acm_fifo_fill>:
{
6000a490:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
6000a492:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
6000a494:	f895 025e 	ldrb.w	r0, [r5, #606]	; 0x25e
6000a498:	b188      	cbz	r0, 6000a4be <cdc_acm_fifo_fill+0x2e>
6000a49a:	f895 325f 	ldrb.w	r3, [r5, #607]	; 0x25f
6000a49e:	b97b      	cbnz	r3, 6000a4c0 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
6000a4a0:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
6000a4a4:	f8d5 0250 	ldr.w	r0, [r5, #592]	; 0x250
6000a4a8:	f7fd fc48 	bl	60007d3c <ring_buf_put>
6000a4ac:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
6000a4ae:	2200      	movs	r2, #0
6000a4b0:	2300      	movs	r3, #0
6000a4b2:	f105 0118 	add.w	r1, r5, #24
6000a4b6:	4803      	ldr	r0, [pc, #12]	; (6000a4c4 <cdc_acm_fifo_fill+0x34>)
6000a4b8:	f006 fb10 	bl	60010adc <k_work_schedule_for_queue>
	return wrote;
6000a4bc:	4620      	mov	r0, r4
}
6000a4be:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
6000a4c0:	2000      	movs	r0, #0
6000a4c2:	e7fc      	b.n	6000a4be <cdc_acm_fifo_fill+0x2e>
6000a4c4:	20204460 	.word	0x20204460

6000a4c8 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
6000a4c8:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
6000a4ca:	6904      	ldr	r4, [r0, #16]
{
6000a4cc:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
6000a4d0:	f894 325e 	ldrb.w	r3, [r4, #606]	; 0x25e
6000a4d4:	b1a3      	cbz	r3, 6000a500 <cdc_acm_poll_out+0x38>
6000a4d6:	f894 325f 	ldrb.w	r3, [r4, #607]	; 0x25f
6000a4da:	b98b      	cbnz	r3, 6000a500 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
6000a4dc:	f10d 0107 	add.w	r1, sp, #7
6000a4e0:	2201      	movs	r2, #1
6000a4e2:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
	dev_data->tx_ready = false;
6000a4e6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
6000a4ea:	f7fd fc27 	bl	60007d3c <ring_buf_put>
6000a4ee:	4601      	mov	r1, r0
6000a4f0:	b140      	cbz	r0, 6000a504 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
6000a4f2:	220a      	movs	r2, #10
6000a4f4:	2300      	movs	r3, #0
6000a4f6:	f104 0118 	add.w	r1, r4, #24
6000a4fa:	480b      	ldr	r0, [pc, #44]	; (6000a528 <cdc_acm_poll_out+0x60>)
6000a4fc:	f006 faee 	bl	60010adc <k_work_schedule_for_queue>
}
6000a500:	b002      	add	sp, #8
6000a502:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
6000a504:	2201      	movs	r2, #1
6000a506:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
6000a50a:	f7fd fc47 	bl	60007d9c <ring_buf_get>
6000a50e:	2800      	cmp	r0, #0
6000a510:	d0f6      	beq.n	6000a500 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
6000a512:	2201      	movs	r2, #1
6000a514:	f10d 0107 	add.w	r1, sp, #7
6000a518:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
6000a51c:	f7fd fc0e 	bl	60007d3c <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
6000a520:	2800      	cmp	r0, #0
6000a522:	d1e6      	bne.n	6000a4f2 <cdc_acm_poll_out+0x2a>
6000a524:	e7ec      	b.n	6000a500 <cdc_acm_poll_out+0x38>
6000a526:	bf00      	nop
6000a528:	20204460 	.word	0x20204460

6000a52c <tx_work_handler>:
{
6000a52c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
6000a52e:	f8d0 324c 	ldr.w	r3, [r0, #588]	; 0x24c
{
6000a532:	b085      	sub	sp, #20
6000a534:	4605      	mov	r5, r0
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
6000a536:	685b      	ldr	r3, [r3, #4]
6000a538:	6a1b      	ldr	r3, [r3, #32]
6000a53a:	7d1f      	ldrb	r7, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
6000a53c:	4638      	mov	r0, r7
6000a53e:	f00d fed1 	bl	600182e4 <usb_transfer_is_busy>
6000a542:	4606      	mov	r6, r0
6000a544:	b9f0      	cbnz	r0, 6000a584 <tx_work_handler+0x58>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
6000a546:	f44f 6280 	mov.w	r2, #1024	; 0x400
6000a54a:	a903      	add	r1, sp, #12
6000a54c:	f8d5 0238 	ldr.w	r0, [r5, #568]	; 0x238
6000a550:	f00d fc9c 	bl	60017e8c <ring_buf_get_claim>
	if (!len) {
6000a554:	4604      	mov	r4, r0
6000a556:	b1a8      	cbz	r0, 6000a584 <tx_work_handler+0x58>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
6000a558:	f3c0 0308 	ubfx	r3, r0, #0, #9
	dev_data->tx_ready = false;
6000a55c:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
6000a560:	b903      	cbnz	r3, 6000a564 <tx_work_handler+0x38>
		len -= 1;
6000a562:	1e44      	subs	r4, r0, #1
	struct cdc_acm_dev_data_t *dev_data =
6000a564:	f1a5 0318 	sub.w	r3, r5, #24
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
6000a568:	9903      	ldr	r1, [sp, #12]
6000a56a:	4622      	mov	r2, r4
6000a56c:	4638      	mov	r0, r7
6000a56e:	9301      	str	r3, [sp, #4]
6000a570:	4b05      	ldr	r3, [pc, #20]	; (6000a588 <tx_work_handler+0x5c>)
6000a572:	9300      	str	r3, [sp, #0]
6000a574:	2302      	movs	r3, #2
6000a576:	f7ff fe63 	bl	6000a240 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
6000a57a:	4621      	mov	r1, r4
6000a57c:	f8d5 0238 	ldr.w	r0, [r5, #568]	; 0x238
6000a580:	f00d fca3 	bl	60017eca <ring_buf_get_finish>
}
6000a584:	b005      	add	sp, #20
6000a586:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000a588:	6000a62d 	.word	0x6000a62d

6000a58c <cdc_acm_class_handle_req>:
{
6000a58c:	b570      	push	{r4, r5, r6, lr}
6000a58e:	4604      	mov	r4, r0
6000a590:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
6000a592:	7901      	ldrb	r1, [r0, #4]
{
6000a594:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
6000a596:	4815      	ldr	r0, [pc, #84]	; (6000a5ec <cdc_acm_class_handle_req+0x60>)
6000a598:	f00d fe81 	bl	6001829e <usb_get_dev_data_by_iface>
	if (common == NULL) {
6000a59c:	b310      	cbz	r0, 6000a5e4 <cdc_acm_class_handle_req+0x58>
	if (usb_reqtype_is_to_device(setup)) {
6000a59e:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
6000a5a2:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
6000a5a4:	2a00      	cmp	r2, #0
6000a5a6:	db16      	blt.n	6000a5d6 <cdc_acm_class_handle_req+0x4a>
		switch (setup->bRequest) {
6000a5a8:	2b20      	cmp	r3, #32
6000a5aa:	d004      	beq.n	6000a5b6 <cdc_acm_class_handle_req+0x2a>
6000a5ac:	2b22      	cmp	r3, #34	; 0x22
6000a5ae:	d00e      	beq.n	6000a5ce <cdc_acm_class_handle_req+0x42>
	return -ENOTSUP;
6000a5b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
6000a5b4:	e00a      	b.n	6000a5cc <cdc_acm_class_handle_req+0x40>
6000a5b6:	682b      	ldr	r3, [r5, #0]
6000a5b8:	681a      	ldr	r2, [r3, #0]
6000a5ba:	f840 2c10 	str.w	r2, [r0, #-16]
6000a5be:	889a      	ldrh	r2, [r3, #4]
6000a5c0:	f820 2c0c 	strh.w	r2, [r0, #-12]
6000a5c4:	799b      	ldrb	r3, [r3, #6]
6000a5c6:	f800 3c0a 	strb.w	r3, [r0, #-10]
			return 0;
6000a5ca:	2000      	movs	r0, #0
}
6000a5cc:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
6000a5ce:	8863      	ldrh	r3, [r4, #2]
6000a5d0:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
6000a5d4:	e7f9      	b.n	6000a5ca <cdc_acm_class_handle_req+0x3e>
		if (setup->bRequest == GET_LINE_CODING) {
6000a5d6:	2b21      	cmp	r3, #33	; 0x21
6000a5d8:	d1ea      	bne.n	6000a5b0 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
6000a5da:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
6000a5dc:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
6000a5de:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
6000a5e0:	6033      	str	r3, [r6, #0]
			return 0;
6000a5e2:	e7f2      	b.n	6000a5ca <cdc_acm_class_handle_req+0x3e>
		return -ENODEV;
6000a5e4:	f06f 0012 	mvn.w	r0, #18
6000a5e8:	e7f0      	b.n	6000a5cc <cdc_acm_class_handle_req+0x40>
6000a5ea:	bf00      	nop
6000a5ec:	202049e8 	.word	0x202049e8

6000a5f0 <cdc_acm_reset_port>:
	dev_data->tx_ready = false;
6000a5f0:	2100      	movs	r1, #0
	dev_data->line_coding = (struct cdc_acm_line_coding)
6000a5f2:	4a0d      	ldr	r2, [pc, #52]	; (6000a628 <cdc_acm_reset_port+0x38>)
{
6000a5f4:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
6000a5f6:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
6000a5fa:	6810      	ldr	r0, [r2, #0]
	dev_data->serial_state = 0;
6000a5fc:	f883 125c 	strb.w	r1, [r3, #604]	; 0x25c
	dev_data->line_coding = (struct cdc_acm_line_coding)
6000a600:	f8c3 0254 	str.w	r0, [r3, #596]	; 0x254
6000a604:	8890      	ldrh	r0, [r2, #4]
6000a606:	7992      	ldrb	r2, [r2, #6]
6000a608:	f8a3 0258 	strh.w	r0, [r3, #600]	; 0x258
__ssp_bos_icheck3(memset, void *, int)
6000a60c:	f103 004c 	add.w	r0, r3, #76	; 0x4c
6000a610:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
6000a614:	f44f 7200 	mov.w	r2, #512	; 0x200
	dev_data->line_state = 0;
6000a618:	f883 125b 	strb.w	r1, [r3, #603]	; 0x25b
	dev_data->configured = false;
6000a61c:	f8a3 125e 	strh.w	r1, [r3, #606]	; 0x25e
	dev_data->rx_paused = false;
6000a620:	f883 1260 	strb.w	r1, [r3, #608]	; 0x260
6000a624:	f008 be8c 	b.w	60013340 <memset>
6000a628:	6001a444 	.word	0x6001a444

6000a62c <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
6000a62c:	2301      	movs	r3, #1
{
6000a62e:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
6000a630:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
{
6000a634:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
6000a636:	6813      	ldr	r3, [r2, #0]
6000a638:	b13b      	cbz	r3, 6000a64a <cdc_acm_write_cb+0x1e>
6000a63a:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
6000a63e:	b123      	cbz	r3, 6000a64a <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
6000a640:	f102 0108 	add.w	r1, r2, #8
6000a644:	4809      	ldr	r0, [pc, #36]	; (6000a66c <cdc_acm_write_cb+0x40>)
6000a646:	f00f f978 	bl	6001993a <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
6000a64a:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
6000a64e:	689a      	ldr	r2, [r3, #8]
6000a650:	691b      	ldr	r3, [r3, #16]
6000a652:	429a      	cmp	r2, r3
6000a654:	d008      	beq.n	6000a668 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
6000a656:	f104 0118 	add.w	r1, r4, #24
6000a65a:	2200      	movs	r2, #0
6000a65c:	2300      	movs	r3, #0
6000a65e:	4803      	ldr	r0, [pc, #12]	; (6000a66c <cdc_acm_write_cb+0x40>)
}
6000a660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
6000a664:	f006 ba3a 	b.w	60010adc <k_work_schedule_for_queue>
}
6000a668:	bd10      	pop	{r4, pc}
6000a66a:	bf00      	nop
6000a66c:	20204460 	.word	0x20204460

6000a670 <cdc_acm_init>:
{
6000a670:	b510      	push	{r4, lr}
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
6000a672:	2300      	movs	r3, #0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
6000a674:	6904      	ldr	r4, [r0, #16]
6000a676:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
6000a67a:	f504 721a 	add.w	r2, r4, #616	; 0x268
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
6000a67e:	4b0b      	ldr	r3, [pc, #44]	; (6000a6ac <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
6000a680:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
6000a684:	6859      	ldr	r1, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
6000a686:	b969      	cbnz	r1, 6000a6a4 <cdc_acm_init+0x34>
	list->head = node;
6000a688:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
6000a68c:	f104 0008 	add.w	r0, r4, #8
6000a690:	4907      	ldr	r1, [pc, #28]	; (6000a6b0 <cdc_acm_init+0x40>)
6000a692:	f006 f8f5 	bl	60010880 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
6000a696:	f104 0018 	add.w	r0, r4, #24
6000a69a:	4906      	ldr	r1, [pc, #24]	; (6000a6b4 <cdc_acm_init+0x44>)
6000a69c:	f006 f9f2 	bl	60010a84 <k_work_init_delayable>
}
6000a6a0:	2000      	movs	r0, #0
6000a6a2:	bd10      	pop	{r4, pc}
	parent->next = child;
6000a6a4:	600a      	str	r2, [r1, #0]
	list->tail = node;
6000a6a6:	605a      	str	r2, [r3, #4]
}
6000a6a8:	e7f0      	b.n	6000a68c <cdc_acm_init+0x1c>
6000a6aa:	bf00      	nop
6000a6ac:	202049e8 	.word	0x202049e8
6000a6b0:	6001830f 	.word	0x6001830f
6000a6b4:	6000a52d 	.word	0x6000a52d

6000a6b8 <cdc_acm_read_cb>:
{
6000a6b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
6000a6ba:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
6000a6bc:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
6000a6c0:	1e0a      	subs	r2, r1, #0
{
6000a6c2:	4605      	mov	r5, r0
	if (size <= 0) {
6000a6c4:	dd20      	ble.n	6000a708 <cdc_acm_read_cb+0x50>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
6000a6c6:	4631      	mov	r1, r6
6000a6c8:	f8d4 024c 	ldr.w	r0, [r4, #588]	; 0x24c
6000a6cc:	f7fd fb36 	bl	60007d3c <ring_buf_put>
	dev_data->rx_ready = true;
6000a6d0:	2301      	movs	r3, #1
6000a6d2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
6000a6d6:	6823      	ldr	r3, [r4, #0]
6000a6d8:	b13b      	cbz	r3, 6000a6ea <cdc_acm_read_cb+0x32>
6000a6da:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
6000a6de:	b123      	cbz	r3, 6000a6ea <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
6000a6e0:	f104 0108 	add.w	r1, r4, #8
6000a6e4:	480e      	ldr	r0, [pc, #56]	; (6000a720 <cdc_acm_read_cb+0x68>)
6000a6e6:	f00f f928 	bl	6001993a <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
6000a6ea:	f8d4 124c 	ldr.w	r1, [r4, #588]	; 0x24c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
6000a6ee:	684b      	ldr	r3, [r1, #4]
6000a6f0:	694a      	ldr	r2, [r1, #20]
6000a6f2:	1a9a      	subs	r2, r3, r2
6000a6f4:	69cb      	ldr	r3, [r1, #28]
6000a6f6:	1a9b      	subs	r3, r3, r2
6000a6f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
6000a6fc:	d204      	bcs.n	6000a708 <cdc_acm_read_cb+0x50>
		dev_data->rx_paused = true;
6000a6fe:	2301      	movs	r3, #1
6000a700:	f884 3260 	strb.w	r3, [r4, #608]	; 0x260
}
6000a704:	b002      	add	sp, #8
6000a706:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
6000a708:	4b06      	ldr	r3, [pc, #24]	; (6000a724 <cdc_acm_read_cb+0x6c>)
6000a70a:	f44f 7200 	mov.w	r2, #512	; 0x200
6000a70e:	4631      	mov	r1, r6
6000a710:	4628      	mov	r0, r5
6000a712:	9300      	str	r3, [sp, #0]
6000a714:	2301      	movs	r3, #1
6000a716:	9401      	str	r4, [sp, #4]
6000a718:	f7ff fd92 	bl	6000a240 <usb_transfer>
6000a71c:	e7f2      	b.n	6000a704 <cdc_acm_read_cb+0x4c>
6000a71e:	bf00      	nop
6000a720:	20204460 	.word	0x20204460
6000a724:	6000a6b9 	.word	0x6000a6b9

6000a728 <cdc_acm_dev_status_cb>:
{
6000a728:	b570      	push	{r4, r5, r6, lr}
6000a72a:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
6000a72c:	4601      	mov	r1, r0
6000a72e:	481e      	ldr	r0, [pc, #120]	; (6000a7a8 <cdc_acm_dev_status_cb+0x80>)
6000a730:	f00d fdaa 	bl	60018288 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
6000a734:	4606      	mov	r6, r0
6000a736:	b380      	cbz	r0, 6000a79a <cdc_acm_dev_status_cb+0x72>
	struct usb_cfg_data *cfg = (void *)dev->config;
6000a738:	6803      	ldr	r3, [r0, #0]
	switch (status) {
6000a73a:	1e69      	subs	r1, r5, #1
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
6000a73c:	f5a0 7419 	sub.w	r4, r0, #612	; 0x264
	struct usb_cfg_data *cfg = (void *)dev->config;
6000a740:	685b      	ldr	r3, [r3, #4]
	switch (status) {
6000a742:	2905      	cmp	r1, #5
6000a744:	d829      	bhi.n	6000a79a <cdc_acm_dev_status_cb+0x72>
6000a746:	e8df f001 	tbb	[pc, r1]
6000a74a:	2820      	.short	0x2820
6000a74c:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
6000a750:	f894 125e 	ldrb.w	r1, [r4, #606]	; 0x25e
6000a754:	b939      	cbnz	r1, 6000a766 <cdc_acm_dev_status_cb+0x3e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
6000a756:	6a1b      	ldr	r3, [r3, #32]
6000a758:	4622      	mov	r2, r4
6000a75a:	7b18      	ldrb	r0, [r3, #12]
6000a75c:	f7ff ffac 	bl	6000a6b8 <cdc_acm_read_cb>
			dev_data->configured = true;
6000a760:	2301      	movs	r3, #1
6000a762:	f884 325e 	strb.w	r3, [r4, #606]	; 0x25e
		if (!dev_data->tx_ready) {
6000a766:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
6000a76a:	b9b3      	cbnz	r3, 6000a79a <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
6000a76c:	2301      	movs	r3, #1
6000a76e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
6000a772:	6823      	ldr	r3, [r4, #0]
6000a774:	b18b      	cbz	r3, 6000a79a <cdc_acm_dev_status_cb+0x72>
6000a776:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
6000a77a:	b173      	cbz	r3, 6000a79a <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
6000a77c:	f5a6 7117 	sub.w	r1, r6, #604	; 0x25c
6000a780:	480a      	ldr	r0, [pc, #40]	; (6000a7ac <cdc_acm_dev_status_cb+0x84>)
}
6000a782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
6000a786:	f00f b8d8 	b.w	6001993a <k_work_submit_to_queue>
		cdc_acm_reset_port(dev_data);
6000a78a:	4620      	mov	r0, r4
}
6000a78c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cdc_acm_reset_port(dev_data);
6000a790:	f7ff bf2e 	b.w	6000a5f0 <cdc_acm_reset_port>
		dev_data->suspended = true;
6000a794:	2301      	movs	r3, #1
			dev_data->suspended = false;
6000a796:	f884 325f 	strb.w	r3, [r4, #607]	; 0x25f
}
6000a79a:	bd70      	pop	{r4, r5, r6, pc}
		if (dev_data->suspended) {
6000a79c:	f894 325f 	ldrb.w	r3, [r4, #607]	; 0x25f
6000a7a0:	2b00      	cmp	r3, #0
6000a7a2:	d0fa      	beq.n	6000a79a <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
6000a7a4:	2300      	movs	r3, #0
6000a7a6:	e7f6      	b.n	6000a796 <cdc_acm_dev_status_cb+0x6e>
6000a7a8:	202049e8 	.word	0x202049e8
6000a7ac:	20204460 	.word	0x20204460

6000a7b0 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
6000a7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
6000a7b2:	4d09      	ldr	r5, [pc, #36]	; (6000a7d8 <z_usb_work_q_init+0x28>)
6000a7b4:	2400      	movs	r4, #0
6000a7b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000a7ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
6000a7be:	4907      	ldr	r1, [pc, #28]	; (6000a7dc <z_usb_work_q_init+0x2c>)
6000a7c0:	4628      	mov	r0, r5
6000a7c2:	9400      	str	r4, [sp, #0]
6000a7c4:	f006 f8f6 	bl	600109b4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
6000a7c8:	4905      	ldr	r1, [pc, #20]	; (6000a7e0 <z_usb_work_q_init+0x30>)
6000a7ca:	4628      	mov	r0, r5
6000a7cc:	f00f f881 	bl	600198d2 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
6000a7d0:	4620      	mov	r0, r4
6000a7d2:	b003      	add	sp, #12
6000a7d4:	bd30      	pop	{r4, r5, pc}
6000a7d6:	bf00      	nop
6000a7d8:	20204460 	.word	0x20204460
6000a7dc:	20207280 	.word	0x20207280
6000a7e0:	6001cf55 	.word	0x6001cf55

6000a7e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
6000a7e4:	4901      	ldr	r1, [pc, #4]	; (6000a7ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
6000a7e6:	2210      	movs	r2, #16
	str	r2, [r1]
6000a7e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
6000a7ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
6000a7ec:	e000ed10 	.word	0xe000ed10

6000a7f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
6000a7f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
6000a7f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
6000a7f4:	f380 8811 	msr	BASEPRI, r0
	isb
6000a7f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
6000a7fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
6000a800:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
6000a802:	b662      	cpsie	i
	isb
6000a804:	f3bf 8f6f 	isb	sy

	bx	lr
6000a808:	4770      	bx	lr
6000a80a:	bf00      	nop

6000a80c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
6000a80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000a810:	4681      	mov	r9, r0
6000a812:	af00      	add	r7, sp, #0

	if (esf != NULL) {
6000a814:	460c      	mov	r4, r1
6000a816:	2900      	cmp	r1, #0
6000a818:	d04c      	beq.n	6000a8b4 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
6000a81a:	466e      	mov	r6, sp
6000a81c:	b08a      	sub	sp, #40	; 0x28
6000a81e:	68a3      	ldr	r3, [r4, #8]
6000a820:	466d      	mov	r5, sp
6000a822:	e9d1 1200 	ldrd	r1, r2, [r1]
6000a826:	4827      	ldr	r0, [pc, #156]	; (6000a8c4 <z_arm_fatal_error+0xb8>)
6000a828:	f04f 0a05 	mov.w	sl, #5
6000a82c:	46a8      	mov	r8, r5
6000a82e:	e9c5 0105 	strd	r0, r1, [r5, #20]
6000a832:	e9c5 2307 	strd	r2, r3, [r5, #28]
6000a836:	f848 af10 	str.w	sl, [r8, #16]!
6000a83a:	2300      	movs	r3, #0
6000a83c:	4642      	mov	r2, r8
6000a83e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
6000a842:	4821      	ldr	r0, [pc, #132]	; (6000a8c8 <z_arm_fatal_error+0xbc>)
6000a844:	f7fe f93e 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000a848:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
6000a84a:	6963      	ldr	r3, [r4, #20]
6000a84c:	46ad      	mov	sp, r5
6000a84e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
6000a852:	481e      	ldr	r0, [pc, #120]	; (6000a8cc <z_arm_fatal_error+0xc0>)
6000a854:	f8c5 a010 	str.w	sl, [r5, #16]
6000a858:	e9c5 0105 	strd	r0, r1, [r5, #20]
6000a85c:	e9c5 2307 	strd	r2, r3, [r5, #28]
6000a860:	2300      	movs	r3, #0
6000a862:	4642      	mov	r2, r8
6000a864:	f44f 5121 	mov.w	r1, #10304	; 0x2840
6000a868:	4817      	ldr	r0, [pc, #92]	; (6000a8c8 <z_arm_fatal_error+0xbc>)
6000a86a:	f7fe f92b 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000a86e:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
6000a870:	69e3      	ldr	r3, [r4, #28]
6000a872:	b088      	sub	sp, #32
6000a874:	466d      	mov	r5, sp
6000a876:	4a16      	ldr	r2, [pc, #88]	; (6000a8d0 <z_arm_fatal_error+0xc4>)
6000a878:	f04f 0a03 	mov.w	sl, #3
6000a87c:	46a8      	mov	r8, r5
6000a87e:	e9c5 2305 	strd	r2, r3, [r5, #20]
6000a882:	f848 af10 	str.w	sl, [r8, #16]!
6000a886:	2300      	movs	r3, #0
6000a888:	4642      	mov	r2, r8
6000a88a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000a88e:	480e      	ldr	r0, [pc, #56]	; (6000a8c8 <z_arm_fatal_error+0xbc>)
6000a890:	f7fe f918 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000a894:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
6000a896:	69a3      	ldr	r3, [r4, #24]
6000a898:	46ad      	mov	sp, r5
6000a89a:	4a0e      	ldr	r2, [pc, #56]	; (6000a8d4 <z_arm_fatal_error+0xc8>)
6000a89c:	f8c5 a010 	str.w	sl, [r5, #16]
6000a8a0:	e9c5 2305 	strd	r2, r3, [r5, #20]
6000a8a4:	2300      	movs	r3, #0
6000a8a6:	4642      	mov	r2, r8
6000a8a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000a8ac:	4806      	ldr	r0, [pc, #24]	; (6000a8c8 <z_arm_fatal_error+0xbc>)
6000a8ae:	f7fe f909 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000a8b2:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
6000a8b4:	4621      	mov	r1, r4
6000a8b6:	4648      	mov	r0, r9
6000a8b8:	f004 fed2 	bl	6000f660 <z_fatal_error>
}
6000a8bc:	46bd      	mov	sp, r7
6000a8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000a8c2:	bf00      	nop
6000a8c4:	6001cf5e 	.word	0x6001cf5e
6000a8c8:	6001a3e4 	.word	0x6001a3e4
6000a8cc:	6001cf8d 	.word	0x6001cf8d
6000a8d0:	6001cfbc 	.word	0x6001cfbc
6000a8d4:	6001cfcb 	.word	0x6001cfcb

6000a8d8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
6000a8d8:	b200      	sxth	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
6000a8da:	2800      	cmp	r0, #0
6000a8dc:	db07      	blt.n	6000a8ee <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
6000a8de:	2301      	movs	r3, #1
6000a8e0:	0941      	lsrs	r1, r0, #5
6000a8e2:	f000 001f 	and.w	r0, r0, #31
6000a8e6:	4a02      	ldr	r2, [pc, #8]	; (6000a8f0 <arch_irq_enable+0x18>)
6000a8e8:	4083      	lsls	r3, r0
6000a8ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
6000a8ee:	4770      	bx	lr
6000a8f0:	e000e100 	.word	0xe000e100

6000a8f4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
6000a8f4:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
6000a8f6:	1c4b      	adds	r3, r1, #1
{
6000a8f8:	4604      	mov	r4, r0
6000a8fa:	460d      	mov	r5, r1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
6000a8fc:	2b0f      	cmp	r3, #15
6000a8fe:	d90f      	bls.n	6000a920 <z_arm_irq_priority_set+0x2c>
6000a900:	235b      	movs	r3, #91	; 0x5b
6000a902:	4a10      	ldr	r2, [pc, #64]	; (6000a944 <z_arm_irq_priority_set+0x50>)
6000a904:	4910      	ldr	r1, [pc, #64]	; (6000a948 <z_arm_irq_priority_set+0x54>)
6000a906:	4811      	ldr	r0, [pc, #68]	; (6000a94c <z_arm_irq_priority_set+0x58>)
6000a908:	f00d fafb 	bl	60017f02 <assert_print>
6000a90c:	4629      	mov	r1, r5
6000a90e:	4810      	ldr	r0, [pc, #64]	; (6000a950 <z_arm_irq_priority_set+0x5c>)
6000a910:	230f      	movs	r3, #15
6000a912:	4622      	mov	r2, r4
6000a914:	f00d faf5 	bl	60017f02 <assert_print>
6000a918:	215b      	movs	r1, #91	; 0x5b
6000a91a:	480a      	ldr	r0, [pc, #40]	; (6000a944 <z_arm_irq_priority_set+0x50>)
6000a91c:	f00d faea 	bl	60017ef4 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
6000a920:	b200      	sxth	r0, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000a922:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
6000a924:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000a926:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
6000a928:	db06      	blt.n	6000a938 <z_arm_irq_priority_set+0x44>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000a92a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
6000a92e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
6000a932:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
}
6000a936:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000a938:	f000 000f 	and.w	r0, r0, #15
6000a93c:	4a05      	ldr	r2, [pc, #20]	; (6000a954 <z_arm_irq_priority_set+0x60>)
6000a93e:	5413      	strb	r3, [r2, r0]
6000a940:	e7f9      	b.n	6000a936 <z_arm_irq_priority_set+0x42>
6000a942:	bf00      	nop
6000a944:	6001cff9 	.word	0x6001cff9
6000a948:	6001d02f 	.word	0x6001d02f
6000a94c:	6001c3d7 	.word	0x6001c3d7
6000a950:	6001d04a 	.word	0x6001d04a
6000a954:	e000ed14 	.word	0xe000ed14

6000a958 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
6000a958:	bf30      	wfi
    b z_SysNmiOnReset
6000a95a:	f7ff bffd 	b.w	6000a958 <z_SysNmiOnReset>
6000a95e:	bf00      	nop

6000a960 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
6000a960:	4a0f      	ldr	r2, [pc, #60]	; (6000a9a0 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
6000a962:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
6000a964:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
6000a968:	4b0e      	ldr	r3, [pc, #56]	; (6000a9a4 <z_arm_prep_c+0x44>)
6000a96a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
6000a96c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000a970:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
6000a974:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
6000a978:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
6000a97c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
6000a980:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
6000a984:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
6000a988:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
6000a98c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
6000a990:	f004 ff38 	bl	6000f804 <z_bss_zero>
	z_data_copy();
6000a994:	f007 fae8 	bl	60011f68 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
6000a998:	f000 fc1a 	bl	6000b1d0 <z_arm_interrupt_init>
	z_cstart();
6000a99c:	f004 ff80 	bl	6000f8a0 <z_cstart>
6000a9a0:	60002000 	.word	0x60002000
6000a9a4:	e000ed00 	.word	0xe000ed00

6000a9a8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
6000a9a8:	4a09      	ldr	r2, [pc, #36]	; (6000a9d0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
6000a9aa:	490a      	ldr	r1, [pc, #40]	; (6000a9d4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
6000a9ac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
6000a9ae:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
6000a9b0:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
6000a9b2:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
6000a9b4:	4908      	ldr	r1, [pc, #32]	; (6000a9d8 <arch_swap+0x30>)
6000a9b6:	684b      	ldr	r3, [r1, #4]
6000a9b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
6000a9bc:	604b      	str	r3, [r1, #4]
6000a9be:	2300      	movs	r3, #0
6000a9c0:	f383 8811 	msr	BASEPRI, r3
6000a9c4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
6000a9c8:	6893      	ldr	r3, [r2, #8]
}
6000a9ca:	6f98      	ldr	r0, [r3, #120]	; 0x78
6000a9cc:	4770      	bx	lr
6000a9ce:	bf00      	nop
6000a9d0:	20204d8c 	.word	0x20204d8c
6000a9d4:	6001bdc4 	.word	0x6001bdc4
6000a9d8:	e000ed00 	.word	0xe000ed00

6000a9dc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
6000a9dc:	4912      	ldr	r1, [pc, #72]	; (6000aa28 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
6000a9de:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
6000a9e0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
6000a9e4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
6000a9e6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
6000a9ea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
6000a9ee:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
6000a9f0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
6000a9f4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
6000a9f8:	4f0c      	ldr	r7, [pc, #48]	; (6000aa2c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
6000a9fa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
6000a9fe:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
6000aa00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
6000aa02:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
6000aa04:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
6000aa06:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
6000aa08:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
6000aa0a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
6000aa0e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
6000aa10:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
6000aa12:	f000 fc23 	bl	6000b25c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
6000aa16:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
6000aa1a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
6000aa1e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
6000aa22:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
6000aa26:	4770      	bx	lr
    ldr r1, =_kernel
6000aa28:	20204d8c 	.word	0x20204d8c
    ldr v4, =_SCS_ICSR
6000aa2c:	e000ed04 	.word	0xe000ed04

6000aa30 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
6000aa30:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
6000aa34:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
6000aa36:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
6000aa3a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
6000aa3e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
6000aa40:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
6000aa44:	2902      	cmp	r1, #2
    beq _oops
6000aa46:	d0ff      	beq.n	6000aa48 <_oops>

6000aa48 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
6000aa48:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
6000aa4a:	f00d fcf1 	bl	60018430 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
6000aa4e:	bd01      	pop	{r0, pc}

6000aa50 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
6000aa50:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
6000aa54:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
6000aa56:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
6000aa58:	4907      	ldr	r1, [pc, #28]	; (6000aa78 <arch_new_thread+0x28>)
	iframe->a2 = (uint32_t)p1;
6000aa5a:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
6000aa5c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
6000aa5e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
6000aa62:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
6000aa64:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
6000aa66:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
6000aa68:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
6000aa6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
6000aa6e:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
6000aa70:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
6000aa72:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
6000aa74:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
6000aa76:	4770      	bx	lr
6000aa78:	600179df 	.word	0x600179df

6000aa7c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
6000aa7c:	4a09      	ldr	r2, [pc, #36]	; (6000aaa4 <z_check_thread_stack_fail+0x28>)
{
6000aa7e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
6000aa80:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
6000aa82:	b170      	cbz	r0, 6000aaa2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
6000aa84:	f113 0f16 	cmn.w	r3, #22
6000aa88:	6e40      	ldr	r0, [r0, #100]	; 0x64
6000aa8a:	d005      	beq.n	6000aa98 <z_check_thread_stack_fail+0x1c>
6000aa8c:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
6000aa90:	429a      	cmp	r2, r3
6000aa92:	d805      	bhi.n	6000aaa0 <z_check_thread_stack_fail+0x24>
6000aa94:	4283      	cmp	r3, r0
6000aa96:	d203      	bcs.n	6000aaa0 <z_check_thread_stack_fail+0x24>
		return 0;
6000aa98:	4281      	cmp	r1, r0
6000aa9a:	bf28      	it	cs
6000aa9c:	2000      	movcs	r0, #0
6000aa9e:	4770      	bx	lr
6000aaa0:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
6000aaa2:	4770      	bx	lr
6000aaa4:	20204d8c 	.word	0x20204d8c

6000aaa8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
6000aaa8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
6000aaaa:	4b09      	ldr	r3, [pc, #36]	; (6000aad0 <arch_switch_to_main_thread+0x28>)
{
6000aaac:	460d      	mov	r5, r1
6000aaae:	4614      	mov	r4, r2
	_current = main_thread;
6000aab0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
6000aab2:	f000 fbd3 	bl	6000b25c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
6000aab6:	4620      	mov	r0, r4
6000aab8:	f385 8809 	msr	PSP, r5
6000aabc:	2100      	movs	r1, #0
6000aabe:	b663      	cpsie	if
6000aac0:	f381 8811 	msr	BASEPRI, r1
6000aac4:	f3bf 8f6f 	isb	sy
6000aac8:	2200      	movs	r2, #0
6000aaca:	2300      	movs	r3, #0
6000aacc:	f00c ff87 	bl	600179de <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
6000aad0:	20204d8c 	.word	0x20204d8c

6000aad4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
6000aad4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
6000aad6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
6000aada:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
6000aade:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
6000aae2:	4904      	ldr	r1, [pc, #16]	; (6000aaf4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
6000aae4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
6000aae6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
6000aae8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
6000aaea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
6000aaee:	4902      	ldr	r1, [pc, #8]	; (6000aaf8 <_isr_wrapper+0x24>)
	bx r1
6000aaf0:	4708      	bx	r1
6000aaf2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
6000aaf4:	60019cec 	.word	0x60019cec
	ldr r1, =z_arm_int_exit
6000aaf8:	6000aafd 	.word	0x6000aafd

6000aafc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
6000aafc:	4b04      	ldr	r3, [pc, #16]	; (6000ab10 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
6000aafe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
6000ab00:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
6000ab02:	4288      	cmp	r0, r1
	beq _EXIT_EXC
6000ab04:	d003      	beq.n	6000ab0e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
6000ab06:	4903      	ldr	r1, [pc, #12]	; (6000ab14 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
6000ab08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
6000ab0c:	600a      	str	r2, [r1, #0]

6000ab0e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
6000ab0e:	4770      	bx	lr
	ldr r3, =_kernel
6000ab10:	20204d8c 	.word	0x20204d8c
	ldr r1, =_SCS_ICSR
6000ab14:	e000ed04 	.word	0xe000ed04

6000ab18 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
6000ab18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000ab1c:	b086      	sub	sp, #24
6000ab1e:	4606      	mov	r6, r0
6000ab20:	460d      	mov	r5, r1
6000ab22:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
6000ab24:	4b47      	ldr	r3, [pc, #284]	; (6000ac44 <bus_fault.constprop.0+0x12c>)
6000ab26:	2402      	movs	r4, #2
6000ab28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ab2c:	f107 0210 	add.w	r2, r7, #16
6000ab30:	617b      	str	r3, [r7, #20]
6000ab32:	4845      	ldr	r0, [pc, #276]	; (6000ac48 <bus_fault.constprop.0+0x130>)
6000ab34:	613c      	str	r4, [r7, #16]
6000ab36:	f00d fc8a 	bl	6001844e <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
6000ab3a:	4b44      	ldr	r3, [pc, #272]	; (6000ac4c <bus_fault.constprop.0+0x134>)
6000ab3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000ab3e:	04d9      	lsls	r1, r3, #19
6000ab40:	d56d      	bpl.n	6000ac1e <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
6000ab42:	4b43      	ldr	r3, [pc, #268]	; (6000ac50 <bus_fault.constprop.0+0x138>)
6000ab44:	f107 0210 	add.w	r2, r7, #16
6000ab48:	483f      	ldr	r0, [pc, #252]	; (6000ac48 <bus_fault.constprop.0+0x130>)
6000ab4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ab4e:	e9c7 4304 	strd	r4, r3, [r7, #16]
6000ab52:	f00d fc7c 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
6000ab56:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
6000ab58:	4b3c      	ldr	r3, [pc, #240]	; (6000ac4c <bus_fault.constprop.0+0x134>)
6000ab5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000ab5c:	051a      	lsls	r2, r3, #20
6000ab5e:	d50b      	bpl.n	6000ab78 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
6000ab60:	4b3c      	ldr	r3, [pc, #240]	; (6000ac54 <bus_fault.constprop.0+0x13c>)
6000ab62:	f107 0210 	add.w	r2, r7, #16
6000ab66:	4838      	ldr	r0, [pc, #224]	; (6000ac48 <bus_fault.constprop.0+0x130>)
6000ab68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ab6c:	617b      	str	r3, [r7, #20]
6000ab6e:	2302      	movs	r3, #2
6000ab70:	613b      	str	r3, [r7, #16]
6000ab72:	f00d fc6c 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
6000ab76:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
6000ab78:	4c34      	ldr	r4, [pc, #208]	; (6000ac4c <bus_fault.constprop.0+0x134>)
6000ab7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000ab7c:	059b      	lsls	r3, r3, #22
6000ab7e:	d523      	bpl.n	6000abc8 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
6000ab80:	46e8      	mov	r8, sp
6000ab82:	4b35      	ldr	r3, [pc, #212]	; (6000ac58 <bus_fault.constprop.0+0x140>)
6000ab84:	f107 0210 	add.w	r2, r7, #16
6000ab88:	482f      	ldr	r0, [pc, #188]	; (6000ac48 <bus_fault.constprop.0+0x130>)
6000ab8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ab8e:	617b      	str	r3, [r7, #20]
6000ab90:	2302      	movs	r3, #2
6000ab92:	613b      	str	r3, [r7, #16]
6000ab94:	f00d fc5b 	bl	6001844e <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
6000ab98:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
6000ab9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
6000ab9c:	0410      	lsls	r0, r2, #16
6000ab9e:	d512      	bpl.n	6000abc6 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
6000aba0:	b088      	sub	sp, #32
6000aba2:	466a      	mov	r2, sp
6000aba4:	492d      	ldr	r1, [pc, #180]	; (6000ac5c <bus_fault.constprop.0+0x144>)
6000aba6:	4828      	ldr	r0, [pc, #160]	; (6000ac48 <bus_fault.constprop.0+0x130>)
6000aba8:	e9c2 1305 	strd	r1, r3, [r2, #20]
6000abac:	2303      	movs	r3, #3
6000abae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000abb2:	f842 3f10 	str.w	r3, [r2, #16]!
6000abb6:	f00d fc4a 	bl	6001844e <z_log_msg_static_create.constprop.0>
6000abba:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
6000abbc:	b11e      	cbz	r6, 6000abc6 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
6000abbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000abc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
6000abc4:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
6000abc6:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
6000abc8:	4b20      	ldr	r3, [pc, #128]	; (6000ac4c <bus_fault.constprop.0+0x134>)
6000abca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000abcc:	0559      	lsls	r1, r3, #21
6000abce:	d50b      	bpl.n	6000abe8 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
6000abd0:	4b23      	ldr	r3, [pc, #140]	; (6000ac60 <bus_fault.constprop.0+0x148>)
6000abd2:	f107 0210 	add.w	r2, r7, #16
6000abd6:	481c      	ldr	r0, [pc, #112]	; (6000ac48 <bus_fault.constprop.0+0x130>)
6000abd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000abdc:	617b      	str	r3, [r7, #20]
6000abde:	2302      	movs	r3, #2
6000abe0:	613b      	str	r3, [r7, #16]
6000abe2:	f00d fc34 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
6000abe6:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
6000abe8:	4b18      	ldr	r3, [pc, #96]	; (6000ac4c <bus_fault.constprop.0+0x134>)
6000abea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
6000abec:	05d2      	lsls	r2, r2, #23
6000abee:	d518      	bpl.n	6000ac22 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
6000abf0:	4b1c      	ldr	r3, [pc, #112]	; (6000ac64 <bus_fault.constprop.0+0x14c>)
6000abf2:	f107 0210 	add.w	r2, r7, #16
6000abf6:	4814      	ldr	r0, [pc, #80]	; (6000ac48 <bus_fault.constprop.0+0x130>)
6000abf8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000abfc:	617b      	str	r3, [r7, #20]
6000abfe:	2302      	movs	r3, #2
6000ac00:	613b      	str	r3, [r7, #16]
6000ac02:	f00d fc24 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
6000ac06:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
6000ac08:	4a10      	ldr	r2, [pc, #64]	; (6000ac4c <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
6000ac0a:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
6000ac0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
6000ac0e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
6000ac12:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
6000ac14:	2300      	movs	r3, #0
6000ac16:	702b      	strb	r3, [r5, #0]
}
6000ac18:	46bd      	mov	sp, r7
6000ac1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
6000ac1e:	2016      	movs	r0, #22
6000ac20:	e79a      	b.n	6000ab58 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
6000ac22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000ac24:	049b      	lsls	r3, r3, #18
6000ac26:	d5ef      	bpl.n	6000ac08 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
6000ac28:	4b0f      	ldr	r3, [pc, #60]	; (6000ac68 <bus_fault.constprop.0+0x150>)
6000ac2a:	f107 0210 	add.w	r2, r7, #16
6000ac2e:	4806      	ldr	r0, [pc, #24]	; (6000ac48 <bus_fault.constprop.0+0x130>)
6000ac30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ac34:	617b      	str	r3, [r7, #20]
6000ac36:	2302      	movs	r3, #2
6000ac38:	613b      	str	r3, [r7, #16]
6000ac3a:	f00d fc08 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
6000ac3e:	201c      	movs	r0, #28
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
6000ac40:	e7e2      	b.n	6000ac08 <bus_fault.constprop.0+0xf0>
6000ac42:	bf00      	nop
6000ac44:	6001d08a 	.word	0x6001d08a
6000ac48:	6001a3e4 	.word	0x6001a3e4
6000ac4c:	e000ed00 	.word	0xe000ed00
6000ac50:	6001d0a0 	.word	0x6001d0a0
6000ac54:	6001d0b1 	.word	0x6001d0b1
6000ac58:	6001d0c4 	.word	0x6001d0c4
6000ac5c:	6001d0dd 	.word	0x6001d0dd
6000ac60:	6001d0f2 	.word	0x6001d0f2
6000ac64:	6001d10d 	.word	0x6001d10d
6000ac68:	6001d125 	.word	0x6001d125

6000ac6c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
6000ac6c:	b510      	push	{r4, lr}
6000ac6e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
6000ac70:	4b36      	ldr	r3, [pc, #216]	; (6000ad4c <usage_fault.constprop.0+0xe0>)
6000ac72:	2402      	movs	r4, #2
6000ac74:	aa04      	add	r2, sp, #16
6000ac76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ac7a:	4835      	ldr	r0, [pc, #212]	; (6000ad50 <usage_fault.constprop.0+0xe4>)
6000ac7c:	9305      	str	r3, [sp, #20]
6000ac7e:	9404      	str	r4, [sp, #16]
6000ac80:	f00d fbe5 	bl	6001844e <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
6000ac84:	4b33      	ldr	r3, [pc, #204]	; (6000ad54 <usage_fault.constprop.0+0xe8>)
6000ac86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000ac88:	019a      	lsls	r2, r3, #6
6000ac8a:	d55d      	bpl.n	6000ad48 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
6000ac8c:	4b32      	ldr	r3, [pc, #200]	; (6000ad58 <usage_fault.constprop.0+0xec>)
6000ac8e:	aa04      	add	r2, sp, #16
6000ac90:	482f      	ldr	r0, [pc, #188]	; (6000ad50 <usage_fault.constprop.0+0xe4>)
6000ac92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ac96:	e9cd 4304 	strd	r4, r3, [sp, #16]
6000ac9a:	f00d fbd8 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
6000ac9e:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
6000aca0:	4b2c      	ldr	r3, [pc, #176]	; (6000ad54 <usage_fault.constprop.0+0xe8>)
6000aca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000aca4:	01db      	lsls	r3, r3, #7
6000aca6:	d50a      	bpl.n	6000acbe <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
6000aca8:	4b2c      	ldr	r3, [pc, #176]	; (6000ad5c <usage_fault.constprop.0+0xf0>)
6000acaa:	aa04      	add	r2, sp, #16
6000acac:	4828      	ldr	r0, [pc, #160]	; (6000ad50 <usage_fault.constprop.0+0xe4>)
6000acae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000acb2:	9305      	str	r3, [sp, #20]
6000acb4:	2302      	movs	r3, #2
6000acb6:	9304      	str	r3, [sp, #16]
6000acb8:	f00d fbc9 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
6000acbc:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
6000acbe:	4b25      	ldr	r3, [pc, #148]	; (6000ad54 <usage_fault.constprop.0+0xe8>)
6000acc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000acc2:	031c      	lsls	r4, r3, #12
6000acc4:	d50a      	bpl.n	6000acdc <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
6000acc6:	4b26      	ldr	r3, [pc, #152]	; (6000ad60 <usage_fault.constprop.0+0xf4>)
6000acc8:	aa04      	add	r2, sp, #16
6000acca:	4821      	ldr	r0, [pc, #132]	; (6000ad50 <usage_fault.constprop.0+0xe4>)
6000accc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000acd0:	9305      	str	r3, [sp, #20]
6000acd2:	2302      	movs	r3, #2
6000acd4:	9304      	str	r3, [sp, #16]
6000acd6:	f00d fbba 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
6000acda:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
6000acdc:	4b1d      	ldr	r3, [pc, #116]	; (6000ad54 <usage_fault.constprop.0+0xe8>)
6000acde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000ace0:	0359      	lsls	r1, r3, #13
6000ace2:	d50a      	bpl.n	6000acfa <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
6000ace4:	4b1f      	ldr	r3, [pc, #124]	; (6000ad64 <usage_fault.constprop.0+0xf8>)
6000ace6:	aa04      	add	r2, sp, #16
6000ace8:	4819      	ldr	r0, [pc, #100]	; (6000ad50 <usage_fault.constprop.0+0xe4>)
6000acea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000acee:	9305      	str	r3, [sp, #20]
6000acf0:	2302      	movs	r3, #2
6000acf2:	9304      	str	r3, [sp, #16]
6000acf4:	f00d fbab 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
6000acf8:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
6000acfa:	4b16      	ldr	r3, [pc, #88]	; (6000ad54 <usage_fault.constprop.0+0xe8>)
6000acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000acfe:	039a      	lsls	r2, r3, #14
6000ad00:	d50a      	bpl.n	6000ad18 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
6000ad02:	4b19      	ldr	r3, [pc, #100]	; (6000ad68 <usage_fault.constprop.0+0xfc>)
6000ad04:	aa04      	add	r2, sp, #16
6000ad06:	4812      	ldr	r0, [pc, #72]	; (6000ad50 <usage_fault.constprop.0+0xe4>)
6000ad08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ad0c:	9305      	str	r3, [sp, #20]
6000ad0e:	2302      	movs	r3, #2
6000ad10:	9304      	str	r3, [sp, #16]
6000ad12:	f00d fb9c 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
6000ad16:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
6000ad18:	4b0e      	ldr	r3, [pc, #56]	; (6000ad54 <usage_fault.constprop.0+0xe8>)
6000ad1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000ad1c:	03db      	lsls	r3, r3, #15
6000ad1e:	d50a      	bpl.n	6000ad36 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
6000ad20:	4b12      	ldr	r3, [pc, #72]	; (6000ad6c <usage_fault.constprop.0+0x100>)
6000ad22:	aa04      	add	r2, sp, #16
6000ad24:	480a      	ldr	r0, [pc, #40]	; (6000ad50 <usage_fault.constprop.0+0xe4>)
6000ad26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ad2a:	9305      	str	r3, [sp, #20]
6000ad2c:	2302      	movs	r3, #2
6000ad2e:	9304      	str	r3, [sp, #16]
6000ad30:	f00d fb8d 	bl	6001844e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
6000ad34:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
6000ad36:	4a07      	ldr	r2, [pc, #28]	; (6000ad54 <usage_fault.constprop.0+0xe8>)
6000ad38:	6a93      	ldr	r3, [r2, #40]	; 0x28
6000ad3a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
6000ad3e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
6000ad42:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
6000ad44:	b006      	add	sp, #24
6000ad46:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
6000ad48:	201d      	movs	r0, #29
6000ad4a:	e7a9      	b.n	6000aca0 <usage_fault.constprop.0+0x34>
6000ad4c:	6001d154 	.word	0x6001d154
6000ad50:	6001a3e4 	.word	0x6001a3e4
6000ad54:	e000ed00 	.word	0xe000ed00
6000ad58:	6001d16c 	.word	0x6001d16c
6000ad5c:	6001d17f 	.word	0x6001d17f
6000ad60:	6001d199 	.word	0x6001d199
6000ad64:	6001d1b7 	.word	0x6001d1b7
6000ad68:	6001d1dc 	.word	0x6001d1dc
6000ad6c:	6001d1f6 	.word	0x6001d1f6

6000ad70 <mem_manage_fault>:
{
6000ad70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000ad74:	b086      	sub	sp, #24
6000ad76:	4681      	mov	r9, r0
6000ad78:	468a      	mov	sl, r1
6000ad7a:	4690      	mov	r8, r2
6000ad7c:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
6000ad7e:	4b5a      	ldr	r3, [pc, #360]	; (6000aee8 <mem_manage_fault+0x178>)
6000ad80:	2402      	movs	r4, #2
6000ad82:	485a      	ldr	r0, [pc, #360]	; (6000aeec <mem_manage_fault+0x17c>)
6000ad84:	f107 0210 	add.w	r2, r7, #16
6000ad88:	617b      	str	r3, [r7, #20]
6000ad8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ad8e:	613c      	str	r4, [r7, #16]
6000ad90:	f00d fb5d 	bl	6001844e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
6000ad94:	4b56      	ldr	r3, [pc, #344]	; (6000aef0 <mem_manage_fault+0x180>)
6000ad96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000ad98:	06d8      	lsls	r0, r3, #27
6000ad9a:	d545      	bpl.n	6000ae28 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
6000ad9c:	4b55      	ldr	r3, [pc, #340]	; (6000aef4 <mem_manage_fault+0x184>)
6000ad9e:	f107 0210 	add.w	r2, r7, #16
6000ada2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ada6:	4851      	ldr	r0, [pc, #324]	; (6000aeec <mem_manage_fault+0x17c>)
6000ada8:	e9c7 4304 	strd	r4, r3, [r7, #16]
		reason = K_ERR_ARM_MEM_STACKING;
6000adac:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
6000adae:	f00d fb4e 	bl	6001844e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
6000adb2:	4b4f      	ldr	r3, [pc, #316]	; (6000aef0 <mem_manage_fault+0x180>)
6000adb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000adb6:	0719      	lsls	r1, r3, #28
6000adb8:	d50b      	bpl.n	6000add2 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
6000adba:	4b4f      	ldr	r3, [pc, #316]	; (6000aef8 <mem_manage_fault+0x188>)
		reason = K_ERR_ARM_MEM_UNSTACKING;
6000adbc:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
6000adbe:	f107 0210 	add.w	r2, r7, #16
6000adc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000adc6:	617b      	str	r3, [r7, #20]
6000adc8:	2302      	movs	r3, #2
6000adca:	4848      	ldr	r0, [pc, #288]	; (6000aeec <mem_manage_fault+0x17c>)
6000adcc:	613b      	str	r3, [r7, #16]
6000adce:	f00d fb3e 	bl	6001844e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
6000add2:	4d47      	ldr	r5, [pc, #284]	; (6000aef0 <mem_manage_fault+0x180>)
6000add4:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000add6:	079a      	lsls	r2, r3, #30
6000add8:	d528      	bpl.n	6000ae2c <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
6000adda:	466c      	mov	r4, sp
6000addc:	4b47      	ldr	r3, [pc, #284]	; (6000aefc <mem_manage_fault+0x18c>)
6000adde:	f107 0210 	add.w	r2, r7, #16
6000ade2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ade6:	4841      	ldr	r0, [pc, #260]	; (6000aeec <mem_manage_fault+0x17c>)
6000ade8:	617b      	str	r3, [r7, #20]
6000adea:	2302      	movs	r3, #2
6000adec:	613b      	str	r3, [r7, #16]
6000adee:	f00d fb2e 	bl	6001844e <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
6000adf2:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
6000adf4:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000adf6:	061b      	lsls	r3, r3, #24
6000adf8:	d560      	bpl.n	6000aebc <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
6000adfa:	b088      	sub	sp, #32
6000adfc:	466a      	mov	r2, sp
6000adfe:	4b40      	ldr	r3, [pc, #256]	; (6000af00 <mem_manage_fault+0x190>)
6000ae00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000ae04:	4839      	ldr	r0, [pc, #228]	; (6000aeec <mem_manage_fault+0x17c>)
6000ae06:	e9c2 3605 	strd	r3, r6, [r2, #20]
6000ae0a:	2303      	movs	r3, #3
6000ae0c:	f842 3f10 	str.w	r3, [r2, #16]!
6000ae10:	f00d fb1d 	bl	6001844e <z_log_msg_static_create.constprop.0>
6000ae14:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
6000ae16:	f1ba 0f00 	cmp.w	sl, #0
6000ae1a:	d003      	beq.n	6000ae24 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
6000ae1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000ae1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
6000ae22:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
6000ae24:	2413      	movs	r4, #19
6000ae26:	e003      	b.n	6000ae30 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
6000ae28:	2410      	movs	r4, #16
6000ae2a:	e7c2      	b.n	6000adb2 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
6000ae2c:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
6000ae30:	4b2f      	ldr	r3, [pc, #188]	; (6000aef0 <mem_manage_fault+0x180>)
6000ae32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000ae34:	07d8      	lsls	r0, r3, #31
6000ae36:	d50b      	bpl.n	6000ae50 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
6000ae38:	4b32      	ldr	r3, [pc, #200]	; (6000af04 <mem_manage_fault+0x194>)
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
6000ae3a:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
6000ae3c:	f107 0210 	add.w	r2, r7, #16
6000ae40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ae44:	617b      	str	r3, [r7, #20]
6000ae46:	2302      	movs	r3, #2
6000ae48:	4828      	ldr	r0, [pc, #160]	; (6000aeec <mem_manage_fault+0x17c>)
6000ae4a:	613b      	str	r3, [r7, #16]
6000ae4c:	f00d faff 	bl	6001844e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
6000ae50:	4b27      	ldr	r3, [pc, #156]	; (6000aef0 <mem_manage_fault+0x180>)
6000ae52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
6000ae54:	0699      	lsls	r1, r3, #26
6000ae56:	d50b      	bpl.n	6000ae70 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
6000ae58:	4b2b      	ldr	r3, [pc, #172]	; (6000af08 <mem_manage_fault+0x198>)
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
6000ae5a:	2415      	movs	r4, #21
		PR_FAULT_INFO(
6000ae5c:	f107 0210 	add.w	r2, r7, #16
6000ae60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ae64:	617b      	str	r3, [r7, #20]
6000ae66:	2302      	movs	r3, #2
6000ae68:	4820      	ldr	r0, [pc, #128]	; (6000aeec <mem_manage_fault+0x17c>)
6000ae6a:	613b      	str	r3, [r7, #16]
6000ae6c:	f00d faef 	bl	6001844e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
6000ae70:	4d1f      	ldr	r5, [pc, #124]	; (6000aef0 <mem_manage_fault+0x180>)
6000ae72:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000ae74:	06da      	lsls	r2, r3, #27
6000ae76:	d402      	bmi.n	6000ae7e <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
6000ae78:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
6000ae7a:	079b      	lsls	r3, r3, #30
6000ae7c:	d50a      	bpl.n	6000ae94 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
6000ae7e:	686b      	ldr	r3, [r5, #4]
6000ae80:	0518      	lsls	r0, r3, #20
6000ae82:	d507      	bpl.n	6000ae94 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
6000ae84:	4649      	mov	r1, r9
6000ae86:	4630      	mov	r0, r6
6000ae88:	f7ff fdf8 	bl	6000aa7c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
6000ae8c:	b1c8      	cbz	r0, 6000aec2 <mem_manage_fault+0x152>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
6000ae8e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
6000ae92:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
6000ae94:	4b16      	ldr	r3, [pc, #88]	; (6000aef0 <mem_manage_fault+0x180>)
6000ae96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
6000ae98:	0692      	lsls	r2, r2, #26
6000ae9a:	d503      	bpl.n	6000aea4 <mem_manage_fault+0x134>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
6000ae9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
6000ae9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
6000aea2:	625a      	str	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
6000aea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}
6000aea6:	4620      	mov	r0, r4
6000aea8:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
6000aeaa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
6000aeae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
6000aeb0:	2300      	movs	r3, #0
6000aeb2:	f888 3000 	strb.w	r3, [r8]
}
6000aeb6:	46bd      	mov	sp, r7
6000aeb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
6000aebc:	f06f 0615 	mvn.w	r6, #21
6000aec0:	e7b0      	b.n	6000ae24 <mem_manage_fault+0xb4>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
6000aec2:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000aec4:	06d9      	lsls	r1, r3, #27
6000aec6:	d5e5      	bpl.n	6000ae94 <mem_manage_fault+0x124>
6000aec8:	4910      	ldr	r1, [pc, #64]	; (6000af0c <mem_manage_fault+0x19c>)
6000aeca:	f240 135b 	movw	r3, #347	; 0x15b
6000aece:	4a10      	ldr	r2, [pc, #64]	; (6000af10 <mem_manage_fault+0x1a0>)
6000aed0:	4810      	ldr	r0, [pc, #64]	; (6000af14 <mem_manage_fault+0x1a4>)
6000aed2:	f00d f816 	bl	60017f02 <assert_print>
6000aed6:	4810      	ldr	r0, [pc, #64]	; (6000af18 <mem_manage_fault+0x1a8>)
6000aed8:	f00d f813 	bl	60017f02 <assert_print>
6000aedc:	f240 115b 	movw	r1, #347	; 0x15b
6000aee0:	480b      	ldr	r0, [pc, #44]	; (6000af10 <mem_manage_fault+0x1a0>)
6000aee2:	f00d f807 	bl	60017ef4 <assert_post_action>
6000aee6:	bf00      	nop
6000aee8:	6001d221 	.word	0x6001d221
6000aeec:	6001a3e4 	.word	0x6001a3e4
6000aef0:	e000ed00 	.word	0xe000ed00
6000aef4:	6001d237 	.word	0x6001d237
6000aef8:	6001d0b1 	.word	0x6001d0b1
6000aefc:	6001d26a 	.word	0x6001d26a
6000af00:	6001d282 	.word	0x6001d282
6000af04:	6001d298 	.word	0x6001d298
6000af08:	6001d125 	.word	0x6001d125
6000af0c:	6001d2f1 	.word	0x6001d2f1
6000af10:	6001d2b7 	.word	0x6001d2b7
6000af14:	6001c3d7 	.word	0x6001c3d7
6000af18:	6001d33b 	.word	0x6001d33b

6000af1c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
6000af1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
6000af20:	4b8e      	ldr	r3, [pc, #568]	; (6000b15c <z_arm_fault+0x240>)
{
6000af22:	b08b      	sub	sp, #44	; 0x2c
6000af24:	4604      	mov	r4, r0
6000af26:	2600      	movs	r6, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
6000af28:	6858      	ldr	r0, [r3, #4]
{
6000af2a:	af00      	add	r7, sp, #0
6000af2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
6000af30:	f386 8811 	msr	BASEPRI, r6
6000af34:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
6000af38:	f002 457f 	and.w	r5, r2, #4278190080	; 0xff000000
6000af3c:	f1b5 4f7f 	cmp.w	r5, #4278190080	; 0xff000000
6000af40:	d10e      	bne.n	6000af60 <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
6000af42:	f002 050c 	and.w	r5, r2, #12
6000af46:	2d08      	cmp	r5, #8
6000af48:	d119      	bne.n	6000af7e <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
6000af4a:	4b85      	ldr	r3, [pc, #532]	; (6000b160 <z_arm_fault+0x244>)
6000af4c:	f107 0218 	add.w	r2, r7, #24
6000af50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000af54:	4883      	ldr	r0, [pc, #524]	; (6000b164 <z_arm_fault+0x248>)
6000af56:	61fb      	str	r3, [r7, #28]
6000af58:	2302      	movs	r3, #2
6000af5a:	61bb      	str	r3, [r7, #24]
6000af5c:	f00d fa77 	bl	6001844e <z_log_msg_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
6000af60:	4981      	ldr	r1, [pc, #516]	; (6000b168 <z_arm_fault+0x24c>)
6000af62:	f240 433e 	movw	r3, #1086	; 0x43e
6000af66:	4a81      	ldr	r2, [pc, #516]	; (6000b16c <z_arm_fault+0x250>)
6000af68:	4881      	ldr	r0, [pc, #516]	; (6000b170 <z_arm_fault+0x254>)
6000af6a:	f00c ffca 	bl	60017f02 <assert_print>
6000af6e:	4881      	ldr	r0, [pc, #516]	; (6000b174 <z_arm_fault+0x258>)
6000af70:	f00c ffc7 	bl	60017f02 <assert_print>
6000af74:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
6000af78:	487c      	ldr	r0, [pc, #496]	; (6000b16c <z_arm_fault+0x250>)
6000af7a:	f00c ffbb 	bl	60017ef4 <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
6000af7e:	0715      	lsls	r5, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
6000af80:	bf4c      	ite	mi
6000af82:	460c      	movmi	r4, r1
			*nested_exc = true;
6000af84:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
6000af86:	2c00      	cmp	r4, #0
6000af88:	d0ea      	beq.n	6000af60 <z_arm_fault+0x44>
	*recoverable = false;
6000af8a:	2200      	movs	r2, #0
6000af8c:	71fa      	strb	r2, [r7, #7]
	switch (fault) {
6000af8e:	1eda      	subs	r2, r3, #3
6000af90:	2a09      	cmp	r2, #9
6000af92:	f200 80c2 	bhi.w	6000b11a <z_arm_fault+0x1fe>
6000af96:	e8df f002 	tbb	[pc, r2]
6000af9a:	b505      	.short	0xb505
6000af9c:	c0c098b8 	.word	0xc0c098b8
6000afa0:	bbc0c0c0 	.word	0xbbc0c0c0
	PR_FAULT_INFO("***** HARD FAULT *****");
6000afa4:	46e9      	mov	r9, sp
6000afa6:	4b74      	ldr	r3, [pc, #464]	; (6000b178 <z_arm_fault+0x25c>)
6000afa8:	f04f 0802 	mov.w	r8, #2
6000afac:	f107 0218 	add.w	r2, r7, #24
6000afb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000afb4:	61fb      	str	r3, [r7, #28]
6000afb6:	486b      	ldr	r0, [pc, #428]	; (6000b164 <z_arm_fault+0x248>)
6000afb8:	f8c7 8018 	str.w	r8, [r7, #24]
6000afbc:	f00d fa47 	bl	6001844e <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
6000afc0:	4d66      	ldr	r5, [pc, #408]	; (6000b15c <z_arm_fault+0x240>)
	*recoverable = false;
6000afc2:	2300      	movs	r3, #0
6000afc4:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
6000afc6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
6000afc8:	079a      	lsls	r2, r3, #30
6000afca:	d50b      	bpl.n	6000afe4 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
6000afcc:	4b6b      	ldr	r3, [pc, #428]	; (6000b17c <z_arm_fault+0x260>)
		PR_EXC("  Debug event");
6000afce:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
6000afd2:	f107 0218 	add.w	r2, r7, #24
6000afd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000afda:	4862      	ldr	r0, [pc, #392]	; (6000b164 <z_arm_fault+0x248>)
6000afdc:	f00d fa37 	bl	6001844e <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
6000afe0:	2300      	movs	r3, #0
6000afe2:	e038      	b.n	6000b056 <z_arm_fault+0x13a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
6000afe4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
6000afe6:	2b00      	cmp	r3, #0
6000afe8:	da01      	bge.n	6000afee <z_arm_fault+0xd2>
		PR_EXC("  Debug event");
6000afea:	4b65      	ldr	r3, [pc, #404]	; (6000b180 <z_arm_fault+0x264>)
6000afec:	e7ef      	b.n	6000afce <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
6000afee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
6000aff0:	005b      	lsls	r3, r3, #1
6000aff2:	d57a      	bpl.n	6000b0ea <z_arm_fault+0x1ce>
		PR_EXC("  Fault escalation (see below)");
6000aff4:	4b63      	ldr	r3, [pc, #396]	; (6000b184 <z_arm_fault+0x268>)
6000aff6:	f107 0218 	add.w	r2, r7, #24
6000affa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000affe:	4859      	ldr	r0, [pc, #356]	; (6000b164 <z_arm_fault+0x248>)
6000b000:	e9c7 8306 	strd	r8, r3, [r7, #24]
6000b004:	f00d fa23 	bl	6001844e <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
6000b008:	696b      	ldr	r3, [r5, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
6000b00a:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
6000b00c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
6000b010:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
6000b012:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000b016:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
6000b01a:	696b      	ldr	r3, [r5, #20]
	uint16_t fault_insn = *(ret_addr - 1);
6000b01c:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
6000b020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
6000b024:	616b      	str	r3, [r5, #20]
  __ASM volatile ("dsb 0xF":::"memory");
6000b026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000b02a:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
6000b02e:	f64d 7302 	movw	r3, #57090	; 0xdf02
6000b032:	429a      	cmp	r2, r3
6000b034:	d132      	bne.n	6000b09c <z_arm_fault+0x180>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
6000b036:	b088      	sub	sp, #32
6000b038:	6823      	ldr	r3, [r4, #0]
6000b03a:	466a      	mov	r2, sp
6000b03c:	4952      	ldr	r1, [pc, #328]	; (6000b188 <z_arm_fault+0x26c>)
6000b03e:	4849      	ldr	r0, [pc, #292]	; (6000b164 <z_arm_fault+0x248>)
6000b040:	e9c2 1305 	strd	r1, r3, [r2, #20]
6000b044:	2303      	movs	r3, #3
6000b046:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000b04a:	f842 3f10 	str.w	r3, [r2, #16]!
6000b04e:	f00d f9fe 	bl	6001844e <z_log_msg_static_create.constprop.0>
6000b052:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
6000b054:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
6000b056:	79fa      	ldrb	r2, [r7, #7]
6000b058:	b9e2      	cbnz	r2, 6000b094 <z_arm_fault+0x178>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
6000b05a:	f107 0508 	add.w	r5, r7, #8
6000b05e:	f104 0c20 	add.w	ip, r4, #32
6000b062:	6820      	ldr	r0, [r4, #0]
6000b064:	3408      	adds	r4, #8
6000b066:	f854 1c04 	ldr.w	r1, [r4, #-4]
6000b06a:	462a      	mov	r2, r5
6000b06c:	4564      	cmp	r4, ip
6000b06e:	c203      	stmia	r2!, {r0, r1}
6000b070:	4615      	mov	r5, r2
6000b072:	d1f6      	bne.n	6000b062 <z_arm_fault+0x146>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
6000b074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
6000b076:	2e00      	cmp	r6, #0
6000b078:	d06a      	beq.n	6000b150 <z_arm_fault+0x234>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
6000b07a:	f3c2 0108 	ubfx	r1, r2, #0, #9
6000b07e:	b921      	cbnz	r1, 6000b08a <z_arm_fault+0x16e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
6000b080:	ea6f 2252 	mvn.w	r2, r2, lsr #9
6000b084:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
6000b088:	627a      	str	r2, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
6000b08a:	f107 0108 	add.w	r1, r7, #8
6000b08e:	4618      	mov	r0, r3
6000b090:	f7ff fbbc 	bl	6000a80c <z_arm_fatal_error>
}
6000b094:	372c      	adds	r7, #44	; 0x2c
6000b096:	46bd      	mov	sp, r7
6000b098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
6000b09c:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000b09e:	b2db      	uxtb	r3, r3
6000b0a0:	b133      	cbz	r3, 6000b0b0 <z_arm_fault+0x194>
			reason = mem_manage_fault(esf, 1, recoverable);
6000b0a2:	1dfa      	adds	r2, r7, #7
6000b0a4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
6000b0a6:	4620      	mov	r0, r4
6000b0a8:	f7ff fe62 	bl	6000ad70 <mem_manage_fault>
6000b0ac:	4603      	mov	r3, r0
		break;
6000b0ae:	e7d2      	b.n	6000b056 <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
6000b0b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000b0b2:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
6000b0b6:	d004      	beq.n	6000b0c2 <z_arm_fault+0x1a6>
			reason = bus_fault(esf, 1, recoverable);
6000b0b8:	1df9      	adds	r1, r7, #7
6000b0ba:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
6000b0bc:	f7ff fd2c 	bl	6000ab18 <bus_fault.constprop.0>
6000b0c0:	e7f4      	b.n	6000b0ac <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
6000b0c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000b0c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
6000b0c8:	d302      	bcc.n	6000b0d0 <z_arm_fault+0x1b4>
		reason = usage_fault(esf);
6000b0ca:	f7ff fdcf 	bl	6000ac6c <usage_fault.constprop.0>
6000b0ce:	e7ed      	b.n	6000b0ac <z_arm_fault+0x190>
			__ASSERT(0,
6000b0d0:	492e      	ldr	r1, [pc, #184]	; (6000b18c <z_arm_fault+0x270>)
6000b0d2:	f44f 7344 	mov.w	r3, #784	; 0x310
6000b0d6:	4a25      	ldr	r2, [pc, #148]	; (6000b16c <z_arm_fault+0x250>)
6000b0d8:	4825      	ldr	r0, [pc, #148]	; (6000b170 <z_arm_fault+0x254>)
6000b0da:	f00c ff12 	bl	60017f02 <assert_print>
6000b0de:	482c      	ldr	r0, [pc, #176]	; (6000b190 <z_arm_fault+0x274>)
6000b0e0:	f00c ff0f 	bl	60017f02 <assert_print>
6000b0e4:	f44f 7144 	mov.w	r1, #784	; 0x310
6000b0e8:	e746      	b.n	6000af78 <z_arm_fault+0x5c>
		__ASSERT(0,
6000b0ea:	4928      	ldr	r1, [pc, #160]	; (6000b18c <z_arm_fault+0x270>)
6000b0ec:	f44f 7345 	mov.w	r3, #788	; 0x314
6000b0f0:	4a1e      	ldr	r2, [pc, #120]	; (6000b16c <z_arm_fault+0x250>)
6000b0f2:	481f      	ldr	r0, [pc, #124]	; (6000b170 <z_arm_fault+0x254>)
6000b0f4:	f00c ff05 	bl	60017f02 <assert_print>
6000b0f8:	4826      	ldr	r0, [pc, #152]	; (6000b194 <z_arm_fault+0x278>)
6000b0fa:	f00c ff02 	bl	60017f02 <assert_print>
6000b0fe:	f44f 7145 	mov.w	r1, #788	; 0x314
6000b102:	e739      	b.n	6000af78 <z_arm_fault+0x5c>
		reason = mem_manage_fault(esf, 0, recoverable);
6000b104:	1dfa      	adds	r2, r7, #7
6000b106:	2100      	movs	r1, #0
6000b108:	e7cd      	b.n	6000b0a6 <z_arm_fault+0x18a>
		reason = bus_fault(esf, 0, recoverable);
6000b10a:	1df9      	adds	r1, r7, #7
6000b10c:	2000      	movs	r0, #0
6000b10e:	e7d5      	b.n	6000b0bc <z_arm_fault+0x1a0>
	PR_FAULT_INFO(
6000b110:	4b21      	ldr	r3, [pc, #132]	; (6000b198 <z_arm_fault+0x27c>)
6000b112:	61fb      	str	r3, [r7, #28]
6000b114:	2302      	movs	r3, #2
6000b116:	61bb      	str	r3, [r7, #24]
6000b118:	e75b      	b.n	6000afd2 <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
6000b11a:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
6000b11e:	4a1f      	ldr	r2, [pc, #124]	; (6000b19c <z_arm_fault+0x280>)
6000b120:	466d      	mov	r5, sp
6000b122:	b08a      	sub	sp, #40	; 0x28
6000b124:	491e      	ldr	r1, [pc, #120]	; (6000b1a0 <z_arm_fault+0x284>)
6000b126:	bf18      	it	ne
6000b128:	4611      	movne	r1, r2
6000b12a:	466a      	mov	r2, sp
6000b12c:	3b10      	subs	r3, #16
6000b12e:	481d      	ldr	r0, [pc, #116]	; (6000b1a4 <z_arm_fault+0x288>)
6000b130:	61d3      	str	r3, [r2, #28]
6000b132:	f44f 7300 	mov.w	r3, #512	; 0x200
6000b136:	8413      	strh	r3, [r2, #32]
6000b138:	4b1b      	ldr	r3, [pc, #108]	; (6000b1a8 <z_arm_fault+0x28c>)
6000b13a:	e9c2 0105 	strd	r0, r1, [r2, #20]
6000b13e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
6000b142:	4808      	ldr	r0, [pc, #32]	; (6000b164 <z_arm_fault+0x248>)
6000b144:	f842 3f10 	str.w	r3, [r2, #16]!
6000b148:	f00d f981 	bl	6001844e <z_log_msg_static_create.constprop.0>
6000b14c:	46ad      	mov	sp, r5
}
6000b14e:	e747      	b.n	6000afe0 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
6000b150:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
6000b154:	f022 0201 	bic.w	r2, r2, #1
6000b158:	e796      	b.n	6000b088 <z_arm_fault+0x16c>
6000b15a:	bf00      	nop
6000b15c:	e000ed00 	.word	0xe000ed00
6000b160:	6001d38c 	.word	0x6001d38c
6000b164:	6001a3e4 	.word	0x6001a3e4
6000b168:	6001d3b7 	.word	0x6001d3b7
6000b16c:	6001d2b7 	.word	0x6001d2b7
6000b170:	6001c3d7 	.word	0x6001c3d7
6000b174:	6001d3ca 	.word	0x6001d3ca
6000b178:	6001d408 	.word	0x6001d408
6000b17c:	6001d41f 	.word	0x6001d41f
6000b180:	6001d440 	.word	0x6001d440
6000b184:	6001d44e 	.word	0x6001d44e
6000b188:	6001d46d 	.word	0x6001d46d
6000b18c:	6001c64e 	.word	0x6001c64e
6000b190:	6001d489 	.word	0x6001d489
6000b194:	6001d4ad 	.word	0x6001d4ad
6000b198:	6001d4dd 	.word	0x6001d4dd
6000b19c:	6001d373 	.word	0x6001d373
6000b1a0:	6001d35e 	.word	0x6001d35e
6000b1a4:	6001d501 	.word	0x6001d501
6000b1a8:	01000004 	.word	0x01000004

6000b1ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
6000b1ac:	4a02      	ldr	r2, [pc, #8]	; (6000b1b8 <z_arm_fault_init+0xc>)
6000b1ae:	6953      	ldr	r3, [r2, #20]
6000b1b0:	f043 0310 	orr.w	r3, r3, #16
6000b1b4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
6000b1b6:	4770      	bx	lr
6000b1b8:	e000ed00 	.word	0xe000ed00

6000b1bc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
6000b1bc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
6000b1c0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
6000b1c4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
6000b1c6:	4672      	mov	r2, lr
	bl z_arm_fault
6000b1c8:	f7ff fea8 	bl	6000af1c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
6000b1cc:	bd01      	pop	{r0, pc}
6000b1ce:	bf00      	nop

6000b1d0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
6000b1d0:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000b1d2:	4804      	ldr	r0, [pc, #16]	; (6000b1e4 <z_arm_interrupt_init+0x14>)
6000b1d4:	2110      	movs	r1, #16
6000b1d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
6000b1d8:	3301      	adds	r3, #1
6000b1da:	2ba0      	cmp	r3, #160	; 0xa0
6000b1dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
6000b1e0:	d1f9      	bne.n	6000b1d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
6000b1e2:	4770      	bx	lr
6000b1e4:	e000e100 	.word	0xe000e100

6000b1e8 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
6000b1e8:	f00c ffa0 	bl	6001812c <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
6000b1ec:	2010      	movs	r0, #16
    msr BASEPRI, r0
6000b1ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
6000b1f2:	4808      	ldr	r0, [pc, #32]	; (6000b214 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
6000b1f4:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
6000b1f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
6000b1fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
6000b1fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
6000b202:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
6000b204:	4308      	orrs	r0, r1
    msr CONTROL, r0
6000b206:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
6000b20a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
6000b20e:	f7ff fba7 	bl	6000a960 <z_arm_prep_c>
6000b212:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
6000b214:	202076c0 	.word	0x202076c0

6000b218 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
6000b218:	4b08      	ldr	r3, [pc, #32]	; (6000b23c <z_impl_k_thread_abort+0x24>)
6000b21a:	689b      	ldr	r3, [r3, #8]
6000b21c:	4283      	cmp	r3, r0
6000b21e:	d10b      	bne.n	6000b238 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
6000b220:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
6000b224:	b143      	cbz	r3, 6000b238 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
6000b226:	4b06      	ldr	r3, [pc, #24]	; (6000b240 <z_impl_k_thread_abort+0x28>)
6000b228:	685a      	ldr	r2, [r3, #4]
6000b22a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
6000b22e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
6000b230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
6000b232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
6000b236:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
6000b238:	f006 bd5e 	b.w	60011cf8 <z_thread_abort>
6000b23c:	20204d8c 	.word	0x20204d8c
6000b240:	e000ed00 	.word	0xe000ed00

6000b244 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
6000b244:	4b02      	ldr	r3, [pc, #8]	; (6000b250 <z_arm_configure_static_mpu_regions+0xc>)
6000b246:	2102      	movs	r1, #2
6000b248:	4a02      	ldr	r2, [pc, #8]	; (6000b254 <z_arm_configure_static_mpu_regions+0x10>)
6000b24a:	4803      	ldr	r0, [pc, #12]	; (6000b258 <z_arm_configure_static_mpu_regions+0x14>)
6000b24c:	f000 b892 	b.w	6000b374 <arm_core_mpu_configure_static_mpu_regions>
6000b250:	202c0000 	.word	0x202c0000
6000b254:	20200000 	.word	0x20200000
6000b258:	6001a65c 	.word	0x6001a65c

6000b25c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
6000b25c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
6000b25e:	2140      	movs	r1, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
6000b260:	4b04      	ldr	r3, [pc, #16]	; (6000b274 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
6000b262:	3a40      	subs	r2, #64	; 0x40

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
6000b264:	4618      	mov	r0, r3
	dynamic_regions[region_num].start = guard_start;
6000b266:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
6000b268:	4a03      	ldr	r2, [pc, #12]	; (6000b278 <z_arm_configure_dynamic_mpu_regions+0x1c>)
6000b26a:	e9c3 1201 	strd	r1, r2, [r3, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
6000b26e:	2101      	movs	r1, #1
6000b270:	f000 b8a6 	b.w	6000b3c0 <arm_core_mpu_configure_dynamic_mpu_regions>
6000b274:	202049f0 	.word	0x202049f0
6000b278:	150b0000 	.word	0x150b0000

6000b27c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
6000b27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000b280:	469c      	mov	ip, r3
6000b282:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
6000b284:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
6000b286:	2300      	movs	r3, #0
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
6000b288:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 6000b338 <mpu_configure_regions+0xbc>
6000b28c:	428b      	cmp	r3, r1
6000b28e:	da1a      	bge.n	6000b2c6 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
6000b290:	6844      	ldr	r4, [r0, #4]
6000b292:	2c00      	cmp	r4, #0
6000b294:	d04d      	beq.n	6000b332 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
6000b296:	f1bc 0f00 	cmp.w	ip, #0
6000b29a:	d01d      	beq.n	6000b2d8 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
6000b29c:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
6000b29e:	4234      	tst	r4, r6
6000b2a0:	d015      	beq.n	6000b2ce <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
6000b2a2:	466c      	mov	r4, sp
6000b2a4:	b088      	sub	sp, #32
6000b2a6:	466a      	mov	r2, sp
6000b2a8:	4924      	ldr	r1, [pc, #144]	; (6000b33c <mpu_configure_regions+0xc0>)
6000b2aa:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
6000b2ae:	2303      	movs	r3, #3
6000b2b0:	f842 3f10 	str.w	r3, [r2, #16]!
6000b2b4:	2300      	movs	r3, #0
6000b2b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000b2ba:	4821      	ldr	r0, [pc, #132]	; (6000b340 <mpu_configure_regions+0xc4>)
			return -EINVAL;
6000b2bc:	f06f 0515 	mvn.w	r5, #21
6000b2c0:	f7fd fc00 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000b2c4:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
6000b2c6:	4628      	mov	r0, r5
6000b2c8:	46bd      	mov	sp, r7
6000b2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
6000b2ce:	2c1f      	cmp	r4, #31
6000b2d0:	d9e7      	bls.n	6000b2a2 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
6000b2d2:	6802      	ldr	r2, [r0, #0]
		&&
6000b2d4:	4216      	tst	r6, r2
6000b2d6:	d1e4      	bne.n	6000b2a2 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
6000b2d8:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
6000b2da:	fa5f f885 	uxtb.w	r8, r5
	region_conf.base = new_region->start;
6000b2de:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
6000b2e0:	6886      	ldr	r6, [r0, #8]
	if (size <= 32U) {
6000b2e2:	d914      	bls.n	6000b30e <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
6000b2e4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
6000b2e8:	d813      	bhi.n	6000b312 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
6000b2ea:	3c01      	subs	r4, #1
6000b2ec:	fab4 f484 	clz	r4, r4
6000b2f0:	f1c4 041f 	rsb	r4, r4, #31
6000b2f4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
6000b2f6:	f1b8 0f0f 	cmp.w	r8, #15
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
6000b2fa:	ea46 0604 	orr.w	r6, r6, r4
6000b2fe:	d90a      	bls.n	6000b316 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
6000b300:	466c      	mov	r4, sp
6000b302:	b088      	sub	sp, #32
6000b304:	466a      	mov	r2, sp
6000b306:	4b0f      	ldr	r3, [pc, #60]	; (6000b344 <mpu_configure_regions+0xc8>)
6000b308:	e9c2 3505 	strd	r3, r5, [r2, #20]
6000b30c:	e7cf      	b.n	6000b2ae <mpu_configure_regions+0x32>
		return REGION_32B;
6000b30e:	2408      	movs	r4, #8
6000b310:	e7f1      	b.n	6000b2f6 <mpu_configure_regions+0x7a>
		return REGION_4G;
6000b312:	243e      	movs	r4, #62	; 0x3e
6000b314:	e7ef      	b.n	6000b2f6 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
6000b316:	f022 021f 	bic.w	r2, r2, #31
6000b31a:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
6000b31e:	f046 0601 	orr.w	r6, r6, #1
				| MPU_RBAR_VALID_Msk | index;
6000b322:	432a      	orrs	r2, r5
		reg_index++;
6000b324:	3501      	adds	r5, #1
6000b326:	f042 0210 	orr.w	r2, r2, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
6000b32a:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
6000b32e:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
6000b332:	3301      	adds	r3, #1
6000b334:	300c      	adds	r0, #12
6000b336:	e7a9      	b.n	6000b28c <mpu_configure_regions+0x10>
6000b338:	e000ed00 	.word	0xe000ed00
6000b33c:	6001d514 	.word	0x6001d514
6000b340:	6001a3dc 	.word	0x6001a3dc
6000b344:	6001d537 	.word	0x6001d537

6000b348 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
6000b348:	4b04      	ldr	r3, [pc, #16]	; (6000b35c <arm_core_mpu_enable+0x14>)
6000b34a:	2205      	movs	r2, #5
6000b34c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
6000b350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000b354:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
6000b358:	4770      	bx	lr
6000b35a:	bf00      	nop
6000b35c:	e000ed00 	.word	0xe000ed00

6000b360 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
6000b360:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
6000b364:	4b02      	ldr	r3, [pc, #8]	; (6000b370 <arm_core_mpu_disable+0x10>)
6000b366:	2200      	movs	r2, #0
6000b368:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
6000b36c:	4770      	bx	lr
6000b36e:	bf00      	nop
6000b370:	e000ed00 	.word	0xe000ed00

6000b374 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
6000b374:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
6000b376:	4d0d      	ldr	r5, [pc, #52]	; (6000b3ac <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
6000b378:	2301      	movs	r3, #1
6000b37a:	460c      	mov	r4, r1
6000b37c:	782a      	ldrb	r2, [r5, #0]
6000b37e:	f7ff ff7d 	bl	6000b27c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
6000b382:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
6000b384:	3016      	adds	r0, #22
6000b386:	d10f      	bne.n	6000b3a8 <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
6000b388:	f44f 738d 	mov.w	r3, #282	; 0x11a
6000b38c:	4a08      	ldr	r2, [pc, #32]	; (6000b3b0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
6000b38e:	4909      	ldr	r1, [pc, #36]	; (6000b3b4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
6000b390:	4809      	ldr	r0, [pc, #36]	; (6000b3b8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
6000b392:	f00c fdb6 	bl	60017f02 <assert_print>
6000b396:	4621      	mov	r1, r4
6000b398:	4808      	ldr	r0, [pc, #32]	; (6000b3bc <arm_core_mpu_configure_static_mpu_regions+0x48>)
6000b39a:	f00c fdb2 	bl	60017f02 <assert_print>
6000b39e:	f44f 718d 	mov.w	r1, #282	; 0x11a
6000b3a2:	4803      	ldr	r0, [pc, #12]	; (6000b3b0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
6000b3a4:	f00c fda6 	bl	60017ef4 <assert_post_action>
			regions_num);
	}
}
6000b3a8:	bd38      	pop	{r3, r4, r5, pc}
6000b3aa:	bf00      	nop
6000b3ac:	20204e44 	.word	0x20204e44
6000b3b0:	6001d55d 	.word	0x6001d55d
6000b3b4:	6001c64e 	.word	0x6001c64e
6000b3b8:	6001c3d7 	.word	0x6001c3d7
6000b3bc:	6001d594 	.word	0x6001d594

6000b3c0 <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
6000b3c0:	4a12      	ldr	r2, [pc, #72]	; (6000b40c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
6000b3c2:	2300      	movs	r3, #0
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
6000b3c4:	b510      	push	{r4, lr}
6000b3c6:	7812      	ldrb	r2, [r2, #0]
6000b3c8:	460c      	mov	r4, r1
6000b3ca:	f7ff ff57 	bl	6000b27c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
6000b3ce:	f110 0f16 	cmn.w	r0, #22
6000b3d2:	d004      	beq.n	6000b3de <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
6000b3d4:	4b0e      	ldr	r3, [pc, #56]	; (6000b410 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
6000b3d6:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
6000b3d8:	280f      	cmp	r0, #15
6000b3da:	dd10      	ble.n	6000b3fe <arm_core_mpu_configure_dynamic_mpu_regions+0x3e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
6000b3dc:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
6000b3de:	f240 1339 	movw	r3, #313	; 0x139
6000b3e2:	4a0c      	ldr	r2, [pc, #48]	; (6000b414 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
6000b3e4:	490c      	ldr	r1, [pc, #48]	; (6000b418 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
6000b3e6:	480d      	ldr	r0, [pc, #52]	; (6000b41c <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
6000b3e8:	f00c fd8b 	bl	60017f02 <assert_print>
6000b3ec:	4621      	mov	r1, r4
6000b3ee:	480c      	ldr	r0, [pc, #48]	; (6000b420 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
6000b3f0:	f00c fd87 	bl	60017f02 <assert_print>
6000b3f4:	f240 1139 	movw	r1, #313	; 0x139
6000b3f8:	4806      	ldr	r0, [pc, #24]	; (6000b414 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
6000b3fa:	f00c fd7b 	bl	60017ef4 <assert_post_action>
  MPU->RNR = rnr;
6000b3fe:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
6000b402:	3001      	adds	r0, #1
  MPU->RASR = 0U;
6000b404:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
6000b408:	e7e6      	b.n	6000b3d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
6000b40a:	bf00      	nop
6000b40c:	20204e44 	.word	0x20204e44
6000b410:	e000ed00 	.word	0xe000ed00
6000b414:	6001d55d 	.word	0x6001d55d
6000b418:	6001c64e 	.word	0x6001c64e
6000b41c:	6001c3d7 	.word	0x6001c3d7
6000b420:	6001d5c0 	.word	0x6001d5c0

6000b424 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
6000b424:	4837      	ldr	r0, [pc, #220]	; (6000b504 <z_arm_mpu_init+0xe0>)
{
6000b426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mpu_config.num_regions > get_num_regions()) {
6000b428:	6804      	ldr	r4, [r0, #0]
6000b42a:	2c10      	cmp	r4, #16
6000b42c:	d910      	bls.n	6000b450 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
6000b42e:	f240 1351 	movw	r3, #337	; 0x151
6000b432:	4a35      	ldr	r2, [pc, #212]	; (6000b508 <z_arm_mpu_init+0xe4>)
6000b434:	4935      	ldr	r1, [pc, #212]	; (6000b50c <z_arm_mpu_init+0xe8>)
6000b436:	4836      	ldr	r0, [pc, #216]	; (6000b510 <z_arm_mpu_init+0xec>)
6000b438:	f00c fd63 	bl	60017f02 <assert_print>
6000b43c:	4621      	mov	r1, r4
6000b43e:	2210      	movs	r2, #16
6000b440:	4834      	ldr	r0, [pc, #208]	; (6000b514 <z_arm_mpu_init+0xf0>)
6000b442:	f00c fd5e 	bl	60017f02 <assert_print>
6000b446:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
6000b44a:	482f      	ldr	r0, [pc, #188]	; (6000b508 <z_arm_mpu_init+0xe4>)
6000b44c:	f00c fd52 	bl	60017ef4 <assert_post_action>
	arm_core_mpu_disable();
6000b450:	f7ff ff86 	bl	6000b360 <arm_core_mpu_disable>
	if (SCB->CCR & SCB_CCR_DC_Msk) {
6000b454:	4a30      	ldr	r2, [pc, #192]	; (6000b518 <z_arm_mpu_init+0xf4>)
6000b456:	6953      	ldr	r3, [r2, #20]
6000b458:	03db      	lsls	r3, r3, #15
6000b45a:	d51e      	bpl.n	6000b49a <z_arm_mpu_init+0x76>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
6000b45c:	2300      	movs	r3, #0
6000b45e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
6000b462:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
6000b466:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
6000b46a:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
6000b46e:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
6000b472:	f3c3 334e 	ubfx	r3, r3, #13, #15
6000b476:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
6000b478:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
6000b47c:	4621      	mov	r1, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
6000b47e:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
6000b482:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
6000b484:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
6000b488:	d2f9      	bcs.n	6000b47e <z_arm_mpu_init+0x5a>
    } while(sets-- != 0U);
6000b48a:	3b20      	subs	r3, #32
6000b48c:	f113 0f20 	cmn.w	r3, #32
6000b490:	d1f2      	bne.n	6000b478 <z_arm_mpu_init+0x54>
6000b492:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000b496:	f3bf 8f6f 	isb	sy
6000b49a:	e9d0 4000 	ldrd	r4, r0, [r0]
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
6000b49e:	2200      	movs	r2, #0
6000b4a0:	491d      	ldr	r1, [pc, #116]	; (6000b518 <z_arm_mpu_init+0xf4>)
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
6000b4a2:	42a2      	cmp	r2, r4
6000b4a4:	f100 000c 	add.w	r0, r0, #12
6000b4a8:	d116      	bne.n	6000b4d8 <z_arm_mpu_init+0xb4>
	static_regions_num = mpu_config.num_regions;
6000b4aa:	4b1c      	ldr	r3, [pc, #112]	; (6000b51c <z_arm_mpu_init+0xf8>)
6000b4ac:	701a      	strb	r2, [r3, #0]
	arm_core_mpu_enable();
6000b4ae:	f7ff ff4b 	bl	6000b348 <arm_core_mpu_enable>
	__ASSERT(
6000b4b2:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
6000b4b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
6000b4ba:	2b10      	cmp	r3, #16
6000b4bc:	d01f      	beq.n	6000b4fe <z_arm_mpu_init+0xda>
6000b4be:	4918      	ldr	r1, [pc, #96]	; (6000b520 <z_arm_mpu_init+0xfc>)
6000b4c0:	f240 13bb 	movw	r3, #443	; 0x1bb
6000b4c4:	4a10      	ldr	r2, [pc, #64]	; (6000b508 <z_arm_mpu_init+0xe4>)
6000b4c6:	4812      	ldr	r0, [pc, #72]	; (6000b510 <z_arm_mpu_init+0xec>)
6000b4c8:	f00c fd1b 	bl	60017f02 <assert_print>
6000b4cc:	4815      	ldr	r0, [pc, #84]	; (6000b524 <z_arm_mpu_init+0x100>)
6000b4ce:	f00c fd18 	bl	60017f02 <assert_print>
6000b4d2:	f240 11bb 	movw	r1, #443	; 0x1bb
6000b4d6:	e7b8      	b.n	6000b44a <z_arm_mpu_init+0x26>
6000b4d8:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
6000b4dc:	f850 3c0c 	ldr.w	r3, [r0, #-12]
6000b4e0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
6000b4e4:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
6000b4e6:	3201      	adds	r2, #1
6000b4e8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
6000b4ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
6000b4f0:	f850 3c04 	ldr.w	r3, [r0, #-4]
6000b4f4:	f043 0301 	orr.w	r3, r3, #1
6000b4f8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
6000b4fc:	e7d1      	b.n	6000b4a2 <z_arm_mpu_init+0x7e>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
6000b4fe:	2000      	movs	r0, #0
6000b500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000b502:	bf00      	nop
6000b504:	6001a674 	.word	0x6001a674
6000b508:	6001d55d 	.word	0x6001d55d
6000b50c:	6001c64e 	.word	0x6001c64e
6000b510:	6001c3d7 	.word	0x6001c3d7
6000b514:	6001d5ed 	.word	0x6001d5ed
6000b518:	e000ed00 	.word	0xe000ed00
6000b51c:	20204e44 	.word	0x20204e44
6000b520:	6001d621 	.word	0x6001d621
6000b524:	6001d672 	.word	0x6001d672

6000b528 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
6000b528:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
6000b52a:	4b0b      	ldr	r3, [pc, #44]	; (6000b558 <malloc_prepare+0x30>)
6000b52c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
6000b530:	f503 1330 	add.w	r3, r3, #2883584	; 0x2c0000
6000b534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
6000b538:	d20c      	bcs.n	6000b554 <malloc_prepare+0x2c>
6000b53a:	4908      	ldr	r1, [pc, #32]	; (6000b55c <malloc_prepare+0x34>)
6000b53c:	2381      	movs	r3, #129	; 0x81
6000b53e:	4a08      	ldr	r2, [pc, #32]	; (6000b560 <malloc_prepare+0x38>)
6000b540:	4808      	ldr	r0, [pc, #32]	; (6000b564 <malloc_prepare+0x3c>)
6000b542:	f00c fcde 	bl	60017f02 <assert_print>
6000b546:	4808      	ldr	r0, [pc, #32]	; (6000b568 <malloc_prepare+0x40>)
6000b548:	f00c fcdb 	bl	60017f02 <assert_print>
6000b54c:	2181      	movs	r1, #129	; 0x81
6000b54e:	4804      	ldr	r0, [pc, #16]	; (6000b560 <malloc_prepare+0x38>)
6000b550:	f00c fcd0 	bl	60017ef4 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
6000b554:	2000      	movs	r0, #0
6000b556:	bd08      	pop	{r3, pc}
6000b558:	20209278 	.word	0x20209278
6000b55c:	6001d6c3 	.word	0x6001d6c3
6000b560:	6001d693 	.word	0x6001d693
6000b564:	6001c3d7 	.word	0x6001c3d7
6000b568:	6001d70a 	.word	0x6001d70a

6000b56c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
6000b56c:	4b01      	ldr	r3, [pc, #4]	; (6000b574 <__stdout_hook_install+0x8>)
6000b56e:	6018      	str	r0, [r3, #0]
}
6000b570:	4770      	bx	lr
6000b572:	bf00      	nop
6000b574:	20203134 	.word	0x20203134

6000b578 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
6000b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000b57a:	4606      	mov	r6, r0
6000b57c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
6000b57e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
6000b580:	4f06      	ldr	r7, [pc, #24]	; (6000b59c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
6000b582:	42ac      	cmp	r4, r5
6000b584:	da08      	bge.n	6000b598 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
6000b586:	683b      	ldr	r3, [r7, #0]
6000b588:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
6000b58a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
6000b58c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
6000b58e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
6000b592:	d001      	beq.n	6000b598 <z_impl_zephyr_read_stdin+0x20>
6000b594:	280d      	cmp	r0, #13
6000b596:	d1f4      	bne.n	6000b582 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
6000b598:	4620      	mov	r0, r4
6000b59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000b59c:	20203130 	.word	0x20203130

6000b5a0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
6000b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000b5a2:	460d      	mov	r5, r1
6000b5a4:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
6000b5a6:	f1c0 0401 	rsb	r4, r0, #1
6000b5aa:	4f08      	ldr	r7, [pc, #32]	; (6000b5cc <z_impl_zephyr_write_stdout+0x2c>)
6000b5ac:	19a3      	adds	r3, r4, r6
6000b5ae:	429d      	cmp	r5, r3
6000b5b0:	dc01      	bgt.n	6000b5b6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
6000b5b2:	4628      	mov	r0, r5
6000b5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
6000b5b6:	7873      	ldrb	r3, [r6, #1]
6000b5b8:	2b0a      	cmp	r3, #10
6000b5ba:	d102      	bne.n	6000b5c2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
6000b5bc:	683b      	ldr	r3, [r7, #0]
6000b5be:	200d      	movs	r0, #13
6000b5c0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
6000b5c2:	683b      	ldr	r3, [r7, #0]
6000b5c4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
6000b5c8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
6000b5ca:	e7ef      	b.n	6000b5ac <z_impl_zephyr_write_stdout+0xc>
6000b5cc:	20203134 	.word	0x20203134

6000b5d0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
6000b5d0:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
6000b5d2:	2105      	movs	r1, #5
6000b5d4:	4801      	ldr	r0, [pc, #4]	; (6000b5dc <_exit+0xc>)
6000b5d6:	f7ff ffe3 	bl	6000b5a0 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
6000b5da:	e7fe      	b.n	6000b5da <_exit+0xa>
6000b5dc:	6001d791 	.word	0x6001d791

6000b5e0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
6000b5e0:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
6000b5e2:	4c07      	ldr	r4, [pc, #28]	; (6000b600 <_sbrk+0x20>)
6000b5e4:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
6000b5e6:	18c2      	adds	r2, r0, r3
6000b5e8:	4806      	ldr	r0, [pc, #24]	; (6000b604 <_sbrk+0x24>)
6000b5ea:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
6000b5ee:	f501 1130 	add.w	r1, r1, #2883584	; 0x2c0000
6000b5f2:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
6000b5f4:	bf36      	itet	cc
6000b5f6:	18c0      	addcc	r0, r0, r3

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
6000b5f8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
		heap_sz += count;
6000b5fc:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
6000b5fe:	bd10      	pop	{r4, pc}
6000b600:	202049fc 	.word	0x202049fc
6000b604:	20209278 	.word	0x20209278

6000b608 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
6000b608:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
6000b60a:	4604      	mov	r4, r0
6000b60c:	b958      	cbnz	r0, 6000b626 <__retarget_lock_init_recursive+0x1e>
6000b60e:	4911      	ldr	r1, [pc, #68]	; (6000b654 <__retarget_lock_init_recursive+0x4c>)
6000b610:	f240 137b 	movw	r3, #379	; 0x17b
6000b614:	4a10      	ldr	r2, [pc, #64]	; (6000b658 <__retarget_lock_init_recursive+0x50>)
6000b616:	4811      	ldr	r0, [pc, #68]	; (6000b65c <__retarget_lock_init_recursive+0x54>)
6000b618:	f00c fc73 	bl	60017f02 <assert_print>
6000b61c:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
6000b620:	480d      	ldr	r0, [pc, #52]	; (6000b658 <__retarget_lock_init_recursive+0x50>)
6000b622:	f00c fc67 	bl	60017ef4 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
6000b626:	2014      	movs	r0, #20
6000b628:	f007 fbbe 	bl	60012da8 <malloc>
6000b62c:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
6000b62e:	b960      	cbnz	r0, 6000b64a <__retarget_lock_init_recursive+0x42>
6000b630:	490b      	ldr	r1, [pc, #44]	; (6000b660 <__retarget_lock_init_recursive+0x58>)
6000b632:	f240 1383 	movw	r3, #387	; 0x183
6000b636:	4a08      	ldr	r2, [pc, #32]	; (6000b658 <__retarget_lock_init_recursive+0x50>)
6000b638:	4808      	ldr	r0, [pc, #32]	; (6000b65c <__retarget_lock_init_recursive+0x54>)
6000b63a:	f00c fc62 	bl	60017f02 <assert_print>
6000b63e:	4809      	ldr	r0, [pc, #36]	; (6000b664 <__retarget_lock_init_recursive+0x5c>)
6000b640:	f00c fc5f 	bl	60017f02 <assert_print>
6000b644:	f240 1183 	movw	r1, #387	; 0x183
6000b648:	e7ea      	b.n	6000b620 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
6000b64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
6000b64e:	f00e b94f 	b.w	600198f0 <z_impl_k_mutex_init>
6000b652:	bf00      	nop
6000b654:	6001d798 	.word	0x6001d798
6000b658:	6001d693 	.word	0x6001d693
6000b65c:	6001c3d7 	.word	0x6001c3d7
6000b660:	6001d797 	.word	0x6001d797
6000b664:	6001d7d3 	.word	0x6001d7d3

6000b668 <__retarget_lock_close_recursive>:
#endif /* !CONFIG_USERSPACE */
}

/* Close dynamic recursive lock */
void __retarget_lock_close_recursive(_LOCK_T lock)
{
6000b668:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
6000b66a:	b958      	cbnz	r0, 6000b684 <__retarget_lock_close_recursive+0x1c>
6000b66c:	4907      	ldr	r1, [pc, #28]	; (6000b68c <__retarget_lock_close_recursive+0x24>)
6000b66e:	f44f 73cb 	mov.w	r3, #406	; 0x196
6000b672:	4807      	ldr	r0, [pc, #28]	; (6000b690 <__retarget_lock_close_recursive+0x28>)
6000b674:	4a07      	ldr	r2, [pc, #28]	; (6000b694 <__retarget_lock_close_recursive+0x2c>)
6000b676:	f00c fc44 	bl	60017f02 <assert_print>
6000b67a:	f44f 71cb 	mov.w	r1, #406	; 0x196
6000b67e:	4805      	ldr	r0, [pc, #20]	; (6000b694 <__retarget_lock_close_recursive+0x2c>)
6000b680:	f00c fc38 	bl	60017ef4 <assert_post_action>
#ifndef CONFIG_USERSPACE
	free(lock);
#else
	k_object_release(lock);
#endif /* !CONFIG_USERSPACE */
}
6000b684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free(lock);
6000b688:	f007 bb96 	b.w	60012db8 <free>
6000b68c:	6001d798 	.word	0x6001d798
6000b690:	6001c3d7 	.word	0x6001c3d7
6000b694:	6001d693 	.word	0x6001d693

6000b698 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
6000b698:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
6000b69a:	b958      	cbnz	r0, 6000b6b4 <__retarget_lock_acquire_recursive+0x1c>
6000b69c:	4909      	ldr	r1, [pc, #36]	; (6000b6c4 <__retarget_lock_acquire_recursive+0x2c>)
6000b69e:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
6000b6a2:	4809      	ldr	r0, [pc, #36]	; (6000b6c8 <__retarget_lock_acquire_recursive+0x30>)
6000b6a4:	4a09      	ldr	r2, [pc, #36]	; (6000b6cc <__retarget_lock_acquire_recursive+0x34>)
6000b6a6:	f00c fc2c 	bl	60017f02 <assert_print>
6000b6aa:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
6000b6ae:	4807      	ldr	r0, [pc, #28]	; (6000b6cc <__retarget_lock_acquire_recursive+0x34>)
6000b6b0:	f00c fc20 	bl	60017ef4 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
6000b6b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000b6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
6000b6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6000b6c0:	f004 bd16 	b.w	600100f0 <z_impl_k_mutex_lock>
6000b6c4:	6001d798 	.word	0x6001d798
6000b6c8:	6001c3d7 	.word	0x6001c3d7
6000b6cc:	6001d693 	.word	0x6001d693

6000b6d0 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
6000b6d0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
6000b6d2:	b958      	cbnz	r0, 6000b6ec <__retarget_lock_release_recursive+0x1c>
6000b6d4:	4907      	ldr	r1, [pc, #28]	; (6000b6f4 <__retarget_lock_release_recursive+0x24>)
6000b6d6:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
6000b6da:	4807      	ldr	r0, [pc, #28]	; (6000b6f8 <__retarget_lock_release_recursive+0x28>)
6000b6dc:	4a07      	ldr	r2, [pc, #28]	; (6000b6fc <__retarget_lock_release_recursive+0x2c>)
6000b6de:	f00c fc10 	bl	60017f02 <assert_print>
6000b6e2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
6000b6e6:	4805      	ldr	r0, [pc, #20]	; (6000b6fc <__retarget_lock_release_recursive+0x2c>)
6000b6e8:	f00c fc04 	bl	60017ef4 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
6000b6ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
6000b6f0:	f004 bdce 	b.w	60010290 <z_impl_k_mutex_unlock>
6000b6f4:	6001d798 	.word	0x6001d798
6000b6f8:	6001c3d7 	.word	0x6001c3d7
6000b6fc:	6001d693 	.word	0x6001d693

6000b700 <usb_isr_handler>:
}

static void usb_isr_handler(void)
{
#if defined(CONFIG_USB_DC_NXP_EHCI)
	USB_DeviceEhciIsrFunction(&dev_state);
6000b700:	4801      	ldr	r0, [pc, #4]	; (6000b708 <usb_isr_handler+0x8>)
6000b702:	f00d bf26 	b.w	60019552 <USB_DeviceEhciIsrFunction>
6000b706:	bf00      	nop
6000b708:	20203640 	.word	0x20203640

6000b70c <usb_mcux_init>:
	USB_DeviceLpcIp3511IsrFunction(&dev_state);
#endif
}

static int usb_mcux_init(const struct device *dev)
{
6000b70c:	b530      	push	{r4, r5, lr}
6000b70e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
6000b710:	490d      	ldr	r1, [pc, #52]	; (6000b748 <usb_mcux_init+0x3c>)
6000b712:	2200      	movs	r2, #0
6000b714:	2300      	movs	r3, #0
6000b716:	2400      	movs	r4, #0
6000b718:	f501 6588 	add.w	r5, r1, #1088	; 0x440
6000b71c:	9400      	str	r4, [sp, #0]
6000b71e:	4628      	mov	r0, r5
6000b720:	e9cd 2306 	strd	r2, r3, [sp, #24]
6000b724:	f06f 030d 	mvn.w	r3, #13
6000b728:	f44f 6280 	mov.w	r2, #1024	; 0x400
6000b72c:	e9cd 3403 	strd	r3, r4, [sp, #12]
6000b730:	e9cd 4401 	strd	r4, r4, [sp, #4]
6000b734:	4b05      	ldr	r3, [pc, #20]	; (6000b74c <usb_mcux_init+0x40>)
6000b736:	f004 fa91 	bl	6000fc5c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
6000b73a:	4905      	ldr	r1, [pc, #20]	; (6000b750 <usb_mcux_init+0x44>)
6000b73c:	4628      	mov	r0, r5
6000b73e:	f00e f8c8 	bl	600198d2 <z_impl_k_thread_name_set>
			usb_mcux_thread_main, NULL, NULL, NULL,
			K_PRIO_COOP(2), 0, K_NO_WAIT);
	k_thread_name_set(&dev_state.thread, "usb_mcux");

	return 0;
}
6000b742:	4620      	mov	r0, r4
6000b744:	b009      	add	sp, #36	; 0x24
6000b746:	bd30      	pop	{r4, r5, pc}
6000b748:	20203740 	.word	0x20203740
6000b74c:	6000b755 	.word	0x6000b755
6000b750:	6001d805 	.word	0x6001d805

6000b754 <usb_mcux_thread_main>:
{
6000b754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000b758:	b08c      	sub	sp, #48	; 0x30
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
6000b75a:	4d8c      	ldr	r5, [pc, #560]	; (6000b98c <usb_mcux_thread_main+0x238>)
			memcpy(&dev_state.eps[ep_abs_idx].transfer_message, &msg,
6000b75c:	4c8c      	ldr	r4, [pc, #560]	; (6000b990 <usb_mcux_thread_main+0x23c>)
{
6000b75e:	af00      	add	r7, sp, #0
6000b760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000b764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000b768:	f107 010c 	add.w	r1, r7, #12
6000b76c:	4628      	mov	r0, r5
6000b76e:	f004 fc13 	bl	6000ff98 <z_impl_k_msgq_get>
		switch (msg.code) {
6000b772:	7d3a      	ldrb	r2, [r7, #20]
6000b774:	f1a2 0310 	sub.w	r3, r2, #16
6000b778:	2b05      	cmp	r3, #5
6000b77a:	f200 808e 	bhi.w	6000b89a <usb_mcux_thread_main+0x146>
6000b77e:	e8df f003 	tbb	[pc, r3]
6000b782:	8203      	.short	0x8203
6000b784:	7d8c8c87 	.word	0x7d8c8c87
	dev_state.dev_struct.deviceAddress = 0;
6000b788:	2200      	movs	r2, #0
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000b78a:	68e3      	ldr	r3, [r4, #12]
6000b78c:	210e      	movs	r1, #14
6000b78e:	68a0      	ldr	r0, [r4, #8]
	dev_state.dev_struct.deviceAddress = 0;
6000b790:	f884 20d4 	strb.w	r2, [r4, #212]	; 0xd4
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000b794:	695b      	ldr	r3, [r3, #20]
6000b796:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
6000b798:	b150      	cbz	r0, 6000b7b0 <usb_mcux_thread_main+0x5c>
		LOG_ERR("Failed to set default status");
6000b79a:	4b7e      	ldr	r3, [pc, #504]	; (6000b994 <usb_mcux_thread_main+0x240>)
6000b79c:	f107 0228 	add.w	r2, r7, #40	; 0x28
6000b7a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000b7a4:	487c      	ldr	r0, [pc, #496]	; (6000b998 <usb_mcux_thread_main+0x244>)
6000b7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
6000b7a8:	2302      	movs	r3, #2
6000b7aa:	62bb      	str	r3, [r7, #40]	; 0x28
6000b7ac:	f00c fe74 	bl	60018498 <z_log_msg_static_create.constprop.0>
{
6000b7b0:	2300      	movs	r3, #0
		dev_state.eps[i].ep_occupied = false;
6000b7b2:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
6000b7b6:	441a      	add	r2, r3
6000b7b8:	7e91      	ldrb	r1, [r2, #26]
6000b7ba:	f36f 0141 	bfc	r1, #1, #1
6000b7be:	7691      	strb	r1, [r2, #26]
		dev_state.eps[i].ep_enabled = false;
6000b7c0:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
6000b7c4:	441a      	add	r2, r3
	for (int i = 0; i < NUM_OF_EP_MAX; i++) {
6000b7c6:	331c      	adds	r3, #28
		dev_state.eps[i].ep_enabled = false;
6000b7c8:	7e91      	ldrb	r1, [r2, #26]
	for (int i = 0; i < NUM_OF_EP_MAX; i++) {
6000b7ca:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
		dev_state.eps[i].ep_enabled = false;
6000b7ce:	f36f 0100 	bfc	r1, #0, #1
6000b7d2:	7691      	strb	r1, [r2, #26]
	for (int i = 0; i < NUM_OF_EP_MAX; i++) {
6000b7d4:	d1ed      	bne.n	6000b7b2 <usb_mcux_thread_main+0x5e>
	ep_init.zlt = 0U;
6000b7d6:	2200      	movs	r2, #0
	ep_init.maxPacketSize = USB_CONTROL_EP_MPS;
6000b7d8:	2340      	movs	r3, #64	; 0x40
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000b7da:	2102      	movs	r1, #2
6000b7dc:	68a0      	ldr	r0, [r4, #8]
	ep_init.zlt = 0U;
6000b7de:	723a      	strb	r2, [r7, #8]
	dev_state.eps[ep_abs_idx].ep_mps = USB_CONTROL_EP_MPS;
6000b7e0:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
	ep_init.maxPacketSize = USB_CONTROL_EP_MPS;
6000b7e4:	607b      	str	r3, [r7, #4]
	dev_state.eps[ep_abs_idx].ep_mps = USB_CONTROL_EP_MPS;
6000b7e6:	8313      	strh	r3, [r2, #24]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000b7e8:	1d3a      	adds	r2, r7, #4
6000b7ea:	68e3      	ldr	r3, [r4, #12]
6000b7ec:	695b      	ldr	r3, [r3, #20]
6000b7ee:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
6000b7f0:	b150      	cbz	r0, 6000b808 <usb_mcux_thread_main+0xb4>
		LOG_ERR("Failed to initialize control OUT endpoint");
6000b7f2:	4b6a      	ldr	r3, [pc, #424]	; (6000b99c <usb_mcux_thread_main+0x248>)
6000b7f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
6000b7f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000b7fc:	4866      	ldr	r0, [pc, #408]	; (6000b998 <usb_mcux_thread_main+0x244>)
6000b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
6000b800:	2302      	movs	r3, #2
6000b802:	62bb      	str	r3, [r7, #40]	; 0x28
6000b804:	f00c fe48 	bl	60018498 <z_log_msg_static_create.constprop.0>
	dev_state.eps[ep_abs_idx].ep_occupied = false;
6000b808:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000b80c:	2102      	movs	r1, #2
6000b80e:	68a0      	ldr	r0, [r4, #8]
	dev_state.eps[ep_abs_idx].ep_occupied = false;
6000b810:	7e9a      	ldrb	r2, [r3, #26]
6000b812:	f36f 0241 	bfc	r2, #1, #1
6000b816:	769a      	strb	r2, [r3, #26]
	dev_state.eps[ep_abs_idx].ep_enabled = true;
6000b818:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
6000b81c:	7e93      	ldrb	r3, [r2, #26]
6000b81e:	f043 0301 	orr.w	r3, r3, #1
6000b822:	7693      	strb	r3, [r2, #26]
	ep_init.endpointAddress = USB_CONTROL_EP_IN;
6000b824:	2380      	movs	r3, #128	; 0x80
	dev_state.eps[ep_abs_idx].ep_mps = USB_CONTROL_EP_MPS;
6000b826:	2240      	movs	r2, #64	; 0x40
	ep_init.endpointAddress = USB_CONTROL_EP_IN;
6000b828:	71bb      	strb	r3, [r7, #6]
	dev_state.eps[ep_abs_idx].ep_mps = USB_CONTROL_EP_MPS;
6000b82a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
6000b82e:	869a      	strh	r2, [r3, #52]	; 0x34
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000b830:	1d3a      	adds	r2, r7, #4
6000b832:	68e3      	ldr	r3, [r4, #12]
6000b834:	695b      	ldr	r3, [r3, #20]
6000b836:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
6000b838:	b150      	cbz	r0, 6000b850 <usb_mcux_thread_main+0xfc>
		LOG_ERR("Failed to initialize control IN endpoint");
6000b83a:	4b59      	ldr	r3, [pc, #356]	; (6000b9a0 <usb_mcux_thread_main+0x24c>)
6000b83c:	f107 0228 	add.w	r2, r7, #40	; 0x28
6000b840:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000b844:	4854      	ldr	r0, [pc, #336]	; (6000b998 <usb_mcux_thread_main+0x244>)
6000b846:	62fb      	str	r3, [r7, #44]	; 0x2c
6000b848:	2302      	movs	r3, #2
6000b84a:	62bb      	str	r3, [r7, #40]	; 0x28
6000b84c:	f00c fe24 	bl	60018498 <z_log_msg_static_create.constprop.0>
	dev_state.eps[ep_abs_idx].ep_occupied = false;
6000b850:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			dev_state.status_cb(USB_DC_RESET, NULL);
6000b854:	2100      	movs	r1, #0
6000b856:	2001      	movs	r0, #1
	dev_state.eps[ep_abs_idx].ep_occupied = false;
6000b858:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
6000b85c:	f36f 0241 	bfc	r2, #1, #1
6000b860:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dev_state.eps[ep_abs_idx].ep_enabled = true;
6000b864:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
6000b868:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
6000b86c:	f043 0301 	orr.w	r3, r3, #1
6000b870:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
			dev_state.status_cb(USB_DC_RESET, NULL);
6000b874:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
			dev_state.status_cb(USB_DC_ERROR, NULL);
6000b878:	4798      	blx	r3
			break;
6000b87a:	e771      	b.n	6000b760 <usb_mcux_thread_main+0xc>
			dev_state.status_cb(USB_DC_ERROR, NULL);
6000b87c:	2100      	movs	r1, #0
6000b87e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
6000b882:	4608      	mov	r0, r1
6000b884:	e7f8      	b.n	6000b878 <usb_mcux_thread_main+0x124>
			dev_state.status_cb(USB_DC_SUSPEND, NULL);
6000b886:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
6000b88a:	2100      	movs	r1, #0
6000b88c:	2005      	movs	r0, #5
6000b88e:	e7f3      	b.n	6000b878 <usb_mcux_thread_main+0x124>
			dev_state.status_cb(USB_DC_RESUME, NULL);
6000b890:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
6000b894:	2100      	movs	r1, #0
6000b896:	2006      	movs	r0, #6
6000b898:	e7ee      	b.n	6000b878 <usb_mcux_thread_main+0x124>
			ep_abs_idx = EP_ABS_IDX(msg.code);
6000b89a:	09d3      	lsrs	r3, r2, #7
6000b89c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
6000b8a0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
			if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000b8a4:	2b0f      	cmp	r3, #15
6000b8a6:	d90e      	bls.n	6000b8c6 <usb_mcux_thread_main+0x172>
				LOG_ERR("Wrong endpoint index/address");
6000b8a8:	4b3e      	ldr	r3, [pc, #248]	; (6000b9a4 <usb_mcux_thread_main+0x250>)
6000b8aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
6000b8ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000b8b2:	4839      	ldr	r0, [pc, #228]	; (6000b998 <usb_mcux_thread_main+0x244>)
6000b8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
6000b8b6:	2302      	movs	r3, #2
6000b8b8:	62bb      	str	r3, [r7, #40]	; 0x28
6000b8ba:	f00c fded 	bl	60018498 <z_log_msg_static_create.constprop.0>
}
6000b8be:	3730      	adds	r7, #48	; 0x30
6000b8c0:	46bd      	mov	sp, r7
6000b8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&dev_state.eps[ep_abs_idx].transfer_message, &msg,
6000b8c6:	f8d4 c0dc 	ldr.w	ip, [r4, #220]	; 0xdc
6000b8ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
6000b8ce:	f107 020c 	add.w	r2, r7, #12
6000b8d2:	eb0c 0683 	add.w	r6, ip, r3, lsl #2
6000b8d6:	ca03      	ldmia	r2!, {r0, r1}
6000b8d8:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
6000b8dc:	6071      	str	r1, [r6, #4]
6000b8de:	6810      	ldr	r0, [r2, #0]
6000b8e0:	60b0      	str	r0, [r6, #8]
			handle_transfer_msg(&dev_state.eps[ep_abs_idx].transfer_message);
6000b8e2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
6000b8e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	uint8_t ep = cb_msg->code;
6000b8ea:	7a1e      	ldrb	r6, [r3, #8]
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000b8ec:	09f2      	lsrs	r2, r6, #7
6000b8ee:	eb02 0246 	add.w	r2, r2, r6, lsl #1
6000b8f2:	f002 00ff 	and.w	r0, r2, #255	; 0xff
	dev_state.eps[ep_abs_idx].ep_occupied = false;
6000b8f6:	b2d2      	uxtb	r2, r2
6000b8f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
6000b8fc:	ea4f 0882 	mov.w	r8, r2, lsl #2
6000b900:	eb01 0282 	add.w	r2, r1, r2, lsl #2
6000b904:	7e91      	ldrb	r1, [r2, #26]
6000b906:	f36f 0141 	bfc	r1, #1, #1
6000b90a:	7691      	strb	r1, [r2, #26]
	if (cb_msg->length == UINT32_MAX) {
6000b90c:	685a      	ldr	r2, [r3, #4]
6000b90e:	3201      	adds	r2, #1
6000b910:	f43f af26 	beq.w	6000b760 <usb_mcux_thread_main+0xc>
	if (cb_msg->isSetup) {
6000b914:	7a5b      	ldrb	r3, [r3, #9]
6000b916:	bb23      	cbnz	r3, 6000b962 <usb_mcux_thread_main+0x20e>
		if (USB_EP_DIR_IS_IN(ep)) {
6000b918:	0633      	lsls	r3, r6, #24
6000b91a:	d524      	bpl.n	6000b966 <usb_mcux_thread_main+0x212>
			if ((dev_state.dev_struct.deviceAddress != 0) && (ep_abs_idx == 1)) {
6000b91c:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
6000b920:	b1b3      	cbz	r3, 6000b950 <usb_mcux_thread_main+0x1fc>
6000b922:	2801      	cmp	r0, #1
6000b924:	d114      	bne.n	6000b950 <usb_mcux_thread_main+0x1fc>
				status = dev_state.dev_struct.controllerInterface->deviceControl(
6000b926:	68e3      	ldr	r3, [r4, #12]
6000b928:	2108      	movs	r1, #8
6000b92a:	4a1f      	ldr	r2, [pc, #124]	; (6000b9a8 <usb_mcux_thread_main+0x254>)
6000b92c:	695b      	ldr	r3, [r3, #20]
6000b92e:	68a0      	ldr	r0, [r4, #8]
6000b930:	4798      	blx	r3
				if (kStatus_USB_Success != status) {
6000b932:	b158      	cbz	r0, 6000b94c <usb_mcux_thread_main+0x1f8>
					LOG_ERR("Failed to set device address");
6000b934:	4b1d      	ldr	r3, [pc, #116]	; (6000b9ac <usb_mcux_thread_main+0x258>)
6000b936:	f107 0228 	add.w	r2, r7, #40	; 0x28
6000b93a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000b93e:	4816      	ldr	r0, [pc, #88]	; (6000b998 <usb_mcux_thread_main+0x244>)
6000b940:	62fb      	str	r3, [r7, #44]	; 0x2c
6000b942:	2302      	movs	r3, #2
6000b944:	62bb      	str	r3, [r7, #40]	; 0x28
6000b946:	f00c fda7 	bl	60018498 <z_log_msg_static_create.constprop.0>
					return;
6000b94a:	e709      	b.n	6000b760 <usb_mcux_thread_main+0xc>
				dev_state.dev_struct.deviceAddress = 0;
6000b94c:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
			ep_status_code = USB_DC_EP_DATA_IN;
6000b950:	2102      	movs	r1, #2
	if (dev_state.eps[ep_abs_idx].callback) {
6000b952:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
6000b956:	4443      	add	r3, r8
6000b958:	695b      	ldr	r3, [r3, #20]
6000b95a:	b133      	cbz	r3, 6000b96a <usb_mcux_thread_main+0x216>
		dev_state.eps[ep_abs_idx].callback(ep, ep_status_code);
6000b95c:	4630      	mov	r0, r6
6000b95e:	4798      	blx	r3
6000b960:	e6fe      	b.n	6000b760 <usb_mcux_thread_main+0xc>
		ep_status_code = USB_DC_EP_SETUP;
6000b962:	2100      	movs	r1, #0
6000b964:	e7f5      	b.n	6000b952 <usb_mcux_thread_main+0x1fe>
			ep_status_code = USB_DC_EP_DATA_OUT;
6000b966:	2101      	movs	r1, #1
6000b968:	e7f3      	b.n	6000b952 <usb_mcux_thread_main+0x1fe>
		LOG_ERR("No cb pointer for endpoint 0x%02x", ep);
6000b96a:	46e8      	mov	r8, sp
6000b96c:	b088      	sub	sp, #32
6000b96e:	466a      	mov	r2, sp
6000b970:	4b0f      	ldr	r3, [pc, #60]	; (6000b9b0 <usb_mcux_thread_main+0x25c>)
6000b972:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000b976:	4808      	ldr	r0, [pc, #32]	; (6000b998 <usb_mcux_thread_main+0x244>)
6000b978:	e9c2 3605 	strd	r3, r6, [r2, #20]
6000b97c:	2303      	movs	r3, #3
6000b97e:	f842 3f10 	str.w	r3, [r2, #16]!
6000b982:	f00c fd89 	bl	60018498 <z_log_msg_static_create.constprop.0>
6000b986:	46c5      	mov	sp, r8
	while (1) {
6000b988:	e6ea      	b.n	6000b760 <usb_mcux_thread_main+0xc>
6000b98a:	bf00      	nop
6000b98c:	20203508 	.word	0x20203508
6000b990:	20203640 	.word	0x20203640
6000b994:	6001d80e 	.word	0x6001d80e
6000b998:	6001a404 	.word	0x6001a404
6000b99c:	6001d82b 	.word	0x6001d82b
6000b9a0:	6001d855 	.word	0x6001d855
6000b9a4:	6001d87e 	.word	0x6001d87e
6000b9a8:	20203714 	.word	0x20203714
6000b9ac:	6001d89b 	.word	0x6001d89b
6000b9b0:	6001d8b8 	.word	0x6001d8b8

6000b9b4 <usb_dc_attach>:
{
6000b9b4:	b530      	push	{r4, r5, lr}
	dev_state.eps = &s_ep_ctrl[0];
6000b9b6:	4b1a      	ldr	r3, [pc, #104]	; (6000ba20 <usb_dc_attach+0x6c>)
{
6000b9b8:	b087      	sub	sp, #28
	dev_state.eps = &s_ep_ctrl[0];
6000b9ba:	4c1a      	ldr	r4, [pc, #104]	; (6000ba24 <usb_dc_attach+0x70>)
6000b9bc:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	if (dev_state.attached) {
6000b9c0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
6000b9c4:	b163      	cbz	r3, 6000b9e0 <usb_dc_attach+0x2c>
		LOG_WRN("Already attached");
6000b9c6:	4b18      	ldr	r3, [pc, #96]	; (6000ba28 <usb_dc_attach+0x74>)
6000b9c8:	aa04      	add	r2, sp, #16
6000b9ca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
6000b9ce:	4817      	ldr	r0, [pc, #92]	; (6000ba2c <usb_dc_attach+0x78>)
6000b9d0:	9305      	str	r3, [sp, #20]
6000b9d2:	2302      	movs	r3, #2
6000b9d4:	9304      	str	r3, [sp, #16]
6000b9d6:	f00c fd5f 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return 0;
6000b9da:	2000      	movs	r0, #0
}
6000b9dc:	b007      	add	sp, #28
6000b9de:	bd30      	pop	{r4, r5, pc}
	dev_state.dev_struct.controllerInterface = &mcux_usb_iface;
6000b9e0:	4b13      	ldr	r3, [pc, #76]	; (6000ba30 <usb_dc_attach+0x7c>)
	status = dev_state.dev_struct.controllerInterface->deviceInit(CONTROLLER_ID,
6000b9e2:	f104 0208 	add.w	r2, r4, #8
6000b9e6:	4621      	mov	r1, r4
6000b9e8:	2002      	movs	r0, #2
	dev_state.dev_struct.controllerInterface = &mcux_usb_iface;
6000b9ea:	60e3      	str	r3, [r4, #12]
	status = dev_state.dev_struct.controllerInterface->deviceInit(CONTROLLER_ID,
6000b9ec:	f003 fcfa 	bl	6000f3e4 <USB_DeviceEhciInit>
	if (kStatus_USB_Success != status) {
6000b9f0:	4605      	mov	r5, r0
6000b9f2:	b988      	cbnz	r0, 6000ba18 <usb_dc_attach+0x64>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
6000b9f4:	4602      	mov	r2, r0
6000b9f6:	2101      	movs	r1, #1
6000b9f8:	2071      	movs	r0, #113	; 0x71
6000b9fa:	f7fe ff7b 	bl	6000a8f4 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
6000b9fe:	2071      	movs	r0, #113	; 0x71
6000ba00:	f7fe ff6a 	bl	6000a8d8 <arch_irq_enable>
	dev_state.attached = true;
6000ba04:	2301      	movs	r3, #1
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000ba06:	462a      	mov	r2, r5
6000ba08:	4629      	mov	r1, r5
	dev_state.attached = true;
6000ba0a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000ba0e:	68e3      	ldr	r3, [r4, #12]
6000ba10:	68a0      	ldr	r0, [r4, #8]
6000ba12:	695b      	ldr	r3, [r3, #20]
6000ba14:	4798      	blx	r3
	return 0;
6000ba16:	e7e0      	b.n	6000b9da <usb_dc_attach+0x26>
		return -EIO;
6000ba18:	f06f 0004 	mvn.w	r0, #4
6000ba1c:	e7de      	b.n	6000b9dc <usb_dc_attach+0x28>
6000ba1e:	bf00      	nop
6000ba20:	20204a00 	.word	0x20204a00
6000ba24:	20203640 	.word	0x20203640
6000ba28:	6001d8da 	.word	0x6001d8da
6000ba2c:	6001a404 	.word	0x6001a404
6000ba30:	6001a694 	.word	0x6001a694

6000ba34 <usb_dc_set_address>:
	dev_state.dev_struct.deviceAddress = addr;
6000ba34:	4b0d      	ldr	r3, [pc, #52]	; (6000ba6c <usb_dc_set_address+0x38>)
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000ba36:	2114      	movs	r1, #20
{
6000ba38:	b510      	push	{r4, lr}
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000ba3a:	68da      	ldr	r2, [r3, #12]
{
6000ba3c:	b086      	sub	sp, #24
	dev_state.dev_struct.deviceAddress = addr;
6000ba3e:	f883 00d4 	strb.w	r0, [r3, #212]	; 0xd4
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000ba42:	6898      	ldr	r0, [r3, #8]
6000ba44:	6954      	ldr	r4, [r2, #20]
6000ba46:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
6000ba4a:	47a0      	blx	r4
	if (kStatus_USB_Success != status) {
6000ba4c:	b158      	cbz	r0, 6000ba66 <usb_dc_set_address+0x32>
		LOG_ERR("Failed to set device address");
6000ba4e:	4b08      	ldr	r3, [pc, #32]	; (6000ba70 <usb_dc_set_address+0x3c>)
6000ba50:	aa04      	add	r2, sp, #16
6000ba52:	4808      	ldr	r0, [pc, #32]	; (6000ba74 <usb_dc_set_address+0x40>)
6000ba54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ba58:	9305      	str	r3, [sp, #20]
6000ba5a:	2302      	movs	r3, #2
6000ba5c:	9304      	str	r3, [sp, #16]
6000ba5e:	f00c fd1b 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000ba62:	f06f 0015 	mvn.w	r0, #21
}
6000ba66:	b006      	add	sp, #24
6000ba68:	bd10      	pop	{r4, pc}
6000ba6a:	bf00      	nop
6000ba6c:	20203640 	.word	0x20203640
6000ba70:	6001d89b 	.word	0x6001d89b
6000ba74:	6001a404 	.word	0x6001a404

6000ba78 <usb_dc_ep_check_cap>:
{
6000ba78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
6000ba7a:	7803      	ldrb	r3, [r0, #0]
	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
6000ba7c:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
6000ba7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
6000ba82:	09db      	lsrs	r3, r3, #7
6000ba84:	eb03 0342 	add.w	r3, r3, r2, lsl #1
6000ba88:	b2db      	uxtb	r3, r3
	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
6000ba8a:	b979      	cbnz	r1, 6000baac <usb_dc_ep_check_cap+0x34>
6000ba8c:	b172      	cbz	r2, 6000baac <usb_dc_ep_check_cap+0x34>
		LOG_ERR("invalid endpoint configuration");
6000ba8e:	4b0a      	ldr	r3, [pc, #40]	; (6000bab8 <usb_dc_ep_check_cap+0x40>)
		LOG_ERR("endpoint index/address out of range");
6000ba90:	9305      	str	r3, [sp, #20]
6000ba92:	2302      	movs	r3, #2
6000ba94:	4809      	ldr	r0, [pc, #36]	; (6000babc <usb_dc_ep_check_cap+0x44>)
6000ba96:	aa04      	add	r2, sp, #16
6000ba98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ba9c:	9304      	str	r3, [sp, #16]
6000ba9e:	f00c fcfb 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -1;
6000baa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
6000baa6:	b007      	add	sp, #28
6000baa8:	f85d fb04 	ldr.w	pc, [sp], #4
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000baac:	2b0f      	cmp	r3, #15
6000baae:	d901      	bls.n	6000bab4 <usb_dc_ep_check_cap+0x3c>
		LOG_ERR("endpoint index/address out of range");
6000bab0:	4b03      	ldr	r3, [pc, #12]	; (6000bac0 <usb_dc_ep_check_cap+0x48>)
6000bab2:	e7ed      	b.n	6000ba90 <usb_dc_ep_check_cap+0x18>
	return 0;
6000bab4:	2000      	movs	r0, #0
6000bab6:	e7f6      	b.n	6000baa6 <usb_dc_ep_check_cap+0x2e>
6000bab8:	6001d8eb 	.word	0x6001d8eb
6000babc:	6001a404 	.word	0x6001a404
6000bac0:	6001d90a 	.word	0x6001d90a

6000bac4 <usb_dc_ep_configure>:
{
6000bac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
6000bac8:	b08b      	sub	sp, #44	; 0x2c
	struct usb_ep_ctrl_data *eps = &dev_state.eps[ep_abs_idx];
6000baca:	4d54      	ldr	r5, [pc, #336]	; (6000bc1c <usb_dc_ep_configure+0x158>)
{
6000bacc:	4604      	mov	r4, r0
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
6000bace:	7802      	ldrb	r2, [r0, #0]
	struct usb_ep_ctrl_data *eps = &dev_state.eps[ep_abs_idx];
6000bad0:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
{
6000bad4:	af00      	add	r7, sp, #0
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
6000bad6:	09d3      	lsrs	r3, r2, #7
	ep_init.endpointAddress = cfg->ep_addr;
6000bad8:	72ba      	strb	r2, [r7, #10]
	uint8_t ep_abs_idx =  EP_ABS_IDX(cfg->ep_addr);
6000bada:	eb03 0342 	add.w	r3, r3, r2, lsl #1
6000bade:	f003 01ff 	and.w	r1, r3, #255	; 0xff
	struct usb_ep_ctrl_data *eps = &dev_state.eps[ep_abs_idx];
6000bae2:	b2db      	uxtb	r3, r3
6000bae4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bae8:	290f      	cmp	r1, #15
	struct usb_ep_ctrl_data *eps = &dev_state.eps[ep_abs_idx];
6000baea:	ea4f 0883 	mov.w	r8, r3, lsl #2
6000baee:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	ep_init.zlt = 0U;
6000baf2:	f04f 0300 	mov.w	r3, #0
6000baf6:	733b      	strb	r3, [r7, #12]
	ep_init.maxPacketSize = cfg->ep_mps;
6000baf8:	8843      	ldrh	r3, [r0, #2]
6000bafa:	813b      	strh	r3, [r7, #8]
	ep_init.transferType = cfg->ep_type;
6000bafc:	7903      	ldrb	r3, [r0, #4]
6000bafe:	72fb      	strb	r3, [r7, #11]
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bb00:	d910      	bls.n	6000bb24 <usb_dc_ep_configure+0x60>
		LOG_ERR("Wrong endpoint index/address");
6000bb02:	4b47      	ldr	r3, [pc, #284]	; (6000bc20 <usb_dc_ep_configure+0x15c>)
6000bb04:	f107 0220 	add.w	r2, r7, #32
6000bb08:	4846      	ldr	r0, [pc, #280]	; (6000bc24 <usb_dc_ep_configure+0x160>)
6000bb0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bb0e:	627b      	str	r3, [r7, #36]	; 0x24
6000bb10:	2302      	movs	r3, #2
6000bb12:	623b      	str	r3, [r7, #32]
6000bb14:	f00c fcc0 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000bb18:	f06f 0015 	mvn.w	r0, #21
}
6000bb1c:	372c      	adds	r7, #44	; 0x2c
6000bb1e:	46bd      	mov	sp, r7
6000bb20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dev_state.eps[ep_abs_idx].ep_enabled) {
6000bb24:	7eb3      	ldrb	r3, [r6, #26]
6000bb26:	07d9      	lsls	r1, r3, #31
6000bb28:	d50c      	bpl.n	6000bb44 <usb_dc_ep_configure+0x80>
		LOG_WRN("Endpoint already configured");
6000bb2a:	4b3f      	ldr	r3, [pc, #252]	; (6000bc28 <usb_dc_ep_configure+0x164>)
6000bb2c:	f107 0220 	add.w	r2, r7, #32
6000bb30:	f44f 5184 	mov.w	r1, #4224	; 0x1080
6000bb34:	483b      	ldr	r0, [pc, #236]	; (6000bc24 <usb_dc_ep_configure+0x160>)
6000bb36:	627b      	str	r3, [r7, #36]	; 0x24
6000bb38:	2302      	movs	r3, #2
6000bb3a:	623b      	str	r3, [r7, #32]
6000bb3c:	f00c fcac 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return 0;
6000bb40:	2000      	movs	r0, #0
6000bb42:	e7eb      	b.n	6000bb1c <usb_dc_ep_configure+0x58>
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000bb44:	68eb      	ldr	r3, [r5, #12]
6000bb46:	2103      	movs	r1, #3
	ep = cfg->ep_addr;
6000bb48:	71fa      	strb	r2, [r7, #7]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000bb4a:	1dfa      	adds	r2, r7, #7
6000bb4c:	695b      	ldr	r3, [r3, #20]
6000bb4e:	68a8      	ldr	r0, [r5, #8]
6000bb50:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
6000bb52:	b170      	cbz	r0, 6000bb72 <usb_dc_ep_configure+0xae>
		LOG_WRN("Failed to un-initialize endpoint (status=%d)", (int)status);
6000bb54:	46e9      	mov	r9, sp
6000bb56:	b088      	sub	sp, #32
6000bb58:	466a      	mov	r2, sp
6000bb5a:	4b34      	ldr	r3, [pc, #208]	; (6000bc2c <usb_dc_ep_configure+0x168>)
6000bb5c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
6000bb60:	e9c2 3005 	strd	r3, r0, [r2, #20]
6000bb64:	2303      	movs	r3, #3
6000bb66:	482f      	ldr	r0, [pc, #188]	; (6000bc24 <usb_dc_ep_configure+0x160>)
6000bb68:	f842 3f10 	str.w	r3, [r2, #16]!
6000bb6c:	f00c fc94 	bl	60018498 <z_log_msg_static_create.constprop.0>
6000bb70:	46cd      	mov	sp, r9
	if (USB_EP_DIR_IS_OUT(cfg->ep_addr)) {
6000bb72:	f994 3000 	ldrsb.w	r3, [r4]
6000bb76:	2b00      	cmp	r3, #0
6000bb78:	db20      	blt.n	6000bbbc <usb_dc_ep_configure+0xf8>
		if (block->data) {
6000bb7a:	68f1      	ldr	r1, [r6, #12]
6000bb7c:	b121      	cbz	r1, 6000bb88 <usb_dc_ep_configure+0xc4>
			k_heap_free(&ep_buf_pool, block->data);
6000bb7e:	482c      	ldr	r0, [pc, #176]	; (6000bc30 <usb_dc_ep_configure+0x16c>)
6000bb80:	f003 ffc2 	bl	6000fb08 <k_heap_free>
			block->data = NULL;
6000bb84:	2300      	movs	r3, #0
6000bb86:	60f3      	str	r3, [r6, #12]
		block->data = k_heap_alloc(&ep_buf_pool, cfg->ep_mps, K_NO_WAIT);
6000bb88:	2200      	movs	r2, #0
6000bb8a:	2300      	movs	r3, #0
6000bb8c:	8861      	ldrh	r1, [r4, #2]
6000bb8e:	4828      	ldr	r0, [pc, #160]	; (6000bc30 <usb_dc_ep_configure+0x16c>)
6000bb90:	f00d fe8f 	bl	600198b2 <k_heap_alloc>
6000bb94:	60f0      	str	r0, [r6, #12]
		if (block->data == NULL) {
6000bb96:	b968      	cbnz	r0, 6000bbb4 <usb_dc_ep_configure+0xf0>
			LOG_ERR("Failed to allocate memory");
6000bb98:	4b26      	ldr	r3, [pc, #152]	; (6000bc34 <usb_dc_ep_configure+0x170>)
6000bb9a:	f107 0220 	add.w	r2, r7, #32
6000bb9e:	4821      	ldr	r0, [pc, #132]	; (6000bc24 <usb_dc_ep_configure+0x160>)
6000bba0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bba4:	627b      	str	r3, [r7, #36]	; 0x24
6000bba6:	2302      	movs	r3, #2
6000bba8:	623b      	str	r3, [r7, #32]
6000bbaa:	f00c fc75 	bl	60018498 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
6000bbae:	f06f 000b 	mvn.w	r0, #11
6000bbb2:	e7b3      	b.n	6000bb1c <usb_dc_ep_configure+0x58>
__ssp_bos_icheck3(memset, void *, int)
6000bbb4:	8862      	ldrh	r2, [r4, #2]
6000bbb6:	2100      	movs	r1, #0
6000bbb8:	f007 fbc2 	bl	60013340 <memset>
	dev_state.eps[ep_abs_idx].ep_mps = cfg->ep_mps;
6000bbbc:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000bbc0:	2102      	movs	r1, #2
	dev_state.eps[ep_abs_idx].ep_mps = cfg->ep_mps;
6000bbc2:	8862      	ldrh	r2, [r4, #2]
6000bbc4:	4443      	add	r3, r8
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000bbc6:	68a8      	ldr	r0, [r5, #8]
	dev_state.eps[ep_abs_idx].ep_mps = cfg->ep_mps;
6000bbc8:	831a      	strh	r2, [r3, #24]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000bbca:	f107 0208 	add.w	r2, r7, #8
6000bbce:	68eb      	ldr	r3, [r5, #12]
6000bbd0:	695b      	ldr	r3, [r3, #20]
6000bbd2:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
6000bbd4:	b168      	cbz	r0, 6000bbf2 <usb_dc_ep_configure+0x12e>
		LOG_ERR("Failed to initialize endpoint");
6000bbd6:	4b18      	ldr	r3, [pc, #96]	; (6000bc38 <usb_dc_ep_configure+0x174>)
6000bbd8:	f107 0220 	add.w	r2, r7, #32
6000bbdc:	4811      	ldr	r0, [pc, #68]	; (6000bc24 <usb_dc_ep_configure+0x160>)
6000bbde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bbe2:	627b      	str	r3, [r7, #36]	; 0x24
6000bbe4:	2302      	movs	r3, #2
6000bbe6:	623b      	str	r3, [r7, #32]
6000bbe8:	f00c fc56 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EIO;
6000bbec:	f06f 0004 	mvn.w	r0, #4
6000bbf0:	e794      	b.n	6000bb1c <usb_dc_ep_configure+0x58>
	if ((USB_EP_GET_IDX(cfg->ep_addr) == USB_CONTROL_ENDPOINT) &&
6000bbf2:	7823      	ldrb	r3, [r4, #0]
6000bbf4:	065a      	lsls	r2, r3, #25
6000bbf6:	d108      	bne.n	6000bc0a <usb_dc_ep_configure+0x146>
6000bbf8:	061b      	lsls	r3, r3, #24
6000bbfa:	d406      	bmi.n	6000bc0a <usb_dc_ep_configure+0x146>
		dev_state.eps[ep_abs_idx].ep_occupied = true;
6000bbfc:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
6000bc00:	4443      	add	r3, r8
6000bc02:	7e9a      	ldrb	r2, [r3, #26]
6000bc04:	f042 0202 	orr.w	r2, r2, #2
6000bc08:	769a      	strb	r2, [r3, #26]
	dev_state.eps[ep_abs_idx].ep_enabled = true;
6000bc0a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
6000bc0e:	4443      	add	r3, r8
6000bc10:	7e9a      	ldrb	r2, [r3, #26]
6000bc12:	f042 0201 	orr.w	r2, r2, #1
6000bc16:	769a      	strb	r2, [r3, #26]
	return 0;
6000bc18:	e792      	b.n	6000bb40 <usb_dc_ep_configure+0x7c>
6000bc1a:	bf00      	nop
6000bc1c:	20203640 	.word	0x20203640
6000bc20:	6001d87e 	.word	0x6001d87e
6000bc24:	6001a404 	.word	0x6001a404
6000bc28:	6001d92e 	.word	0x6001d92e
6000bc2c:	6001d94a 	.word	0x6001d94a
6000bc30:	20203450 	.word	0x20203450
6000bc34:	6001d977 	.word	0x6001d977
6000bc38:	6001d991 	.word	0x6001d991

6000bc3c <usb_dc_ep_set_stall>:
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000bc3c:	09c3      	lsrs	r3, r0, #7
6000bc3e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bc42:	f003 03ff 	and.w	r3, r3, #255	; 0xff
{
6000bc46:	b510      	push	{r4, lr}
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bc48:	2b0f      	cmp	r3, #15
{
6000bc4a:	b088      	sub	sp, #32
	uint8_t endpoint = ep;
6000bc4c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bc50:	d90d      	bls.n	6000bc6e <usb_dc_ep_set_stall+0x32>
		LOG_ERR("Wrong endpoint index/address");
6000bc52:	4b12      	ldr	r3, [pc, #72]	; (6000bc9c <usb_dc_ep_set_stall+0x60>)
6000bc54:	aa06      	add	r2, sp, #24
6000bc56:	4812      	ldr	r0, [pc, #72]	; (6000bca0 <usb_dc_ep_set_stall+0x64>)
6000bc58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bc5c:	9307      	str	r3, [sp, #28]
6000bc5e:	2302      	movs	r3, #2
6000bc60:	9306      	str	r3, [sp, #24]
6000bc62:	f00c fc19 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000bc66:	f06f 0015 	mvn.w	r0, #21
}
6000bc6a:	b008      	add	sp, #32
6000bc6c:	bd10      	pop	{r4, pc}
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000bc6e:	4b0d      	ldr	r3, [pc, #52]	; (6000bca4 <usb_dc_ep_set_stall+0x68>)
6000bc70:	2104      	movs	r1, #4
6000bc72:	68da      	ldr	r2, [r3, #12]
6000bc74:	6898      	ldr	r0, [r3, #8]
6000bc76:	6954      	ldr	r4, [r2, #20]
6000bc78:	f10d 0207 	add.w	r2, sp, #7
6000bc7c:	47a0      	blx	r4
	if (kStatus_USB_Success != status) {
6000bc7e:	2800      	cmp	r0, #0
6000bc80:	d0f3      	beq.n	6000bc6a <usb_dc_ep_set_stall+0x2e>
		LOG_ERR("Failed to stall endpoint");
6000bc82:	4b09      	ldr	r3, [pc, #36]	; (6000bca8 <usb_dc_ep_set_stall+0x6c>)
6000bc84:	aa06      	add	r2, sp, #24
6000bc86:	4806      	ldr	r0, [pc, #24]	; (6000bca0 <usb_dc_ep_set_stall+0x64>)
6000bc88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bc8c:	9307      	str	r3, [sp, #28]
6000bc8e:	2302      	movs	r3, #2
6000bc90:	9306      	str	r3, [sp, #24]
6000bc92:	f00c fc01 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EIO;
6000bc96:	f06f 0004 	mvn.w	r0, #4
6000bc9a:	e7e6      	b.n	6000bc6a <usb_dc_ep_set_stall+0x2e>
6000bc9c:	6001d87e 	.word	0x6001d87e
6000bca0:	6001a404 	.word	0x6001a404
6000bca4:	20203640 	.word	0x20203640
6000bca8:	6001d9af 	.word	0x6001d9af

6000bcac <usb_dc_ep_clear_stall>:
{
6000bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000bcb0:	09c4      	lsrs	r4, r0, #7
{
6000bcb2:	b088      	sub	sp, #32
6000bcb4:	4605      	mov	r5, r0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000bcb6:	eb04 0440 	add.w	r4, r4, r0, lsl #1
{
6000bcba:	af00      	add	r7, sp, #0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000bcbc:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	uint8_t endpoint = ep;
6000bcc0:	71f8      	strb	r0, [r7, #7]
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bcc2:	2c0f      	cmp	r4, #15
6000bcc4:	d910      	bls.n	6000bce8 <usb_dc_ep_clear_stall+0x3c>
		LOG_ERR("Wrong endpoint index/address");
6000bcc6:	4b2a      	ldr	r3, [pc, #168]	; (6000bd70 <usb_dc_ep_clear_stall+0xc4>)
6000bcc8:	f107 0218 	add.w	r2, r7, #24
6000bccc:	4829      	ldr	r0, [pc, #164]	; (6000bd74 <usb_dc_ep_clear_stall+0xc8>)
6000bcce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bcd2:	61fb      	str	r3, [r7, #28]
6000bcd4:	2302      	movs	r3, #2
6000bcd6:	61bb      	str	r3, [r7, #24]
6000bcd8:	f00c fbde 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000bcdc:	f06f 0015 	mvn.w	r0, #21
}
6000bce0:	3720      	adds	r7, #32
6000bce2:	46bd      	mov	sp, r7
6000bce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000bce8:	4e23      	ldr	r6, [pc, #140]	; (6000bd78 <usb_dc_ep_clear_stall+0xcc>)
6000bcea:	1dfa      	adds	r2, r7, #7
6000bcec:	2105      	movs	r1, #5
6000bcee:	68f3      	ldr	r3, [r6, #12]
6000bcf0:	68b0      	ldr	r0, [r6, #8]
6000bcf2:	695b      	ldr	r3, [r3, #20]
6000bcf4:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
6000bcf6:	b168      	cbz	r0, 6000bd14 <usb_dc_ep_clear_stall+0x68>
		LOG_ERR("Failed to clear stall");
6000bcf8:	4b20      	ldr	r3, [pc, #128]	; (6000bd7c <usb_dc_ep_clear_stall+0xd0>)
6000bcfa:	f107 0218 	add.w	r2, r7, #24
6000bcfe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bd02:	481c      	ldr	r0, [pc, #112]	; (6000bd74 <usb_dc_ep_clear_stall+0xc8>)
6000bd04:	61fb      	str	r3, [r7, #28]
6000bd06:	2302      	movs	r3, #2
6000bd08:	61bb      	str	r3, [r7, #24]
6000bd0a:	f00c fbc5 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EIO;
6000bd0e:	f06f 0004 	mvn.w	r0, #4
6000bd12:	e7e5      	b.n	6000bce0 <usb_dc_ep_clear_stall+0x34>
	if ((USB_EP_GET_IDX(ep) != USB_CONTROL_ENDPOINT) &&
6000bd14:	066a      	lsls	r2, r5, #25
6000bd16:	d101      	bne.n	6000bd1c <usb_dc_ep_clear_stall+0x70>
	return 0;
6000bd18:	2000      	movs	r0, #0
6000bd1a:	e7e1      	b.n	6000bce0 <usb_dc_ep_clear_stall+0x34>
	if ((USB_EP_GET_IDX(ep) != USB_CONTROL_ENDPOINT) &&
6000bd1c:	062b      	lsls	r3, r5, #24
6000bd1e:	d4fb      	bmi.n	6000bd18 <usb_dc_ep_clear_stall+0x6c>
				(uint8_t *)dev_state.eps[ep_abs_idx].block.data,
6000bd20:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
6000bd24:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
		status = dev_state.dev_struct.controllerInterface->deviceRecv(
6000bd28:	68f3      	ldr	r3, [r6, #12]
6000bd2a:	4629      	mov	r1, r5
				(uint8_t *)dev_state.eps[ep_abs_idx].block.data,
6000bd2c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
		status = dev_state.dev_struct.controllerInterface->deviceRecv(
6000bd30:	68b0      	ldr	r0, [r6, #8]
				(uint8_t *)dev_state.eps[ep_abs_idx].block.data,
6000bd32:	ea4f 0884 	mov.w	r8, r4, lsl #2
		status = dev_state.dev_struct.controllerInterface->deviceRecv(
6000bd36:	68dc      	ldr	r4, [r3, #12]
6000bd38:	8b13      	ldrh	r3, [r2, #24]
6000bd3a:	68d2      	ldr	r2, [r2, #12]
6000bd3c:	47a0      	blx	r4
		if (kStatus_USB_Success != status) {
6000bd3e:	b178      	cbz	r0, 6000bd60 <usb_dc_ep_clear_stall+0xb4>
			LOG_ERR("Failed to enable reception on 0x%02x", ep);
6000bd40:	466c      	mov	r4, sp
6000bd42:	b088      	sub	sp, #32
6000bd44:	466a      	mov	r2, sp
6000bd46:	4b0e      	ldr	r3, [pc, #56]	; (6000bd80 <usb_dc_ep_clear_stall+0xd4>)
6000bd48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000bd4c:	4809      	ldr	r0, [pc, #36]	; (6000bd74 <usb_dc_ep_clear_stall+0xc8>)
6000bd4e:	e9c2 3505 	strd	r3, r5, [r2, #20]
6000bd52:	2303      	movs	r3, #3
6000bd54:	f842 3f10 	str.w	r3, [r2, #16]!
6000bd58:	f00c fb9e 	bl	60018498 <z_log_msg_static_create.constprop.0>
6000bd5c:	46a5      	mov	sp, r4
			return -EIO;
6000bd5e:	e7d6      	b.n	6000bd0e <usb_dc_ep_clear_stall+0x62>
		dev_state.eps[ep_abs_idx].ep_occupied = true;
6000bd60:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
6000bd64:	4443      	add	r3, r8
6000bd66:	7e9a      	ldrb	r2, [r3, #26]
6000bd68:	f042 0202 	orr.w	r2, r2, #2
6000bd6c:	769a      	strb	r2, [r3, #26]
6000bd6e:	e7d3      	b.n	6000bd18 <usb_dc_ep_clear_stall+0x6c>
6000bd70:	6001d87e 	.word	0x6001d87e
6000bd74:	6001a404 	.word	0x6001a404
6000bd78:	20203640 	.word	0x20203640
6000bd7c:	6001d9c8 	.word	0x6001d9c8
6000bd80:	6001d9de 	.word	0x6001d9de

6000bd84 <usb_dc_ep_is_stalled>:
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000bd84:	09c3      	lsrs	r3, r0, #7
6000bd86:	eb03 0340 	add.w	r3, r3, r0, lsl #1
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bd8a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
6000bd8e:	2b0f      	cmp	r3, #15
{
6000bd90:	b530      	push	{r4, r5, lr}
6000bd92:	460c      	mov	r4, r1
6000bd94:	b089      	sub	sp, #36	; 0x24
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bd96:	d90d      	bls.n	6000bdb4 <usb_dc_ep_is_stalled+0x30>
		LOG_ERR("Wrong endpoint index/address");
6000bd98:	4b17      	ldr	r3, [pc, #92]	; (6000bdf8 <usb_dc_ep_is_stalled+0x74>)
6000bd9a:	aa06      	add	r2, sp, #24
6000bd9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bda0:	4816      	ldr	r0, [pc, #88]	; (6000bdfc <usb_dc_ep_is_stalled+0x78>)
6000bda2:	9307      	str	r3, [sp, #28]
6000bda4:	2302      	movs	r3, #2
6000bda6:	9306      	str	r3, [sp, #24]
6000bda8:	f00c fb76 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000bdac:	f06f 0015 	mvn.w	r0, #21
}
6000bdb0:	b009      	add	sp, #36	; 0x24
6000bdb2:	bd30      	pop	{r4, r5, pc}
	if (!stalled) {
6000bdb4:	2900      	cmp	r1, #0
6000bdb6:	d0f9      	beq.n	6000bdac <usb_dc_ep_is_stalled+0x28>
	*stalled = 0;
6000bdb8:	2300      	movs	r3, #0
	ep_status.endpointAddress = ep;
6000bdba:	f88d 0004 	strb.w	r0, [sp, #4]
	*stalled = 0;
6000bdbe:	700b      	strb	r3, [r1, #0]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000bdc0:	2107      	movs	r1, #7
	ep_status.endpointStatus = kUSB_DeviceEndpointStateIdle;
6000bdc2:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = dev_state.dev_struct.controllerInterface->deviceControl(
6000bdc6:	4b0e      	ldr	r3, [pc, #56]	; (6000be00 <usb_dc_ep_is_stalled+0x7c>)
6000bdc8:	68da      	ldr	r2, [r3, #12]
6000bdca:	6898      	ldr	r0, [r3, #8]
6000bdcc:	6955      	ldr	r5, [r2, #20]
6000bdce:	aa01      	add	r2, sp, #4
6000bdd0:	47a8      	blx	r5
	if (kStatus_USB_Success != status) {
6000bdd2:	b160      	cbz	r0, 6000bdee <usb_dc_ep_is_stalled+0x6a>
		LOG_ERR("Failed to get endpoint status");
6000bdd4:	4b0b      	ldr	r3, [pc, #44]	; (6000be04 <usb_dc_ep_is_stalled+0x80>)
6000bdd6:	aa06      	add	r2, sp, #24
6000bdd8:	4808      	ldr	r0, [pc, #32]	; (6000bdfc <usb_dc_ep_is_stalled+0x78>)
6000bdda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bdde:	9307      	str	r3, [sp, #28]
6000bde0:	2302      	movs	r3, #2
6000bde2:	9306      	str	r3, [sp, #24]
6000bde4:	f00c fb58 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EIO;
6000bde8:	f06f 0004 	mvn.w	r0, #4
6000bdec:	e7e0      	b.n	6000bdb0 <usb_dc_ep_is_stalled+0x2c>
	*stalled = (uint8_t)ep_status.endpointStatus;
6000bdee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
6000bdf2:	7023      	strb	r3, [r4, #0]
	return 0;
6000bdf4:	e7dc      	b.n	6000bdb0 <usb_dc_ep_is_stalled+0x2c>
6000bdf6:	bf00      	nop
6000bdf8:	6001d87e 	.word	0x6001d87e
6000bdfc:	6001a404 	.word	0x6001a404
6000be00:	20203640 	.word	0x20203640
6000be04:	6001da03 	.word	0x6001da03

6000be08 <usb_dc_ep_enable>:
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000be08:	09c3      	lsrs	r3, r0, #7
6000be0a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
{
6000be0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!ep_abs_idx) {
6000be12:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
{
6000be16:	b086      	sub	sp, #24
6000be18:	4604      	mov	r4, r0
6000be1a:	af00      	add	r7, sp, #0
	if (!ep_abs_idx) {
6000be1c:	d055      	beq.n	6000beca <usb_dc_ep_enable+0xc2>
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000be1e:	2b0f      	cmp	r3, #15
6000be20:	d910      	bls.n	6000be44 <usb_dc_ep_enable+0x3c>
		LOG_ERR("Wrong endpoint index/address");
6000be22:	4b2d      	ldr	r3, [pc, #180]	; (6000bed8 <usb_dc_ep_enable+0xd0>)
6000be24:	f107 0210 	add.w	r2, r7, #16
6000be28:	482c      	ldr	r0, [pc, #176]	; (6000bedc <usb_dc_ep_enable+0xd4>)
6000be2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000be2e:	617b      	str	r3, [r7, #20]
6000be30:	2302      	movs	r3, #2
6000be32:	613b      	str	r3, [r7, #16]
6000be34:	f00c fb30 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000be38:	f06f 0015 	mvn.w	r0, #21
}
6000be3c:	3718      	adds	r7, #24
6000be3e:	46bd      	mov	sp, r7
6000be40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
6000be44:	4d26      	ldr	r5, [pc, #152]	; (6000bee0 <usb_dc_ep_enable+0xd8>)
6000be46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
6000be4a:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
6000be4e:	009e      	lsls	r6, r3, #2
6000be50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
6000be54:	7e93      	ldrb	r3, [r2, #26]
6000be56:	0798      	lsls	r0, r3, #30
6000be58:	d511      	bpl.n	6000be7e <usb_dc_ep_enable+0x76>
		LOG_WRN("endpoint 0x%x already enabled", ep);
6000be5a:	466d      	mov	r5, sp
6000be5c:	b088      	sub	sp, #32
6000be5e:	466a      	mov	r2, sp
6000be60:	4b20      	ldr	r3, [pc, #128]	; (6000bee4 <usb_dc_ep_enable+0xdc>)
6000be62:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
6000be66:	481d      	ldr	r0, [pc, #116]	; (6000bedc <usb_dc_ep_enable+0xd4>)
6000be68:	e9c2 3405 	strd	r3, r4, [r2, #20]
6000be6c:	2303      	movs	r3, #3
6000be6e:	f842 3f10 	str.w	r3, [r2, #16]!
6000be72:	f00c fb11 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EALREADY;
6000be76:	f06f 0077 	mvn.w	r0, #119	; 0x77
6000be7a:	46ad      	mov	sp, r5
6000be7c:	e7de      	b.n	6000be3c <usb_dc_ep_enable+0x34>
	if ((USB_EP_GET_IDX(ep) != USB_CONTROL_ENDPOINT) &&
6000be7e:	0661      	lsls	r1, r4, #25
6000be80:	d025      	beq.n	6000bece <usb_dc_ep_enable+0xc6>
6000be82:	0623      	lsls	r3, r4, #24
6000be84:	d423      	bmi.n	6000bece <usb_dc_ep_enable+0xc6>
		status = dev_state.dev_struct.controllerInterface->deviceRecv(
6000be86:	68eb      	ldr	r3, [r5, #12]
6000be88:	4621      	mov	r1, r4
6000be8a:	68a8      	ldr	r0, [r5, #8]
6000be8c:	f8d3 800c 	ldr.w	r8, [r3, #12]
6000be90:	8b13      	ldrh	r3, [r2, #24]
6000be92:	68d2      	ldr	r2, [r2, #12]
6000be94:	47c0      	blx	r8
		if (kStatus_USB_Success != status) {
6000be96:	b188      	cbz	r0, 6000bebc <usb_dc_ep_enable+0xb4>
			LOG_ERR("Failed to enable reception on 0x%02x", ep);
6000be98:	466d      	mov	r5, sp
6000be9a:	b088      	sub	sp, #32
6000be9c:	466a      	mov	r2, sp
6000be9e:	4b12      	ldr	r3, [pc, #72]	; (6000bee8 <usb_dc_ep_enable+0xe0>)
6000bea0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000bea4:	480d      	ldr	r0, [pc, #52]	; (6000bedc <usb_dc_ep_enable+0xd4>)
6000bea6:	e9c2 3405 	strd	r3, r4, [r2, #20]
6000beaa:	2303      	movs	r3, #3
6000beac:	f842 3f10 	str.w	r3, [r2, #16]!
6000beb0:	f00c faf2 	bl	60018498 <z_log_msg_static_create.constprop.0>
			return -EIO;
6000beb4:	f06f 0004 	mvn.w	r0, #4
6000beb8:	46ad      	mov	sp, r5
6000beba:	e7bf      	b.n	6000be3c <usb_dc_ep_enable+0x34>
		dev_state.eps[ep_abs_idx].ep_occupied = true;
6000bebc:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
6000bec0:	4433      	add	r3, r6
6000bec2:	7e9a      	ldrb	r2, [r3, #26]
6000bec4:	f042 0202 	orr.w	r2, r2, #2
6000bec8:	769a      	strb	r2, [r3, #26]
		return 0;
6000beca:	2000      	movs	r0, #0
6000becc:	e7b6      	b.n	6000be3c <usb_dc_ep_enable+0x34>
		dev_state.eps[ep_abs_idx].ep_occupied = true;
6000bece:	7e93      	ldrb	r3, [r2, #26]
6000bed0:	f043 0302 	orr.w	r3, r3, #2
6000bed4:	7693      	strb	r3, [r2, #26]
6000bed6:	e7f8      	b.n	6000beca <usb_dc_ep_enable+0xc2>
6000bed8:	6001d87e 	.word	0x6001d87e
6000bedc:	6001a404 	.word	0x6001a404
6000bee0:	20203640 	.word	0x20203640
6000bee4:	6001da21 	.word	0x6001da21
6000bee8:	6001d9de 	.word	0x6001d9de

6000beec <usb_dc_ep_disable>:
{
6000beec:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000beee:	09c4      	lsrs	r4, r0, #7
{
6000bef0:	b087      	sub	sp, #28
6000bef2:	4605      	mov	r5, r0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000bef4:	eb04 0440 	add.w	r4, r4, r0, lsl #1
{
6000bef8:	af00      	add	r7, sp, #0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000befa:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000befe:	2c0f      	cmp	r4, #15
6000bf00:	d90f      	bls.n	6000bf22 <usb_dc_ep_disable+0x36>
		LOG_ERR("Wrong endpoint index/address");
6000bf02:	4b1e      	ldr	r3, [pc, #120]	; (6000bf7c <usb_dc_ep_disable+0x90>)
6000bf04:	f107 0210 	add.w	r2, r7, #16
6000bf08:	481d      	ldr	r0, [pc, #116]	; (6000bf80 <usb_dc_ep_disable+0x94>)
6000bf0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bf0e:	617b      	str	r3, [r7, #20]
6000bf10:	2302      	movs	r3, #2
6000bf12:	613b      	str	r3, [r7, #16]
6000bf14:	f00c fac0 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000bf18:	f06f 0015 	mvn.w	r0, #21
}
6000bf1c:	371c      	adds	r7, #28
6000bf1e:	46bd      	mov	sp, r7
6000bf20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = dev_state.dev_struct.controllerInterface->deviceCancel(
6000bf22:	4e18      	ldr	r6, [pc, #96]	; (6000bf84 <usb_dc_ep_disable+0x98>)
6000bf24:	4601      	mov	r1, r0
6000bf26:	68f3      	ldr	r3, [r6, #12]
6000bf28:	68b0      	ldr	r0, [r6, #8]
6000bf2a:	691b      	ldr	r3, [r3, #16]
6000bf2c:	4798      	blx	r3
	if (kStatus_USB_Success != status) {
6000bf2e:	b188      	cbz	r0, 6000bf54 <usb_dc_ep_disable+0x68>
		LOG_ERR("Failed to disable ep 0x%02x", ep);
6000bf30:	466c      	mov	r4, sp
6000bf32:	b088      	sub	sp, #32
6000bf34:	466a      	mov	r2, sp
6000bf36:	4b14      	ldr	r3, [pc, #80]	; (6000bf88 <usb_dc_ep_disable+0x9c>)
6000bf38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000bf3c:	4810      	ldr	r0, [pc, #64]	; (6000bf80 <usb_dc_ep_disable+0x94>)
6000bf3e:	e9c2 3505 	strd	r3, r5, [r2, #20]
6000bf42:	2303      	movs	r3, #3
6000bf44:	f842 3f10 	str.w	r3, [r2, #16]!
6000bf48:	f00c faa6 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EIO;
6000bf4c:	f06f 0004 	mvn.w	r0, #4
6000bf50:	46a5      	mov	sp, r4
6000bf52:	e7e3      	b.n	6000bf1c <usb_dc_ep_disable+0x30>
	dev_state.eps[ep_abs_idx].ep_enabled = false;
6000bf54:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
6000bf58:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
6000bf5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
6000bf60:	7e9a      	ldrb	r2, [r3, #26]
6000bf62:	f360 0200 	bfi	r2, r0, #0, #1
6000bf66:	769a      	strb	r2, [r3, #26]
	dev_state.eps[ep_abs_idx].ep_occupied = false;
6000bf68:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
6000bf6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
6000bf70:	7e9a      	ldrb	r2, [r3, #26]
6000bf72:	f360 0241 	bfi	r2, r0, #1, #1
6000bf76:	769a      	strb	r2, [r3, #26]
	return 0;
6000bf78:	e7d0      	b.n	6000bf1c <usb_dc_ep_disable+0x30>
6000bf7a:	bf00      	nop
6000bf7c:	6001d87e 	.word	0x6001d87e
6000bf80:	6001a404 	.word	0x6001a404
6000bf84:	20203640 	.word	0x20203640
6000bf88:	6001da3f 	.word	0x6001da3f

6000bf8c <usb_dc_ep_write>:
{
6000bf8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000bf90:	09c6      	lsrs	r6, r0, #7
{
6000bf92:	b087      	sub	sp, #28
6000bf94:	4604      	mov	r4, r0
6000bf96:	4689      	mov	r9, r1
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000bf98:	eb06 0640 	add.w	r6, r6, r0, lsl #1
{
6000bf9c:	4615      	mov	r5, r2
6000bf9e:	af00      	add	r7, sp, #0
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bfa0:	f006 06ff 	and.w	r6, r6, #255	; 0xff
{
6000bfa4:	4698      	mov	r8, r3
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000bfa6:	2e0f      	cmp	r6, #15
6000bfa8:	d910      	bls.n	6000bfcc <usb_dc_ep_write+0x40>
		LOG_ERR("Wrong endpoint index/address");
6000bfaa:	4b1e      	ldr	r3, [pc, #120]	; (6000c024 <usb_dc_ep_write+0x98>)
		LOG_ERR("Wrong endpoint direction");
6000bfac:	617b      	str	r3, [r7, #20]
6000bfae:	2302      	movs	r3, #2
6000bfb0:	481d      	ldr	r0, [pc, #116]	; (6000c028 <usb_dc_ep_write+0x9c>)
6000bfb2:	f107 0210 	add.w	r2, r7, #16
6000bfb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000bfba:	613b      	str	r3, [r7, #16]
6000bfbc:	f00c fa6c 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000bfc0:	f06f 0015 	mvn.w	r0, #21
}
6000bfc4:	371c      	adds	r7, #28
6000bfc6:	46bd      	mov	sp, r7
6000bfc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (USB_EP_GET_DIR(ep) != USB_EP_DIR_IN) {
6000bfcc:	0603      	lsls	r3, r0, #24
6000bfce:	d401      	bmi.n	6000bfd4 <usb_dc_ep_write+0x48>
		LOG_ERR("Wrong endpoint direction");
6000bfd0:	4b16      	ldr	r3, [pc, #88]	; (6000c02c <usb_dc_ep_write+0xa0>)
6000bfd2:	e7eb      	b.n	6000bfac <usb_dc_ep_write+0x20>
	DCACHE_CleanByRange((uint32_t)data, data_len);
6000bfd4:	4611      	mov	r1, r2
6000bfd6:	4648      	mov	r0, r9
6000bfd8:	f003 f840 	bl	6000f05c <DCACHE_CleanByRange>
	status = dev_state.dev_struct.controllerInterface->deviceSend(
6000bfdc:	4814      	ldr	r0, [pc, #80]	; (6000c030 <usb_dc_ep_write+0xa4>)
6000bfde:	464a      	mov	r2, r9
6000bfe0:	4621      	mov	r1, r4
6000bfe2:	68c3      	ldr	r3, [r0, #12]
6000bfe4:	6880      	ldr	r0, [r0, #8]
6000bfe6:	689e      	ldr	r6, [r3, #8]
6000bfe8:	462b      	mov	r3, r5
6000bfea:	47b0      	blx	r6
	if (kStatus_USB_Success != status) {
6000bfec:	b188      	cbz	r0, 6000c012 <usb_dc_ep_write+0x86>
		LOG_ERR("Failed to fill ep 0x%02x buffer", ep);
6000bfee:	466d      	mov	r5, sp
6000bff0:	b088      	sub	sp, #32
6000bff2:	466a      	mov	r2, sp
6000bff4:	4b0f      	ldr	r3, [pc, #60]	; (6000c034 <usb_dc_ep_write+0xa8>)
6000bff6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000bffa:	480b      	ldr	r0, [pc, #44]	; (6000c028 <usb_dc_ep_write+0x9c>)
6000bffc:	e9c2 3405 	strd	r3, r4, [r2, #20]
6000c000:	2303      	movs	r3, #3
6000c002:	f842 3f10 	str.w	r3, [r2, #16]!
6000c006:	f00c fa47 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EIO;
6000c00a:	f06f 0004 	mvn.w	r0, #4
6000c00e:	46ad      	mov	sp, r5
6000c010:	e7d8      	b.n	6000bfc4 <usb_dc_ep_write+0x38>
	if (ret_bytes) {
6000c012:	f1b8 0f00 	cmp.w	r8, #0
6000c016:	d101      	bne.n	6000c01c <usb_dc_ep_write+0x90>
	return 0;
6000c018:	2000      	movs	r0, #0
6000c01a:	e7d3      	b.n	6000bfc4 <usb_dc_ep_write+0x38>
		*ret_bytes = data_len;
6000c01c:	f8c8 5000 	str.w	r5, [r8]
6000c020:	e7fa      	b.n	6000c018 <usb_dc_ep_write+0x8c>
6000c022:	bf00      	nop
6000c024:	6001d87e 	.word	0x6001d87e
6000c028:	6001a404 	.word	0x6001a404
6000c02c:	6001da5b 	.word	0x6001da5b
6000c030:	20203640 	.word	0x20203640
6000c034:	6001da74 	.word	0x6001da74

6000c038 <usb_dc_ep_read_wait>:
{
6000c038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000c03c:	09c4      	lsrs	r4, r0, #7
{
6000c03e:	460f      	mov	r7, r1
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
6000c040:	f8df 910c 	ldr.w	r9, [pc, #268]	; 6000c150 <usb_dc_ep_read_wait+0x118>
{
6000c044:	4698      	mov	r8, r3
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000c046:	eb04 0440 	add.w	r4, r4, r0, lsl #1
{
6000c04a:	4615      	mov	r5, r2
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
6000c04c:	f8d9 30dc 	ldr.w	r3, [r9, #220]	; 0xdc
{
6000c050:	4606      	mov	r6, r0
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000c052:	f004 01ff 	and.w	r1, r4, #255	; 0xff
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
6000c056:	b2e4      	uxtb	r4, r4
{
6000c058:	b086      	sub	sp, #24
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
6000c05a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
6000c05e:	00a2      	lsls	r2, r4, #2
6000c060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
6000c064:	7ea0      	ldrb	r0, [r4, #26]
6000c066:	0780      	lsls	r0, r0, #30
6000c068:	d50e      	bpl.n	6000c088 <usb_dc_ep_read_wait+0x50>
		LOG_ERR("Endpoint is occupied by the controller");
6000c06a:	4b3a      	ldr	r3, [pc, #232]	; (6000c154 <usb_dc_ep_read_wait+0x11c>)
6000c06c:	aa04      	add	r2, sp, #16
6000c06e:	483a      	ldr	r0, [pc, #232]	; (6000c158 <usb_dc_ep_read_wait+0x120>)
6000c070:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000c074:	9305      	str	r3, [sp, #20]
6000c076:	2302      	movs	r3, #2
6000c078:	9304      	str	r3, [sp, #16]
6000c07a:	f00c fa0d 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EBUSY;
6000c07e:	f06f 000f 	mvn.w	r0, #15
}
6000c082:	b006      	add	sp, #24
6000c084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ((ep_abs_idx >= NUM_OF_EP_MAX) ||
6000c088:	290f      	cmp	r1, #15
6000c08a:	d801      	bhi.n	6000c090 <usb_dc_ep_read_wait+0x58>
6000c08c:	0630      	lsls	r0, r6, #24
6000c08e:	d50c      	bpl.n	6000c0aa <usb_dc_ep_read_wait+0x72>
		LOG_ERR("Wrong endpoint index/address/direction");
6000c090:	4b32      	ldr	r3, [pc, #200]	; (6000c15c <usb_dc_ep_read_wait+0x124>)
		LOG_ERR("Wrong arguments");
6000c092:	9305      	str	r3, [sp, #20]
6000c094:	2302      	movs	r3, #2
6000c096:	aa04      	add	r2, sp, #16
6000c098:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000c09c:	482e      	ldr	r0, [pc, #184]	; (6000c158 <usb_dc_ep_read_wait+0x120>)
6000c09e:	9304      	str	r3, [sp, #16]
6000c0a0:	f00c f9fa 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000c0a4:	f06f 0015 	mvn.w	r0, #21
6000c0a8:	e7eb      	b.n	6000c082 <usb_dc_ep_read_wait+0x4a>
	if (!data && max_data_len) {
6000c0aa:	b917      	cbnz	r7, 6000c0b2 <usb_dc_ep_read_wait+0x7a>
6000c0ac:	b33d      	cbz	r5, 6000c0fe <usb_dc_ep_read_wait+0xc6>
		LOG_ERR("Wrong arguments");
6000c0ae:	4b2c      	ldr	r3, [pc, #176]	; (6000c160 <usb_dc_ep_read_wait+0x128>)
6000c0b0:	e7ef      	b.n	6000c092 <usb_dc_ep_read_wait+0x5a>
	bufp = dev_state.eps[ep_abs_idx].transfer_message.buffer;
6000c0b2:	f853 a002 	ldr.w	sl, [r3, r2]
	data_len = dev_state.eps[ep_abs_idx].transfer_message.length;
6000c0b6:	6863      	ldr	r3, [r4, #4]
	if (data_len == USB_UNINITIALIZED_VAL_32) {
6000c0b8:	1c59      	adds	r1, r3, #1
6000c0ba:	d023      	beq.n	6000c104 <usb_dc_ep_read_wait+0xcc>
	if (data_len > max_data_len) {
6000c0bc:	429d      	cmp	r5, r3
6000c0be:	d20a      	bcs.n	6000c0d6 <usb_dc_ep_read_wait+0x9e>
		LOG_WRN("Not enough room to copy all the data!");
6000c0c0:	4b28      	ldr	r3, [pc, #160]	; (6000c164 <usb_dc_ep_read_wait+0x12c>)
6000c0c2:	aa04      	add	r2, sp, #16
6000c0c4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
6000c0c8:	4823      	ldr	r0, [pc, #140]	; (6000c158 <usb_dc_ep_read_wait+0x120>)
6000c0ca:	9305      	str	r3, [sp, #20]
6000c0cc:	2302      	movs	r3, #2
6000c0ce:	9304      	str	r3, [sp, #16]
6000c0d0:	f00c f9e2 	bl	60018498 <z_log_msg_static_create.constprop.0>
6000c0d4:	462b      	mov	r3, r5
		for (uint32_t i = 0; i < data_len; i++) {
6000c0d6:	2200      	movs	r2, #0
6000c0d8:	429a      	cmp	r2, r3
6000c0da:	d121      	bne.n	6000c120 <usb_dc_ep_read_wait+0xe8>
	if (read_bytes) {
6000c0dc:	f1b8 0f00 	cmp.w	r8, #0
6000c0e0:	d001      	beq.n	6000c0e6 <usb_dc_ep_read_wait+0xae>
		*read_bytes = data_len;
6000c0e2:	f8c8 3000 	str.w	r3, [r8]
	if (USB_EP_GET_IDX(ep) == USB_ENDPOINT_CONTROL) {
6000c0e6:	b9ce      	cbnz	r6, 6000c11c <usb_dc_ep_read_wait+0xe4>
		update_control_stage(&dev_state.eps[0].transfer_message,
6000c0e8:	f8d9 20dc 	ldr.w	r2, [r9, #220]	; 0xdc
	if (cb_msg->isSetup) {
6000c0ec:	7a50      	ldrb	r0, [r2, #9]
	usbd_setup = (struct usb_setup_packet *)cb_msg->buffer;
6000c0ee:	6811      	ldr	r1, [r2, #0]
	if (cb_msg->isSetup) {
6000c0f0:	b318      	cbz	r0, 6000c13a <usb_dc_ep_read_wait+0x102>
		if (usbd_setup->wLength == 0) {
6000c0f2:	88cb      	ldrh	r3, [r1, #6]
6000c0f4:	b9cb      	cbnz	r3, 6000c12a <usb_dc_ep_read_wait+0xf2>
			dev_state.setup_data_stage = SETUP_DATA_STAGE_DONE;
6000c0f6:	2300      	movs	r3, #0
			dev_state.setup_data_stage = SETUP_DATA_STAGE_IN;
6000c0f8:	f889 30e1 	strb.w	r3, [r9, #225]	; 0xe1
6000c0fc:	e00e      	b.n	6000c11c <usb_dc_ep_read_wait+0xe4>
	data_len = dev_state.eps[ep_abs_idx].transfer_message.length;
6000c0fe:	6863      	ldr	r3, [r4, #4]
	if (data_len == USB_UNINITIALIZED_VAL_32) {
6000c100:	1c5a      	adds	r2, r3, #1
6000c102:	d106      	bne.n	6000c112 <usb_dc_ep_read_wait+0xda>
		if (read_bytes) {
6000c104:	f1b8 0f00 	cmp.w	r8, #0
6000c108:	d0cc      	beq.n	6000c0a4 <usb_dc_ep_read_wait+0x6c>
			*read_bytes = 0;
6000c10a:	2300      	movs	r3, #0
6000c10c:	f8c8 3000 	str.w	r3, [r8]
6000c110:	e7c8      	b.n	6000c0a4 <usb_dc_ep_read_wait+0x6c>
		if (read_bytes) {
6000c112:	f1b8 0f00 	cmp.w	r8, #0
6000c116:	d001      	beq.n	6000c11c <usb_dc_ep_read_wait+0xe4>
			*read_bytes = data_len;
6000c118:	f8c8 3000 	str.w	r3, [r8]
		return 0;
6000c11c:	2000      	movs	r0, #0
6000c11e:	e7b0      	b.n	6000c082 <usb_dc_ep_read_wait+0x4a>
			data[i] = bufp[i];
6000c120:	f81a 1002 	ldrb.w	r1, [sl, r2]
6000c124:	54b9      	strb	r1, [r7, r2]
		for (uint32_t i = 0; i < data_len; i++) {
6000c126:	3201      	adds	r2, #1
6000c128:	e7d6      	b.n	6000c0d8 <usb_dc_ep_read_wait+0xa0>
		} else if (usb_reqtype_is_to_host(usbd_setup)) {
6000c12a:	f991 3000 	ldrsb.w	r3, [r1]
6000c12e:	2b00      	cmp	r3, #0
6000c130:	da01      	bge.n	6000c136 <usb_dc_ep_read_wait+0xfe>
			dev_state.setup_data_stage = SETUP_DATA_STAGE_IN;
6000c132:	2301      	movs	r3, #1
6000c134:	e7e0      	b.n	6000c0f8 <usb_dc_ep_read_wait+0xc0>
			dev_state.setup_data_stage = SETUP_DATA_STAGE_OUT;
6000c136:	2302      	movs	r3, #2
6000c138:	e7de      	b.n	6000c0f8 <usb_dc_ep_read_wait+0xc0>
		if (dev_state.setup_data_stage != SETUP_DATA_STAGE_DONE) {
6000c13a:	f899 10e1 	ldrb.w	r1, [r9, #225]	; 0xe1
6000c13e:	2900      	cmp	r1, #0
6000c140:	d0ec      	beq.n	6000c11c <usb_dc_ep_read_wait+0xe4>
			if ((data_len >= max_data_len) ||
6000c142:	42ab      	cmp	r3, r5
6000c144:	d2d7      	bcs.n	6000c0f6 <usb_dc_ep_read_wait+0xbe>
			    (data_len < dev_state.eps[0].ep_mps)) {
6000c146:	8b12      	ldrh	r2, [r2, #24]
			if ((data_len >= max_data_len) ||
6000c148:	4293      	cmp	r3, r2
6000c14a:	d3d4      	bcc.n	6000c0f6 <usb_dc_ep_read_wait+0xbe>
6000c14c:	e7e6      	b.n	6000c11c <usb_dc_ep_read_wait+0xe4>
6000c14e:	bf00      	nop
6000c150:	20203640 	.word	0x20203640
6000c154:	6001da94 	.word	0x6001da94
6000c158:	6001a404 	.word	0x6001a404
6000c15c:	6001dabb 	.word	0x6001dabb
6000c160:	6001dae2 	.word	0x6001dae2
6000c164:	6001daf2 	.word	0x6001daf2

6000c168 <usb_dc_ep_read_continue>:
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000c168:	09c3      	lsrs	r3, r0, #7
6000c16a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
6000c16e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
{
6000c172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ep_abs_idx >= NUM_OF_EP_MAX ||
6000c176:	2b0f      	cmp	r3, #15
{
6000c178:	b086      	sub	sp, #24
6000c17a:	4604      	mov	r4, r0
6000c17c:	af00      	add	r7, sp, #0
	if (ep_abs_idx >= NUM_OF_EP_MAX ||
6000c17e:	d801      	bhi.n	6000c184 <usb_dc_ep_read_continue+0x1c>
6000c180:	0602      	lsls	r2, r0, #24
6000c182:	d510      	bpl.n	6000c1a6 <usb_dc_ep_read_continue+0x3e>
		LOG_ERR("Wrong endpoint index/address/direction");
6000c184:	4b2c      	ldr	r3, [pc, #176]	; (6000c238 <usb_dc_ep_read_continue+0xd0>)
6000c186:	f107 0210 	add.w	r2, r7, #16
6000c18a:	482c      	ldr	r0, [pc, #176]	; (6000c23c <usb_dc_ep_read_continue+0xd4>)
6000c18c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000c190:	617b      	str	r3, [r7, #20]
6000c192:	2302      	movs	r3, #2
6000c194:	613b      	str	r3, [r7, #16]
6000c196:	f00c f97f 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000c19a:	f06f 0015 	mvn.w	r0, #21
}
6000c19e:	3718      	adds	r7, #24
6000c1a0:	46bd      	mov	sp, r7
6000c1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dev_state.eps[ep_abs_idx].ep_occupied) {
6000c1a6:	4d26      	ldr	r5, [pc, #152]	; (6000c240 <usb_dc_ep_read_continue+0xd8>)
6000c1a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
6000c1ac:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
6000c1b0:	009e      	lsls	r6, r3, #2
6000c1b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
6000c1b6:	7e93      	ldrb	r3, [r2, #26]
6000c1b8:	079b      	lsls	r3, r3, #30
6000c1ba:	d511      	bpl.n	6000c1e0 <usb_dc_ep_read_continue+0x78>
		LOG_WRN("endpoint 0x%x already occupied", ep);
6000c1bc:	466d      	mov	r5, sp
6000c1be:	b088      	sub	sp, #32
6000c1c0:	466a      	mov	r2, sp
6000c1c2:	4b20      	ldr	r3, [pc, #128]	; (6000c244 <usb_dc_ep_read_continue+0xdc>)
6000c1c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
6000c1c8:	e9c2 3005 	strd	r3, r0, [r2, #20]
6000c1cc:	2303      	movs	r3, #3
6000c1ce:	481b      	ldr	r0, [pc, #108]	; (6000c23c <usb_dc_ep_read_continue+0xd4>)
6000c1d0:	f842 3f10 	str.w	r3, [r2, #16]!
6000c1d4:	f00c f960 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EBUSY;
6000c1d8:	f06f 000f 	mvn.w	r0, #15
6000c1dc:	46ad      	mov	sp, r5
6000c1de:	e7de      	b.n	6000c19e <usb_dc_ep_read_continue+0x36>
	if (USB_EP_GET_IDX(ep) == USB_ENDPOINT_CONTROL) {
6000c1e0:	b930      	cbnz	r0, 6000c1f0 <usb_dc_ep_read_continue+0x88>
		if (dev_state.setup_data_stage == SETUP_DATA_STAGE_DONE) {
6000c1e2:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
6000c1e6:	b32b      	cbz	r3, 6000c234 <usb_dc_ep_read_continue+0xcc>
		if (dev_state.setup_data_stage == SETUP_DATA_STAGE_IN) {
6000c1e8:	2b01      	cmp	r3, #1
			dev_state.setup_data_stage = SETUP_DATA_STAGE_DONE;
6000c1ea:	bf08      	it	eq
6000c1ec:	f885 00e1 	strbeq.w	r0, [r5, #225]	; 0xe1
	status = dev_state.dev_struct.controllerInterface->deviceRecv(
6000c1f0:	68eb      	ldr	r3, [r5, #12]
6000c1f2:	4621      	mov	r1, r4
6000c1f4:	68a8      	ldr	r0, [r5, #8]
6000c1f6:	f8d3 800c 	ldr.w	r8, [r3, #12]
6000c1fa:	8b13      	ldrh	r3, [r2, #24]
6000c1fc:	68d2      	ldr	r2, [r2, #12]
6000c1fe:	47c0      	blx	r8
	if (kStatus_USB_Success != status) {
6000c200:	b188      	cbz	r0, 6000c226 <usb_dc_ep_read_continue+0xbe>
		LOG_ERR("Failed to enable reception on ep 0x%02x", ep);
6000c202:	466d      	mov	r5, sp
6000c204:	b088      	sub	sp, #32
6000c206:	466a      	mov	r2, sp
6000c208:	4b0f      	ldr	r3, [pc, #60]	; (6000c248 <usb_dc_ep_read_continue+0xe0>)
6000c20a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000c20e:	480b      	ldr	r0, [pc, #44]	; (6000c23c <usb_dc_ep_read_continue+0xd4>)
6000c210:	e9c2 3405 	strd	r3, r4, [r2, #20]
6000c214:	2303      	movs	r3, #3
6000c216:	f842 3f10 	str.w	r3, [r2, #16]!
6000c21a:	f00c f93d 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EIO;
6000c21e:	f06f 0004 	mvn.w	r0, #4
6000c222:	46ad      	mov	sp, r5
6000c224:	e7bb      	b.n	6000c19e <usb_dc_ep_read_continue+0x36>
	dev_state.eps[ep_abs_idx].ep_occupied = true;
6000c226:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
6000c22a:	4433      	add	r3, r6
6000c22c:	7e9a      	ldrb	r2, [r3, #26]
6000c22e:	f042 0202 	orr.w	r2, r2, #2
6000c232:	769a      	strb	r2, [r3, #26]
			return 0;
6000c234:	2000      	movs	r0, #0
6000c236:	e7b2      	b.n	6000c19e <usb_dc_ep_read_continue+0x36>
6000c238:	6001dabb 	.word	0x6001dabb
6000c23c:	6001a404 	.word	0x6001a404
6000c240:	20203640 	.word	0x20203640
6000c244:	6001db18 	.word	0x6001db18
6000c248:	6001db37 	.word	0x6001db37

6000c24c <usb_dc_ep_set_callback>:
{
6000c24c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000c24e:	09c3      	lsrs	r3, r0, #7
6000c250:	eb03 0040 	add.w	r0, r3, r0, lsl #1
6000c254:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000c258:	280f      	cmp	r0, #15
6000c25a:	d90e      	bls.n	6000c27a <usb_dc_ep_set_callback+0x2e>
		LOG_ERR("Wrong endpoint index/address");
6000c25c:	4b0e      	ldr	r3, [pc, #56]	; (6000c298 <usb_dc_ep_set_callback+0x4c>)
6000c25e:	aa04      	add	r2, sp, #16
6000c260:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000c264:	480d      	ldr	r0, [pc, #52]	; (6000c29c <usb_dc_ep_set_callback+0x50>)
6000c266:	9305      	str	r3, [sp, #20]
6000c268:	2302      	movs	r3, #2
6000c26a:	9304      	str	r3, [sp, #16]
6000c26c:	f00c f914 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000c270:	f06f 0015 	mvn.w	r0, #21
}
6000c274:	b007      	add	sp, #28
6000c276:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!dev_state.attached) {
6000c27a:	4b09      	ldr	r3, [pc, #36]	; (6000c2a0 <usb_dc_ep_set_callback+0x54>)
6000c27c:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
6000c280:	2a00      	cmp	r2, #0
6000c282:	d0f5      	beq.n	6000c270 <usb_dc_ep_set_callback+0x24>
	dev_state.eps[ep_abs_idx].callback = cb;
6000c284:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
6000c288:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
6000c28c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	return 0;
6000c290:	2000      	movs	r0, #0
	dev_state.eps[ep_abs_idx].callback = cb;
6000c292:	6159      	str	r1, [r3, #20]
	return 0;
6000c294:	e7ee      	b.n	6000c274 <usb_dc_ep_set_callback+0x28>
6000c296:	bf00      	nop
6000c298:	6001d87e 	.word	0x6001d87e
6000c29c:	6001a404 	.word	0x6001a404
6000c2a0:	20203640 	.word	0x20203640

6000c2a4 <usb_dc_set_status_callback>:
	dev_state.status_cb = cb;
6000c2a4:	4b01      	ldr	r3, [pc, #4]	; (6000c2ac <usb_dc_set_status_callback+0x8>)
6000c2a6:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
}
6000c2aa:	4770      	bx	lr
6000c2ac:	20203640 	.word	0x20203640

6000c2b0 <usb_dc_ep_mps>:
{
6000c2b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t ep_abs_idx = EP_ABS_IDX(ep);
6000c2b2:	09c3      	lsrs	r3, r0, #7
6000c2b4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
6000c2b8:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	if (ep_abs_idx >= NUM_OF_EP_MAX) {
6000c2bc:	280f      	cmp	r0, #15
6000c2be:	d90e      	bls.n	6000c2de <usb_dc_ep_mps+0x2e>
		LOG_ERR("Wrong endpoint index/address");
6000c2c0:	4b0b      	ldr	r3, [pc, #44]	; (6000c2f0 <usb_dc_ep_mps+0x40>)
6000c2c2:	aa04      	add	r2, sp, #16
6000c2c4:	480b      	ldr	r0, [pc, #44]	; (6000c2f4 <usb_dc_ep_mps+0x44>)
6000c2c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000c2ca:	9305      	str	r3, [sp, #20]
6000c2cc:	2302      	movs	r3, #2
6000c2ce:	9304      	str	r3, [sp, #16]
6000c2d0:	f00c f8e2 	bl	60018498 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000c2d4:	f06f 0015 	mvn.w	r0, #21
}
6000c2d8:	b007      	add	sp, #28
6000c2da:	f85d fb04 	ldr.w	pc, [sp], #4
	return dev_state.eps[ep_abs_idx].ep_mps;
6000c2de:	4b06      	ldr	r3, [pc, #24]	; (6000c2f8 <usb_dc_ep_mps+0x48>)
6000c2e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
6000c2e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
6000c2e8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
6000c2ec:	8b18      	ldrh	r0, [r3, #24]
6000c2ee:	e7f3      	b.n	6000c2d8 <usb_dc_ep_mps+0x28>
6000c2f0:	6001d87e 	.word	0x6001d87e
6000c2f4:	6001a404 	.word	0x6001a404
6000c2f8:	20203640 	.word	0x20203640

6000c2fc <USB_DeviceNotificationTrigger>:
{
6000c2fc:	b508      	push	{r3, lr}
	return z_impl_k_msgq_put(msgq, data, timeout);
6000c2fe:	2200      	movs	r2, #0
6000c300:	2300      	movs	r3, #0
6000c302:	4802      	ldr	r0, [pc, #8]	; (6000c30c <USB_DeviceNotificationTrigger+0x10>)
6000c304:	f003 fdaa 	bl	6000fe5c <z_impl_k_msgq_put>
}
6000c308:	2000      	movs	r0, #0
6000c30a:	bd08      	pop	{r3, pc}
6000c30c:	20203508 	.word	0x20203508

6000c310 <mcux_12b1msps_sar_adc_init>:
		adc_context_on_sampling_done(&data->ctx, dev);
	}
}

static int mcux_12b1msps_sar_adc_init(const struct device *dev)
{
6000c310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct mcux_12b1msps_sar_adc_config *config = dev->config;
6000c314:	6845      	ldr	r5, [r0, #4]
{
6000c316:	b08b      	sub	sp, #44	; 0x2c
	struct mcux_12b1msps_sar_adc_data *data = dev->data;
6000c318:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
6000c31c:	4606      	mov	r6, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
6000c31e:	aa04      	add	r2, sp, #16
6000c320:	2100      	movs	r1, #0
6000c322:	68e8      	ldr	r0, [r5, #12]
	ADC_Type *base = config->base;
6000c324:	682f      	ldr	r7, [r5, #0]
6000c326:	f00c fd1a 	bl	60018d5e <pinctrl_lookup_state>
	if (ret < 0) {
6000c32a:	1e04      	subs	r4, r0, #0
6000c32c:	db42      	blt.n	6000c3b4 <mcux_12b1msps_sar_adc_init+0xa4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
6000c32e:	9b04      	ldr	r3, [sp, #16]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
6000c330:	2200      	movs	r2, #0
6000c332:	7919      	ldrb	r1, [r3, #4]
6000c334:	6818      	ldr	r0, [r3, #0]
6000c336:	f00c fd25 	bl	60018d84 <pinctrl_configure_pins>
	adc_config_t adc_config;
	int err;

	err = pinctrl_apply_state(config->pincfg, PINCTRL_STATE_DEFAULT);
	if (err) {
6000c33a:	4604      	mov	r4, r0
6000c33c:	2800      	cmp	r0, #0
6000c33e:	d139      	bne.n	6000c3b4 <mcux_12b1msps_sar_adc_init+0xa4>
		return err;
	}

	ADC_GetDefaultConfig(&adc_config);
6000c340:	a801      	add	r0, sp, #4

	adc_config.referenceVoltageSource = config->ref_src;
	adc_config.clockSource = config->clock_src;
	adc_config.clockDriver = config->clock_drv;
	adc_config.samplePeriodMode = config->sample_period_mode;
	adc_config.resolution = kADC_Resolution12Bit;
6000c342:	f04f 0902 	mov.w	r9, #2
	ADC_GetDefaultConfig(&adc_config);
6000c346:	f002 fe4b 	bl	6000efe0 <ADC_GetDefaultConfig>
	adc_config.referenceVoltageSource = config->ref_src;
6000c34a:	79ab      	ldrb	r3, [r5, #6]
	adc_config.enableHighSpeed = false;
	adc_config.enableLowPower = false;
	adc_config.enableLongSample = false;
	adc_config.enableAsynchronousClockOutput = true;

	ADC_Init(base, &adc_config);
6000c34c:	4638      	mov	r0, r7
6000c34e:	a901      	add	r1, sp, #4
	adc_config.referenceVoltageSource = config->ref_src;
6000c350:	f88d 300a 	strb.w	r3, [sp, #10]
	adc_config.clockSource = config->clock_src;
6000c354:	792b      	ldrb	r3, [r5, #4]
	adc_config.enableOverWrite = false;
6000c356:	9401      	str	r4, [sp, #4]
	adc_config.clockSource = config->clock_src;
6000c358:	f88d 300c 	strb.w	r3, [sp, #12]
	adc_config.clockDriver = config->clock_drv;
6000c35c:	796b      	ldrb	r3, [r5, #5]
6000c35e:	f88d 300d 	strb.w	r3, [sp, #13]
	adc_config.samplePeriodMode = config->sample_period_mode;
6000c362:	79eb      	ldrb	r3, [r5, #7]
	adc_config.resolution = kADC_Resolution12Bit;
6000c364:	f88d 900e 	strb.w	r9, [sp, #14]
	adc_config.samplePeriodMode = config->sample_period_mode;
6000c368:	f88d 300b 	strb.w	r3, [sp, #11]
	adc_config.enableLongSample = false;
6000c36c:	f44f 7380 	mov.w	r3, #256	; 0x100
6000c370:	f8ad 3008 	strh.w	r3, [sp, #8]
	ADC_Init(base, &adc_config);
6000c374:	f002 fde0 	bl	6000ef38 <ADC_Init>
    {
        base->CFG |= ADC_CFG_ADTRG_MASK;
    }
    else
    {
        base->CFG &= ~ADC_CFG_ADTRG_MASK;
6000c378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
#if !(defined(FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE) && \
	FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE)
	ADC_EnableHardwareTrigger(base, false);
#endif

	if (kStatus_Success == ADC_DoAutoCalibration(base)) {
6000c37a:	4638      	mov	r0, r7
6000c37c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
6000c380:	647b      	str	r3, [r7, #68]	; 0x44
6000c382:	f00c fe50 	bl	60019026 <ADC_DoAutoCalibration>
6000c386:	b148      	cbz	r0, 6000c39c <mcux_12b1msps_sar_adc_init+0x8c>
		LOG_DBG("ADC_DoAutoCalibration() Done.");
	} else {
		LOG_WRN("ADC_DoAutoCalibration() Failed.");
6000c388:	4b0c      	ldr	r3, [pc, #48]	; (6000c3bc <mcux_12b1msps_sar_adc_init+0xac>)
6000c38a:	e9cd 9308 	strd	r9, r3, [sp, #32]
6000c38e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
6000c392:	4623      	mov	r3, r4
6000c394:	aa08      	add	r2, sp, #32
6000c396:	480a      	ldr	r0, [pc, #40]	; (6000c3c0 <mcux_12b1msps_sar_adc_init+0xb0>)
6000c398:	f7fc fb94 	bl	60008ac4 <z_impl_z_log_msg_static_create>
	}

	config->irq_config_func(dev);
6000c39c:	68ab      	ldr	r3, [r5, #8]
6000c39e:	4630      	mov	r0, r6
6000c3a0:	4798      	blx	r3
	data->dev = dev;
6000c3a2:	f8c8 6000 	str.w	r6, [r8]
	k_sem_give(&ctx->lock);
}

static inline void adc_context_unlock_unconditionally(struct adc_context *ctx)
{
	if (!k_sem_count_get(&ctx->lock)) {
6000c3a6:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
6000c3aa:	b91b      	cbnz	r3, 6000c3b4 <mcux_12b1msps_sar_adc_init+0xa4>
	z_impl_k_sem_give(sem);
6000c3ac:	f108 0048 	add.w	r0, r8, #72	; 0x48
6000c3b0:	f003 fffc 	bl	600103ac <z_impl_k_sem_give>

	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
}
6000c3b4:	4620      	mov	r0, r4
6000c3b6:	b00b      	add	sp, #44	; 0x2c
6000c3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
6000c3bc:	6001db6b 	.word	0x6001db6b
6000c3c0:	6001a39c 	.word	0x6001a39c

6000c3c4 <mcux_12b1msps_sar_adc_channel_setup>:
{
6000c3c4:	b590      	push	{r4, r7, lr}
6000c3c6:	b087      	sub	sp, #28
	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
6000c3c8:	884a      	ldrh	r2, [r1, #2]
{
6000c3ca:	af00      	add	r7, sp, #0
	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
6000c3cc:	b182      	cbz	r2, 6000c3f0 <mcux_12b1msps_sar_adc_channel_setup+0x2c>
		LOG_ERR("Unsupported channel acquisition time");
6000c3ce:	4b1c      	ldr	r3, [pc, #112]	; (6000c440 <mcux_12b1msps_sar_adc_channel_setup+0x7c>)
6000c3d0:	617b      	str	r3, [r7, #20]
6000c3d2:	2302      	movs	r3, #2
6000c3d4:	613b      	str	r3, [r7, #16]
6000c3d6:	2300      	movs	r3, #0
6000c3d8:	f107 0210 	add.w	r2, r7, #16
6000c3dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000c3e0:	4818      	ldr	r0, [pc, #96]	; (6000c444 <mcux_12b1msps_sar_adc_channel_setup+0x80>)
6000c3e2:	f7fc fb6f 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
6000c3e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
6000c3ea:	371c      	adds	r7, #28
6000c3ec:	46bd      	mov	sp, r7
6000c3ee:	bd90      	pop	{r4, r7, pc}
	if (channel_cfg->differential) {
6000c3f0:	7908      	ldrb	r0, [r1, #4]
6000c3f2:	f010 0320 	ands.w	r3, r0, #32
6000c3f6:	d005      	beq.n	6000c404 <mcux_12b1msps_sar_adc_channel_setup+0x40>
		LOG_ERR("Differential channels are not supported");
6000c3f8:	4b13      	ldr	r3, [pc, #76]	; (6000c448 <mcux_12b1msps_sar_adc_channel_setup+0x84>)
6000c3fa:	617b      	str	r3, [r7, #20]
6000c3fc:	2302      	movs	r3, #2
6000c3fe:	613b      	str	r3, [r7, #16]
6000c400:	4613      	mov	r3, r2
6000c402:	e7e9      	b.n	6000c3d8 <mcux_12b1msps_sar_adc_channel_setup+0x14>
	if (channel_cfg->gain != ADC_GAIN_1) {
6000c404:	7808      	ldrb	r0, [r1, #0]
6000c406:	2808      	cmp	r0, #8
6000c408:	d00f      	beq.n	6000c42a <mcux_12b1msps_sar_adc_channel_setup+0x66>
		LOG_ERR("Unsupported channel gain %d", channel_cfg->gain);
6000c40a:	466c      	mov	r4, sp
6000c40c:	b088      	sub	sp, #32
6000c40e:	466a      	mov	r2, sp
6000c410:	490e      	ldr	r1, [pc, #56]	; (6000c44c <mcux_12b1msps_sar_adc_channel_setup+0x88>)
6000c412:	e9c2 1005 	strd	r1, r0, [r2, #20]
6000c416:	2103      	movs	r1, #3
6000c418:	f842 1f10 	str.w	r1, [r2, #16]!
6000c41c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000c420:	4808      	ldr	r0, [pc, #32]	; (6000c444 <mcux_12b1msps_sar_adc_channel_setup+0x80>)
6000c422:	f7fc fb4f 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000c426:	46a5      	mov	sp, r4
		return -ENOTSUP;
6000c428:	e7dd      	b.n	6000c3e6 <mcux_12b1msps_sar_adc_channel_setup+0x22>
	if (channel_cfg->reference != ADC_REF_INTERNAL) {
6000c42a:	784a      	ldrb	r2, [r1, #1]
6000c42c:	2a04      	cmp	r2, #4
6000c42e:	d004      	beq.n	6000c43a <mcux_12b1msps_sar_adc_channel_setup+0x76>
		LOG_ERR("Unsupported channel reference");
6000c430:	4a07      	ldr	r2, [pc, #28]	; (6000c450 <mcux_12b1msps_sar_adc_channel_setup+0x8c>)
6000c432:	617a      	str	r2, [r7, #20]
6000c434:	2202      	movs	r2, #2
6000c436:	613a      	str	r2, [r7, #16]
6000c438:	e7ce      	b.n	6000c3d8 <mcux_12b1msps_sar_adc_channel_setup+0x14>
	return 0;
6000c43a:	4618      	mov	r0, r3
6000c43c:	e7d5      	b.n	6000c3ea <mcux_12b1msps_sar_adc_channel_setup+0x26>
6000c43e:	bf00      	nop
6000c440:	6001db8b 	.word	0x6001db8b
6000c444:	6001a39c 	.word	0x6001a39c
6000c448:	6001dbb0 	.word	0x6001dbb0
6000c44c:	6001dbd8 	.word	0x6001dbd8
6000c450:	6001dbf4 	.word	0x6001dbf4

6000c454 <mcux_12b1msps_sar_adc_read>:
{
6000c454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
6000c458:	b083      	sub	sp, #12
6000c45a:	4604      	mov	r4, r0
6000c45c:	460d      	mov	r5, r1
	k_sem_take(&ctx->lock, K_FOREVER);
6000c45e:	6903      	ldr	r3, [r0, #16]
6000c460:	af02      	add	r7, sp, #8
6000c462:	f103 0848 	add.w	r8, r3, #72	; 0x48
	return z_impl_k_sem_take(sem, timeout);
6000c466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000c46a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000c46e:	4640      	mov	r0, r8
6000c470:	f003 ffda 	bl	60010428 <z_impl_k_sem_take>
	switch (sequence->resolution) {
6000c474:	7c2b      	ldrb	r3, [r5, #16]
	const struct mcux_12b1msps_sar_adc_config *config = dev->config;
6000c476:	6860      	ldr	r0, [r4, #4]
	switch (sequence->resolution) {
6000c478:	2b0a      	cmp	r3, #10
	struct mcux_12b1msps_sar_adc_data *data = dev->data;
6000c47a:	6924      	ldr	r4, [r4, #16]
	ADC_Type *base = config->base;
6000c47c:	6801      	ldr	r1, [r0, #0]
	switch (sequence->resolution) {
6000c47e:	d01d      	beq.n	6000c4bc <mcux_12b1msps_sar_adc_read+0x68>
6000c480:	2b0c      	cmp	r3, #12
6000c482:	d02a      	beq.n	6000c4da <mcux_12b1msps_sar_adc_read+0x86>
6000c484:	2b08      	cmp	r3, #8
6000c486:	d02a      	beq.n	6000c4de <mcux_12b1msps_sar_adc_read+0x8a>
		LOG_ERR("Unsupported resolution %d", sequence->resolution);
6000c488:	466c      	mov	r4, sp
6000c48a:	b088      	sub	sp, #32
6000c48c:	aa02      	add	r2, sp, #8
6000c48e:	4940      	ldr	r1, [pc, #256]	; (6000c590 <mcux_12b1msps_sar_adc_read+0x13c>)
	switch (sequence->oversampling) {
6000c490:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unsupported oversampling value %d",
6000c494:	2303      	movs	r3, #3
6000c496:	f842 3f10 	str.w	r3, [r2, #16]!
6000c49a:	2300      	movs	r3, #0
6000c49c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000c4a0:	483c      	ldr	r0, [pc, #240]	; (6000c594 <mcux_12b1msps_sar_adc_read+0x140>)
6000c4a2:	f7fc fb0f 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000c4a6:	46a5      	mov	sp, r4
		return -ENOTSUP;
6000c4a8:	f06f 0485 	mvn.w	r4, #133	; 0x85
	z_impl_k_sem_give(sem);
6000c4ac:	4640      	mov	r0, r8
6000c4ae:	f003 ff7d 	bl	600103ac <z_impl_k_sem_give>
}
6000c4b2:	4620      	mov	r0, r4
6000c4b4:	3704      	adds	r7, #4
6000c4b6:	46bd      	mov	sp, r7
6000c4b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (sequence->resolution) {
6000c4bc:	2201      	movs	r2, #1
	tmp32 = base->CFG & ~(ADC_CFG_MODE_MASK);
6000c4be:	6c4b      	ldr	r3, [r1, #68]	; 0x44
6000c4c0:	f023 030c 	bic.w	r3, r3, #12
	tmp32 |= ADC_CFG_MODE(resolution);
6000c4c4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
	base->CFG = tmp32;
6000c4c8:	644b      	str	r3, [r1, #68]	; 0x44
	switch (sequence->oversampling) {
6000c4ca:	7c6b      	ldrb	r3, [r5, #17]
6000c4cc:	2b05      	cmp	r3, #5
6000c4ce:	d851      	bhi.n	6000c574 <mcux_12b1msps_sar_adc_read+0x120>
6000c4d0:	e8df f003 	tbb	[pc, r3]
6000c4d4:	07575055 	.word	0x07575055
6000c4d8:	4e4c      	.short	0x4e4c
		resolution = kADC_Resolution12Bit;
6000c4da:	2202      	movs	r2, #2
6000c4dc:	e7ef      	b.n	6000c4be <mcux_12b1msps_sar_adc_read+0x6a>
		resolution = kADC_Resolution8Bit;
6000c4de:	2200      	movs	r2, #0
6000c4e0:	e7ed      	b.n	6000c4be <mcux_12b1msps_sar_adc_read+0x6a>
		mode = kADC_HardwareAverageCount8;
6000c4e2:	2101      	movs	r1, #1
	ADC_SetHardwareAverageConfig(config->base, mode);
6000c4e4:	6800      	ldr	r0, [r0, #0]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
6000c4e6:	f104 066c 	add.w	r6, r4, #108	; 0x6c
6000c4ea:	f00c fdc6 	bl	6001907a <ADC_SetHardwareAverageConfig>
	data->buffer = sequence->buffer;
6000c4ee:	68ab      	ldr	r3, [r5, #8]
6000c4f0:	46ac      	mov	ip, r5
	adc_context_start_read(&data->ctx, sequence);
6000c4f2:	f104 0908 	add.w	r9, r4, #8
	data->buffer = sequence->buffer;
6000c4f6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
6000c4fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
6000c4fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
6000c500:	f8dc 3000 	ldr.w	r3, [ip]
6000c504:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
6000c506:	2600      	movs	r6, #0
6000c508:	66a6      	str	r6, [r4, #104]	; 0x68

	if (sequence->options) {
6000c50a:	682b      	ldr	r3, [r5, #0]
6000c50c:	2b00      	cmp	r3, #0
6000c50e:	d03a      	beq.n	6000c586 <mcux_12b1msps_sar_adc_read+0x132>
		ctx->options = *sequence->options;
6000c510:	f104 0580 	add.w	r5, r4, #128	; 0x80
6000c514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
6000c516:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
6000c51a:	66e5      	str	r5, [r4, #108]	; 0x6c
		ctx->sampling_index = 0U;
6000c51c:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90

		if (ctx->options.interval_us != 0U) {
6000c520:	b388      	cbz	r0, 6000c586 <mcux_12b1msps_sar_adc_read+0x132>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
6000c522:	f3bf 8f5b 	dmb	ish
6000c526:	e859 3f00 	ldrex	r3, [r9]
6000c52a:	e849 6200 	strex	r2, r6, [r9]
6000c52e:	2a00      	cmp	r2, #0
6000c530:	d1f9      	bne.n	6000c526 <mcux_12b1msps_sar_adc_read+0xd2>
6000c532:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
6000c536:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
6000c53a:	2264      	movs	r2, #100	; 0x64
6000c53c:	2300      	movs	r3, #0
		t += off;
6000c53e:	3063      	adds	r0, #99	; 0x63
6000c540:	f146 0100 	adc.w	r1, r6, #0
			return t / ((uint64_t)from_hz / to_hz);
6000c544:	f7f7 f8de 	bl	60003704 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
6000c548:	2200      	movs	r2, #0
6000c54a:	2300      	movs	r3, #0
6000c54c:	e9cd 0100 	strd	r0, r1, [sp]
6000c550:	f109 0008 	add.w	r0, r9, #8
6000c554:	f006 f8b0 	bl	600126b8 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
6000c558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000c55c:	f104 0058 	add.w	r0, r4, #88	; 0x58
6000c560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000c564:	f003 ff60 	bl	60010428 <z_impl_k_sem_take>
	return ctx->status;
6000c568:	6ea4      	ldr	r4, [r4, #104]	; 0x68
	return error;
6000c56a:	e79f      	b.n	6000c4ac <mcux_12b1msps_sar_adc_read+0x58>
		mode = kADC_HardwareAverageCount16;
6000c56c:	2102      	movs	r1, #2
		break;
6000c56e:	e7b9      	b.n	6000c4e4 <mcux_12b1msps_sar_adc_read+0x90>
		mode = kADC_HardwareAverageCount32;
6000c570:	2103      	movs	r1, #3
		break;
6000c572:	e7b7      	b.n	6000c4e4 <mcux_12b1msps_sar_adc_read+0x90>
		LOG_ERR("Unsupported oversampling value %d",
6000c574:	466c      	mov	r4, sp
6000c576:	b088      	sub	sp, #32
6000c578:	aa02      	add	r2, sp, #8
6000c57a:	4907      	ldr	r1, [pc, #28]	; (6000c598 <mcux_12b1msps_sar_adc_read+0x144>)
6000c57c:	e788      	b.n	6000c490 <mcux_12b1msps_sar_adc_read+0x3c>
		mode = kADC_HardwareAverageDiasable;
6000c57e:	2104      	movs	r1, #4
6000c580:	e7b0      	b.n	6000c4e4 <mcux_12b1msps_sar_adc_read+0x90>
	switch (sequence->oversampling) {
6000c582:	2100      	movs	r1, #0
6000c584:	e7ae      	b.n	6000c4e4 <mcux_12b1msps_sar_adc_read+0x90>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
6000c586:	4648      	mov	r0, r9
6000c588:	f00b ffb1 	bl	600184ee <adc_context_start_sampling>
6000c58c:	e7e4      	b.n	6000c558 <mcux_12b1msps_sar_adc_read+0x104>
6000c58e:	bf00      	nop
6000c590:	6001dc12 	.word	0x6001dc12
6000c594:	6001a39c 	.word	0x6001a39c
6000c598:	6001dc2c 	.word	0x6001dc2c

6000c59c <mcux_ccm_get_subsys_rate>:
#else
	uint32_t clock_name = (uint32_t) sub_system;
#endif
	uint32_t mux __unused;

	switch (clock_name) {
6000c59c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
{
6000c5a0:	b538      	push	{r3, r4, r5, lr}
6000c5a2:	4614      	mov	r4, r2
	switch (clock_name) {
6000c5a4:	d013      	beq.n	6000c5ce <mcux_ccm_get_subsys_rate+0x32>
6000c5a6:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
6000c5aa:	d03f      	beq.n	6000c62c <mcux_ccm_get_subsys_rate+0x90>
6000c5ac:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
6000c5b0:	d12b      	bne.n	6000c60a <mcux_ccm_get_subsys_rate+0x6e>
    return (((uint32_t)(CCM_TUPLE_REG(CCM, mux) & CCM_TUPLE_MASK(mux))) >> CCM_TUPLE_SHIFT(mux));
6000c5b2:	4d20      	ldr	r5, [pc, #128]	; (6000c634 <mcux_ccm_get_subsys_rate+0x98>)
6000c5b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24

	} break;

#else
	case IMX_CCM_LPUART_CLK:
		if (CLOCK_GetMux(kCLOCK_UartMux) == 0) {
6000c5b6:	065a      	lsls	r2, r3, #25
6000c5b8:	d42b      	bmi.n	6000c612 <mcux_ccm_get_subsys_rate+0x76>
			*rate = CLOCK_GetPllFreq(kCLOCK_PllUsb1) / 6
6000c5ba:	481f      	ldr	r0, [pc, #124]	; (6000c638 <mcux_ccm_get_subsys_rate+0x9c>)
6000c5bc:	f001 f950 	bl	6000d860 <CLOCK_GetPllFreq>
    return ((uint32_t)(CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
6000c5c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
6000c5c2:	2206      	movs	r2, #6
6000c5c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
6000c5c8:	fbb0 f0f2 	udiv	r0, r0, r2
6000c5cc:	e00a      	b.n	6000c5e4 <mcux_ccm_get_subsys_rate+0x48>
    return (((uint32_t)(CCM_TUPLE_REG(CCM, mux) & CCM_TUPLE_MASK(mux))) >> CCM_TUPLE_SHIFT(mux));
6000c5ce:	4d19      	ldr	r5, [pc, #100]	; (6000c634 <mcux_ccm_get_subsys_rate+0x98>)
6000c5d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
		if (CLOCK_GetMux(kCLOCK_Lpi2cMux) == 0) {
6000c5d2:	0358      	lsls	r0, r3, #13
6000c5d4:	d40b      	bmi.n	6000c5ee <mcux_ccm_get_subsys_rate+0x52>
			*rate = CLOCK_GetPllFreq(kCLOCK_PllUsb1) / 8
6000c5d6:	4818      	ldr	r0, [pc, #96]	; (6000c638 <mcux_ccm_get_subsys_rate+0x9c>)
6000c5d8:	f001 f942 	bl	6000d860 <CLOCK_GetPllFreq>
    return ((uint32_t)(CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
6000c5dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
6000c5de:	08c0      	lsrs	r0, r0, #3
6000c5e0:	f3c3 43c5 	ubfx	r3, r3, #19, #6
				/ (CLOCK_GetDiv(kCLOCK_UartDiv) + 1);
6000c5e4:	3301      	adds	r3, #1
6000c5e6:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
#endif

#ifdef CONFIG_PWM_MCUX
	case IMX_CCM_PWM_CLK:
		*rate = CLOCK_GetIpgFreq();
6000c5ea:	6020      	str	r0, [r4, #0]
		break;
6000c5ec:	e00d      	b.n	6000c60a <mcux_ccm_get_subsys_rate+0x6e>
    return ((XTALOSC24M->LOWPWR_CTRL & XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK) != 0UL) ? 24000000UL : g_xtalFreq;
6000c5ee:	4b13      	ldr	r3, [pc, #76]	; (6000c63c <mcux_ccm_get_subsys_rate+0xa0>)
6000c5f0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
6000c5f4:	06d9      	lsls	r1, r3, #27
6000c5f6:	d40a      	bmi.n	6000c60e <mcux_ccm_get_subsys_rate+0x72>
6000c5f8:	4b11      	ldr	r3, [pc, #68]	; (6000c640 <mcux_ccm_get_subsys_rate+0xa4>)
6000c5fa:	681a      	ldr	r2, [r3, #0]
    return ((uint32_t)(CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
6000c5fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
6000c5fe:	f3c3 43c5 	ubfx	r3, r3, #19, #6
				/ (CLOCK_GetDiv(kCLOCK_UartDiv) + 1);
6000c602:	3301      	adds	r3, #1
6000c604:	fbb2 f2f3 	udiv	r2, r2, r3
			*rate = CLOCK_GetOscFreq()
6000c608:	6022      	str	r2, [r4, #0]
		break;
#endif
	}

	return 0;
}
6000c60a:	2000      	movs	r0, #0
6000c60c:	bd38      	pop	{r3, r4, r5, pc}
    return ((XTALOSC24M->LOWPWR_CTRL & XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK) != 0UL) ? 24000000UL : g_xtalFreq;
6000c60e:	4a0d      	ldr	r2, [pc, #52]	; (6000c644 <mcux_ccm_get_subsys_rate+0xa8>)
6000c610:	e7f4      	b.n	6000c5fc <mcux_ccm_get_subsys_rate+0x60>
6000c612:	4b0a      	ldr	r3, [pc, #40]	; (6000c63c <mcux_ccm_get_subsys_rate+0xa0>)
6000c614:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
6000c618:	06db      	lsls	r3, r3, #27
6000c61a:	d405      	bmi.n	6000c628 <mcux_ccm_get_subsys_rate+0x8c>
6000c61c:	4b08      	ldr	r3, [pc, #32]	; (6000c640 <mcux_ccm_get_subsys_rate+0xa4>)
6000c61e:	681a      	ldr	r2, [r3, #0]
    return ((uint32_t)(CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
6000c620:	6a6b      	ldr	r3, [r5, #36]	; 0x24
6000c622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
6000c626:	e7ec      	b.n	6000c602 <mcux_ccm_get_subsys_rate+0x66>
    return ((XTALOSC24M->LOWPWR_CTRL & XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK) != 0UL) ? 24000000UL : g_xtalFreq;
6000c628:	4a06      	ldr	r2, [pc, #24]	; (6000c644 <mcux_ccm_get_subsys_rate+0xa8>)
6000c62a:	e7f9      	b.n	6000c620 <mcux_ccm_get_subsys_rate+0x84>
		*rate = CLOCK_GetIpgFreq();
6000c62c:	f001 fa9e 	bl	6000db6c <CLOCK_GetIpgFreq>
6000c630:	e7db      	b.n	6000c5ea <mcux_ccm_get_subsys_rate+0x4e>
6000c632:	bf00      	nop
6000c634:	400fc000 	.word	0x400fc000
6000c638:	0010000d 	.word	0x0010000d
6000c63c:	400d8000 	.word	0x400d8000
6000c640:	20204cd4 	.word	0x20204cd4
6000c644:	016e3600 	.word	0x016e3600

6000c648 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
6000c648:	b508      	push	{r3, lr}
6000c64a:	4807      	ldr	r0, [pc, #28]	; (6000c668 <uart_console_init+0x20>)
6000c64c:	f00d f911 	bl	60019872 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
6000c650:	b138      	cbz	r0, 6000c662 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
6000c652:	4806      	ldr	r0, [pc, #24]	; (6000c66c <uart_console_init+0x24>)
6000c654:	f7fe ff8a 	bl	6000b56c <__stdout_hook_install>
	__printk_hook_install(console_out);
6000c658:	4804      	ldr	r0, [pc, #16]	; (6000c66c <uart_console_init+0x24>)
6000c65a:	f7fa fb17 	bl	60006c8c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
6000c65e:	2000      	movs	r0, #0
}
6000c660:	bd08      	pop	{r3, pc}
		return -ENODEV;
6000c662:	f06f 0012 	mvn.w	r0, #18
6000c666:	e7fb      	b.n	6000c660 <uart_console_init+0x18>
6000c668:	60019b6c 	.word	0x60019b6c
6000c66c:	6000c671 	.word	0x6000c671

6000c670 <console_out>:
	if ('\n' == c) {
6000c670:	280a      	cmp	r0, #10
{
6000c672:	b538      	push	{r3, r4, r5, lr}
6000c674:	4604      	mov	r4, r0
6000c676:	4d07      	ldr	r5, [pc, #28]	; (6000c694 <console_out+0x24>)
	if ('\n' == c) {
6000c678:	d104      	bne.n	6000c684 <console_out+0x14>
6000c67a:	68ab      	ldr	r3, [r5, #8]
6000c67c:	210d      	movs	r1, #13
6000c67e:	4628      	mov	r0, r5
6000c680:	685b      	ldr	r3, [r3, #4]
6000c682:	4798      	blx	r3
6000c684:	68ab      	ldr	r3, [r5, #8]
6000c686:	b2e1      	uxtb	r1, r4
6000c688:	4802      	ldr	r0, [pc, #8]	; (6000c694 <console_out+0x24>)
6000c68a:	685b      	ldr	r3, [r3, #4]
6000c68c:	4798      	blx	r3
}
6000c68e:	4620      	mov	r0, r4
6000c690:	bd38      	pop	{r3, r4, r5, pc}
6000c692:	bf00      	nop
6000c694:	60019b6c 	.word	0x60019b6c

6000c698 <mcux_igpio_manage_callback>:
}

static int mcux_igpio_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
6000c698:	b510      	push	{r4, lr}
	struct mcux_igpio_data *data = dev->data;
6000c69a:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
6000c69c:	b961      	cbnz	r1, 6000c6b8 <mcux_igpio_manage_callback+0x20>
6000c69e:	4920      	ldr	r1, [pc, #128]	; (6000c720 <mcux_igpio_manage_callback+0x88>)
6000c6a0:	232a      	movs	r3, #42	; 0x2a
6000c6a2:	4a20      	ldr	r2, [pc, #128]	; (6000c724 <mcux_igpio_manage_callback+0x8c>)
6000c6a4:	4820      	ldr	r0, [pc, #128]	; (6000c728 <mcux_igpio_manage_callback+0x90>)
6000c6a6:	f00b fc2c 	bl	60017f02 <assert_print>
6000c6aa:	4820      	ldr	r0, [pc, #128]	; (6000c72c <mcux_igpio_manage_callback+0x94>)
6000c6ac:	f00b fc29 	bl	60017f02 <assert_print>
6000c6b0:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
6000c6b2:	481c      	ldr	r0, [pc, #112]	; (6000c724 <mcux_igpio_manage_callback+0x8c>)
6000c6b4:	f00b fc1e 	bl	60017ef4 <assert_post_action>
6000c6b8:	6848      	ldr	r0, [r1, #4]
6000c6ba:	b950      	cbnz	r0, 6000c6d2 <mcux_igpio_manage_callback+0x3a>
6000c6bc:	491c      	ldr	r1, [pc, #112]	; (6000c730 <mcux_igpio_manage_callback+0x98>)
6000c6be:	232b      	movs	r3, #43	; 0x2b
6000c6c0:	4a18      	ldr	r2, [pc, #96]	; (6000c724 <mcux_igpio_manage_callback+0x8c>)
6000c6c2:	4819      	ldr	r0, [pc, #100]	; (6000c728 <mcux_igpio_manage_callback+0x90>)
6000c6c4:	f00b fc1d 	bl	60017f02 <assert_print>
6000c6c8:	481a      	ldr	r0, [pc, #104]	; (6000c734 <mcux_igpio_manage_callback+0x9c>)
6000c6ca:	f00b fc1a 	bl	60017f02 <assert_print>
6000c6ce:	212b      	movs	r1, #43	; 0x2b
6000c6d0:	e7ef      	b.n	6000c6b2 <mcux_igpio_manage_callback+0x1a>
	return list->head;
6000c6d2:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
6000c6d4:	b1f8      	cbz	r0, 6000c716 <mcux_igpio_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
6000c6d6:	4288      	cmp	r0, r1
6000c6d8:	d119      	bne.n	6000c70e <mcux_igpio_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
6000c6da:	689c      	ldr	r4, [r3, #8]
	return node->next;
6000c6dc:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
6000c6de:	42a1      	cmp	r1, r4
	list->head = node;
6000c6e0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
6000c6e2:	d100      	bne.n	6000c6e6 <mcux_igpio_manage_callback+0x4e>
	list->tail = node;
6000c6e4:	6098      	str	r0, [r3, #8]
	parent->next = child;
6000c6e6:	2000      	movs	r0, #0
6000c6e8:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
6000c6ea:	b12a      	cbz	r2, 6000c6f8 <mcux_igpio_manage_callback+0x60>
	return list->head;
6000c6ec:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
6000c6ee:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
6000c6f0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
6000c6f2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
6000c6f4:	b902      	cbnz	r2, 6000c6f8 <mcux_igpio_manage_callback+0x60>
	list->tail = node;
6000c6f6:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
6000c6f8:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->callbacks, callback, set);
6000c6fa:	e010      	b.n	6000c71e <mcux_igpio_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
6000c6fc:	4281      	cmp	r1, r0
6000c6fe:	d106      	bne.n	6000c70e <mcux_igpio_manage_callback+0x76>
	return node->next;
6000c700:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
6000c702:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
6000c704:	6898      	ldr	r0, [r3, #8]
6000c706:	4281      	cmp	r1, r0
6000c708:	d1ed      	bne.n	6000c6e6 <mcux_igpio_manage_callback+0x4e>
	list->tail = node;
6000c70a:	609c      	str	r4, [r3, #8]
}
6000c70c:	e7eb      	b.n	6000c6e6 <mcux_igpio_manage_callback+0x4e>
	return node->next;
6000c70e:	4604      	mov	r4, r0
6000c710:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
6000c712:	2800      	cmp	r0, #0
6000c714:	d1f2      	bne.n	6000c6fc <mcux_igpio_manage_callback+0x64>
			if (!set) {
6000c716:	2a00      	cmp	r2, #0
6000c718:	d1e8      	bne.n	6000c6ec <mcux_igpio_manage_callback+0x54>
				return -EINVAL;
6000c71a:	f06f 0015 	mvn.w	r0, #21
}
6000c71e:	bd10      	pop	{r4, pc}
6000c720:	6001dcc8 	.word	0x6001dcc8
6000c724:	6001dc8c 	.word	0x6001dc8c
6000c728:	6001c3d7 	.word	0x6001c3d7
6000c72c:	6001dcd1 	.word	0x6001dcd1
6000c730:	6001dce0 	.word	0x6001dce0
6000c734:	6001dcf2 	.word	0x6001dcf2

6000c738 <mcux_igpio_port_isr>:

static void mcux_igpio_port_isr(const struct device *dev)
{
6000c738:	b570      	push	{r4, r5, r6, lr}
	const struct mcux_igpio_config *config = dev->config;
	struct mcux_igpio_data *data = dev->data;
	GPIO_Type *base = config->base;
6000c73a:	6843      	ldr	r3, [r0, #4]
{
6000c73c:	4605      	mov	r5, r0
	struct mcux_igpio_data *data = dev->data;
6000c73e:	6902      	ldr	r2, [r0, #16]
	GPIO_Type *base = config->base;
6000c740:	685b      	ldr	r3, [r3, #4]
	uint32_t int_flags;

	int_flags = base->ISR;
6000c742:	699e      	ldr	r6, [r3, #24]
	base->ISR = int_flags;
6000c744:	619e      	str	r6, [r3, #24]

	gpio_fire_callbacks(&data->callbacks, dev, int_flags);
6000c746:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
6000c748:	b109      	cbz	r1, 6000c74e <mcux_igpio_port_isr+0x16>
	return node->next;
6000c74a:	680c      	ldr	r4, [r1, #0]
6000c74c:	b901      	cbnz	r1, 6000c750 <mcux_igpio_port_isr+0x18>
}
6000c74e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
6000c750:	688a      	ldr	r2, [r1, #8]
6000c752:	4032      	ands	r2, r6
6000c754:	d010      	beq.n	6000c778 <mcux_igpio_port_isr+0x40>
			__ASSERT(cb->handler, "No callback handler!");
6000c756:	684b      	ldr	r3, [r1, #4]
6000c758:	b963      	cbnz	r3, 6000c774 <mcux_igpio_port_isr+0x3c>
6000c75a:	490b      	ldr	r1, [pc, #44]	; (6000c788 <mcux_igpio_port_isr+0x50>)
6000c75c:	234d      	movs	r3, #77	; 0x4d
6000c75e:	4a0b      	ldr	r2, [pc, #44]	; (6000c78c <mcux_igpio_port_isr+0x54>)
6000c760:	480b      	ldr	r0, [pc, #44]	; (6000c790 <mcux_igpio_port_isr+0x58>)
6000c762:	f00b fbce 	bl	60017f02 <assert_print>
6000c766:	480b      	ldr	r0, [pc, #44]	; (6000c794 <mcux_igpio_port_isr+0x5c>)
6000c768:	f00b fbcb 	bl	60017f02 <assert_print>
6000c76c:	214d      	movs	r1, #77	; 0x4d
6000c76e:	4807      	ldr	r0, [pc, #28]	; (6000c78c <mcux_igpio_port_isr+0x54>)
6000c770:	f00b fbc0 	bl	60017ef4 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
6000c774:	4628      	mov	r0, r5
6000c776:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
6000c778:	b11c      	cbz	r4, 6000c782 <mcux_igpio_port_isr+0x4a>
6000c77a:	6823      	ldr	r3, [r4, #0]
6000c77c:	4621      	mov	r1, r4
6000c77e:	461c      	mov	r4, r3
6000c780:	e7e4      	b.n	6000c74c <mcux_igpio_port_isr+0x14>
6000c782:	4623      	mov	r3, r4
6000c784:	e7fa      	b.n	6000c77c <mcux_igpio_port_isr+0x44>
6000c786:	bf00      	nop
6000c788:	6001dd09 	.word	0x6001dd09
6000c78c:	6001dc8c 	.word	0x6001dc8c
6000c790:	6001c3d7 	.word	0x6001c3d7
6000c794:	6001dcf2 	.word	0x6001dcf2

6000c798 <mcux_lpi2c_transfer>:
	return flags;
}

static int mcux_lpi2c_transfer(const struct device *dev, struct i2c_msg *msgs,
			       uint8_t num_msgs, uint16_t addr)
{
6000c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000c79c:	b089      	sub	sp, #36	; 0x24
	const struct mcux_lpi2c_config *config = dev->config;
6000c79e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct mcux_lpi2c_data *data = dev->data;
6000c7a2:	f8d0 b010 	ldr.w	fp, [r0, #16]
{
6000c7a6:	460c      	mov	r4, r1
	LPI2C_Type *base = config->base;
6000c7a8:	f8d9 6000 	ldr.w	r6, [r9]
	lpi2c_master_transfer_t transfer;
	status_t status;
	int ret = 0;

	ret = k_sem_take(&data->lock, K_FOREVER);
6000c7ac:	f10b 0834 	add.w	r8, fp, #52	; 0x34
{
6000c7b0:	e9cd 2300 	strd	r2, r3, [sp]
6000c7b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000c7b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000c7bc:	4640      	mov	r0, r8
6000c7be:	f003 fe33 	bl	60010428 <z_impl_k_sem_take>
	if (ret) {
6000c7c2:	4605      	mov	r5, r0
6000c7c4:	bb88      	cbnz	r0, 6000c82a <mcux_lpi2c_transfer+0x92>
6000c7c6:	340c      	adds	r4, #12
		return ret;
	}

	/* Iterate over all the messages */
	for (int i = 0; i < num_msgs; i++) {
6000c7c8:	4607      	mov	r7, r0
		}

		transfer.slaveAddress = addr;
		transfer.direction = (msgs->flags & I2C_MSG_READ)
			? kLPI2C_Read : kLPI2C_Write;
		transfer.subaddress = 0;
6000c7ca:	4682      	mov	sl, r0
	for (int i = 0; i < num_msgs; i++) {
6000c7cc:	9b00      	ldr	r3, [sp, #0]
6000c7ce:	42bb      	cmp	r3, r7
6000c7d0:	dd28      	ble.n	6000c824 <mcux_lpi2c_transfer+0x8c>
		if (I2C_MSG_ADDR_10_BITS & msgs->flags) {
6000c7d2:	f814 2c04 	ldrb.w	r2, [r4, #-4]
6000c7d6:	0710      	lsls	r0, r2, #28
6000c7d8:	d44d      	bmi.n	6000c876 <mcux_lpi2c_transfer+0xde>
	if (!(msg_flags & I2C_MSG_STOP)) {
6000c7da:	f082 0302 	eor.w	r3, r2, #2
	if (msg_flags & I2C_MSG_RESTART) {
6000c7de:	0751      	lsls	r1, r2, #29
	if (!(msg_flags & I2C_MSG_STOP)) {
6000c7e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
6000c7e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
	if (msg_flags & I2C_MSG_RESTART) {
6000c7e8:	d423      	bmi.n	6000c832 <mcux_lpi2c_transfer+0x9a>
		if (i != 0 && !(msgs->flags & I2C_MSG_RESTART)) {
6000c7ea:	bb2f      	cbnz	r7, 6000c838 <mcux_lpi2c_transfer+0xa0>
		transfer.flags = mcux_lpi2c_convert_flags(msgs->flags);
6000c7ec:	9302      	str	r3, [sp, #8]
			? kLPI2C_Read : kLPI2C_Write;
6000c7ee:	f002 0201 	and.w	r2, r2, #1
		transfer.slaveAddress = addr;
6000c7f2:	9b01      	ldr	r3, [sp, #4]
		transfer.subaddressSize = 0;
		transfer.data = msgs->buf;
		transfer.dataSize = msgs->len;

		/* Start the transfer */
		status = LPI2C_MasterTransferNonBlocking(base,
6000c7f4:	4659      	mov	r1, fp
		transfer.direction = (msgs->flags & I2C_MSG_READ)
6000c7f6:	f88d 200e 	strb.w	r2, [sp, #14]
		status = LPI2C_MasterTransferNonBlocking(base,
6000c7fa:	4630      	mov	r0, r6
		transfer.slaveAddress = addr;
6000c7fc:	f8ad 300c 	strh.w	r3, [sp, #12]
		status = LPI2C_MasterTransferNonBlocking(base,
6000c800:	aa02      	add	r2, sp, #8
		transfer.data = msgs->buf;
6000c802:	f854 3c0c 	ldr.w	r3, [r4, #-12]
6000c806:	9306      	str	r3, [sp, #24]
		transfer.dataSize = msgs->len;
6000c808:	f854 3c08 	ldr.w	r3, [r4, #-8]
		transfer.subaddressSize = 0;
6000c80c:	e9cd aa04 	strd	sl, sl, [sp, #16]
		transfer.dataSize = msgs->len;
6000c810:	9307      	str	r3, [sp, #28]
		status = LPI2C_MasterTransferNonBlocking(base,
6000c812:	f001 fb85 	bl	6000df20 <LPI2C_MasterTransferNonBlocking>
				&data->handle, &transfer);

		/* Return an error if the transfer didn't start successfully
		 * e.g., if the bus was busy
		 */
		if (status != kStatus_Success) {
6000c816:	b190      	cbz	r0, 6000c83e <mcux_lpi2c_transfer+0xa6>
			LPI2C_MasterTransferAbort(base, &data->handle);
			ret = -EIO;
6000c818:	f06f 0504 	mvn.w	r5, #4
			break;
		}
		if (msgs->len == 0) {
			k_busy_wait(SCAN_DELAY_US(config->bitrate));
			if (0 != (base->MSR & LPI2C_MSR_NDF_MASK)) {
				LPI2C_MasterTransferAbort(base, &data->handle);
6000c81c:	4659      	mov	r1, fp
6000c81e:	4630      	mov	r0, r6
6000c820:	f001 fc16 	bl	6000e050 <LPI2C_MasterTransferAbort>
	z_impl_k_sem_give(sem);
6000c824:	4640      	mov	r0, r8
6000c826:	f003 fdc1 	bl	600103ac <z_impl_k_sem_give>
	}

	k_sem_give(&data->lock);

	return ret;
}
6000c82a:	4628      	mov	r0, r5
6000c82c:	b009      	add	sp, #36	; 0x24
6000c82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		flags |= kLPI2C_TransferRepeatedStartFlag;
6000c832:	f043 0302 	orr.w	r3, r3, #2
		if (i != 0 && !(msgs->flags & I2C_MSG_RESTART)) {
6000c836:	e7d9      	b.n	6000c7ec <mcux_lpi2c_transfer+0x54>
			transfer.flags |= kLPI2C_TransferNoStartFlag;
6000c838:	f043 0301 	orr.w	r3, r3, #1
6000c83c:	e7d6      	b.n	6000c7ec <mcux_lpi2c_transfer+0x54>
	return z_impl_k_sem_take(sem, timeout);
6000c83e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000c842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000c846:	f10b 0044 	add.w	r0, fp, #68	; 0x44
6000c84a:	f003 fded 	bl	60010428 <z_impl_k_sem_take>
		if (data->callback_status != kStatus_Success) {
6000c84e:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
6000c852:	2b00      	cmp	r3, #0
6000c854:	d1e0      	bne.n	6000c818 <mcux_lpi2c_transfer+0x80>
		if (msgs->len == 0) {
6000c856:	f854 3c08 	ldr.w	r3, [r4, #-8]
6000c85a:	b94b      	cbnz	r3, 6000c870 <mcux_lpi2c_transfer+0xd8>
			k_busy_wait(SCAN_DELAY_US(config->bitrate));
6000c85c:	f8d9 0010 	ldr.w	r0, [r9, #16]
6000c860:	4b06      	ldr	r3, [pc, #24]	; (6000c87c <mcux_lpi2c_transfer+0xe4>)
6000c862:	fbb3 f0f0 	udiv	r0, r3, r0
	z_impl_k_busy_wait(usec_to_wait);
6000c866:	f005 fe5d 	bl	60012524 <z_impl_k_busy_wait>
			if (0 != (base->MSR & LPI2C_MSR_NDF_MASK)) {
6000c86a:	6973      	ldr	r3, [r6, #20]
6000c86c:	055b      	lsls	r3, r3, #21
6000c86e:	d4d3      	bmi.n	6000c818 <mcux_lpi2c_transfer+0x80>
	for (int i = 0; i < num_msgs; i++) {
6000c870:	3701      	adds	r7, #1
6000c872:	340c      	adds	r4, #12
6000c874:	e7aa      	b.n	6000c7cc <mcux_lpi2c_transfer+0x34>
			ret = -ENOTSUP;
6000c876:	f06f 0585 	mvn.w	r5, #133	; 0x85
6000c87a:	e7d3      	b.n	6000c824 <mcux_lpi2c_transfer+0x8c>
6000c87c:	00b71b00 	.word	0x00b71b00

6000c880 <mcux_lpi2c_configure>:
{
6000c880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct mcux_lpi2c_config *config = dev->config;
6000c882:	6843      	ldr	r3, [r0, #4]
	struct mcux_lpi2c_data *data = dev->data;
6000c884:	6905      	ldr	r5, [r0, #16]
	if (!(I2C_MODE_CONTROLLER & dev_config_raw)) {
6000c886:	06c8      	lsls	r0, r1, #27
	LPI2C_Type *base = config->base;
6000c888:	681e      	ldr	r6, [r3, #0]
	if (!(I2C_MODE_CONTROLLER & dev_config_raw)) {
6000c88a:	d404      	bmi.n	6000c896 <mcux_lpi2c_configure+0x16>
		return -EINVAL;
6000c88c:	f06f 0415 	mvn.w	r4, #21
}
6000c890:	4620      	mov	r0, r4
6000c892:	b003      	add	sp, #12
6000c894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (I2C_ADDR_10_BITS & dev_config_raw) {
6000c896:	07ca      	lsls	r2, r1, #31
6000c898:	d4f8      	bmi.n	6000c88c <mcux_lpi2c_configure+0xc>
	switch (I2C_SPEED_GET(dev_config_raw)) {
6000c89a:	f3c1 0142 	ubfx	r1, r1, #1, #3
6000c89e:	3901      	subs	r1, #1
6000c8a0:	2902      	cmp	r1, #2
6000c8a2:	d8f3      	bhi.n	6000c88c <mcux_lpi2c_configure+0xc>
6000c8a4:	4a10      	ldr	r2, [pc, #64]	; (6000c8e8 <mcux_lpi2c_configure+0x68>)
6000c8a6:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000c8aa:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
6000c8ae:	6883      	ldr	r3, [r0, #8]
6000c8b0:	68db      	ldr	r3, [r3, #12]
6000c8b2:	2b00      	cmp	r3, #0
6000c8b4:	d0ea      	beq.n	6000c88c <mcux_lpi2c_configure+0xc>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
6000c8b6:	aa01      	add	r2, sp, #4
6000c8b8:	4798      	blx	r3
6000c8ba:	2800      	cmp	r0, #0
6000c8bc:	d1e6      	bne.n	6000c88c <mcux_lpi2c_configure+0xc>
	ret = k_sem_take(&data->lock, K_FOREVER);
6000c8be:	3534      	adds	r5, #52	; 0x34
	return z_impl_k_sem_take(sem, timeout);
6000c8c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000c8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000c8c8:	4628      	mov	r0, r5
6000c8ca:	f003 fdad 	bl	60010428 <z_impl_k_sem_take>
	if (ret) {
6000c8ce:	4604      	mov	r4, r0
6000c8d0:	2800      	cmp	r0, #0
6000c8d2:	d1dd      	bne.n	6000c890 <mcux_lpi2c_configure+0x10>
	LPI2C_MasterSetBaudRate(base, clock_freq, baudrate);
6000c8d4:	463a      	mov	r2, r7
6000c8d6:	9901      	ldr	r1, [sp, #4]
6000c8d8:	4630      	mov	r0, r6
6000c8da:	f00c fac6 	bl	60018e6a <LPI2C_MasterSetBaudRate>
	z_impl_k_sem_give(sem);
6000c8de:	4628      	mov	r0, r5
6000c8e0:	f003 fd64 	bl	600103ac <z_impl_k_sem_give>
}
6000c8e4:	e7d4      	b.n	6000c890 <mcux_lpi2c_configure+0x10>
6000c8e6:	bf00      	nop
6000c8e8:	6001bb80 	.word	0x6001bb80

6000c8ec <mcux_lpi2c_init>:

	LPI2C_MasterTransferHandleIRQ(base, &data->handle);
}

static int mcux_lpi2c_init(const struct device *dev)
{
6000c8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct mcux_lpi2c_config *config = dev->config;
6000c8ee:	6845      	ldr	r5, [r0, #4]
{
6000c8f0:	b091      	sub	sp, #68	; 0x44
6000c8f2:	4606      	mov	r6, r0
	struct mcux_lpi2c_data *data = dev->data;
6000c8f4:	6904      	ldr	r4, [r0, #16]
	LPI2C_Type *base = config->base;
6000c8f6:	682f      	ldr	r7, [r5, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
6000c8f8:	2201      	movs	r2, #1
6000c8fa:	f104 0034 	add.w	r0, r4, #52	; 0x34
6000c8fe:	4611      	mov	r1, r2
6000c900:	f00c fffd 	bl	600198fe <z_impl_k_sem_init>
6000c904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6000c908:	2100      	movs	r1, #0
6000c90a:	f104 0044 	add.w	r0, r4, #68	; 0x44
6000c90e:	f00c fff6 	bl	600198fe <z_impl_k_sem_init>
	int error;

	k_sem_init(&data->lock, 1, 1);
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);

	if (!device_is_ready(config->clock_dev)) {
6000c912:	6868      	ldr	r0, [r5, #4]
6000c914:	f00c ffad 	bl	60019872 <z_device_is_ready>
6000c918:	4603      	mov	r3, r0
6000c91a:	b970      	cbnz	r0, 6000c93a <mcux_lpi2c_init+0x4e>
		LOG_ERR("clock control device not ready");
6000c91c:	4a38      	ldr	r2, [pc, #224]	; (6000ca00 <mcux_lpi2c_init+0x114>)
6000c91e:	920d      	str	r2, [sp, #52]	; 0x34
6000c920:	2202      	movs	r2, #2
6000c922:	920c      	str	r2, [sp, #48]	; 0x30
		return -ENODEV;
6000c924:	f06f 0412 	mvn.w	r4, #18
6000c928:	aa0c      	add	r2, sp, #48	; 0x30
6000c92a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000c92e:	4835      	ldr	r0, [pc, #212]	; (6000ca04 <mcux_lpi2c_init+0x118>)
6000c930:	f7fc f8c8 	bl	60008ac4 <z_impl_z_log_msg_static_create>
#endif /* CONFIG_PINCTRL */

	config->irq_config_func(dev);

	return 0;
}
6000c934:	4620      	mov	r0, r4
6000c936:	b011      	add	sp, #68	; 0x44
6000c938:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000c93a:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
	if (api->get_rate == NULL) {
6000c93e:	6883      	ldr	r3, [r0, #8]
6000c940:	68db      	ldr	r3, [r3, #12]
6000c942:	b913      	cbnz	r3, 6000c94a <mcux_lpi2c_init+0x5e>
		return -EINVAL;
6000c944:	f06f 0415 	mvn.w	r4, #21
6000c948:	e7f4      	b.n	6000c934 <mcux_lpi2c_init+0x48>
	return api->get_rate(dev, sys, rate);
6000c94a:	aa01      	add	r2, sp, #4
6000c94c:	4798      	blx	r3
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000c94e:	2800      	cmp	r0, #0
6000c950:	d1f8      	bne.n	6000c944 <mcux_lpi2c_init+0x58>
	LPI2C_MasterGetDefaultConfig(&master_config);
6000c952:	a808      	add	r0, sp, #32
6000c954:	f001 fa0e 	bl	6000dd74 <LPI2C_MasterGetDefaultConfig>
	master_config.busIdleTimeout_ns = config->bus_idle_timeout_ns;
6000c958:	696b      	ldr	r3, [r5, #20]
	LPI2C_MasterInit(base, &master_config, clock_freq);
6000c95a:	9a01      	ldr	r2, [sp, #4]
6000c95c:	a908      	add	r1, sp, #32
6000c95e:	4638      	mov	r0, r7
	master_config.busIdleTimeout_ns = config->bus_idle_timeout_ns;
6000c960:	930b      	str	r3, [sp, #44]	; 0x2c
	LPI2C_MasterInit(base, &master_config, clock_freq);
6000c962:	f001 fa1b 	bl	6000dd9c <LPI2C_MasterInit>
	LPI2C_MasterTransferCreateHandle(base, &data->handle,
6000c966:	4623      	mov	r3, r4
6000c968:	4a27      	ldr	r2, [pc, #156]	; (6000ca08 <mcux_lpi2c_init+0x11c>)
6000c96a:	4621      	mov	r1, r4
6000c96c:	4638      	mov	r0, r7
6000c96e:	f001 fa9b 	bl	6000dea8 <LPI2C_MasterTransferCreateHandle>
	bitrate_cfg = i2c_map_dt_bitrate(config->bitrate);
6000c972:	692b      	ldr	r3, [r5, #16]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
6000c974:	4a25      	ldr	r2, [pc, #148]	; (6000ca0c <mcux_lpi2c_init+0x120>)
6000c976:	4293      	cmp	r3, r2
6000c978:	d039      	beq.n	6000c9ee <mcux_lpi2c_init+0x102>
6000c97a:	d82d      	bhi.n	6000c9d8 <mcux_lpi2c_init+0xec>
6000c97c:	4a24      	ldr	r2, [pc, #144]	; (6000ca10 <mcux_lpi2c_init+0x124>)
6000c97e:	4293      	cmp	r3, r2
6000c980:	d037      	beq.n	6000c9f2 <mcux_lpi2c_init+0x106>
6000c982:	4a24      	ldr	r2, [pc, #144]	; (6000ca14 <mcux_lpi2c_init+0x128>)
6000c984:	4293      	cmp	r3, r2
6000c986:	d036      	beq.n	6000c9f6 <mcux_lpi2c_init+0x10a>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
6000c988:	4b23      	ldr	r3, [pc, #140]	; (6000ca18 <mcux_lpi2c_init+0x12c>)
6000c98a:	9307      	str	r3, [sp, #28]
6000c98c:	2302      	movs	r3, #2
6000c98e:	9306      	str	r3, [sp, #24]
6000c990:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000c994:	2300      	movs	r3, #0
6000c996:	aa06      	add	r2, sp, #24
6000c998:	481a      	ldr	r0, [pc, #104]	; (6000ca04 <mcux_lpi2c_init+0x118>)
6000c99a:	f7fc f893 	bl	60008ac4 <z_impl_z_log_msg_static_create>

	return 0;
6000c99e:	2100      	movs	r1, #0
	error = mcux_lpi2c_configure(dev, I2C_MODE_CONTROLLER | bitrate_cfg);
6000c9a0:	f041 0110 	orr.w	r1, r1, #16
6000c9a4:	4630      	mov	r0, r6
6000c9a6:	f7ff ff6b 	bl	6000c880 <mcux_lpi2c_configure>
	if (error) {
6000c9aa:	4604      	mov	r4, r0
6000c9ac:	2800      	cmp	r0, #0
6000c9ae:	d1c1      	bne.n	6000c934 <mcux_lpi2c_init+0x48>
	ret = pinctrl_lookup_state(config, id, &state);
6000c9b0:	4601      	mov	r1, r0
6000c9b2:	aa02      	add	r2, sp, #8
6000c9b4:	69a8      	ldr	r0, [r5, #24]
6000c9b6:	f00c f9d2 	bl	60018d5e <pinctrl_lookup_state>
	if (ret < 0) {
6000c9ba:	1e04      	subs	r4, r0, #0
6000c9bc:	dbba      	blt.n	6000c934 <mcux_lpi2c_init+0x48>
	return pinctrl_apply_state_direct(config, state);
6000c9be:	9b02      	ldr	r3, [sp, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
6000c9c0:	2200      	movs	r2, #0
6000c9c2:	7919      	ldrb	r1, [r3, #4]
6000c9c4:	6818      	ldr	r0, [r3, #0]
6000c9c6:	f00c f9dd 	bl	60018d84 <pinctrl_configure_pins>
	if (error) {
6000c9ca:	4604      	mov	r4, r0
6000c9cc:	2800      	cmp	r0, #0
6000c9ce:	d1b1      	bne.n	6000c934 <mcux_lpi2c_init+0x48>
	config->irq_config_func(dev);
6000c9d0:	68eb      	ldr	r3, [r5, #12]
6000c9d2:	4630      	mov	r0, r6
6000c9d4:	4798      	blx	r3
	return 0;
6000c9d6:	e7ad      	b.n	6000c934 <mcux_lpi2c_init+0x48>
	switch (bitrate) {
6000c9d8:	4a10      	ldr	r2, [pc, #64]	; (6000ca1c <mcux_lpi2c_init+0x130>)
6000c9da:	4293      	cmp	r3, r2
6000c9dc:	d00d      	beq.n	6000c9fa <mcux_lpi2c_init+0x10e>
6000c9de:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
6000c9e2:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
6000c9e6:	4293      	cmp	r3, r2
6000c9e8:	d1ce      	bne.n	6000c988 <mcux_lpi2c_init+0x9c>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
6000c9ea:	210a      	movs	r1, #10
6000c9ec:	e7d8      	b.n	6000c9a0 <mcux_lpi2c_init+0xb4>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
6000c9ee:	2106      	movs	r1, #6
6000c9f0:	e7d6      	b.n	6000c9a0 <mcux_lpi2c_init+0xb4>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
6000c9f2:	2102      	movs	r1, #2
6000c9f4:	e7d4      	b.n	6000c9a0 <mcux_lpi2c_init+0xb4>
	switch (bitrate) {
6000c9f6:	2104      	movs	r1, #4
6000c9f8:	e7d2      	b.n	6000c9a0 <mcux_lpi2c_init+0xb4>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
6000c9fa:	2108      	movs	r1, #8
6000c9fc:	e7d0      	b.n	6000c9a0 <mcux_lpi2c_init+0xb4>
6000c9fe:	bf00      	nop
6000ca00:	6001dd93 	.word	0x6001dd93
6000ca04:	6001a3d4 	.word	0x6001a3d4
6000ca08:	600188e5 	.word	0x600188e5
6000ca0c:	000f4240 	.word	0x000f4240
6000ca10:	000186a0 	.word	0x000186a0
6000ca14:	00061a80 	.word	0x00061a80
6000ca18:	6001ddb2 	.word	0x6001ddb2
6000ca1c:	0033e140 	.word	0x0033e140

6000ca20 <pwm_mcux_init>:

	return 0;
}

static int pwm_mcux_init(const struct device *dev)
{
6000ca20:	b570      	push	{r4, r5, r6, lr}
	const struct pwm_mcux_config *config = dev->config;
6000ca22:	6844      	ldr	r4, [r0, #4]
{
6000ca24:	b08a      	sub	sp, #40	; 0x28
	struct pwm_mcux_data *data = dev->data;
6000ca26:	6905      	ldr	r5, [r0, #16]
	pwm_config_t pwm_config;
	status_t status;
	int i, err;

	if (!device_is_ready(config->clock_dev)) {
6000ca28:	68a0      	ldr	r0, [r4, #8]
6000ca2a:	f00c ff22 	bl	60019872 <z_device_is_ready>
6000ca2e:	4603      	mov	r3, r0
6000ca30:	b968      	cbnz	r0, 6000ca4e <pwm_mcux_init+0x2e>
		LOG_ERR("clock control device not ready");
6000ca32:	4a27      	ldr	r2, [pc, #156]	; (6000cad0 <pwm_mcux_init+0xb0>)
6000ca34:	9209      	str	r2, [sp, #36]	; 0x24
6000ca36:	2202      	movs	r2, #2
6000ca38:	9208      	str	r2, [sp, #32]
6000ca3a:	4826      	ldr	r0, [pc, #152]	; (6000cad4 <pwm_mcux_init+0xb4>)
6000ca3c:	aa08      	add	r2, sp, #32
6000ca3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ca42:	f7fc f83f 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		return -ENODEV;
6000ca46:	f06f 0012 	mvn.w	r0, #18
	data->channel[0].level = kPWM_HighTrue;
	data->channel[1].pwmChannel = kPWM_PwmB;
	data->channel[1].level = kPWM_HighTrue;

	return 0;
}
6000ca4a:	b00a      	add	sp, #40	; 0x28
6000ca4c:	bd70      	pop	{r4, r5, r6, pc}
	ret = pinctrl_lookup_state(config, id, &state);
6000ca4e:	aa04      	add	r2, sp, #16
6000ca50:	2100      	movs	r1, #0
6000ca52:	69a0      	ldr	r0, [r4, #24]
6000ca54:	f00c f983 	bl	60018d5e <pinctrl_lookup_state>
	if (ret < 0) {
6000ca58:	2800      	cmp	r0, #0
6000ca5a:	dbf6      	blt.n	6000ca4a <pwm_mcux_init+0x2a>
	return pinctrl_apply_state_direct(config, state);
6000ca5c:	9b04      	ldr	r3, [sp, #16]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
6000ca5e:	2200      	movs	r2, #0
6000ca60:	7919      	ldrb	r1, [r3, #4]
6000ca62:	6818      	ldr	r0, [r3, #0]
6000ca64:	f00c f98e 	bl	60018d84 <pinctrl_configure_pins>
	if (err < 0) {
6000ca68:	2800      	cmp	r0, #0
6000ca6a:	dbee      	blt.n	6000ca4a <pwm_mcux_init+0x2a>
	PWM_GetDefaultConfig(&pwm_config);
6000ca6c:	a801      	add	r0, sp, #4
	pwm_config.clockSource = kPWM_BusClock;
6000ca6e:	2600      	movs	r6, #0
	PWM_GetDefaultConfig(&pwm_config);
6000ca70:	f001 fea8 	bl	6000e7c4 <PWM_GetDefaultConfig>
	pwm_config.prescale = config->prescale;
6000ca74:	7c23      	ldrb	r3, [r4, #16]
	pwm_config.clockSource = kPWM_BusClock;
6000ca76:	f88d 6007 	strb.w	r6, [sp, #7]
	status = PWM_Init(config->base, config->index, &pwm_config);
6000ca7a:	aa01      	add	r2, sp, #4
	pwm_config.prescale = config->prescale;
6000ca7c:	f88d 3008 	strb.w	r3, [sp, #8]
	pwm_config.reloadLogic = config->reload;
6000ca80:	7c63      	ldrb	r3, [r4, #17]
6000ca82:	f88d 300a 	strb.w	r3, [sp, #10]
	pwm_config.enableDebugMode = config->run_debug;
6000ca86:	7d23      	ldrb	r3, [r4, #20]
	status = PWM_Init(config->base, config->index, &pwm_config);
6000ca88:	7921      	ldrb	r1, [r4, #4]
	pwm_config.enableDebugMode = config->run_debug;
6000ca8a:	f88d 3004 	strb.w	r3, [sp, #4]
	pwm_config.enableWait = config->run_wait;
6000ca8e:	7ce3      	ldrb	r3, [r4, #19]
6000ca90:	f88d 3005 	strb.w	r3, [sp, #5]
	status = PWM_Init(config->base, config->index, &pwm_config);
6000ca94:	6820      	ldr	r0, [r4, #0]
6000ca96:	f001 fdf3 	bl	6000e680 <PWM_Init>
	if (status != kStatus_Success) {
6000ca9a:	b168      	cbz	r0, 6000cab8 <pwm_mcux_init+0x98>
		LOG_ERR("Unable to init PWM");
6000ca9c:	4b0e      	ldr	r3, [pc, #56]	; (6000cad8 <pwm_mcux_init+0xb8>)
6000ca9e:	9309      	str	r3, [sp, #36]	; 0x24
6000caa0:	2302      	movs	r3, #2
6000caa2:	9308      	str	r3, [sp, #32]
6000caa4:	480b      	ldr	r0, [pc, #44]	; (6000cad4 <pwm_mcux_init+0xb4>)
6000caa6:	4633      	mov	r3, r6
6000caa8:	aa08      	add	r2, sp, #32
6000caaa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000caae:	f7fc f809 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		return -EIO;
6000cab2:	f06f 0004 	mvn.w	r0, #4
6000cab6:	e7c8      	b.n	6000ca4a <pwm_mcux_init+0x2a>
		config->base->SM[config->index].DISMAP[i] = 0x0000;
6000cab8:	6823      	ldr	r3, [r4, #0]
6000caba:	2160      	movs	r1, #96	; 0x60
6000cabc:	7922      	ldrb	r2, [r4, #4]
6000cabe:	fb01 3302 	mla	r3, r1, r2, r3
6000cac2:	8598      	strh	r0, [r3, #44]	; 0x2c
	data->channel[0].pwmChannel = kPWM_PwmA;
6000cac4:	2301      	movs	r3, #1
	data->channel[0].level = kPWM_HighTrue;
6000cac6:	72a8      	strb	r0, [r5, #10]
	data->channel[0].pwmChannel = kPWM_PwmA;
6000cac8:	722b      	strb	r3, [r5, #8]
	data->channel[1].pwmChannel = kPWM_PwmB;
6000caca:	7428      	strb	r0, [r5, #16]
	data->channel[1].level = kPWM_HighTrue;
6000cacc:	74a8      	strb	r0, [r5, #18]
	return 0;
6000cace:	e7bc      	b.n	6000ca4a <pwm_mcux_init+0x2a>
6000cad0:	6001dd93 	.word	0x6001dd93
6000cad4:	6001a3ec 	.word	0x6001a3ec
6000cad8:	6001dde5 	.word	0x6001dde5

6000cadc <mcux_pwm_set_cycles>:
{
6000cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (channel >= CHANNEL_COUNT) {
6000cae0:	2901      	cmp	r1, #1
{
6000cae2:	b08d      	sub	sp, #52	; 0x34
6000cae4:	460d      	mov	r5, r1
6000cae6:	4616      	mov	r6, r2
6000cae8:	af04      	add	r7, sp, #16
	const struct pwm_mcux_config *config = dev->config;
6000caea:	6844      	ldr	r4, [r0, #4]
	struct pwm_mcux_data *data = dev->data;
6000caec:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (channel >= CHANNEL_COUNT) {
6000caf0:	d90e      	bls.n	6000cb10 <mcux_pwm_set_cycles+0x34>
		LOG_ERR("Invalid channel");
6000caf2:	4b60      	ldr	r3, [pc, #384]	; (6000cc74 <mcux_pwm_set_cycles+0x198>)
6000caf4:	61fb      	str	r3, [r7, #28]
6000caf6:	2302      	movs	r3, #2
6000caf8:	61bb      	str	r3, [r7, #24]
6000cafa:	2300      	movs	r3, #0
6000cafc:	f107 0218 	add.w	r2, r7, #24
6000cb00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000cb04:	485c      	ldr	r0, [pc, #368]	; (6000cc78 <mcux_pwm_set_cycles+0x19c>)
6000cb06:	f7fb ffdd 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		return -EINVAL;
6000cb0a:	f06f 0015 	mvn.w	r0, #21
6000cb0e:	e00e      	b.n	6000cb2e <mcux_pwm_set_cycles+0x52>
	if (period_cycles == 0) {
6000cb10:	b98a      	cbnz	r2, 6000cb36 <mcux_pwm_set_cycles+0x5a>
		LOG_ERR("Channel can not be set to inactive level");
6000cb12:	4b5a      	ldr	r3, [pc, #360]	; (6000cc7c <mcux_pwm_set_cycles+0x1a0>)
6000cb14:	61fb      	str	r3, [r7, #28]
6000cb16:	2302      	movs	r3, #2
6000cb18:	61bb      	str	r3, [r7, #24]
6000cb1a:	4613      	mov	r3, r2
6000cb1c:	4856      	ldr	r0, [pc, #344]	; (6000cc78 <mcux_pwm_set_cycles+0x19c>)
6000cb1e:	f107 0218 	add.w	r2, r7, #24
6000cb22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000cb26:	f7fb ffcd 	bl	60008ac4 <z_impl_z_log_msg_static_create>
			return -ENOTSUP;
6000cb2a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
6000cb2e:	3724      	adds	r7, #36	; 0x24
6000cb30:	46bd      	mov	sp, r7
6000cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (period_cycles > UINT16_MAX) {
6000cb36:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
6000cb3a:	d310      	bcc.n	6000cb5e <mcux_pwm_set_cycles+0x82>
		LOG_ERR("Too long period (%u), adjust pwm prescaler!",
6000cb3c:	466c      	mov	r4, sp
6000cb3e:	b088      	sub	sp, #32
6000cb40:	aa04      	add	r2, sp, #16
6000cb42:	4b4f      	ldr	r3, [pc, #316]	; (6000cc80 <mcux_pwm_set_cycles+0x1a4>)
6000cb44:	e9c2 3605 	strd	r3, r6, [r2, #20]
6000cb48:	2303      	movs	r3, #3
6000cb4a:	f842 3f10 	str.w	r3, [r2, #16]!
6000cb4e:	2300      	movs	r3, #0
6000cb50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000cb54:	4848      	ldr	r0, [pc, #288]	; (6000cc78 <mcux_pwm_set_cycles+0x19c>)
6000cb56:	f7fb ffb5 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000cb5a:	46a5      	mov	sp, r4
		return -EINVAL;
6000cb5c:	e7d5      	b.n	6000cb0a <mcux_pwm_set_cycles+0x2e>
	duty_cycle = 100 * pulse_cycles / period_cycles;
6000cb5e:	2264      	movs	r2, #100	; 0x64
6000cb60:	f8b7 b048 	ldrh.w	fp, [r7, #72]	; 0x48
6000cb64:	fb02 f803 	mul.w	r8, r2, r3
	if (period_cycles != data->period_cycles[channel]
6000cb68:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
6000cb6c:	f00b 0b01 	and.w	fp, fp, #1
6000cb70:	42b3      	cmp	r3, r6
	duty_cycle = 100 * pulse_cycles / period_cycles;
6000cb72:	fbb8 f8f6 	udiv	r8, r8, r6
6000cb76:	fa5f f888 	uxtb.w	r8, r8
	if (period_cycles != data->period_cycles[channel]
6000cb7a:	d104      	bne.n	6000cb86 <mcux_pwm_set_cycles+0xaa>
	    || level != data->channel[channel].level) {
6000cb7c:	eb0a 03c1 	add.w	r3, sl, r1, lsl #3
6000cb80:	7a9b      	ldrb	r3, [r3, #10]
6000cb82:	455b      	cmp	r3, fp
6000cb84:	d05e      	beq.n	6000cc44 <mcux_pwm_set_cycles+0x168>
		data->period_cycles[channel] = period_cycles;
6000cb86:	f84a 6025 	str.w	r6, [sl, r5, lsl #2]
		if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000cb8a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
	if (api->get_rate == NULL) {
6000cb8e:	6883      	ldr	r3, [r0, #8]
6000cb90:	68db      	ldr	r3, [r3, #12]
6000cb92:	2b00      	cmp	r3, #0
6000cb94:	d0b9      	beq.n	6000cb0a <mcux_pwm_set_cycles+0x2e>
	return api->get_rate(dev, sys, rate);
6000cb96:	1d3a      	adds	r2, r7, #4
6000cb98:	4798      	blx	r3
6000cb9a:	4681      	mov	r9, r0
6000cb9c:	2800      	cmp	r0, #0
6000cb9e:	d1b4      	bne.n	6000cb0a <mcux_pwm_set_cycles+0x2e>
		pwm_freq = (clock_freq >> config->prescale) / period_cycles;
6000cba0:	6879      	ldr	r1, [r7, #4]
6000cba2:	7c23      	ldrb	r3, [r4, #16]
6000cba4:	fa21 f303 	lsr.w	r3, r1, r3
		if (pwm_freq == 0) {
6000cba8:	429e      	cmp	r6, r3
		pwm_freq = (clock_freq >> config->prescale) / period_cycles;
6000cbaa:	fbb3 f0f6 	udiv	r0, r3, r6
		if (pwm_freq == 0) {
6000cbae:	d906      	bls.n	6000cbbe <mcux_pwm_set_cycles+0xe2>
			LOG_ERR("Could not set up pwm_freq=%d", pwm_freq);
6000cbb0:	466c      	mov	r4, sp
6000cbb2:	b088      	sub	sp, #32
6000cbb4:	aa04      	add	r2, sp, #16
6000cbb6:	4b33      	ldr	r3, [pc, #204]	; (6000cc84 <mcux_pwm_set_cycles+0x1a8>)
6000cbb8:	e9c2 3005 	strd	r3, r0, [r2, #20]
6000cbbc:	e7c4      	b.n	6000cb48 <mcux_pwm_set_cycles+0x6c>
		PWM_StopTimer(config->base, 1U << config->index);
6000cbbe:	7923      	ldrb	r3, [r4, #4]
6000cbc0:	2601      	movs	r6, #1
6000cbc2:	f8d4 c000 	ldr.w	ip, [r4]
 * @param subModulesToStop PWM submodules to stop. This is a logical OR of members of the
 *                         enumeration ::pwm_module_control_t
 */
static inline void PWM_StopTimer(PWM_Type *base, uint8_t subModulesToStop)
{
    base->MCTRL &= ~(PWM_MCTRL_RUN(subModulesToStop));
6000cbc6:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
6000cbca:	fa06 f303 	lsl.w	r3, r6, r3
6000cbce:	f8bc 2188 	ldrh.w	r2, [ip, #392]	; 0x188
6000cbd2:	021b      	lsls	r3, r3, #8
6000cbd4:	b292      	uxth	r2, r2
6000cbd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
6000cbda:	ea22 0203 	bic.w	r2, r2, r3
6000cbde:	f8ac 2188 	strh.w	r2, [ip, #392]	; 0x188
		status = PWM_SetupPwm(config->base, config->index,
6000cbe2:	f10a 0208 	add.w	r2, sl, #8
		data->channel[channel].dutyCyclePercent = duty_cycle;
6000cbe6:	f885 8009 	strb.w	r8, [r5, #9]
		data->channel[channel].level = level;
6000cbea:	f885 b00a 	strb.w	fp, [r5, #10]
		status = PWM_SetupPwm(config->base, config->index,
6000cbee:	7925      	ldrb	r5, [r4, #4]
6000cbf0:	e9cd 0101 	strd	r0, r1, [sp, #4]
6000cbf4:	7ca3      	ldrb	r3, [r4, #18]
6000cbf6:	4629      	mov	r1, r5
6000cbf8:	9300      	str	r3, [sp, #0]
6000cbfa:	2302      	movs	r3, #2
6000cbfc:	6820      	ldr	r0, [r4, #0]
6000cbfe:	f001 fdfb 	bl	6000e7f8 <PWM_SetupPwm>
		if (status != kStatus_Success) {
6000cc02:	b128      	cbz	r0, 6000cc10 <mcux_pwm_set_cycles+0x134>
			LOG_ERR("Could not set up pwm");
6000cc04:	4b20      	ldr	r3, [pc, #128]	; (6000cc88 <mcux_pwm_set_cycles+0x1ac>)
6000cc06:	61fb      	str	r3, [r7, #28]
6000cc08:	2302      	movs	r3, #2
6000cc0a:	61bb      	str	r3, [r7, #24]
6000cc0c:	464b      	mov	r3, r9
6000cc0e:	e785      	b.n	6000cb1c <mcux_pwm_set_cycles+0x40>
		PWM_SetPwmLdok(config->base, 1U << config->index, true);
6000cc10:	6821      	ldr	r1, [r4, #0]
6000cc12:	7922      	ldrb	r2, [r4, #4]
 */
static inline void PWM_SetPwmLdok(PWM_Type *base, uint8_t subModulesToUpdate, bool value)
{
    if (value)
    {
        base->MCTRL |= PWM_MCTRL_LDOK(subModulesToUpdate);
6000cc14:	f8b1 3188 	ldrh.w	r3, [r1, #392]	; 0x188
6000cc18:	fa06 f202 	lsl.w	r2, r6, r2
6000cc1c:	b29b      	uxth	r3, r3
6000cc1e:	f002 020f 	and.w	r2, r2, #15
6000cc22:	4313      	orrs	r3, r2
6000cc24:	f8a1 3188 	strh.w	r3, [r1, #392]	; 0x188
		PWM_StartTimer(config->base, 1U << config->index);
6000cc28:	7921      	ldrb	r1, [r4, #4]
6000cc2a:	6822      	ldr	r2, [r4, #0]
6000cc2c:	408e      	lsls	r6, r1
    base->MCTRL |= PWM_MCTRL_RUN(subModulesToStart);
6000cc2e:	f8b2 3188 	ldrh.w	r3, [r2, #392]	; 0x188
6000cc32:	0236      	lsls	r6, r6, #8
6000cc34:	b29b      	uxth	r3, r3
6000cc36:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
6000cc3a:	4333      	orrs	r3, r6
6000cc3c:	f8a2 3188 	strh.w	r3, [r2, #392]	; 0x188
	return 0;
6000cc40:	2000      	movs	r0, #0
6000cc42:	e774      	b.n	6000cb2e <mcux_pwm_set_cycles+0x52>
		PWM_UpdatePwmDutycycle(config->base, config->index,
6000cc44:	f081 0201 	eor.w	r2, r1, #1
6000cc48:	7ca3      	ldrb	r3, [r4, #18]
6000cc4a:	7921      	ldrb	r1, [r4, #4]
6000cc4c:	b2d2      	uxtb	r2, r2
6000cc4e:	f8cd 8000 	str.w	r8, [sp]
6000cc52:	6820      	ldr	r0, [r4, #0]
6000cc54:	f002 f904 	bl	6000ee60 <PWM_UpdatePwmDutycycle>
		PWM_SetPwmLdok(config->base, 1U << config->index, true);
6000cc58:	6821      	ldr	r1, [r4, #0]
6000cc5a:	7920      	ldrb	r0, [r4, #4]
6000cc5c:	2201      	movs	r2, #1
        base->MCTRL |= PWM_MCTRL_LDOK(subModulesToUpdate);
6000cc5e:	f8b1 3188 	ldrh.w	r3, [r1, #392]	; 0x188
6000cc62:	4082      	lsls	r2, r0
6000cc64:	b29b      	uxth	r3, r3
6000cc66:	f002 020f 	and.w	r2, r2, #15
6000cc6a:	4313      	orrs	r3, r2
6000cc6c:	f8a1 3188 	strh.w	r3, [r1, #392]	; 0x188
6000cc70:	e7e6      	b.n	6000cc40 <mcux_pwm_set_cycles+0x164>
6000cc72:	bf00      	nop
6000cc74:	6001ddf8 	.word	0x6001ddf8
6000cc78:	6001a3ec 	.word	0x6001a3ec
6000cc7c:	6001de08 	.word	0x6001de08
6000cc80:	6001de31 	.word	0x6001de31
6000cc84:	6001de5d 	.word	0x6001de5d
6000cc88:	6001de7a 	.word	0x6001de7a

6000cc8c <ina219_sample_fetch>:
	if (chan != SENSOR_CHAN_ALL &&
6000cc8c:	2939      	cmp	r1, #57	; 0x39
{
6000cc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000cc92:	4605      	mov	r5, r0
6000cc94:	b088      	sub	sp, #32
6000cc96:	460e      	mov	r6, r1
	struct ina219_data *data = dev->data;
6000cc98:	6907      	ldr	r7, [r0, #16]
	if (chan != SENSOR_CHAN_ALL &&
6000cc9a:	d004      	beq.n	6000cca6 <ina219_sample_fetch+0x1a>
6000cc9c:	f1a1 031e 	sub.w	r3, r1, #30
6000cca0:	2b02      	cmp	r3, #2
6000cca2:	f200 809d 	bhi.w	6000cde0 <ina219_sample_fetch+0x154>
	rc = ina219_reg_read(dev, addr, &reg_data);
6000cca6:	aa02      	add	r2, sp, #8
6000cca8:	2100      	movs	r1, #0
6000ccaa:	6868      	ldr	r0, [r5, #4]
6000ccac:	f00b fe38 	bl	60018920 <ina219_reg_read.isra.0>
	if (rc) {
6000ccb0:	4604      	mov	r4, r0
6000ccb2:	b960      	cbnz	r0, 6000ccce <ina219_sample_fetch+0x42>
	reg_data = (reg_data & ~mask) | field;
6000ccb4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
	return ina219_reg_write(dev, addr, reg_data);
6000ccb8:	4601      	mov	r1, r0
6000ccba:	6868      	ldr	r0, [r5, #4]
	reg_data = (reg_data & ~mask) | field;
6000ccbc:	f022 0207 	bic.w	r2, r2, #7
6000ccc0:	f042 0203 	orr.w	r2, r2, #3
	return ina219_reg_write(dev, addr, reg_data);
6000ccc4:	b292      	uxth	r2, r2
6000ccc6:	f00b fe4c 	bl	60018962 <ina219_reg_write.isra.0>
	if (rc) {
6000ccca:	4604      	mov	r4, r0
6000cccc:	b168      	cbz	r0, 6000ccea <ina219_sample_fetch+0x5e>
		LOG_ERR("Failed to start measurement.");
6000ccce:	4b46      	ldr	r3, [pc, #280]	; (6000cde8 <ina219_sample_fetch+0x15c>)
		LOG_ERR("Failed to read device status.");
6000ccd0:	9307      	str	r3, [sp, #28]
6000ccd2:	2302      	movs	r3, #2
6000ccd4:	aa06      	add	r2, sp, #24
6000ccd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ccda:	4844      	ldr	r0, [pc, #272]	; (6000cdec <ina219_sample_fetch+0x160>)
6000ccdc:	9306      	str	r3, [sp, #24]
6000ccde:	f00b fe1c 	bl	6001891a <z_log_msg_static_create.constprop.0>
}
6000cce2:	4620      	mov	r0, r4
6000cce4:	b008      	add	sp, #32
6000cce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_sleep(K_USEC(data->msr_delay));
6000ccea:	68f8      	ldr	r0, [r7, #12]
6000ccec:	2264      	movs	r2, #100	; 0x64
6000ccee:	2300      	movs	r3, #0
		t += off;
6000ccf0:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
6000ccf2:	f144 0100 	adc.w	r1, r4, #0
6000ccf6:	f7f6 fd05 	bl	60003704 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
6000ccfa:	f004 ffc5 	bl	60011c88 <z_impl_k_sleep>
	rc = ina219_reg_read(dev, INA219_REG_V_BUS, &status);
6000ccfe:	aa01      	add	r2, sp, #4
6000cd00:	2102      	movs	r1, #2
6000cd02:	6868      	ldr	r0, [r5, #4]
6000cd04:	f00b fe0c 	bl	60018920 <ina219_reg_read.isra.0>
	if (rc) {
6000cd08:	4604      	mov	r4, r0
6000cd0a:	b1c0      	cbz	r0, 6000cd3e <ina219_sample_fetch+0xb2>
		LOG_ERR("Failed to read device status.");
6000cd0c:	4b38      	ldr	r3, [pc, #224]	; (6000cdf0 <ina219_sample_fetch+0x164>)
6000cd0e:	e7df      	b.n	6000ccd0 <ina219_sample_fetch+0x44>
		rc = ina219_reg_read(dev, INA219_REG_V_BUS, &status);
6000cd10:	aa01      	add	r2, sp, #4
6000cd12:	2102      	movs	r1, #2
6000cd14:	6868      	ldr	r0, [r5, #4]
6000cd16:	f00b fe03 	bl	60018920 <ina219_reg_read.isra.0>
		if (rc) {
6000cd1a:	4680      	mov	r8, r0
6000cd1c:	b158      	cbz	r0, 6000cd36 <ina219_sample_fetch+0xaa>
			LOG_ERR("Failed to read device status.");
6000cd1e:	4b34      	ldr	r3, [pc, #208]	; (6000cdf0 <ina219_sample_fetch+0x164>)
			LOG_ERR("Error reading bus voltage.");
6000cd20:	9307      	str	r3, [sp, #28]
6000cd22:	2302      	movs	r3, #2
6000cd24:	aa06      	add	r2, sp, #24
6000cd26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000cd2a:	4830      	ldr	r0, [pc, #192]	; (6000cdec <ina219_sample_fetch+0x160>)
			return rc;
6000cd2c:	4644      	mov	r4, r8
			LOG_ERR("Error reading bus voltage.");
6000cd2e:	9306      	str	r3, [sp, #24]
6000cd30:	f00b fdf3 	bl	6001891a <z_log_msg_static_create.constprop.0>
			return rc;
6000cd34:	e7d5      	b.n	6000cce2 <ina219_sample_fetch+0x56>
6000cd36:	2001      	movs	r0, #1
6000cd38:	2100      	movs	r1, #0
6000cd3a:	f004 ffa5 	bl	60011c88 <z_impl_k_sleep>
	while (!(INA219_CNVR_RDY(status))) {
6000cd3e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
6000cd42:	079a      	lsls	r2, r3, #30
6000cd44:	d5e4      	bpl.n	6000cd10 <ina219_sample_fetch+0x84>
	if (INA219_OVF_STATUS(status)) {
6000cd46:	07db      	lsls	r3, r3, #31
6000cd48:	d509      	bpl.n	6000cd5e <ina219_sample_fetch+0xd2>
		LOG_WRN("Power and/or Current calculations are out of range.");
6000cd4a:	4b2a      	ldr	r3, [pc, #168]	; (6000cdf4 <ina219_sample_fetch+0x168>)
6000cd4c:	aa06      	add	r2, sp, #24
6000cd4e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
6000cd52:	4826      	ldr	r0, [pc, #152]	; (6000cdec <ina219_sample_fetch+0x160>)
6000cd54:	9307      	str	r3, [sp, #28]
6000cd56:	2302      	movs	r3, #2
6000cd58:	9306      	str	r3, [sp, #24]
6000cd5a:	f00b fdde 	bl	6001891a <z_log_msg_static_create.constprop.0>
	if (chan == SENSOR_CHAN_ALL ||
6000cd5e:	2e39      	cmp	r6, #57	; 0x39
6000cd60:	d00d      	beq.n	6000cd7e <ina219_sample_fetch+0xf2>
6000cd62:	2e1e      	cmp	r6, #30
6000cd64:	d00b      	beq.n	6000cd7e <ina219_sample_fetch+0xf2>
	if (chan == SENSOR_CHAN_ALL ||
6000cd66:	2e20      	cmp	r6, #32
6000cd68:	d120      	bne.n	6000cdac <ina219_sample_fetch+0x120>
		rc = ina219_reg_read(dev, INA219_REG_POWER, &tmp);
6000cd6a:	f10d 0206 	add.w	r2, sp, #6
6000cd6e:	2103      	movs	r1, #3
6000cd70:	6868      	ldr	r0, [r5, #4]
6000cd72:	f00b fdd5 	bl	60018920 <ina219_reg_read.isra.0>
		if (rc) {
6000cd76:	4680      	mov	r8, r0
6000cd78:	b198      	cbz	r0, 6000cda2 <ina219_sample_fetch+0x116>
			LOG_ERR("Error reading power register.");
6000cd7a:	4b1f      	ldr	r3, [pc, #124]	; (6000cdf8 <ina219_sample_fetch+0x16c>)
6000cd7c:	e7d0      	b.n	6000cd20 <ina219_sample_fetch+0x94>
		rc = ina219_reg_read(dev, INA219_REG_V_BUS, &tmp);
6000cd7e:	f10d 0206 	add.w	r2, sp, #6
6000cd82:	2102      	movs	r1, #2
6000cd84:	6868      	ldr	r0, [r5, #4]
6000cd86:	f00b fdcb 	bl	60018920 <ina219_reg_read.isra.0>
		if (rc) {
6000cd8a:	4680      	mov	r8, r0
6000cd8c:	b108      	cbz	r0, 6000cd92 <ina219_sample_fetch+0x106>
			LOG_ERR("Error reading bus voltage.");
6000cd8e:	4b1b      	ldr	r3, [pc, #108]	; (6000cdfc <ina219_sample_fetch+0x170>)
6000cd90:	e7c6      	b.n	6000cd20 <ina219_sample_fetch+0x94>
		data->v_bus = INA219_VBUS_GET(tmp);
6000cd92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (chan == SENSOR_CHAN_ALL ||
6000cd96:	2e39      	cmp	r6, #57	; 0x39
		data->v_bus = INA219_VBUS_GET(tmp);
6000cd98:	ea4f 03d3 	mov.w	r3, r3, lsr #3
6000cd9c:	807b      	strh	r3, [r7, #2]
	if (chan == SENSOR_CHAN_ALL ||
6000cd9e:	d0e4      	beq.n	6000cd6a <ina219_sample_fetch+0xde>
6000cda0:	e7e1      	b.n	6000cd66 <ina219_sample_fetch+0xda>
		data->power = tmp;
6000cda2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (chan == SENSOR_CHAN_ALL ||
6000cda6:	2e39      	cmp	r6, #57	; 0x39
		data->power = tmp;
6000cda8:	80bb      	strh	r3, [r7, #4]
	if (chan == SENSOR_CHAN_ALL ||
6000cdaa:	d001      	beq.n	6000cdb0 <ina219_sample_fetch+0x124>
6000cdac:	2e1f      	cmp	r6, #31
6000cdae:	d198      	bne.n	6000cce2 <ina219_sample_fetch+0x56>
		rc = ina219_reg_read(dev, INA219_REG_CURRENT, &tmp);
6000cdb0:	6868      	ldr	r0, [r5, #4]
6000cdb2:	f10d 0206 	add.w	r2, sp, #6
6000cdb6:	2104      	movs	r1, #4
6000cdb8:	f00b fdb2 	bl	60018920 <ina219_reg_read.isra.0>
		if (rc) {
6000cdbc:	4605      	mov	r5, r0
6000cdbe:	b158      	cbz	r0, 6000cdd8 <ina219_sample_fetch+0x14c>
			LOG_ERR("Error reading current register.");
6000cdc0:	4b0f      	ldr	r3, [pc, #60]	; (6000ce00 <ina219_sample_fetch+0x174>)
6000cdc2:	aa06      	add	r2, sp, #24
6000cdc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000cdc8:	4808      	ldr	r0, [pc, #32]	; (6000cdec <ina219_sample_fetch+0x160>)
6000cdca:	9307      	str	r3, [sp, #28]
6000cdcc:	2302      	movs	r3, #2
			return rc;
6000cdce:	462c      	mov	r4, r5
			LOG_ERR("Error reading current register.");
6000cdd0:	9306      	str	r3, [sp, #24]
6000cdd2:	f00b fda2 	bl	6001891a <z_log_msg_static_create.constprop.0>
			return rc;
6000cdd6:	e784      	b.n	6000cce2 <ina219_sample_fetch+0x56>
		data->current = tmp;
6000cdd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
6000cddc:	80fb      	strh	r3, [r7, #6]
6000cdde:	e780      	b.n	6000cce2 <ina219_sample_fetch+0x56>
		return -ENOTSUP;
6000cde0:	f06f 0485 	mvn.w	r4, #133	; 0x85
6000cde4:	e77d      	b.n	6000cce2 <ina219_sample_fetch+0x56>
6000cde6:	bf00      	nop
6000cde8:	6001de9d 	.word	0x6001de9d
6000cdec:	6001a38c 	.word	0x6001a38c
6000cdf0:	6001deba 	.word	0x6001deba
6000cdf4:	6001ded8 	.word	0x6001ded8
6000cdf8:	6001df27 	.word	0x6001df27
6000cdfc:	6001df0c 	.word	0x6001df0c
6000ce00:	6001df45 	.word	0x6001df45

6000ce04 <ina219_init>:
				reg_val);
}
#endif /* CONFIG_PM_DEVICE */

static int ina219_init(const struct device *dev)
{
6000ce04:	b530      	push	{r4, r5, lr}
	const struct ina219_config *cfg = dev->config;
	int rc;

	if (!device_is_ready(cfg->bus.bus)) {
6000ce06:	6843      	ldr	r3, [r0, #4]
{
6000ce08:	b087      	sub	sp, #28
6000ce0a:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->bus.bus)) {
6000ce0c:	6818      	ldr	r0, [r3, #0]
6000ce0e:	f00c fd30 	bl	60019872 <z_device_is_ready>
6000ce12:	b970      	cbnz	r0, 6000ce32 <ina219_init+0x2e>
		LOG_ERR("Device not ready.");
6000ce14:	4b34      	ldr	r3, [pc, #208]	; (6000cee8 <ina219_init+0xe4>)
		return -ENODEV;
6000ce16:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Device not ready.");
6000ce1a:	aa04      	add	r2, sp, #16
6000ce1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ce20:	9305      	str	r3, [sp, #20]
6000ce22:	2302      	movs	r3, #2
6000ce24:	4831      	ldr	r0, [pc, #196]	; (6000ceec <ina219_init+0xe8>)
6000ce26:	9304      	str	r3, [sp, #16]
6000ce28:	f00b fd77 	bl	6001891a <z_log_msg_static_create.constprop.0>
	}

	k_sleep(K_USEC(INA219_WAIT_STARTUP));

	return 0;
}
6000ce2c:	4620      	mov	r0, r4
6000ce2e:	b007      	add	sp, #28
6000ce30:	bd30      	pop	{r4, r5, pc}
	rc = ina219_reg_write(dev, INA219_REG_CONF, INA219_RST);
6000ce32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
6000ce36:	2100      	movs	r1, #0
6000ce38:	6868      	ldr	r0, [r5, #4]
6000ce3a:	f00b fd92 	bl	60018962 <ina219_reg_write.isra.0>
	if (rc) {
6000ce3e:	4604      	mov	r4, r0
6000ce40:	b150      	cbz	r0, 6000ce58 <ina219_init+0x54>
		LOG_ERR("Could not reset device.");
6000ce42:	4b2b      	ldr	r3, [pc, #172]	; (6000cef0 <ina219_init+0xec>)
		LOG_ERR("Could not set configuration data.");
6000ce44:	9305      	str	r3, [sp, #20]
6000ce46:	2302      	movs	r3, #2
6000ce48:	aa04      	add	r2, sp, #16
6000ce4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000ce4e:	4827      	ldr	r0, [pc, #156]	; (6000ceec <ina219_init+0xe8>)
6000ce50:	9304      	str	r3, [sp, #16]
6000ce52:	f00b fd62 	bl	6001891a <z_log_msg_static_create.constprop.0>
		return rc;
6000ce56:	e7e9      	b.n	6000ce2c <ina219_init+0x28>
	rc = ina219_set_config(dev);
6000ce58:	6868      	ldr	r0, [r5, #4]
	return ina219_reg_write(dev, INA219_REG_CONF, reg_data);
6000ce5a:	4621      	mov	r1, r4
	reg_data = (cfg->brng & INA219_BRNG_MASK) << INA219_BRNG_SHIFT |
6000ce5c:	7b02      	ldrb	r2, [r0, #12]
		(cfg->pg & INA219_PG_MASK) << INA219_PG_SHIFT |
6000ce5e:	7b43      	ldrb	r3, [r0, #13]
	reg_data = (cfg->brng & INA219_BRNG_MASK) << INA219_BRNG_SHIFT |
6000ce60:	0352      	lsls	r2, r2, #13
		(cfg->pg & INA219_PG_MASK) << INA219_PG_SHIFT |
6000ce62:	02db      	lsls	r3, r3, #11
	reg_data = (cfg->brng & INA219_BRNG_MASK) << INA219_BRNG_SHIFT |
6000ce64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
		(cfg->pg & INA219_PG_MASK) << INA219_PG_SHIFT |
6000ce68:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
	reg_data = (cfg->brng & INA219_BRNG_MASK) << INA219_BRNG_SHIFT |
6000ce6c:	431a      	orrs	r2, r3
		(cfg->mode & INA219_MODE_NORMAL);
6000ce6e:	7c03      	ldrb	r3, [r0, #16]
6000ce70:	f003 0303 	and.w	r3, r3, #3
		(cfg->sadc & INA219_ADC_MASK) << INA219_SADC_SHIFT |
6000ce74:	4313      	orrs	r3, r2
		(cfg->badc & INA219_ADC_MASK) << INA219_BADC_SHIFT |
6000ce76:	7b82      	ldrb	r2, [r0, #14]
6000ce78:	01d2      	lsls	r2, r2, #7
6000ce7a:	f402 62f0 	and.w	r2, r2, #1920	; 0x780
		(cfg->sadc & INA219_ADC_MASK) << INA219_SADC_SHIFT |
6000ce7e:	4313      	orrs	r3, r2
6000ce80:	7bc2      	ldrb	r2, [r0, #15]
6000ce82:	00d2      	lsls	r2, r2, #3
6000ce84:	f002 0278 	and.w	r2, r2, #120	; 0x78
	return ina219_reg_write(dev, INA219_REG_CONF, reg_data);
6000ce88:	431a      	orrs	r2, r3
6000ce8a:	f00b fd6a 	bl	60018962 <ina219_reg_write.isra.0>
	if (rc) {
6000ce8e:	4604      	mov	r4, r0
6000ce90:	b108      	cbz	r0, 6000ce96 <ina219_init+0x92>
		LOG_ERR("Could not set configuration data.");
6000ce92:	4b18      	ldr	r3, [pc, #96]	; (6000cef4 <ina219_init+0xf0>)
6000ce94:	e7d6      	b.n	6000ce44 <ina219_init+0x40>
	rc = ina219_set_calib(dev);
6000ce96:	6868      	ldr	r0, [r5, #4]
	return ina219_reg_write(dev, INA219_REG_CALIB, cal);
6000ce98:	2105      	movs	r1, #5
	cal = INA219_SCALING_FACTOR / ((cfg->r_shunt) * (cfg->current_lsb));
6000ce9a:	8902      	ldrh	r2, [r0, #8]
6000ce9c:	8943      	ldrh	r3, [r0, #10]
6000ce9e:	4353      	muls	r3, r2
6000cea0:	f44f 127a 	mov.w	r2, #4096000	; 0x3e8000
6000cea4:	fbb2 f2f3 	udiv	r2, r2, r3
	return ina219_reg_write(dev, INA219_REG_CALIB, cal);
6000cea8:	b292      	uxth	r2, r2
6000ceaa:	f00b fd5a 	bl	60018962 <ina219_reg_write.isra.0>
	if (rc) {
6000ceae:	4604      	mov	r4, r0
6000ceb0:	2800      	cmp	r0, #0
6000ceb2:	d1bb      	bne.n	6000ce2c <ina219_init+0x28>
	const struct ina219_config *cfg = dev->config;
6000ceb4:	686b      	ldr	r3, [r5, #4]
	struct ina219_data *data = dev->data;
6000ceb6:	6929      	ldr	r1, [r5, #16]
	data->msr_delay = ina219_conv_delay(cfg->badc) +
6000ceb8:	7b9a      	ldrb	r2, [r3, #14]
		ina219_conv_delay(cfg->sadc);
6000ceba:	7bdb      	ldrb	r3, [r3, #15]
6000cebc:	2a0f      	cmp	r2, #15
6000cebe:	bf96      	itet	ls
6000cec0:	480d      	ldrls	r0, [pc, #52]	; (6000cef8 <ina219_init+0xf4>)
	data->msr_delay = ina219_conv_delay(cfg->badc) +
6000cec2:	f06f 0215 	mvnhi.w	r2, #21

static int ina219_init(const struct device *dev);

static inline int ina219_conv_delay(uint8_t delay_idx)
{
	switch (delay_idx) {
6000cec6:	f850 2022 	ldrls.w	r2, [r0, r2, lsl #2]
6000ceca:	2b0f      	cmp	r3, #15
6000cecc:	bf96      	itet	ls
6000cece:	480a      	ldrls	r0, [pc, #40]	; (6000cef8 <ina219_init+0xf4>)
		ina219_conv_delay(cfg->sadc);
6000ced0:	f06f 0315 	mvnhi.w	r3, #21
6000ced4:	f850 3023 	ldrls.w	r3, [r0, r3, lsl #2]
	data->msr_delay = ina219_conv_delay(cfg->badc) +
6000ced8:	4413      	add	r3, r2
6000ceda:	60cb      	str	r3, [r1, #12]
6000cedc:	2100      	movs	r1, #0
6000cede:	2001      	movs	r0, #1
6000cee0:	f004 fed2 	bl	60011c88 <z_impl_k_sleep>
	return 0;
6000cee4:	e7a2      	b.n	6000ce2c <ina219_init+0x28>
6000cee6:	bf00      	nop
6000cee8:	6001df65 	.word	0x6001df65
6000ceec:	6001a38c 	.word	0x6001a38c
6000cef0:	6001df77 	.word	0x6001df77
6000cef4:	6001df8f 	.word	0x6001df8f
6000cef8:	6001bc64 	.word	0x6001bc64

6000cefc <mpu6050_convert_gyro>:
}

/* see "Gyroscope Measurements" section from register map description */
static void mpu6050_convert_gyro(struct sensor_value *val, int16_t raw_val,
				 uint16_t sensitivity_x10)
{
6000cefc:	b570      	push	{r4, r5, r6, lr}
	int64_t conv_val;

	conv_val = ((int64_t)raw_val * SENSOR_PI * 10) /
6000cefe:	4d09      	ldr	r5, [pc, #36]	; (6000cf24 <mpu6050_convert_gyro+0x28>)
{
6000cf00:	4604      	mov	r4, r0
	conv_val = ((int64_t)raw_val * SENSOR_PI * 10) /
6000cf02:	17ce      	asrs	r6, r1, #31
6000cf04:	23b4      	movs	r3, #180	; 0xb4
6000cf06:	fba1 0105 	umull	r0, r1, r1, r5
6000cf0a:	435a      	muls	r2, r3
6000cf0c:	2300      	movs	r3, #0
6000cf0e:	fb05 1106 	mla	r1, r5, r6, r1
6000cf12:	f7f6 fba7 	bl	60003664 <__aeabi_ldivmod>
6000cf16:	4a04      	ldr	r2, [pc, #16]	; (6000cf28 <mpu6050_convert_gyro+0x2c>)
6000cf18:	2300      	movs	r3, #0
6000cf1a:	f7f6 fba3 	bl	60003664 <__aeabi_ldivmod>
		   (sensitivity_x10 * 180U);
	val->val1 = conv_val / 1000000;
	val->val2 = conv_val % 1000000;
6000cf1e:	e9c4 0200 	strd	r0, r2, [r4]
}
6000cf22:	bd70      	pop	{r4, r5, r6, pc}
6000cf24:	01df5e70 	.word	0x01df5e70
6000cf28:	000f4240 	.word	0x000f4240

6000cf2c <mpu6050_sample_fetch>:
	return 0;
}

static int mpu6050_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
6000cf2c:	b530      	push	{r4, r5, lr}
6000cf2e:	223b      	movs	r2, #59	; 0x3b
6000cf30:	b08d      	sub	sp, #52	; 0x34
	struct mpu6050_data *drv_data = dev->data;
	const struct mpu6050_config *cfg = dev->config;
6000cf32:	6843      	ldr	r3, [r0, #4]
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;
6000cf34:	2500      	movs	r5, #0
6000cf36:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
6000cf3a:	f10d 0207 	add.w	r2, sp, #7
	struct mpu6050_data *drv_data = dev->data;
6000cf3e:	6904      	ldr	r4, [r0, #16]
static inline int i2c_burst_read_dt(const struct i2c_dt_spec *spec,
				    uint8_t start_addr,
				    uint8_t *buf,
				    uint32_t num_bytes)
{
	return i2c_burst_read(spec->bus, spec->addr,
6000cf40:	6818      	ldr	r0, [r3, #0]
6000cf42:	889b      	ldrh	r3, [r3, #4]
	msg[0].buf = (uint8_t *)write_buf;
6000cf44:	9206      	str	r2, [sp, #24]
	msg[0].len = num_write;
6000cf46:	2201      	movs	r2, #1
	msg[0].flags = I2C_MSG_WRITE;
6000cf48:	f88d 5020 	strb.w	r5, [sp, #32]
	msg[0].len = num_write;
6000cf4c:	9207      	str	r2, [sp, #28]
	msg[1].buf = (uint8_t *)read_buf;
6000cf4e:	aa02      	add	r2, sp, #8
6000cf50:	9209      	str	r2, [sp, #36]	; 0x24
	msg[1].len = num_read;
6000cf52:	220e      	movs	r2, #14
6000cf54:	920a      	str	r2, [sp, #40]	; 0x28
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
6000cf56:	2207      	movs	r2, #7
6000cf58:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		union { uintptr_t x; uint16_t val; } parm3 = { .val = addr };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
6000cf5c:	2202      	movs	r2, #2
6000cf5e:	a906      	add	r1, sp, #24
6000cf60:	f00b fd18 	bl	60018994 <z_impl_i2c_transfer>
	int16_t buf[7];

	if (i2c_burst_read_dt(&cfg->i2c, MPU6050_REG_DATA_START, (uint8_t *)buf,
6000cf64:	42a8      	cmp	r0, r5
6000cf66:	da0e      	bge.n	6000cf86 <mpu6050_sample_fetch+0x5a>
			      14) < 0) {
		LOG_ERR("Failed to read data sample.");
6000cf68:	4b16      	ldr	r3, [pc, #88]	; (6000cfc4 <mpu6050_sample_fetch+0x98>)
6000cf6a:	930b      	str	r3, [sp, #44]	; 0x2c
6000cf6c:	2302      	movs	r3, #2
6000cf6e:	930a      	str	r3, [sp, #40]	; 0x28
6000cf70:	4815      	ldr	r0, [pc, #84]	; (6000cfc8 <mpu6050_sample_fetch+0x9c>)
6000cf72:	462b      	mov	r3, r5
6000cf74:	aa0a      	add	r2, sp, #40	; 0x28
6000cf76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000cf7a:	f7fb fda3 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		return -EIO;
6000cf7e:	f06f 0004 	mvn.w	r0, #4
	drv_data->gyro_x = sys_be16_to_cpu(buf[4]);
	drv_data->gyro_y = sys_be16_to_cpu(buf[5]);
	drv_data->gyro_z = sys_be16_to_cpu(buf[6]);

	return 0;
}
6000cf82:	b00d      	add	sp, #52	; 0x34
6000cf84:	bd30      	pop	{r4, r5, pc}
	drv_data->accel_x = sys_be16_to_cpu(buf[0]);
6000cf86:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	return 0;
6000cf8a:	4628      	mov	r0, r5
	drv_data->accel_x = sys_be16_to_cpu(buf[0]);
6000cf8c:	ba5b      	rev16	r3, r3
6000cf8e:	8023      	strh	r3, [r4, #0]
	drv_data->accel_y = sys_be16_to_cpu(buf[1]);
6000cf90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
6000cf94:	ba5b      	rev16	r3, r3
6000cf96:	8063      	strh	r3, [r4, #2]
	drv_data->accel_z = sys_be16_to_cpu(buf[2]);
6000cf98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
6000cf9c:	ba5b      	rev16	r3, r3
6000cf9e:	80a3      	strh	r3, [r4, #4]
	drv_data->temp = sys_be16_to_cpu(buf[3]);
6000cfa0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
6000cfa4:	ba5b      	rev16	r3, r3
6000cfa6:	8123      	strh	r3, [r4, #8]
	drv_data->gyro_x = sys_be16_to_cpu(buf[4]);
6000cfa8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
6000cfac:	ba5b      	rev16	r3, r3
6000cfae:	8163      	strh	r3, [r4, #10]
	drv_data->gyro_y = sys_be16_to_cpu(buf[5]);
6000cfb0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
6000cfb4:	ba5b      	rev16	r3, r3
6000cfb6:	81a3      	strh	r3, [r4, #12]
	drv_data->gyro_z = sys_be16_to_cpu(buf[6]);
6000cfb8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
6000cfbc:	ba5b      	rev16	r3, r3
6000cfbe:	81e3      	strh	r3, [r4, #14]
	return 0;
6000cfc0:	e7df      	b.n	6000cf82 <mpu6050_sample_fetch+0x56>
6000cfc2:	bf00      	nop
6000cfc4:	6001dfc2 	.word	0x6001dfc2
6000cfc8:	6001a394 	.word	0x6001a394

6000cfcc <mpu6050_init>:
	.sample_fetch = mpu6050_sample_fetch,
	.channel_get = mpu6050_channel_get,
};

int mpu6050_init(const struct device *dev)
{
6000cfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct mpu6050_data *drv_data = dev->data;
	const struct mpu6050_config *cfg = dev->config;
6000cfd0:	6844      	ldr	r4, [r0, #4]
{
6000cfd2:	b088      	sub	sp, #32
	struct mpu6050_data *drv_data = dev->data;
6000cfd4:	6907      	ldr	r7, [r0, #16]
	uint8_t id, i;

	if (!device_is_ready(cfg->i2c.bus)) {
6000cfd6:	6820      	ldr	r0, [r4, #0]
6000cfd8:	f00c fc4b 	bl	60019872 <z_device_is_ready>
6000cfdc:	4603      	mov	r3, r0
6000cfde:	b970      	cbnz	r0, 6000cffe <mpu6050_init+0x32>
		LOG_ERR("Bus device is not ready");
6000cfe0:	4a55      	ldr	r2, [pc, #340]	; (6000d138 <mpu6050_init+0x16c>)
6000cfe2:	9207      	str	r2, [sp, #28]
6000cfe4:	2202      	movs	r2, #2
6000cfe6:	9206      	str	r2, [sp, #24]
6000cfe8:	4854      	ldr	r0, [pc, #336]	; (6000d13c <mpu6050_init+0x170>)
6000cfea:	aa06      	add	r2, sp, #24
6000cfec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000cff0:	f7fb fd68 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		return -ENODEV;
6000cff4:	f06f 0012 	mvn.w	r0, #18
		}
	}
#endif

	return 0;
}
6000cff8:	b008      	add	sp, #32
6000cffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @return a value from i2c_reg_read_byte()
 */
static inline int i2c_reg_read_byte_dt(const struct i2c_dt_spec *spec,
				       uint8_t reg_addr, uint8_t *value)
{
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
6000cffe:	2275      	movs	r2, #117	; 0x75
6000d000:	6820      	ldr	r0, [r4, #0]
6000d002:	88a3      	ldrh	r3, [r4, #4]
	msg[1].buf = (uint8_t *)read_buf;
6000d004:	f10d 0102 	add.w	r1, sp, #2
6000d008:	f88d 2004 	strb.w	r2, [sp, #4]
	msg[0].len = num_write;
6000d00c:	2201      	movs	r2, #1
	msg[0].buf = (uint8_t *)write_buf;
6000d00e:	ae01      	add	r6, sp, #4
	msg[0].flags = I2C_MSG_WRITE;
6000d010:	2500      	movs	r5, #0
	msg[0].len = num_write;
6000d012:	9203      	str	r2, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
6000d014:	9602      	str	r6, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
6000d016:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].len = num_read;
6000d01a:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
6000d01e:	2207      	movs	r2, #7
6000d020:	f88d 201c 	strb.w	r2, [sp, #28]
6000d024:	2202      	movs	r2, #2
6000d026:	a902      	add	r1, sp, #8
6000d028:	f00b fcb4 	bl	60018994 <z_impl_i2c_transfer>
	if (i2c_reg_read_byte_dt(&cfg->i2c, MPU6050_REG_CHIP_ID, &id) < 0) {
6000d02c:	42a8      	cmp	r0, r5
6000d02e:	da0d      	bge.n	6000d04c <mpu6050_init+0x80>
		LOG_ERR("Failed to read chip ID.");
6000d030:	4b43      	ldr	r3, [pc, #268]	; (6000d140 <mpu6050_init+0x174>)
		LOG_ERR("Failed to wake up chip.");
6000d032:	9307      	str	r3, [sp, #28]
6000d034:	2302      	movs	r3, #2
6000d036:	9306      	str	r3, [sp, #24]
6000d038:	4840      	ldr	r0, [pc, #256]	; (6000d13c <mpu6050_init+0x170>)
6000d03a:	2300      	movs	r3, #0
6000d03c:	aa06      	add	r2, sp, #24
6000d03e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000d042:	f7fb fd3f 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		return -EIO;
6000d046:	f06f 0004 	mvn.w	r0, #4
		return -EIO;
6000d04a:	e7d5      	b.n	6000cff8 <mpu6050_init+0x2c>
	if (id != MPU6050_CHIP_ID && id != MPU9250_CHIP_ID) {
6000d04c:	f89d 3002 	ldrb.w	r3, [sp, #2]
6000d050:	2b68      	cmp	r3, #104	; 0x68
6000d052:	d00f      	beq.n	6000d074 <mpu6050_init+0xa8>
6000d054:	2b71      	cmp	r3, #113	; 0x71
6000d056:	d00d      	beq.n	6000d074 <mpu6050_init+0xa8>
		LOG_ERR("Invalid chip ID.");
6000d058:	4b3a      	ldr	r3, [pc, #232]	; (6000d144 <mpu6050_init+0x178>)
6000d05a:	9307      	str	r3, [sp, #28]
6000d05c:	2302      	movs	r3, #2
6000d05e:	9306      	str	r3, [sp, #24]
6000d060:	4836      	ldr	r0, [pc, #216]	; (6000d13c <mpu6050_init+0x170>)
6000d062:	462b      	mov	r3, r5
6000d064:	aa06      	add	r2, sp, #24
6000d066:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000d06a:	f7fb fd2b 	bl	60008ac4 <z_impl_z_log_msg_static_create>
		return -EINVAL;
6000d06e:	f06f 0015 	mvn.w	r0, #21
6000d072:	e7c1      	b.n	6000cff8 <mpu6050_init+0x2c>
	msg[0].flags = I2C_MSG_WRITE;
6000d074:	2300      	movs	r3, #0
 */
static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
					 uint8_t reg_addr, uint8_t mask,
					 uint8_t value)
{
	return i2c_reg_update_byte(spec->bus, spec->addr,
6000d076:	f8d4 8000 	ldr.w	r8, [r4]
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
6000d07a:	f894 a004 	ldrb.w	sl, [r4, #4]
	msg[0].len = num_write;
6000d07e:	2501      	movs	r5, #1
	msg[0].flags = I2C_MSG_WRITE;
6000d080:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
6000d084:	f10d 0303 	add.w	r3, sp, #3
6000d088:	f04f 096b 	mov.w	r9, #107	; 0x6b
	msg[0].buf = (uint8_t *)write_buf;
6000d08c:	9602      	str	r6, [sp, #8]
	msg[0].len = num_write;
6000d08e:	9503      	str	r5, [sp, #12]
6000d090:	f88d 9004 	strb.w	r9, [sp, #4]
	msg[1].len = num_read;
6000d094:	e9cd 3505 	strd	r3, r5, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
6000d098:	2307      	movs	r3, #7
6000d09a:	f88d 301c 	strb.w	r3, [sp, #28]
6000d09e:	2202      	movs	r2, #2
6000d0a0:	4653      	mov	r3, sl
6000d0a2:	a902      	add	r1, sp, #8
6000d0a4:	4640      	mov	r0, r8
6000d0a6:	f00b fc75 	bl	60018994 <z_impl_i2c_transfer>
	if (rc != 0) {
6000d0aa:	b9a0      	cbnz	r0, 6000d0d6 <mpu6050_init+0x10a>
	new_value = (old_value & ~mask) | (value & mask);
6000d0ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if (new_value == old_value) {
6000d0b0:	065a      	lsls	r2, r3, #25
6000d0b2:	d514      	bpl.n	6000d0de <mpu6050_init+0x112>
	uint8_t tx_buf[2] = {reg_addr, value};
6000d0b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
6000d0b8:	f88d 9004 	strb.w	r9, [sp, #4]
	msg.buf = (uint8_t *)buf;
6000d0bc:	9602      	str	r6, [sp, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
6000d0be:	f88d 3005 	strb.w	r3, [sp, #5]
	msg.len = num_bytes;
6000d0c2:	2302      	movs	r3, #2
6000d0c4:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
6000d0c6:	f88d 3010 	strb.w	r3, [sp, #16]
6000d0ca:	4653      	mov	r3, sl
6000d0cc:	462a      	mov	r2, r5
6000d0ce:	a902      	add	r1, sp, #8
6000d0d0:	4640      	mov	r0, r8
6000d0d2:	f00b fc5f 	bl	60018994 <z_impl_i2c_transfer>
	if (i2c_reg_update_byte_dt(&cfg->i2c, MPU6050_REG_PWR_MGMT1,
6000d0d6:	2800      	cmp	r0, #0
6000d0d8:	da01      	bge.n	6000d0de <mpu6050_init+0x112>
		LOG_ERR("Failed to wake up chip.");
6000d0da:	4b1b      	ldr	r3, [pc, #108]	; (6000d148 <mpu6050_init+0x17c>)
6000d0dc:	e7a9      	b.n	6000d032 <mpu6050_init+0x66>
	msg.len = num_bytes;
6000d0de:	2502      	movs	r5, #2
	uint8_t tx_buf[2] = {reg_addr, value};
6000d0e0:	221c      	movs	r2, #28
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
6000d0e2:	6820      	ldr	r0, [r4, #0]
6000d0e4:	88a3      	ldrh	r3, [r4, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
6000d0e6:	f8ad 2004 	strh.w	r2, [sp, #4]
	msg.buf = (uint8_t *)buf;
6000d0ea:	9602      	str	r6, [sp, #8]
	msg.len = num_bytes;
6000d0ec:	9503      	str	r5, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
6000d0ee:	f88d 5010 	strb.w	r5, [sp, #16]
6000d0f2:	2201      	movs	r2, #1
6000d0f4:	a902      	add	r1, sp, #8
6000d0f6:	f00b fc4d 	bl	60018994 <z_impl_i2c_transfer>
	if (i2c_reg_write_byte_dt(&cfg->i2c, MPU6050_REG_ACCEL_CFG,
6000d0fa:	2800      	cmp	r0, #0
6000d0fc:	da03      	bge.n	6000d106 <mpu6050_init+0x13a>
		LOG_ERR("Failed to write accel full-scale range.");
6000d0fe:	4b13      	ldr	r3, [pc, #76]	; (6000d14c <mpu6050_init+0x180>)
		LOG_ERR("Failed to write gyro full-scale range.");
6000d100:	e9cd 5306 	strd	r5, r3, [sp, #24]
	compiler_barrier();
6000d104:	e798      	b.n	6000d038 <mpu6050_init+0x6c>
	drv_data->accel_sensitivity_shift = 14 - i;
6000d106:	230e      	movs	r3, #14
	uint8_t tx_buf[2] = {reg_addr, value};
6000d108:	221b      	movs	r2, #27
6000d10a:	80fb      	strh	r3, [r7, #6]
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
6000d10c:	6820      	ldr	r0, [r4, #0]
6000d10e:	88a3      	ldrh	r3, [r4, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
6000d110:	f8ad 2004 	strh.w	r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
6000d114:	f88d 5010 	strb.w	r5, [sp, #16]
	msg.len = num_bytes;
6000d118:	e9cd 6502 	strd	r6, r5, [sp, #8]
6000d11c:	2201      	movs	r2, #1
6000d11e:	a902      	add	r1, sp, #8
6000d120:	f00b fc38 	bl	60018994 <z_impl_i2c_transfer>
	if (i2c_reg_write_byte_dt(&cfg->i2c, MPU6050_REG_GYRO_CFG,
6000d124:	2800      	cmp	r0, #0
6000d126:	da01      	bge.n	6000d12c <mpu6050_init+0x160>
		LOG_ERR("Failed to write gyro full-scale range.");
6000d128:	4b09      	ldr	r3, [pc, #36]	; (6000d150 <mpu6050_init+0x184>)
6000d12a:	e7e9      	b.n	6000d100 <mpu6050_init+0x134>
	drv_data->gyro_sensitivity_x10 = mpu6050_gyro_sensitivity_x10[i];
6000d12c:	f240 531e 	movw	r3, #1310	; 0x51e
	return 0;
6000d130:	2000      	movs	r0, #0
	drv_data->gyro_sensitivity_x10 = mpu6050_gyro_sensitivity_x10[i];
6000d132:	823b      	strh	r3, [r7, #16]
	return 0;
6000d134:	e760      	b.n	6000cff8 <mpu6050_init+0x2c>
6000d136:	bf00      	nop
6000d138:	6001dfde 	.word	0x6001dfde
6000d13c:	6001a394 	.word	0x6001a394
6000d140:	6001dff6 	.word	0x6001dff6
6000d144:	6001e00e 	.word	0x6001e00e
6000d148:	6001e01f 	.word	0x6001e01f
6000d14c:	6001e037 	.word	0x6001e037
6000d150:	6001e05f 	.word	0x6001e05f

6000d154 <mpu6050_channel_get>:
{
6000d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000d156:	4614      	mov	r4, r2
	struct mpu6050_data *drv_data = dev->data;
6000d158:	6905      	ldr	r5, [r0, #16]
	switch (chan) {
6000d15a:	2907      	cmp	r1, #7
6000d15c:	f200 80ac 	bhi.w	6000d2b8 <mpu6050_channel_get+0x164>
6000d160:	e8df f001 	tbb	[pc, r1]
6000d164:	04858261 	.word	0x04858261
6000d168:	88a6a29d 	.word	0x88a6a29d
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000d16c:	4e6b      	ldr	r6, [pc, #428]	; (6000d31c <mpu6050_channel_get+0x1c8>)
6000d16e:	f9b5 0000 	ldrsh.w	r0, [r5]
6000d172:	88e9      	ldrh	r1, [r5, #6]
6000d174:	17c3      	asrs	r3, r0, #31
6000d176:	fba0 0c06 	umull	r0, ip, r0, r6
6000d17a:	f1c1 0220 	rsb	r2, r1, #32
6000d17e:	fb06 cc03 	mla	ip, r6, r3, ip
6000d182:	40c8      	lsrs	r0, r1
6000d184:	f1b1 0320 	subs.w	r3, r1, #32
6000d188:	fa0c f202 	lsl.w	r2, ip, r2
6000d18c:	fa4c f101 	asr.w	r1, ip, r1
6000d190:	bf58      	it	pl
6000d192:	fa4c f303 	asrpl.w	r3, ip, r3
6000d196:	ea40 0002 	orr.w	r0, r0, r2
6000d19a:	4a61      	ldr	r2, [pc, #388]	; (6000d320 <mpu6050_channel_get+0x1cc>)
6000d19c:	bf58      	it	pl
6000d19e:	4318      	orrpl	r0, r3
6000d1a0:	2300      	movs	r3, #0
6000d1a2:	f7f6 fa5f 	bl	60003664 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
6000d1a6:	e9c4 0200 	strd	r0, r2, [r4]
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000d1aa:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
6000d1ae:	88e9      	ldrh	r1, [r5, #6]
6000d1b0:	17c3      	asrs	r3, r0, #31
6000d1b2:	fba0 0c06 	umull	r0, ip, r0, r6
6000d1b6:	f1c1 0220 	rsb	r2, r1, #32
6000d1ba:	fb06 cc03 	mla	ip, r6, r3, ip
6000d1be:	40c8      	lsrs	r0, r1
6000d1c0:	f1b1 0320 	subs.w	r3, r1, #32
6000d1c4:	fa0c f202 	lsl.w	r2, ip, r2
6000d1c8:	fa4c f101 	asr.w	r1, ip, r1
6000d1cc:	bf58      	it	pl
6000d1ce:	fa4c f303 	asrpl.w	r3, ip, r3
6000d1d2:	ea40 0002 	orr.w	r0, r0, r2
6000d1d6:	4a52      	ldr	r2, [pc, #328]	; (6000d320 <mpu6050_channel_get+0x1cc>)
6000d1d8:	bf58      	it	pl
6000d1da:	4318      	orrpl	r0, r3
6000d1dc:	2300      	movs	r3, #0
6000d1de:	f7f6 fa41 	bl	60003664 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
6000d1e2:	e9c4 0202 	strd	r0, r2, [r4, #8]
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000d1e6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
6000d1ea:	88e9      	ldrh	r1, [r5, #6]
6000d1ec:	17c3      	asrs	r3, r0, #31
6000d1ee:	fba0 0706 	umull	r0, r7, r0, r6
6000d1f2:	f1c1 0220 	rsb	r2, r1, #32
6000d1f6:	fb06 7703 	mla	r7, r6, r3, r7
6000d1fa:	40c8      	lsrs	r0, r1
6000d1fc:	f1b1 0320 	subs.w	r3, r1, #32
6000d200:	fa07 f202 	lsl.w	r2, r7, r2
6000d204:	fa47 f101 	asr.w	r1, r7, r1
6000d208:	bf58      	it	pl
6000d20a:	fa47 f303 	asrpl.w	r3, r7, r3
6000d20e:	ea40 0002 	orr.w	r0, r0, r2
6000d212:	4a43      	ldr	r2, [pc, #268]	; (6000d320 <mpu6050_channel_get+0x1cc>)
6000d214:	bf58      	it	pl
6000d216:	4318      	orrpl	r0, r3
6000d218:	2300      	movs	r3, #0
6000d21a:	f7f6 fa23 	bl	60003664 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
6000d21e:	e9c4 0204 	strd	r0, r2, [r4, #16]
}
6000d222:	2000      	movs	r0, #0
6000d224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000d226:	f9b5 0000 	ldrsh.w	r0, [r5]
6000d22a:	4b3c      	ldr	r3, [pc, #240]	; (6000d31c <mpu6050_channel_get+0x1c8>)
6000d22c:	17c2      	asrs	r2, r0, #31
6000d22e:	88e9      	ldrh	r1, [r5, #6]
6000d230:	fba0 0603 	umull	r0, r6, r0, r3
6000d234:	fb03 6602 	mla	r6, r3, r2, r6
6000d238:	f1c1 0220 	rsb	r2, r1, #32
6000d23c:	f1b1 0320 	subs.w	r3, r1, #32
6000d240:	fa20 f001 	lsr.w	r0, r0, r1
6000d244:	fa06 f202 	lsl.w	r2, r6, r2
6000d248:	fa46 f101 	asr.w	r1, r6, r1
6000d24c:	bf58      	it	pl
6000d24e:	fa46 f303 	asrpl.w	r3, r6, r3
6000d252:	ea40 0002 	orr.w	r0, r0, r2
6000d256:	4a32      	ldr	r2, [pc, #200]	; (6000d320 <mpu6050_channel_get+0x1cc>)
6000d258:	bf58      	it	pl
6000d25a:	4318      	orrpl	r0, r3
6000d25c:	2300      	movs	r3, #0
6000d25e:	f7f6 fa01 	bl	60003664 <__aeabi_ldivmod>
	val->val2 = conv_val % 1000000;
6000d262:	e9c4 0200 	strd	r0, r2, [r4]
}
6000d266:	e7dc      	b.n	6000d222 <mpu6050_channel_get+0xce>
	conv_val = ((int64_t)raw_val * SENSOR_G) >> sensitivity_shift;
6000d268:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
6000d26c:	e7dd      	b.n	6000d22a <mpu6050_channel_get+0xd6>
6000d26e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
6000d272:	e7da      	b.n	6000d22a <mpu6050_channel_get+0xd6>
		mpu6050_convert_gyro(val, drv_data->gyro_x,
6000d274:	8a2a      	ldrh	r2, [r5, #16]
6000d276:	4620      	mov	r0, r4
6000d278:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
6000d27c:	f7ff fe3e 	bl	6000cefc <mpu6050_convert_gyro>
		mpu6050_convert_gyro(val + 1, drv_data->gyro_y,
6000d280:	8a2a      	ldrh	r2, [r5, #16]
6000d282:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
6000d286:	f104 0008 	add.w	r0, r4, #8
6000d28a:	f7ff fe37 	bl	6000cefc <mpu6050_convert_gyro>
		mpu6050_convert_gyro(val + 2, drv_data->gyro_z,
6000d28e:	8a2a      	ldrh	r2, [r5, #16]
6000d290:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
6000d294:	f104 0010 	add.w	r0, r4, #16
		mpu6050_convert_gyro(val, drv_data->gyro_z,
6000d298:	f7ff fe30 	bl	6000cefc <mpu6050_convert_gyro>
		break;
6000d29c:	e7c1      	b.n	6000d222 <mpu6050_channel_get+0xce>
		mpu6050_convert_gyro(val, drv_data->gyro_x,
6000d29e:	8a2a      	ldrh	r2, [r5, #16]
6000d2a0:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
		mpu6050_convert_gyro(val, drv_data->gyro_z,
6000d2a4:	4620      	mov	r0, r4
6000d2a6:	e7f7      	b.n	6000d298 <mpu6050_channel_get+0x144>
		mpu6050_convert_gyro(val, drv_data->gyro_y,
6000d2a8:	8a2a      	ldrh	r2, [r5, #16]
6000d2aa:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
6000d2ae:	e7f9      	b.n	6000d2a4 <mpu6050_channel_get+0x150>
		mpu6050_convert_gyro(val, drv_data->gyro_z,
6000d2b0:	8a2a      	ldrh	r2, [r5, #16]
6000d2b2:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
6000d2b6:	e7f5      	b.n	6000d2a4 <mpu6050_channel_get+0x150>
		mpu6050_convert_temp(val, drv_data->temp);
6000d2b8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
	val->val1 = raw_val / 340 + 36;
6000d2bc:	f44f 72aa 	mov.w	r2, #340	; 0x154
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000d2c0:	4e17      	ldr	r6, [pc, #92]	; (6000d320 <mpu6050_channel_get+0x1cc>)
	val->val1 = raw_val / 340 + 36;
6000d2c2:	fb91 f3f2 	sdiv	r3, r1, r2
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000d2c6:	fb02 1113 	mls	r1, r2, r3, r1
	val->val1 = raw_val / 340 + 36;
6000d2ca:	f103 0024 	add.w	r0, r3, #36	; 0x24
6000d2ce:	b21d      	sxth	r5, r3
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000d2d0:	f44f 72aa 	mov.w	r2, #340	; 0x154
	val->val1 = raw_val / 340 + 36;
6000d2d4:	6020      	str	r0, [r4, #0]
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000d2d6:	b208      	sxth	r0, r1
6000d2d8:	f341 31c0 	sbfx	r1, r1, #15, #1
6000d2dc:	2300      	movs	r3, #0
6000d2de:	fba0 0706 	umull	r0, r7, r0, r6
6000d2e2:	fb06 7101 	mla	r1, r6, r1, r7
6000d2e6:	f7f6 f9bd 	bl	60003664 <__aeabi_ldivmod>
6000d2ea:	f500 2301 	add.w	r3, r0, #528384	; 0x81000
6000d2ee:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
	if (val->val2 < 0) {
6000d2f2:	2b00      	cmp	r3, #0
	val->val2 = ((int64_t)(raw_val % 340) * 1000000) / 340 + 530000;
6000d2f4:	6063      	str	r3, [r4, #4]
	if (val->val2 < 0) {
6000d2f6:	da05      	bge.n	6000d304 <mpu6050_channel_get+0x1b0>
		val->val2 += 1000000;
6000d2f8:	4b0a      	ldr	r3, [pc, #40]	; (6000d324 <mpu6050_channel_get+0x1d0>)
		val->val1--;
6000d2fa:	3523      	adds	r5, #35	; 0x23
		val->val2 += 1000000;
6000d2fc:	4403      	add	r3, r0
		val->val1--;
6000d2fe:	6025      	str	r5, [r4, #0]
		val->val2 += 1000000;
6000d300:	6063      	str	r3, [r4, #4]
6000d302:	e78e      	b.n	6000d222 <mpu6050_channel_get+0xce>
	} else if (val->val2 >= 1000000) {
6000d304:	4a08      	ldr	r2, [pc, #32]	; (6000d328 <mpu6050_channel_get+0x1d4>)
6000d306:	4293      	cmp	r3, r2
6000d308:	dd8b      	ble.n	6000d222 <mpu6050_channel_get+0xce>
		val->val2 -= 1000000;
6000d30a:	f5a0 20e5 	sub.w	r0, r0, #468992	; 0x72800
		val->val1++;
6000d30e:	3525      	adds	r5, #37	; 0x25
		val->val2 -= 1000000;
6000d310:	f5a0 707c 	sub.w	r0, r0, #1008	; 0x3f0
		val->val1++;
6000d314:	6025      	str	r5, [r4, #0]
		val->val2 -= 1000000;
6000d316:	6060      	str	r0, [r4, #4]
6000d318:	e783      	b.n	6000d222 <mpu6050_channel_get+0xce>
6000d31a:	bf00      	nop
6000d31c:	0095a33a 	.word	0x0095a33a
6000d320:	000f4240 	.word	0x000f4240
6000d324:	00175890 	.word	0x00175890
6000d328:	000f423f 	.word	0x000f423f

6000d32c <z_impl_hwinfo_get_device_id>:
struct imxrt_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
6000d32c:	b573      	push	{r0, r1, r4, r5, r6, lr}

#ifdef CONFIG_SOC_SERIES_IMX_RT11XX
	dev_id.id[0] = sys_cpu_to_be32(OCOTP->FUSEN[17].FUSE);
	dev_id.id[1] = sys_cpu_to_be32(OCOTP->FUSEN[16].FUSE);
#else
	dev_id.id[0] = sys_cpu_to_be32(OCOTP->CFG2);
6000d32e:	4c1a      	ldr	r4, [pc, #104]	; (6000d398 <z_impl_hwinfo_get_device_id+0x6c>)
	dev_id.id[1] = sys_cpu_to_be32(OCOTP->CFG1);
#endif

	if (length > sizeof(dev_id.id)) {
6000d330:	2908      	cmp	r1, #8
	dev_id.id[0] = sys_cpu_to_be32(OCOTP->CFG2);
6000d332:	f8d4 6430 	ldr.w	r6, [r4, #1072]	; 0x430
	if (length > sizeof(dev_id.id)) {
6000d336:	bf28      	it	cs
6000d338:	2108      	movcs	r1, #8
	dev_id.id[0] = sys_cpu_to_be32(OCOTP->CFG2);
6000d33a:	f8d4 5430 	ldr.w	r5, [r4, #1072]	; 0x430
6000d33e:	f8d4 2430 	ldr.w	r2, [r4, #1072]	; 0x430
6000d342:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
6000d346:	0a2d      	lsrs	r5, r5, #8
6000d348:	0212      	lsls	r2, r2, #8
6000d34a:	061b      	lsls	r3, r3, #24
6000d34c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
6000d350:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
6000d354:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
6000d358:	432b      	orrs	r3, r5
6000d35a:	4313      	orrs	r3, r2
6000d35c:	9300      	str	r3, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(OCOTP->CFG1);
6000d35e:	f8d4 6420 	ldr.w	r6, [r4, #1056]	; 0x420
6000d362:	f8d4 5420 	ldr.w	r5, [r4, #1056]	; 0x420
6000d366:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
6000d36a:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
6000d36e:	0a2c      	lsrs	r4, r5, #8
6000d370:	061b      	lsls	r3, r3, #24
6000d372:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
6000d376:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
6000d37a:	4323      	orrs	r3, r4
6000d37c:	0214      	lsls	r4, r2, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
6000d37e:	460a      	mov	r2, r1
6000d380:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
6000d384:	4323      	orrs	r3, r4
	if (length > sizeof(dev_id.id)) {
6000d386:	460c      	mov	r4, r1
6000d388:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(OCOTP->CFG1);
6000d38a:	9301      	str	r3, [sp, #4]
6000d38c:	f7f6 f9d4 	bl	60003738 <memcpy>
	}

	memcpy(buffer, dev_id.id, length);

	return length;
}
6000d390:	4620      	mov	r0, r4
6000d392:	b002      	add	sp, #8
6000d394:	bd70      	pop	{r4, r5, r6, pc}
6000d396:	bf00      	nop
6000d398:	401f4000 	.word	0x401f4000

6000d39c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
6000d39c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
6000d3a0:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
6000d3a2:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
6000d3a4:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
6000d3a6:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
6000d3a8:	f411 3f80 	tst.w	r1, #65536	; 0x10000
6000d3ac:	4b08      	ldr	r3, [pc, #32]	; (6000d3d0 <elapsed+0x34>)
6000d3ae:	4909      	ldr	r1, [pc, #36]	; (6000d3d4 <elapsed+0x38>)
6000d3b0:	d101      	bne.n	6000d3b6 <elapsed+0x1a>
	    || (val1 < val2)) {
6000d3b2:	4282      	cmp	r2, r0
6000d3b4:	d206      	bcs.n	6000d3c4 <elapsed+0x28>
		overflow_cyc += last_load;
6000d3b6:	681a      	ldr	r2, [r3, #0]
6000d3b8:	680c      	ldr	r4, [r1, #0]
6000d3ba:	4422      	add	r2, r4
6000d3bc:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
6000d3be:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
6000d3c2:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
6000d3c4:	681b      	ldr	r3, [r3, #0]
6000d3c6:	680a      	ldr	r2, [r1, #0]
6000d3c8:	4413      	add	r3, r2
}
6000d3ca:	1a18      	subs	r0, r3, r0
6000d3cc:	bd10      	pop	{r4, pc}
6000d3ce:	bf00      	nop
6000d3d0:	20204cbc 	.word	0x20204cbc
6000d3d4:	20204cc8 	.word	0x20204cc8

6000d3d8 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
6000d3d8:	4b09      	ldr	r3, [pc, #36]	; (6000d400 <sys_clock_driver_init+0x28>)
6000d3da:	2210      	movs	r2, #16
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
6000d3dc:	2000      	movs	r0, #0
6000d3de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
6000d3e2:	f64e 225f 	movw	r2, #59999	; 0xea5f
6000d3e6:	4b07      	ldr	r3, [pc, #28]	; (6000d404 <sys_clock_driver_init+0x2c>)
6000d3e8:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
6000d3ea:	4b07      	ldr	r3, [pc, #28]	; (6000d408 <sys_clock_driver_init+0x30>)
6000d3ec:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
6000d3ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000d3f2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
6000d3f4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
6000d3f6:	691a      	ldr	r2, [r3, #16]
6000d3f8:	f042 0207 	orr.w	r2, r2, #7
6000d3fc:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
6000d3fe:	4770      	bx	lr
6000d400:	e000ed00 	.word	0xe000ed00
6000d404:	20204cc8 	.word	0x20204cc8
6000d408:	20204cbc 	.word	0x20204cbc

6000d40c <sys_clock_isr>:
{
6000d40c:	b508      	push	{r3, lr}
	elapsed();
6000d40e:	f7ff ffc5 	bl	6000d39c <elapsed>
	cycle_count += overflow_cyc;
6000d412:	4b0c      	ldr	r3, [pc, #48]	; (6000d444 <sys_clock_isr+0x38>)
6000d414:	4a0c      	ldr	r2, [pc, #48]	; (6000d448 <sys_clock_isr+0x3c>)
6000d416:	6818      	ldr	r0, [r3, #0]
6000d418:	6811      	ldr	r1, [r2, #0]
6000d41a:	4408      	add	r0, r1
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
6000d41c:	f64e 2160 	movw	r1, #60000	; 0xea60
	cycle_count += overflow_cyc;
6000d420:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
6000d422:	2200      	movs	r2, #0
6000d424:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
6000d426:	4a09      	ldr	r2, [pc, #36]	; (6000d44c <sys_clock_isr+0x40>)
6000d428:	6813      	ldr	r3, [r2, #0]
6000d42a:	1ac0      	subs	r0, r0, r3
6000d42c:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
6000d430:	fb01 3300 	mla	r3, r1, r0, r3
6000d434:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
6000d436:	f004 ff79 	bl	6001232c <sys_clock_announce>
}
6000d43a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
6000d43e:	f7fd bb5d 	b.w	6000aafc <z_arm_exc_exit>
6000d442:	bf00      	nop
6000d444:	20204cbc 	.word	0x20204cbc
6000d448:	20204cc4 	.word	0x20204cc4
6000d44c:	20204cc0 	.word	0x20204cc0

6000d450 <sys_clock_set_timeout>:
{
6000d450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000d454:	4e44      	ldr	r6, [pc, #272]	; (6000d568 <sys_clock_set_timeout+0x118>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
6000d456:	b371      	cbz	r1, 6000d4b6 <sys_clock_set_timeout+0x66>
6000d458:	1c42      	adds	r2, r0, #1
6000d45a:	d10a      	bne.n	6000d472 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
6000d45c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
6000d460:	6913      	ldr	r3, [r2, #16]
6000d462:	f023 0301 	bic.w	r3, r3, #1
6000d466:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
6000d468:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
6000d46c:	6033      	str	r3, [r6, #0]
}
6000d46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
6000d472:	6834      	ldr	r4, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
6000d474:	2801      	cmp	r0, #1
6000d476:	dd24      	ble.n	6000d4c2 <sys_clock_set_timeout+0x72>
6000d478:	f5b0 7f8b 	cmp.w	r0, #278	; 0x116
6000d47c:	dc24      	bgt.n	6000d4c8 <sys_clock_set_timeout+0x78>
6000d47e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
6000d482:	f04f 0310 	mov.w	r3, #16
6000d486:	f3ef 8511 	mrs	r5, BASEPRI
6000d48a:	f383 8812 	msr	BASEPRI_MAX, r3
6000d48e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d492:	4836      	ldr	r0, [pc, #216]	; (6000d56c <sys_clock_set_timeout+0x11c>)
6000d494:	f002 fc9a 	bl	6000fdcc <z_spin_lock_valid>
6000d498:	b9c8      	cbnz	r0, 6000d4ce <sys_clock_set_timeout+0x7e>
6000d49a:	2394      	movs	r3, #148	; 0x94
6000d49c:	4a34      	ldr	r2, [pc, #208]	; (6000d570 <sys_clock_set_timeout+0x120>)
6000d49e:	4935      	ldr	r1, [pc, #212]	; (6000d574 <sys_clock_set_timeout+0x124>)
6000d4a0:	4835      	ldr	r0, [pc, #212]	; (6000d578 <sys_clock_set_timeout+0x128>)
6000d4a2:	f00a fd2e 	bl	60017f02 <assert_print>
6000d4a6:	4931      	ldr	r1, [pc, #196]	; (6000d56c <sys_clock_set_timeout+0x11c>)
6000d4a8:	4834      	ldr	r0, [pc, #208]	; (6000d57c <sys_clock_set_timeout+0x12c>)
6000d4aa:	f00a fd2a 	bl	60017f02 <assert_print>
6000d4ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d4b0:	482f      	ldr	r0, [pc, #188]	; (6000d570 <sys_clock_set_timeout+0x120>)
6000d4b2:	f00a fd1f 	bl	60017ef4 <assert_post_action>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
6000d4b6:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
6000d4b8:	6834      	ldr	r4, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
6000d4ba:	d1db      	bne.n	6000d474 <sys_clock_set_timeout+0x24>
6000d4bc:	f44f 708b 	mov.w	r0, #278	; 0x116
6000d4c0:	e7dd      	b.n	6000d47e <sys_clock_set_timeout+0x2e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
6000d4c2:	f04f 0800 	mov.w	r8, #0
6000d4c6:	e7dc      	b.n	6000d482 <sys_clock_set_timeout+0x32>
6000d4c8:	f44f 788b 	mov.w	r8, #278	; 0x116
6000d4cc:	e7d9      	b.n	6000d482 <sys_clock_set_timeout+0x32>
	z_spin_lock_set_owner(l);
6000d4ce:	4827      	ldr	r0, [pc, #156]	; (6000d56c <sys_clock_set_timeout+0x11c>)
6000d4d0:	f002 fc98 	bl	6000fe04 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
6000d4d4:	f7ff ff62 	bl	6000d39c <elapsed>
	val1 = SysTick->VAL;
6000d4d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
6000d4dc:	4928      	ldr	r1, [pc, #160]	; (6000d580 <sys_clock_set_timeout+0x130>)
	overflow_cyc = 0U;
6000d4de:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
6000d4e0:	699f      	ldr	r7, [r3, #24]
	cycle_count += pending;
6000d4e2:	680b      	ldr	r3, [r1, #0]
6000d4e4:	4418      	add	r0, r3
	overflow_cyc = 0U;
6000d4e6:	4b27      	ldr	r3, [pc, #156]	; (6000d584 <sys_clock_set_timeout+0x134>)
6000d4e8:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
6000d4ea:	4b27      	ldr	r3, [pc, #156]	; (6000d588 <sys_clock_set_timeout+0x138>)
6000d4ec:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
6000d4ee:	1ac2      	subs	r2, r0, r3
6000d4f0:	d432      	bmi.n	6000d558 <sys_clock_set_timeout+0x108>
		delay = ticks * CYC_PER_TICK;
6000d4f2:	f64e 2c60 	movw	ip, #60000	; 0xea60
		delay -= unannounced;
6000d4f6:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
6000d4f8:	fb0c 2208 	mla	r2, ip, r8, r2
6000d4fc:	f502 426a 	add.w	r2, r2, #59904	; 0xea00
6000d500:	325f      	adds	r2, #95	; 0x5f
6000d502:	fbb2 f2fc 	udiv	r2, r2, ip
		delay -= unannounced;
6000d506:	fb0c 3302 	mla	r3, ip, r2, r3
		delay = MAX(delay, MIN_DELAY);
6000d50a:	f640 62a6 	movw	r2, #3750	; 0xea6
6000d50e:	4293      	cmp	r3, r2
6000d510:	d922      	bls.n	6000d558 <sys_clock_set_timeout+0x108>
		if (delay > MAX_CYCLES) {
6000d512:	4a1e      	ldr	r2, [pc, #120]	; (6000d58c <sys_clock_set_timeout+0x13c>)
6000d514:	4293      	cmp	r3, r2
6000d516:	bf28      	it	cs
6000d518:	4613      	movcs	r3, r2
	val2 = SysTick->VAL;
6000d51a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
6000d51e:	6033      	str	r3, [r6, #0]
	SysTick->LOAD = last_load - 1;
6000d520:	3b01      	subs	r3, #1
	val2 = SysTick->VAL;
6000d522:	6996      	ldr	r6, [r2, #24]
	SysTick->LOAD = last_load - 1;
6000d524:	6153      	str	r3, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
6000d526:	2300      	movs	r3, #0
	if (val1 < val2) {
6000d528:	42b7      	cmp	r7, r6
6000d52a:	eba7 0706 	sub.w	r7, r7, r6
	SysTick->VAL = 0; /* resets timer to last_load */
6000d52e:	6193      	str	r3, [r2, #24]
		cycle_count += (val1 + (last_load_ - val2));
6000d530:	bf38      	it	cc
6000d532:	193f      	addcc	r7, r7, r4
		cycle_count += (val1 - val2);
6000d534:	4438      	add	r0, r7
6000d536:	6008      	str	r0, [r1, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d538:	480c      	ldr	r0, [pc, #48]	; (6000d56c <sys_clock_set_timeout+0x11c>)
6000d53a:	f002 fc55 	bl	6000fde8 <z_spin_unlock_valid>
6000d53e:	b970      	cbnz	r0, 6000d55e <sys_clock_set_timeout+0x10e>
6000d540:	23c2      	movs	r3, #194	; 0xc2
6000d542:	4a0b      	ldr	r2, [pc, #44]	; (6000d570 <sys_clock_set_timeout+0x120>)
6000d544:	4912      	ldr	r1, [pc, #72]	; (6000d590 <sys_clock_set_timeout+0x140>)
6000d546:	480c      	ldr	r0, [pc, #48]	; (6000d578 <sys_clock_set_timeout+0x128>)
6000d548:	f00a fcdb 	bl	60017f02 <assert_print>
6000d54c:	4907      	ldr	r1, [pc, #28]	; (6000d56c <sys_clock_set_timeout+0x11c>)
6000d54e:	4811      	ldr	r0, [pc, #68]	; (6000d594 <sys_clock_set_timeout+0x144>)
6000d550:	f00a fcd7 	bl	60017f02 <assert_print>
6000d554:	21c2      	movs	r1, #194	; 0xc2
6000d556:	e7ab      	b.n	6000d4b0 <sys_clock_set_timeout+0x60>
6000d558:	f640 63a6 	movw	r3, #3750	; 0xea6
6000d55c:	e7dd      	b.n	6000d51a <sys_clock_set_timeout+0xca>
	__asm__ volatile(
6000d55e:	f385 8811 	msr	BASEPRI, r5
6000d562:	f3bf 8f6f 	isb	sy
6000d566:	e782      	b.n	6000d46e <sys_clock_set_timeout+0x1e>
6000d568:	20204cc8 	.word	0x20204cc8
6000d56c:	20204ccc 	.word	0x20204ccc
6000d570:	6001c758 	.word	0x6001c758
6000d574:	6001c785 	.word	0x6001c785
6000d578:	6001c3d7 	.word	0x6001c3d7
6000d57c:	6001c79a 	.word	0x6001c79a
6000d580:	20204cc4 	.word	0x20204cc4
6000d584:	20204cbc 	.word	0x20204cbc
6000d588:	20204cc0 	.word	0x20204cc0
6000d58c:	00fe8440 	.word	0x00fe8440
6000d590:	6001c7b2 	.word	0x6001c7b2
6000d594:	6001c7c9 	.word	0x6001c7c9

6000d598 <sys_clock_elapsed>:
{
6000d598:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
6000d59a:	f04f 0310 	mov.w	r3, #16
6000d59e:	f3ef 8511 	mrs	r5, BASEPRI
6000d5a2:	f383 8812 	msr	BASEPRI_MAX, r3
6000d5a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d5aa:	481b      	ldr	r0, [pc, #108]	; (6000d618 <sys_clock_elapsed+0x80>)
6000d5ac:	f002 fc0e 	bl	6000fdcc <z_spin_lock_valid>
6000d5b0:	b968      	cbnz	r0, 6000d5ce <sys_clock_elapsed+0x36>
6000d5b2:	2394      	movs	r3, #148	; 0x94
6000d5b4:	4a19      	ldr	r2, [pc, #100]	; (6000d61c <sys_clock_elapsed+0x84>)
6000d5b6:	491a      	ldr	r1, [pc, #104]	; (6000d620 <sys_clock_elapsed+0x88>)
6000d5b8:	481a      	ldr	r0, [pc, #104]	; (6000d624 <sys_clock_elapsed+0x8c>)
6000d5ba:	f00a fca2 	bl	60017f02 <assert_print>
6000d5be:	4916      	ldr	r1, [pc, #88]	; (6000d618 <sys_clock_elapsed+0x80>)
6000d5c0:	4819      	ldr	r0, [pc, #100]	; (6000d628 <sys_clock_elapsed+0x90>)
6000d5c2:	f00a fc9e 	bl	60017f02 <assert_print>
6000d5c6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d5c8:	4814      	ldr	r0, [pc, #80]	; (6000d61c <sys_clock_elapsed+0x84>)
6000d5ca:	f00a fc93 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
6000d5ce:	4812      	ldr	r0, [pc, #72]	; (6000d618 <sys_clock_elapsed+0x80>)
6000d5d0:	f002 fc18 	bl	6000fe04 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
6000d5d4:	f7ff fee2 	bl	6000d39c <elapsed>
6000d5d8:	4b14      	ldr	r3, [pc, #80]	; (6000d62c <sys_clock_elapsed+0x94>)
6000d5da:	681c      	ldr	r4, [r3, #0]
6000d5dc:	4b14      	ldr	r3, [pc, #80]	; (6000d630 <sys_clock_elapsed+0x98>)
6000d5de:	681b      	ldr	r3, [r3, #0]
6000d5e0:	1ae4      	subs	r4, r4, r3
6000d5e2:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d5e4:	480c      	ldr	r0, [pc, #48]	; (6000d618 <sys_clock_elapsed+0x80>)
6000d5e6:	f002 fbff 	bl	6000fde8 <z_spin_unlock_valid>
6000d5ea:	b958      	cbnz	r0, 6000d604 <sys_clock_elapsed+0x6c>
6000d5ec:	23c2      	movs	r3, #194	; 0xc2
6000d5ee:	4a0b      	ldr	r2, [pc, #44]	; (6000d61c <sys_clock_elapsed+0x84>)
6000d5f0:	4910      	ldr	r1, [pc, #64]	; (6000d634 <sys_clock_elapsed+0x9c>)
6000d5f2:	480c      	ldr	r0, [pc, #48]	; (6000d624 <sys_clock_elapsed+0x8c>)
6000d5f4:	f00a fc85 	bl	60017f02 <assert_print>
6000d5f8:	4907      	ldr	r1, [pc, #28]	; (6000d618 <sys_clock_elapsed+0x80>)
6000d5fa:	480f      	ldr	r0, [pc, #60]	; (6000d638 <sys_clock_elapsed+0xa0>)
6000d5fc:	f00a fc81 	bl	60017f02 <assert_print>
6000d600:	21c2      	movs	r1, #194	; 0xc2
6000d602:	e7e1      	b.n	6000d5c8 <sys_clock_elapsed+0x30>
	__asm__ volatile(
6000d604:	f385 8811 	msr	BASEPRI, r5
6000d608:	f3bf 8f6f 	isb	sy
}
6000d60c:	f64e 2060 	movw	r0, #60000	; 0xea60
6000d610:	fbb4 f0f0 	udiv	r0, r4, r0
6000d614:	bd38      	pop	{r3, r4, r5, pc}
6000d616:	bf00      	nop
6000d618:	20204ccc 	.word	0x20204ccc
6000d61c:	6001c758 	.word	0x6001c758
6000d620:	6001c785 	.word	0x6001c785
6000d624:	6001c3d7 	.word	0x6001c3d7
6000d628:	6001c79a 	.word	0x6001c79a
6000d62c:	20204cc4 	.word	0x20204cc4
6000d630:	20204cc0 	.word	0x20204cc0
6000d634:	6001c7b2 	.word	0x6001c7b2
6000d638:	6001c7c9 	.word	0x6001c7c9

6000d63c <sys_clock_cycle_get_32>:
{
6000d63c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
6000d63e:	f04f 0310 	mov.w	r3, #16
6000d642:	f3ef 8511 	mrs	r5, BASEPRI
6000d646:	f383 8812 	msr	BASEPRI_MAX, r3
6000d64a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000d64e:	4818      	ldr	r0, [pc, #96]	; (6000d6b0 <sys_clock_cycle_get_32+0x74>)
6000d650:	f002 fbbc 	bl	6000fdcc <z_spin_lock_valid>
6000d654:	b968      	cbnz	r0, 6000d672 <sys_clock_cycle_get_32+0x36>
6000d656:	2394      	movs	r3, #148	; 0x94
6000d658:	4a16      	ldr	r2, [pc, #88]	; (6000d6b4 <sys_clock_cycle_get_32+0x78>)
6000d65a:	4917      	ldr	r1, [pc, #92]	; (6000d6b8 <sys_clock_cycle_get_32+0x7c>)
6000d65c:	4817      	ldr	r0, [pc, #92]	; (6000d6bc <sys_clock_cycle_get_32+0x80>)
6000d65e:	f00a fc50 	bl	60017f02 <assert_print>
6000d662:	4913      	ldr	r1, [pc, #76]	; (6000d6b0 <sys_clock_cycle_get_32+0x74>)
6000d664:	4816      	ldr	r0, [pc, #88]	; (6000d6c0 <sys_clock_cycle_get_32+0x84>)
6000d666:	f00a fc4c 	bl	60017f02 <assert_print>
6000d66a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d66c:	4811      	ldr	r0, [pc, #68]	; (6000d6b4 <sys_clock_cycle_get_32+0x78>)
6000d66e:	f00a fc41 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
6000d672:	480f      	ldr	r0, [pc, #60]	; (6000d6b0 <sys_clock_cycle_get_32+0x74>)
6000d674:	f002 fbc6 	bl	6000fe04 <z_spin_lock_set_owner>
	uint32_t ret = elapsed() + cycle_count;
6000d678:	f7ff fe90 	bl	6000d39c <elapsed>
6000d67c:	4b11      	ldr	r3, [pc, #68]	; (6000d6c4 <sys_clock_cycle_get_32+0x88>)
6000d67e:	681c      	ldr	r4, [r3, #0]
6000d680:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000d682:	480b      	ldr	r0, [pc, #44]	; (6000d6b0 <sys_clock_cycle_get_32+0x74>)
6000d684:	f002 fbb0 	bl	6000fde8 <z_spin_unlock_valid>
6000d688:	b958      	cbnz	r0, 6000d6a2 <sys_clock_cycle_get_32+0x66>
6000d68a:	23c2      	movs	r3, #194	; 0xc2
6000d68c:	4a09      	ldr	r2, [pc, #36]	; (6000d6b4 <sys_clock_cycle_get_32+0x78>)
6000d68e:	490e      	ldr	r1, [pc, #56]	; (6000d6c8 <sys_clock_cycle_get_32+0x8c>)
6000d690:	480a      	ldr	r0, [pc, #40]	; (6000d6bc <sys_clock_cycle_get_32+0x80>)
6000d692:	f00a fc36 	bl	60017f02 <assert_print>
6000d696:	4906      	ldr	r1, [pc, #24]	; (6000d6b0 <sys_clock_cycle_get_32+0x74>)
6000d698:	480c      	ldr	r0, [pc, #48]	; (6000d6cc <sys_clock_cycle_get_32+0x90>)
6000d69a:	f00a fc32 	bl	60017f02 <assert_print>
6000d69e:	21c2      	movs	r1, #194	; 0xc2
6000d6a0:	e7e4      	b.n	6000d66c <sys_clock_cycle_get_32+0x30>
	__asm__ volatile(
6000d6a2:	f385 8811 	msr	BASEPRI, r5
6000d6a6:	f3bf 8f6f 	isb	sy
}
6000d6aa:	4620      	mov	r0, r4
6000d6ac:	bd38      	pop	{r3, r4, r5, pc}
6000d6ae:	bf00      	nop
6000d6b0:	20204ccc 	.word	0x20204ccc
6000d6b4:	6001c758 	.word	0x6001c758
6000d6b8:	6001c785 	.word	0x6001c785
6000d6bc:	6001c3d7 	.word	0x6001c3d7
6000d6c0:	6001c79a 	.word	0x6001c79a
6000d6c4:	20204cc4 	.word	0x20204cc4
6000d6c8:	6001c7b2 	.word	0x6001c7b2
6000d6cc:	6001c7c9 	.word	0x6001c7c9

6000d6d0 <imx_pinctrl_init>:
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000d6d0:	4b12      	ldr	r3, [pc, #72]	; (6000d71c <imx_pinctrl_init+0x4c>)
6000d6d2:	f103 0278 	add.w	r2, r3, #120	; 0x78
6000d6d6:	e852 2f00 	ldrex	r2, [r2]

static inline void _SDK_AtomicLocalClearAndSet4Byte(volatile uint32_t *addr, uint32_t clearBits, uint32_t setBits)
{
    uint32_t s_val;

    _SDK_ATOMIC_LOCAL_OPS_4BYTE(addr, s_val, s_val = (s_val & ~clearBits) | setBits);
6000d6da:	f042 020c 	orr.w	r2, r2, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000d6de:	f103 0078 	add.w	r0, r3, #120	; 0x78
6000d6e2:	e840 2100 	strex	r1, r2, [r0]
6000d6e6:	2900      	cmp	r1, #0
6000d6e8:	d1f3      	bne.n	6000d6d2 <imx_pinctrl_init+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000d6ea:	f103 0270 	add.w	r2, r3, #112	; 0x70
6000d6ee:	e852 2f00 	ldrex	r2, [r2]
6000d6f2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000d6f6:	f103 0070 	add.w	r0, r3, #112	; 0x70
6000d6fa:	e840 2100 	strex	r1, r2, [r0]
6000d6fe:	2900      	cmp	r1, #0
6000d700:	d1f3      	bne.n	6000d6ea <imx_pinctrl_init+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000d702:	f103 0278 	add.w	r2, r3, #120	; 0x78
6000d706:	e852 2f00 	ldrex	r2, [r2]
6000d70a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000d70e:	f103 0178 	add.w	r1, r3, #120	; 0x78
6000d712:	e841 2000 	strex	r0, r2, [r1]
6000d716:	2800      	cmp	r0, #0
6000d718:	d1f3      	bne.n	6000d702 <imx_pinctrl_init+0x32>
#elif defined(CONFIG_SOC_MIMX8MQ6)
	CLOCK_EnableClock(kCLOCK_Iomux);
#endif /* CONFIG_SOC_SERIES_IMX_RT */

	return 0;
}
6000d71a:	4770      	bx	lr
6000d71c:	400fc000 	.word	0x400fc000

6000d720 <CLOCK_GetOscFreq>:
6000d720:	4b04      	ldr	r3, [pc, #16]	; (6000d734 <CLOCK_GetOscFreq+0x14>)
6000d722:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
6000d726:	06db      	lsls	r3, r3, #27
6000d728:	d402      	bmi.n	6000d730 <CLOCK_GetOscFreq+0x10>
6000d72a:	4b03      	ldr	r3, [pc, #12]	; (6000d738 <CLOCK_GetOscFreq+0x18>)
6000d72c:	6818      	ldr	r0, [r3, #0]
6000d72e:	4770      	bx	lr
6000d730:	4802      	ldr	r0, [pc, #8]	; (6000d73c <CLOCK_GetOscFreq+0x1c>)
}
6000d732:	4770      	bx	lr
6000d734:	400d8000 	.word	0x400d8000
6000d738:	20204cd4 	.word	0x20204cd4
6000d73c:	016e3600 	.word	0x016e3600

6000d740 <CLOCK_EnableUsbhs0Clock>:
 * retval false The clock source is invalid to get proper USB HS clock.
 */
bool CLOCK_EnableUsbhs0Clock(clock_usb_src_t src, uint32_t freq)
{
    uint32_t i;
    CCM->CCGR6 |= CCM_CCGR6_CG0_MASK;
6000d740:	4a10      	ldr	r2, [pc, #64]	; (6000d784 <CLOCK_EnableUsbhs0Clock+0x44>)
6000d742:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000d746:	f043 0303 	orr.w	r3, r3, #3
6000d74a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    USB1->USBCMD |= USBHS_USBCMD_RST_MASK;
6000d74e:	f502 12f2 	add.w	r2, r2, #1982464	; 0x1e4000
6000d752:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000d756:	f043 0302 	orr.w	r3, r3, #2
6000d75a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
6000d75e:	4b0a      	ldr	r3, [pc, #40]	; (6000d788 <CLOCK_EnableUsbhs0Clock+0x48>)

    /* Add a delay between RST and RS so make sure there is a DP pullup sequence*/
    for (i = 0; i < 400000U; i++)
    {
        __ASM("nop");
6000d760:	bf00      	nop
    for (i = 0; i < 400000U; i++)
6000d762:	3b01      	subs	r3, #1
6000d764:	d1fc      	bne.n	6000d760 <CLOCK_EnableUsbhs0Clock+0x20>
    }
    PMU->REG_3P0 = (PMU->REG_3P0 & (~PMU_REG_3P0_OUTPUT_TRG_MASK)) |
6000d766:	4a09      	ldr	r2, [pc, #36]	; (6000d78c <CLOCK_EnableUsbhs0Clock+0x4c>)
                   (PMU_REG_3P0_OUTPUT_TRG(0x17) | PMU_REG_3P0_ENABLE_LINREG_MASK);
    return true;
}
6000d768:	2001      	movs	r0, #1
    PMU->REG_3P0 = (PMU->REG_3P0 & (~PMU_REG_3P0_OUTPUT_TRG_MASK)) |
6000d76a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
6000d76e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
6000d772:	f023 0301 	bic.w	r3, r3, #1
6000d776:	f443 53b8 	orr.w	r3, r3, #5888	; 0x1700
6000d77a:	f043 0301 	orr.w	r3, r3, #1
6000d77e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
}
6000d782:	4770      	bx	lr
6000d784:	400fc000 	.word	0x400fc000
6000d788:	00061a80 	.word	0x00061a80
6000d78c:	400d8000 	.word	0x400d8000

6000d790 <CLOCK_InitArmPll>:
 * param config   configuration to set to PLL.
 */
void CLOCK_InitArmPll(const clock_arm_pll_config_t *config)
{
    /* Bypass PLL first */
    CCM_ANALOG->PLL_ARM = (CCM_ANALOG->PLL_ARM & (~CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK)) |
6000d790:	4a0f      	ldr	r2, [pc, #60]	; (6000d7d0 <CLOCK_InitArmPll+0x40>)
                          CCM_ANALOG_PLL_ARM_BYPASS_MASK | CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC(config->src);
6000d792:	7903      	ldrb	r3, [r0, #4]
    CCM_ANALOG->PLL_ARM = (CCM_ANALOG->PLL_ARM & (~CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK)) |
6000d794:	6811      	ldr	r1, [r2, #0]
                          CCM_ANALOG_PLL_ARM_BYPASS_MASK | CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC(config->src);
6000d796:	039b      	lsls	r3, r3, #14
    CCM_ANALOG->PLL_ARM = (CCM_ANALOG->PLL_ARM & (~CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK)) |
6000d798:	f421 31e0 	bic.w	r1, r1, #114688	; 0x1c000
                          CCM_ANALOG_PLL_ARM_BYPASS_MASK | CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC(config->src);
6000d79c:	b29b      	uxth	r3, r3
6000d79e:	430b      	orrs	r3, r1
6000d7a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    CCM_ANALOG->PLL_ARM = (CCM_ANALOG->PLL_ARM & (~CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK)) |
6000d7a4:	6013      	str	r3, [r2, #0]

    CCM_ANALOG->PLL_ARM =
        (CCM_ANALOG->PLL_ARM & (~(CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK | CCM_ANALOG_PLL_ARM_POWERDOWN_MASK))) |
6000d7a6:	6811      	ldr	r1, [r2, #0]
        CCM_ANALOG_PLL_ARM_ENABLE_MASK | CCM_ANALOG_PLL_ARM_DIV_SELECT(config->loopDivider);
6000d7a8:	6803      	ldr	r3, [r0, #0]
        (CCM_ANALOG->PLL_ARM & (~(CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK | CCM_ANALOG_PLL_ARM_POWERDOWN_MASK))) |
6000d7aa:	f421 5141 	bic.w	r1, r1, #12352	; 0x3040
        CCM_ANALOG_PLL_ARM_ENABLE_MASK | CCM_ANALOG_PLL_ARM_DIV_SELECT(config->loopDivider);
6000d7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        (CCM_ANALOG->PLL_ARM & (~(CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK | CCM_ANALOG_PLL_ARM_POWERDOWN_MASK))) |
6000d7b2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
        CCM_ANALOG_PLL_ARM_ENABLE_MASK | CCM_ANALOG_PLL_ARM_DIV_SELECT(config->loopDivider);
6000d7b6:	430b      	orrs	r3, r1
6000d7b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    CCM_ANALOG->PLL_ARM =
6000d7bc:	6013      	str	r3, [r2, #0]

    while ((CCM_ANALOG->PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK_MASK) == 0UL)
6000d7be:	6813      	ldr	r3, [r2, #0]
6000d7c0:	2b00      	cmp	r3, #0
6000d7c2:	dafc      	bge.n	6000d7be <CLOCK_InitArmPll+0x2e>
    {
    }

    /* Disable Bypass */
    CCM_ANALOG->PLL_ARM &= ~CCM_ANALOG_PLL_ARM_BYPASS_MASK;
6000d7c4:	6813      	ldr	r3, [r2, #0]
6000d7c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
6000d7ca:	6013      	str	r3, [r2, #0]
}
6000d7cc:	4770      	bx	lr
6000d7ce:	bf00      	nop
6000d7d0:	400d8000 	.word	0x400d8000

6000d7d4 <CLOCK_InitUsb1Pll>:
 * param config Configuration to set to PLL.
 */
void CLOCK_InitUsb1Pll(const clock_usb_pll_config_t *config)
{
    /* Bypass PLL first */
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK)) |
6000d7d4:	4a0f      	ldr	r2, [pc, #60]	; (6000d814 <CLOCK_InitUsb1Pll+0x40>)
                           CCM_ANALOG_PLL_USB1_BYPASS_MASK | CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC(config->src);
6000d7d6:	7843      	ldrb	r3, [r0, #1]
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK)) |
6000d7d8:	6911      	ldr	r1, [r2, #16]
                           CCM_ANALOG_PLL_USB1_BYPASS_MASK | CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC(config->src);
6000d7da:	039b      	lsls	r3, r3, #14
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK)) |
6000d7dc:	f421 31e0 	bic.w	r1, r1, #114688	; 0x1c000
                           CCM_ANALOG_PLL_USB1_BYPASS_MASK | CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC(config->src);
6000d7e0:	b29b      	uxth	r3, r3
6000d7e2:	430b      	orrs	r3, r1
6000d7e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK)) |
6000d7e8:	6113      	str	r3, [r2, #16]

    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK)) |
6000d7ea:	6911      	ldr	r1, [r2, #16]
                           CCM_ANALOG_PLL_USB1_ENABLE_MASK | CCM_ANALOG_PLL_USB1_POWER_MASK |
                           CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK | CCM_ANALOG_PLL_USB1_DIV_SELECT(config->loopDivider);
6000d7ec:	7803      	ldrb	r3, [r0, #0]
                           CCM_ANALOG_PLL_USB1_ENABLE_MASK | CCM_ANALOG_PLL_USB1_POWER_MASK |
6000d7ee:	f421 5141 	bic.w	r1, r1, #12352	; 0x3040
                           CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK | CCM_ANALOG_PLL_USB1_DIV_SELECT(config->loopDivider);
6000d7f2:	005b      	lsls	r3, r3, #1
                           CCM_ANALOG_PLL_USB1_ENABLE_MASK | CCM_ANALOG_PLL_USB1_POWER_MASK |
6000d7f4:	f021 0102 	bic.w	r1, r1, #2
                           CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK | CCM_ANALOG_PLL_USB1_DIV_SELECT(config->loopDivider);
6000d7f8:	f003 0302 	and.w	r3, r3, #2
6000d7fc:	430b      	orrs	r3, r1
6000d7fe:	f443 5341 	orr.w	r3, r3, #12352	; 0x3040
    CCM_ANALOG->PLL_USB1 = (CCM_ANALOG->PLL_USB1 & (~CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK)) |
6000d802:	6113      	str	r3, [r2, #16]

    while ((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_LOCK_MASK) == 0UL)
6000d804:	6913      	ldr	r3, [r2, #16]
6000d806:	2b00      	cmp	r3, #0
6000d808:	dafc      	bge.n	6000d804 <CLOCK_InitUsb1Pll+0x30>
    {
    }

    /* Disable Bypass */
    CCM_ANALOG->PLL_USB1 &= ~CCM_ANALOG_PLL_USB1_BYPASS_MASK;
6000d80a:	6913      	ldr	r3, [r2, #16]
6000d80c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
6000d810:	6113      	str	r3, [r2, #16]
}
6000d812:	4770      	bx	lr
6000d814:	400d8000 	.word	0x400d8000

6000d818 <CLOCK_EnableUsbhs0PhyPllClock>:
{
6000d818:	b508      	push	{r3, lr}
    if ((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_ENABLE_MASK) != 0U)
6000d81a:	4b0e      	ldr	r3, [pc, #56]	; (6000d854 <CLOCK_EnableUsbhs0PhyPllClock+0x3c>)
6000d81c:	691a      	ldr	r2, [r3, #16]
6000d81e:	0492      	lsls	r2, r2, #18
6000d820:	d514      	bpl.n	6000d84c <CLOCK_EnableUsbhs0PhyPllClock+0x34>
        CCM_ANALOG->PLL_USB1 |= CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK;
6000d822:	691a      	ldr	r2, [r3, #16]
6000d824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
6000d828:	611a      	str	r2, [r3, #16]
    USBPHY1->CTRL &= ~USBPHY_CTRL_SFTRST_MASK; /* release PHY from reset */
6000d82a:	4b0b      	ldr	r3, [pc, #44]	; (6000d858 <CLOCK_EnableUsbhs0PhyPllClock+0x40>)
}
6000d82c:	2001      	movs	r0, #1
    USBPHY1->CTRL &= ~USBPHY_CTRL_SFTRST_MASK; /* release PHY from reset */
6000d82e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
6000d830:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
6000d834:	631a      	str	r2, [r3, #48]	; 0x30
    USBPHY1->CTRL &= ~USBPHY_CTRL_CLKGATE_MASK;
6000d836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
6000d838:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
6000d83c:	631a      	str	r2, [r3, #48]	; 0x30
    USBPHY1->PWD = 0;
6000d83e:	2200      	movs	r2, #0
6000d840:	601a      	str	r2, [r3, #0]
    USBPHY1->CTRL |= USBPHY_CTRL_ENAUTOCLR_PHY_PWD_MASK | USBPHY_CTRL_ENAUTOCLR_CLKGATE_MASK |
6000d842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
6000d844:	f442 12c6 	orr.w	r2, r2, #1622016	; 0x18c000
6000d848:	631a      	str	r2, [r3, #48]	; 0x30
}
6000d84a:	bd08      	pop	{r3, pc}
        CLOCK_InitUsb1Pll(&g_ccmConfigUsbPll);
6000d84c:	4803      	ldr	r0, [pc, #12]	; (6000d85c <CLOCK_EnableUsbhs0PhyPllClock+0x44>)
6000d84e:	f7ff ffc1 	bl	6000d7d4 <CLOCK_InitUsb1Pll>
6000d852:	e7ea      	b.n	6000d82a <CLOCK_EnableUsbhs0PhyPllClock+0x12>
6000d854:	400d8000 	.word	0x400d8000
6000d858:	400d9000 	.word	0x400d9000
6000d85c:	6001e12f 	.word	0x6001e12f

6000d860 <CLOCK_GetPllFreq>:
 *         - true: The PLL is enabled.
 *         - false: The PLL is not enabled.
 */
static inline bool CLOCK_IsPllEnabled(CCM_ANALOG_Type *base, clock_pll_t pll)
{
    return ((CCM_ANALOG_TUPLE_REG(base, pll) & (1UL << CCM_ANALOG_TUPLE_SHIFT(pll))) != 0U);
6000d860:	f3c0 410b 	ubfx	r1, r0, #16, #12
 *
 * param pll   pll name to get frequency.
 * return The PLL output frequency in hertz.
 */
uint32_t CLOCK_GetPllFreq(clock_pll_t pll)
{
6000d864:	4602      	mov	r2, r0
6000d866:	f000 001f 	and.w	r0, r0, #31
6000d86a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
6000d86e:	f501 2158 	add.w	r1, r1, #884736	; 0xd8000
6000d872:	b570      	push	{r4, r5, r6, lr}
6000d874:	680b      	ldr	r3, [r1, #0]
6000d876:	40c3      	lsrs	r3, r0
        100000000U, /* 100M */
        125000000U  /* 125M */
    };

    /* check if PLL is enabled */
    if (!CLOCK_IsPllEnabled(CCM_ANALOG, pll))
6000d878:	07d8      	lsls	r0, r3, #31
6000d87a:	d519      	bpl.n	6000d8b0 <CLOCK_GetPllFreq+0x50>
 * @param pll PLL control name (see @ref ccm_analog_pll_control_t enumeration)
 * @retval bypass reference clock frequency value.
 */
static inline uint32_t CLOCK_GetPllBypassRefClk(CCM_ANALOG_Type *base, clock_pll_t pll)
{
    return (((CCM_ANALOG_TUPLE_REG(base, pll) & CCM_ANALOG_PLL_BYPASS_CLK_SRC_MASK) >>
6000d87c:	680b      	ldr	r3, [r1, #0]
             CCM_ANALOG_PLL_BYPASS_CLK_SRC_SHIFT) == (uint32_t)kCLOCK_PllClkSrc24M) ?
               CLOCK_GetOscFreq() :
6000d87e:	f413 4f40 	tst.w	r3, #49152	; 0xc000
6000d882:	d118      	bne.n	6000d8b6 <CLOCK_GetPllFreq+0x56>
6000d884:	f7ff ff4c 	bl	6000d720 <CLOCK_GetOscFreq>
6000d888:	4604      	mov	r4, r0
    return (bool)(CCM_ANALOG_TUPLE_REG(base, pll) & (1UL << CCM_ANALOG_PLL_BYPASS_SHIFT));
6000d88a:	680b      	ldr	r3, [r1, #0]

    /* get pll reference clock */
    freq = CLOCK_GetPllBypassRefClk(CCM_ANALOG, pll);

    /* check if pll is bypassed */
    if (CLOCK_IsPllBypassed(CCM_ANALOG, pll))
6000d88c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
6000d890:	d10f      	bne.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
    {
        return freq;
    }

    switch (pll)
6000d892:	4966      	ldr	r1, [pc, #408]	; (6000da2c <CLOCK_GetPllFreq+0x1cc>)
6000d894:	428a      	cmp	r2, r1
6000d896:	d04b      	beq.n	6000d930 <CLOCK_GetPllFreq+0xd0>
6000d898:	d821      	bhi.n	6000d8de <CLOCK_GetPllFreq+0x7e>
6000d89a:	f5a1 01a0 	sub.w	r1, r1, #5242880	; 0x500000
6000d89e:	428a      	cmp	r2, r1
6000d8a0:	f000 80c0 	beq.w	6000da24 <CLOCK_GetPllFreq+0x1c4>
6000d8a4:	d809      	bhi.n	6000d8ba <CLOCK_GetPllFreq+0x5a>
6000d8a6:	2a0d      	cmp	r2, #13
6000d8a8:	d032      	beq.n	6000d910 <CLOCK_GetPllFreq+0xb0>
6000d8aa:	4b61      	ldr	r3, [pc, #388]	; (6000da30 <CLOCK_GetPllFreq+0x1d0>)
6000d8ac:	429a      	cmp	r2, r3
6000d8ae:	d036      	beq.n	6000d91e <CLOCK_GetPllFreq+0xbe>
            /* ref_enetpll1 if fixed at 25MHz. */
            freq = 25000000UL;
            break;

        case kCLOCK_PllUsb2:
            freq = (freq * (((CCM_ANALOG->PLL_USB2 & CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK) != 0U) ? 22U : 20U));
6000d8b0:	2400      	movs	r4, #0
            freq = 0U;
            break;
    }

    return freq;
}
6000d8b2:	4620      	mov	r0, r4
6000d8b4:	bd70      	pop	{r4, r5, r6, pc}
               CLOCK_GetOscFreq() :
6000d8b6:	2400      	movs	r4, #0
6000d8b8:	e7e7      	b.n	6000d88a <CLOCK_GetPllFreq+0x2a>
    switch (pll)
6000d8ba:	495e      	ldr	r1, [pc, #376]	; (6000da34 <CLOCK_GetPllFreq+0x1d4>)
6000d8bc:	428a      	cmp	r2, r1
6000d8be:	d1f7      	bne.n	6000d8b0 <CLOCK_GetPllFreq+0x50>
            freqTmp = ((clock_64b_t)freq * ((clock_64b_t)(CCM_ANALOG->PLL_SYS_NUM)));
6000d8c0:	4d5d      	ldr	r5, [pc, #372]	; (6000da38 <CLOCK_GetPllFreq+0x1d8>)
6000d8c2:	6d28      	ldr	r0, [r5, #80]	; 0x50
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_SYS_DENOM));
6000d8c4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
6000d8c6:	fba4 0100 	umull	r0, r1, r4, r0
6000d8ca:	f7f5 ff1b 	bl	60003704 <__aeabi_uldivmod>
            if ((CCM_ANALOG->PLL_SYS & CCM_ANALOG_PLL_SYS_DIV_SELECT_MASK) != 0U)
6000d8ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
6000d8d0:	07db      	lsls	r3, r3, #31
                freq *= 22U;
6000d8d2:	bf4c      	ite	mi
6000d8d4:	2316      	movmi	r3, #22
                freq *= 20U;
6000d8d6:	2314      	movpl	r3, #20
6000d8d8:	4363      	muls	r3, r4
            freq += (uint32_t)freqTmp;
6000d8da:	181c      	adds	r4, r3, r0
            break;
6000d8dc:	e7e9      	b.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
    switch (pll)
6000d8de:	4957      	ldr	r1, [pc, #348]	; (6000da3c <CLOCK_GetPllFreq+0x1dc>)
6000d8e0:	428a      	cmp	r2, r1
6000d8e2:	f000 8099 	beq.w	6000da18 <CLOCK_GetPllFreq+0x1b8>
6000d8e6:	d80e      	bhi.n	6000d906 <CLOCK_GetPllFreq+0xa6>
6000d8e8:	4955      	ldr	r1, [pc, #340]	; (6000da40 <CLOCK_GetPllFreq+0x1e0>)
6000d8ea:	428a      	cmp	r2, r1
6000d8ec:	d058      	beq.n	6000d9a0 <CLOCK_GetPllFreq+0x140>
6000d8ee:	4b55      	ldr	r3, [pc, #340]	; (6000da44 <CLOCK_GetPllFreq+0x1e4>)
6000d8f0:	429a      	cmp	r2, r3
6000d8f2:	d1dd      	bne.n	6000d8b0 <CLOCK_GetPllFreq+0x50>
                (CCM_ANALOG->PLL_ENET & CCM_ANALOG_PLL_ENET_DIV_SELECT_MASK) >> CCM_ANALOG_PLL_ENET_DIV_SELECT_SHIFT;
6000d8f4:	4b50      	ldr	r3, [pc, #320]	; (6000da38 <CLOCK_GetPllFreq+0x1d8>)
6000d8f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
            divSelect =
6000d8fa:	f003 0303 	and.w	r3, r3, #3
            freq = enetRefClkFreq[divSelect];
6000d8fe:	4a52      	ldr	r2, [pc, #328]	; (6000da48 <CLOCK_GetPllFreq+0x1e8>)
6000d900:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
            break;
6000d904:	e7d5      	b.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
    switch (pll)
6000d906:	4b51      	ldr	r3, [pc, #324]	; (6000da4c <CLOCK_GetPllFreq+0x1ec>)
6000d908:	429a      	cmp	r2, r3
6000d90a:	d1d1      	bne.n	6000d8b0 <CLOCK_GetPllFreq+0x50>
            freq = 25000000UL;
6000d90c:	4c50      	ldr	r4, [pc, #320]	; (6000da50 <CLOCK_GetPllFreq+0x1f0>)
6000d90e:	e7d0      	b.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
            freq = ((freq * ((CCM_ANALOG->PLL_ARM & CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK) >>
6000d910:	4b49      	ldr	r3, [pc, #292]	; (6000da38 <CLOCK_GetPllFreq+0x1d8>)
6000d912:	681b      	ldr	r3, [r3, #0]
6000d914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
6000d918:	4363      	muls	r3, r4
6000d91a:	085c      	lsrs	r4, r3, #1
            break;
6000d91c:	e7c9      	b.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
            freq = (freq * (((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK) != 0UL) ? 22U : 20U));
6000d91e:	4b46      	ldr	r3, [pc, #280]	; (6000da38 <CLOCK_GetPllFreq+0x1d8>)
6000d920:	691b      	ldr	r3, [r3, #16]
            freq = (freq * (((CCM_ANALOG->PLL_USB2 & CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK) != 0U) ? 22U : 20U));
6000d922:	f013 0f02 	tst.w	r3, #2
6000d926:	bf0c      	ite	eq
6000d928:	2314      	moveq	r3, #20
6000d92a:	2316      	movne	r3, #22
6000d92c:	435c      	muls	r4, r3
            break;
6000d92e:	e7c0      	b.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
                (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_DIV_SELECT_MASK) >> CCM_ANALOG_PLL_AUDIO_DIV_SELECT_SHIFT;
6000d930:	4d41      	ldr	r5, [pc, #260]	; (6000da38 <CLOCK_GetPllFreq+0x1d8>)
6000d932:	6f2e      	ldr	r6, [r5, #112]	; 0x70
            freqTmp = ((clock_64b_t)freq * ((clock_64b_t)(CCM_ANALOG->PLL_AUDIO_NUM)));
6000d934:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_AUDIO_DENOM));
6000d938:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
            divSelect =
6000d93c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_AUDIO_DENOM));
6000d940:	fba4 0100 	umull	r0, r1, r4, r0
6000d944:	f7f5 fede 	bl	60003704 <__aeabi_uldivmod>
            switch (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK)
6000d948:	6f2b      	ldr	r3, [r5, #112]	; 0x70
            freq = freq * divSelect + (uint32_t)freqTmp;
6000d94a:	4366      	muls	r6, r4
            switch (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK)
6000d94c:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
            freq = freq * divSelect + (uint32_t)freqTmp;
6000d950:	1834      	adds	r4, r6, r0
            switch (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK)
6000d952:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
6000d956:	d016      	beq.n	6000d986 <CLOCK_GetPllFreq+0x126>
6000d958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
6000d95c:	d001      	beq.n	6000d962 <CLOCK_GetPllFreq+0x102>
6000d95e:	b9a3      	cbnz	r3, 6000d98a <CLOCK_GetPllFreq+0x12a>
                    freq = freq >> 2U;
6000d960:	08a4      	lsrs	r4, r4, #2
            switch (CCM_ANALOG->MISC2 & (CCM_ANALOG_MISC2_AUDIO_DIV_MSB_MASK | CCM_ANALOG_MISC2_AUDIO_DIV_LSB_MASK))
6000d962:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
6000d966:	4a3b      	ldr	r2, [pc, #236]	; (6000da54 <CLOCK_GetPllFreq+0x1f4>)
6000d968:	4013      	ands	r3, r2
6000d96a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
6000d96e:	d0a0      	beq.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
6000d970:	d812      	bhi.n	6000d998 <CLOCK_GetPllFreq+0x138>
6000d972:	2b00      	cmp	r3, #0
6000d974:	d09d      	beq.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
6000d976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
6000d97a:	d04b      	beq.n	6000da14 <CLOCK_GetPllFreq+0x1b4>
                    assert(false);
6000d97c:	4b36      	ldr	r3, [pc, #216]	; (6000da58 <CLOCK_GetPllFreq+0x1f8>)
6000d97e:	f240 412b 	movw	r1, #1067	; 0x42b
6000d982:	4a36      	ldr	r2, [pc, #216]	; (6000da5c <CLOCK_GetPllFreq+0x1fc>)
6000d984:	e005      	b.n	6000d992 <CLOCK_GetPllFreq+0x132>
                    freq = freq >> 1U;
6000d986:	0864      	lsrs	r4, r4, #1
                    break;
6000d988:	e7eb      	b.n	6000d962 <CLOCK_GetPllFreq+0x102>
                    assert(false);
6000d98a:	4b33      	ldr	r3, [pc, #204]	; (6000da58 <CLOCK_GetPllFreq+0x1f8>)
6000d98c:	f240 4117 	movw	r1, #1047	; 0x417
6000d990:	4a32      	ldr	r2, [pc, #200]	; (6000da5c <CLOCK_GetPllFreq+0x1fc>)
                    assert(false);
6000d992:	4833      	ldr	r0, [pc, #204]	; (6000da60 <CLOCK_GetPllFreq+0x200>)
6000d994:	f005 f9d4 	bl	60012d40 <__assert_func>
6000d998:	4293      	cmp	r3, r2
6000d99a:	d1ef      	bne.n	6000d97c <CLOCK_GetPllFreq+0x11c>
                    freq >>= 2U;
6000d99c:	08a4      	lsrs	r4, r4, #2
                    break;
6000d99e:	e788      	b.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
                (CCM_ANALOG->PLL_VIDEO & CCM_ANALOG_PLL_VIDEO_DIV_SELECT_MASK) >> CCM_ANALOG_PLL_VIDEO_DIV_SELECT_SHIFT;
6000d9a0:	4d25      	ldr	r5, [pc, #148]	; (6000da38 <CLOCK_GetPllFreq+0x1d8>)
6000d9a2:	f8d5 60a0 	ldr.w	r6, [r5, #160]	; 0xa0
            freqTmp = ((clock_64b_t)freq * ((clock_64b_t)(CCM_ANALOG->PLL_VIDEO_NUM)));
6000d9a6:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_VIDEO_DENOM));
6000d9aa:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
            divSelect =
6000d9ae:	f006 067f 	and.w	r6, r6, #127	; 0x7f
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_VIDEO_DENOM));
6000d9b2:	fba4 0100 	umull	r0, r1, r4, r0
6000d9b6:	f7f5 fea5 	bl	60003704 <__aeabi_uldivmod>
            switch (CCM_ANALOG->PLL_VIDEO & CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK)
6000d9ba:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            freq = freq * divSelect + (uint32_t)freqTmp;
6000d9be:	4366      	muls	r6, r4
            switch (CCM_ANALOG->PLL_VIDEO & CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK)
6000d9c0:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
            freq = freq * divSelect + (uint32_t)freqTmp;
6000d9c4:	1834      	adds	r4, r6, r0
            switch (CCM_ANALOG->PLL_VIDEO & CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK)
6000d9c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
6000d9ca:	d018      	beq.n	6000d9fe <CLOCK_GetPllFreq+0x19e>
6000d9cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
6000d9d0:	d001      	beq.n	6000d9d6 <CLOCK_GetPllFreq+0x176>
6000d9d2:	b9b3      	cbnz	r3, 6000da02 <CLOCK_GetPllFreq+0x1a2>
                    freq = freq >> 2U;
6000d9d4:	08a4      	lsrs	r4, r4, #2
            switch (CCM_ANALOG->MISC2 & CCM_ANALOG_MISC2_VIDEO_DIV_MASK)
6000d9d6:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
6000d9da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
6000d9de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
6000d9e2:	f43f af66 	beq.w	6000d8b2 <CLOCK_GetPllFreq+0x52>
6000d9e6:	d811      	bhi.n	6000da0c <CLOCK_GetPllFreq+0x1ac>
6000d9e8:	2b00      	cmp	r3, #0
6000d9ea:	f43f af62 	beq.w	6000d8b2 <CLOCK_GetPllFreq+0x52>
6000d9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
6000d9f2:	d00f      	beq.n	6000da14 <CLOCK_GetPllFreq+0x1b4>
                    assert(false);
6000d9f4:	4b18      	ldr	r3, [pc, #96]	; (6000da58 <CLOCK_GetPllFreq+0x1f8>)
6000d9f6:	f240 416c 	movw	r1, #1132	; 0x46c
6000d9fa:	4a18      	ldr	r2, [pc, #96]	; (6000da5c <CLOCK_GetPllFreq+0x1fc>)
6000d9fc:	e7c9      	b.n	6000d992 <CLOCK_GetPllFreq+0x132>
                    freq = freq >> 1U;
6000d9fe:	0864      	lsrs	r4, r4, #1
                    break;
6000da00:	e7e9      	b.n	6000d9d6 <CLOCK_GetPllFreq+0x176>
                    assert(false);
6000da02:	4b15      	ldr	r3, [pc, #84]	; (6000da58 <CLOCK_GetPllFreq+0x1f8>)
6000da04:	f44f 618b 	mov.w	r1, #1112	; 0x458
6000da08:	4a14      	ldr	r2, [pc, #80]	; (6000da5c <CLOCK_GetPllFreq+0x1fc>)
6000da0a:	e7c2      	b.n	6000d992 <CLOCK_GetPllFreq+0x132>
6000da0c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
6000da10:	d0c4      	beq.n	6000d99c <CLOCK_GetPllFreq+0x13c>
6000da12:	e7ef      	b.n	6000d9f4 <CLOCK_GetPllFreq+0x194>
                    freq >>= 1U;
6000da14:	0864      	lsrs	r4, r4, #1
                    break;
6000da16:	e74c      	b.n	6000d8b2 <CLOCK_GetPllFreq+0x52>
            divSelect = (CCM_ANALOG->PLL_ENET & CCM_ANALOG_PLL_ENET_ENET2_DIV_SELECT_MASK) >>
6000da18:	4b07      	ldr	r3, [pc, #28]	; (6000da38 <CLOCK_GetPllFreq+0x1d8>)
6000da1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
6000da1e:	f3c3 0381 	ubfx	r3, r3, #2, #2
6000da22:	e76c      	b.n	6000d8fe <CLOCK_GetPllFreq+0x9e>
            freq = (freq * (((CCM_ANALOG->PLL_USB2 & CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK) != 0U) ? 22U : 20U));
6000da24:	4b04      	ldr	r3, [pc, #16]	; (6000da38 <CLOCK_GetPllFreq+0x1d8>)
6000da26:	6a1b      	ldr	r3, [r3, #32]
6000da28:	e77b      	b.n	6000d922 <CLOCK_GetPllFreq+0xc2>
6000da2a:	bf00      	nop
6000da2c:	0070000d 	.word	0x0070000d
6000da30:	0010000d 	.word	0x0010000d
6000da34:	0030000d 	.word	0x0030000d
6000da38:	400d8000 	.word	0x400d8000
6000da3c:	00e00014 	.word	0x00e00014
6000da40:	00a0000d 	.word	0x00a0000d
6000da44:	00e0000d 	.word	0x00e0000d
6000da48:	6001bd90 	.word	0x6001bd90
6000da4c:	00e00015 	.word	0x00e00015
6000da50:	017d7840 	.word	0x017d7840
6000da54:	00808000 	.word	0x00808000
6000da58:	6001e118 	.word	0x6001e118
6000da5c:	6001e11e 	.word	0x6001e11e
6000da60:	6001e0c7 	.word	0x6001e0c7

6000da64 <CLOCK_GetSysPfdFreq>:
 *
 * param pfd   pfd name to get frequency.
 * return The PFD output frequency in hertz.
 */
uint32_t CLOCK_GetSysPfdFreq(clock_pfd_t pfd)
{
6000da64:	b510      	push	{r4, lr}
6000da66:	4604      	mov	r4, r0
    uint32_t freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000da68:	4813      	ldr	r0, [pc, #76]	; (6000dab8 <CLOCK_GetSysPfdFreq+0x54>)
6000da6a:	f7ff fef9 	bl	6000d860 <CLOCK_GetPllFreq>

    switch (pfd)
6000da6e:	2c03      	cmp	r4, #3
6000da70:	d81f      	bhi.n	6000dab2 <CLOCK_GetSysPfdFreq+0x4e>
6000da72:	e8df f004 	tbb	[pc, r4]
6000da76:	0c02      	.short	0x0c02
6000da78:	1812      	.short	0x1812
    {
        case kCLOCK_Pfd0:
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD0_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD0_FRAC_SHIFT);
6000da7a:	4b10      	ldr	r3, [pc, #64]	; (6000dabc <CLOCK_GetSysPfdFreq+0x58>)
6000da7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
6000da80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        case kCLOCK_Pfd2:
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD2_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT);
            break;

        case kCLOCK_Pfd3:
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD3_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT);
6000da84:	fbb0 f0f3 	udiv	r0, r0, r3
            break;
    }
    freq *= 18U;

    return freq;
}
6000da88:	2312      	movs	r3, #18
6000da8a:	4358      	muls	r0, r3
6000da8c:	bd10      	pop	{r4, pc}
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD1_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD1_FRAC_SHIFT);
6000da8e:	4b0b      	ldr	r3, [pc, #44]	; (6000dabc <CLOCK_GetSysPfdFreq+0x58>)
6000da90:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
6000da94:	f3c3 2305 	ubfx	r3, r3, #8, #6
6000da98:	e7f4      	b.n	6000da84 <CLOCK_GetSysPfdFreq+0x20>
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD2_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT);
6000da9a:	4b08      	ldr	r3, [pc, #32]	; (6000dabc <CLOCK_GetSysPfdFreq+0x58>)
6000da9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
6000daa0:	f3c3 4305 	ubfx	r3, r3, #16, #6
6000daa4:	e7ee      	b.n	6000da84 <CLOCK_GetSysPfdFreq+0x20>
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD3_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT);
6000daa6:	4b05      	ldr	r3, [pc, #20]	; (6000dabc <CLOCK_GetSysPfdFreq+0x58>)
6000daa8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
6000daac:	f3c3 6305 	ubfx	r3, r3, #24, #6
6000dab0:	e7e8      	b.n	6000da84 <CLOCK_GetSysPfdFreq+0x20>
    switch (pfd)
6000dab2:	2000      	movs	r0, #0
6000dab4:	e7e8      	b.n	6000da88 <CLOCK_GetSysPfdFreq+0x24>
6000dab6:	bf00      	nop
6000dab8:	0030000d 	.word	0x0030000d
6000dabc:	400d8000 	.word	0x400d8000

6000dac0 <CLOCK_GetPeriphClkFreq>:
{
6000dac0:	b510      	push	{r4, lr}
    if ((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK_SEL_MASK) != 0U)
6000dac2:	4c20      	ldr	r4, [pc, #128]	; (6000db44 <CLOCK_GetPeriphClkFreq+0x84>)
6000dac4:	6960      	ldr	r0, [r4, #20]
        switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
6000dac6:	69a3      	ldr	r3, [r4, #24]
    if ((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK_SEL_MASK) != 0U)
6000dac8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
6000dacc:	d01a      	beq.n	6000db04 <CLOCK_GetPeriphClkFreq+0x44>
        switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
6000dace:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
6000dad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
6000dad6:	d007      	beq.n	6000dae8 <CLOCK_GetPeriphClkFreq+0x28>
6000dad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
6000dadc:	d00e      	beq.n	6000dafc <CLOCK_GetPeriphClkFreq+0x3c>
6000dade:	b97b      	cbnz	r3, 6000db00 <CLOCK_GetPeriphClkFreq+0x40>
                freq = CLOCK_GetPllFreq(kCLOCK_PllUsb1);
6000dae0:	4819      	ldr	r0, [pc, #100]	; (6000db48 <CLOCK_GetPeriphClkFreq+0x88>)
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000dae2:	f7ff febd 	bl	6000d860 <CLOCK_GetPllFreq>
                break;
6000dae6:	e001      	b.n	6000daec <CLOCK_GetPeriphClkFreq+0x2c>
                freq = CLOCK_GetOscFreq();
6000dae8:	f7ff fe1a 	bl	6000d720 <CLOCK_GetOscFreq>
        freq /= (((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) >> CCM_CBCDR_PERIPH_CLK2_PODF_SHIFT) + 1U);
6000daec:	4b15      	ldr	r3, [pc, #84]	; (6000db44 <CLOCK_GetPeriphClkFreq+0x84>)
6000daee:	695b      	ldr	r3, [r3, #20]
6000daf0:	f3c3 63c2 	ubfx	r3, r3, #27, #3
                       (((CCM->CACRR & CCM_CACRR_ARM_PODF_MASK) >> CCM_CACRR_ARM_PODF_SHIFT) + 1U);
6000daf4:	3301      	adds	r3, #1
                freq = CLOCK_GetPllFreq(kCLOCK_PllArm) /
6000daf6:	fbb0 f0f3 	udiv	r0, r0, r3
    return freq;
6000dafa:	e00d      	b.n	6000db18 <CLOCK_GetPeriphClkFreq+0x58>
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000dafc:	4813      	ldr	r0, [pc, #76]	; (6000db4c <CLOCK_GetPeriphClkFreq+0x8c>)
6000dafe:	e7f0      	b.n	6000dae2 <CLOCK_GetPeriphClkFreq+0x22>
        switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
6000db00:	2000      	movs	r0, #0
6000db02:	e7f3      	b.n	6000daec <CLOCK_GetPeriphClkFreq+0x2c>
        switch (CCM->CBCMR & CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK)
6000db04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
6000db08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
6000db0c:	d015      	beq.n	6000db3a <CLOCK_GetPeriphClkFreq+0x7a>
6000db0e:	d804      	bhi.n	6000db1a <CLOCK_GetPeriphClkFreq+0x5a>
6000db10:	b16b      	cbz	r3, 6000db2e <CLOCK_GetPeriphClkFreq+0x6e>
6000db12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
6000db16:	d00f      	beq.n	6000db38 <CLOCK_GetPeriphClkFreq+0x78>
}
6000db18:	bd10      	pop	{r4, pc}
        switch (CCM->CBCMR & CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK)
6000db1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
6000db1e:	d1fb      	bne.n	6000db18 <CLOCK_GetPeriphClkFreq+0x58>
                freq = CLOCK_GetPllFreq(kCLOCK_PllArm) /
6000db20:	200d      	movs	r0, #13
6000db22:	f7ff fe9d 	bl	6000d860 <CLOCK_GetPllFreq>
                       (((CCM->CACRR & CCM_CACRR_ARM_PODF_MASK) >> CCM_CACRR_ARM_PODF_SHIFT) + 1U);
6000db26:	6923      	ldr	r3, [r4, #16]
6000db28:	f003 0307 	and.w	r3, r3, #7
6000db2c:	e7e2      	b.n	6000daf4 <CLOCK_GetPeriphClkFreq+0x34>
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000db2e:	4807      	ldr	r0, [pc, #28]	; (6000db4c <CLOCK_GetPeriphClkFreq+0x8c>)
}
6000db30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000db34:	f7ff be94 	b.w	6000d860 <CLOCK_GetPllFreq>
                freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd2);
6000db38:	2002      	movs	r0, #2
}
6000db3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd0);
6000db3e:	f7ff bf91 	b.w	6000da64 <CLOCK_GetSysPfdFreq>
6000db42:	bf00      	nop
6000db44:	400fc000 	.word	0x400fc000
6000db48:	0010000d 	.word	0x0010000d
6000db4c:	0030000d 	.word	0x0030000d

6000db50 <CLOCK_GetAhbFreq>:
{
6000db50:	b508      	push	{r3, lr}
    return CLOCK_GetPeriphClkFreq() / (((CCM->CBCDR & CCM_CBCDR_AHB_PODF_MASK) >> CCM_CBCDR_AHB_PODF_SHIFT) + 1U);
6000db52:	f7ff ffb5 	bl	6000dac0 <CLOCK_GetPeriphClkFreq>
6000db56:	4b04      	ldr	r3, [pc, #16]	; (6000db68 <CLOCK_GetAhbFreq+0x18>)
6000db58:	695b      	ldr	r3, [r3, #20]
6000db5a:	f3c3 2382 	ubfx	r3, r3, #10, #3
6000db5e:	3301      	adds	r3, #1
}
6000db60:	fbb0 f0f3 	udiv	r0, r0, r3
6000db64:	bd08      	pop	{r3, pc}
6000db66:	bf00      	nop
6000db68:	400fc000 	.word	0x400fc000

6000db6c <CLOCK_GetIpgFreq>:
{
6000db6c:	b508      	push	{r3, lr}
    return CLOCK_GetAhbFreq() / (((CCM->CBCDR & CCM_CBCDR_IPG_PODF_MASK) >> CCM_CBCDR_IPG_PODF_SHIFT) + 1U);
6000db6e:	f7ff ffef 	bl	6000db50 <CLOCK_GetAhbFreq>
6000db72:	4b04      	ldr	r3, [pc, #16]	; (6000db84 <CLOCK_GetIpgFreq+0x18>)
6000db74:	695b      	ldr	r3, [r3, #20]
6000db76:	f3c3 2301 	ubfx	r3, r3, #8, #2
6000db7a:	3301      	adds	r3, #1
}
6000db7c:	fbb0 f0f3 	udiv	r0, r0, r3
6000db80:	bd08      	pop	{r3, pc}
6000db82:	bf00      	nop
6000db84:	400fc000 	.word	0x400fc000

6000db88 <SystemInit>:
    extern uint32_t g_pfnVectors[];  // Vector table defined in startup code
    SCB->VTOR = (uint32_t)g_pfnVectors;
#endif

/* Disable Watchdog Power Down Counter */
    WDOG1->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
6000db88:	492d      	ldr	r1, [pc, #180]	; (6000dc40 <SystemInit+0xb8>)
    WDOG2->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
6000db8a:	4a2e      	ldr	r2, [pc, #184]	; (6000dc44 <SystemInit+0xbc>)
void SystemInit (void) {
6000db8c:	b508      	push	{r3, lr}
    WDOG1->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
6000db8e:	890b      	ldrh	r3, [r1, #8]
6000db90:	f023 0301 	bic.w	r3, r3, #1
6000db94:	041b      	lsls	r3, r3, #16
6000db96:	0c1b      	lsrs	r3, r3, #16
6000db98:	810b      	strh	r3, [r1, #8]
    WDOG2->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
6000db9a:	8913      	ldrh	r3, [r2, #8]
6000db9c:	f023 0301 	bic.w	r3, r3, #1
6000dba0:	041b      	lsls	r3, r3, #16
6000dba2:	0c1b      	lsrs	r3, r3, #16
6000dba4:	8113      	strh	r3, [r2, #8]

/* Watchdog disable */

#if (DISABLE_WDOG)
    if ((WDOG1->WCR & WDOG_WCR_WDE_MASK) != 0U)
6000dba6:	880b      	ldrh	r3, [r1, #0]
6000dba8:	0758      	lsls	r0, r3, #29
6000dbaa:	d505      	bpl.n	6000dbb8 <SystemInit+0x30>
    {
        WDOG1->WCR &= ~(uint16_t) WDOG_WCR_WDE_MASK;
6000dbac:	880b      	ldrh	r3, [r1, #0]
6000dbae:	f023 0304 	bic.w	r3, r3, #4
6000dbb2:	041b      	lsls	r3, r3, #16
6000dbb4:	0c1b      	lsrs	r3, r3, #16
6000dbb6:	800b      	strh	r3, [r1, #0]
    }
    if ((WDOG2->WCR & WDOG_WCR_WDE_MASK) != 0U)
6000dbb8:	8813      	ldrh	r3, [r2, #0]
6000dbba:	075b      	lsls	r3, r3, #29
6000dbbc:	d505      	bpl.n	6000dbca <SystemInit+0x42>
    {
        WDOG2->WCR &= ~(uint16_t) WDOG_WCR_WDE_MASK;
6000dbbe:	8813      	ldrh	r3, [r2, #0]
6000dbc0:	f023 0304 	bic.w	r3, r3, #4
6000dbc4:	041b      	lsls	r3, r3, #16
6000dbc6:	0c1b      	lsrs	r3, r3, #16
6000dbc8:	8013      	strh	r3, [r2, #0]
    }
    if ((RTWDOG->CS & RTWDOG_CS_CMD32EN_MASK) != 0U)
6000dbca:	4b1f      	ldr	r3, [pc, #124]	; (6000dc48 <SystemInit+0xc0>)
6000dbcc:	681a      	ldr	r2, [r3, #0]
6000dbce:	0490      	lsls	r0, r2, #18
6000dbd0:	d530      	bpl.n	6000dc34 <SystemInit+0xac>
    {
        RTWDOG->CNT = 0xD928C520U; /* 0xD928C520U is the update key */
6000dbd2:	4a1e      	ldr	r2, [pc, #120]	; (6000dc4c <SystemInit+0xc4>)
    }
    else
    {
        RTWDOG->CNT = 0xC520U;
        RTWDOG->CNT = 0xD928U;
6000dbd4:	605a      	str	r2, [r3, #4]
    }
    RTWDOG->TOVAL = 0xFFFF;
6000dbd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
6000dbda:	609a      	str	r2, [r3, #8]
    RTWDOG->CS = (uint32_t) ((RTWDOG->CS) & ~RTWDOG_CS_EN_MASK) | RTWDOG_CS_UPDATE_MASK;
6000dbdc:	681a      	ldr	r2, [r3, #0]
6000dbde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
6000dbe2:	f042 0220 	orr.w	r2, r2, #32
6000dbe6:	601a      	str	r2, [r3, #0]
#endif /* (DISABLE_WDOG) */

    /* Disable Systick which might be enabled by bootrom */
    if ((SysTick->CTRL & SysTick_CTRL_ENABLE_Msk) != 0U)
6000dbe8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000dbec:	691a      	ldr	r2, [r3, #16]
6000dbee:	07d1      	lsls	r1, r2, #31
6000dbf0:	d503      	bpl.n	6000dbfa <SystemInit+0x72>
    {
        SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
6000dbf2:	691a      	ldr	r2, [r3, #16]
6000dbf4:	f022 0201 	bic.w	r2, r2, #1
6000dbf8:	611a      	str	r2, [r3, #16]
    }

/* Enable instruction and data caches */
#if defined(__ICACHE_PRESENT) && __ICACHE_PRESENT
    if (SCB_CCR_IC_Msk != (SCB_CCR_IC_Msk & SCB->CCR)) {
6000dbfa:	4b15      	ldr	r3, [pc, #84]	; (6000dc50 <SystemInit+0xc8>)
6000dbfc:	695a      	ldr	r2, [r3, #20]
6000dbfe:	0392      	lsls	r2, r2, #14
6000dc00:	d415      	bmi.n	6000dc2e <SystemInit+0xa6>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
6000dc02:	695a      	ldr	r2, [r3, #20]
6000dc04:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
6000dc08:	d111      	bne.n	6000dc2e <SystemInit+0xa6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
6000dc0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000dc0e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
6000dc12:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
6000dc16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000dc1a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
6000dc1e:	695a      	ldr	r2, [r3, #20]
6000dc20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
6000dc24:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
6000dc26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000dc2a:	f3bf 8f6f 	isb	sy
        SCB_EnableICache();
    }
#endif

  SystemInitHook();
6000dc2e:	f00b f8ee 	bl	60018e0e <SystemInitHook>
}
6000dc32:	bd08      	pop	{r3, pc}
        RTWDOG->CNT = 0xC520U;
6000dc34:	f24c 5220 	movw	r2, #50464	; 0xc520
6000dc38:	605a      	str	r2, [r3, #4]
        RTWDOG->CNT = 0xD928U;
6000dc3a:	f64d 1228 	movw	r2, #55592	; 0xd928
6000dc3e:	e7c9      	b.n	6000dbd4 <SystemInit+0x4c>
6000dc40:	400b8000 	.word	0x400b8000
6000dc44:	400d0000 	.word	0x400d0000
6000dc48:	400bc000 	.word	0x400bc000
6000dc4c:	d928c520 	.word	0xd928c520
6000dc50:	e000ed00 	.word	0xe000ed00

6000dc54 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
6000dc54:	2800      	cmp	r0, #0
6000dc56:	db07      	blt.n	6000dc68 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
6000dc58:	2301      	movs	r3, #1
6000dc5a:	0941      	lsrs	r1, r0, #5
6000dc5c:	f000 001f 	and.w	r0, r0, #31
6000dc60:	4a02      	ldr	r2, [pc, #8]	; (6000dc6c <__NVIC_EnableIRQ+0x18>)
6000dc62:	4083      	lsls	r3, r0
6000dc64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    __COMPILER_BARRIER();
  }
}
6000dc68:	4770      	bx	lr
6000dc6a:	bf00      	nop
6000dc6c:	e000e100 	.word	0xe000e100

6000dc70 <CLOCK_ControlGate>:
{
    uint32_t index = ((uint32_t)name) >> 8UL;
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
    volatile uint32_t *reg;

    assert(index <= 7UL);
6000dc70:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    uint32_t index = ((uint32_t)name) >> 8UL;
6000dc74:	ea4f 2210 	mov.w	r2, r0, lsr #8
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
6000dc78:	f000 031f 	and.w	r3, r0, #31
{
6000dc7c:	b510      	push	{r4, lr}
    assert(index <= 7UL);
6000dc7e:	d306      	bcc.n	6000dc8e <CLOCK_ControlGate+0x1e>
6000dc80:	4b0b      	ldr	r3, [pc, #44]	; (6000dcb0 <CLOCK_ControlGate+0x40>)
6000dc82:	f240 51de 	movw	r1, #1502	; 0x5de
6000dc86:	4a0b      	ldr	r2, [pc, #44]	; (6000dcb4 <CLOCK_ControlGate+0x44>)
6000dc88:	480b      	ldr	r0, [pc, #44]	; (6000dcb8 <CLOCK_ControlGate+0x48>)
6000dc8a:	f005 f859 	bl	60012d40 <__assert_func>

    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000dc8e:	480b      	ldr	r0, [pc, #44]	; (6000dcbc <CLOCK_ControlGate+0x4c>)
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000dc90:	4099      	lsls	r1, r3
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000dc92:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000dc96:	2203      	movs	r2, #3
6000dc98:	409a      	lsls	r2, r3

static inline void _SDK_AtomicLocalClearAndSet4Byte(volatile uint32_t *addr, uint32_t clearBits, uint32_t setBits)
{
    uint32_t s_val;

    _SDK_ATOMIC_LOCAL_OPS_4BYTE(addr, s_val, s_val = (s_val & ~clearBits) | setBits);
6000dc9a:	43d2      	mvns	r2, r2
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000dc9c:	e850 3f00 	ldrex	r3, [r0]
6000dca0:	4013      	ands	r3, r2
6000dca2:	430b      	orrs	r3, r1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000dca4:	e840 3400 	strex	r4, r3, [r0]
6000dca8:	2c00      	cmp	r4, #0
6000dcaa:	d1f7      	bne.n	6000dc9c <CLOCK_ControlGate+0x2c>
}
6000dcac:	bd10      	pop	{r4, pc}
6000dcae:	bf00      	nop
6000dcb0:	6001e131 	.word	0x6001e131
6000dcb4:	6001e314 	.word	0x6001e314
6000dcb8:	6001e13e 	.word	0x6001e13e
6000dcbc:	400fc068 	.word	0x400fc068

6000dcc0 <LPI2C_GetCyclesForWidth>:
 * @param maxCycles Maximum cycle count.
 * @param prescaler LPI2C prescaler setting. If the cycle period is not affected by the prescaler value, set it to 0.
 */
static uint32_t LPI2C_GetCyclesForWidth(
    uint32_t sourceClock_Hz, uint32_t width_ns, uint32_t minCycles, uint32_t maxCycles, uint32_t prescaler)
{
6000dcc0:	b570      	push	{r4, r5, r6, lr}
6000dcc2:	9e04      	ldr	r6, [sp, #16]
6000dcc4:	4615      	mov	r5, r2
    assert(sourceClock_Hz > 0U);
6000dcc6:	4604      	mov	r4, r0
6000dcc8:	bb08      	cbnz	r0, 6000dd0e <LPI2C_GetCyclesForWidth+0x4e>
6000dcca:	4b12      	ldr	r3, [pc, #72]	; (6000dd14 <LPI2C_GetCyclesForWidth+0x54>)
6000dccc:	2193      	movs	r1, #147	; 0x93
6000dcce:	4a12      	ldr	r2, [pc, #72]	; (6000dd18 <LPI2C_GetCyclesForWidth+0x58>)
6000dcd0:	4812      	ldr	r0, [pc, #72]	; (6000dd1c <LPI2C_GetCyclesForWidth+0x5c>)
6000dcd2:	f005 f835 	bl	60012d40 <__assert_func>

    uint32_t divider = 1U;

    while (prescaler != 0U)
    {
        divider *= 2U;
6000dcd6:	0052      	lsls	r2, r2, #1
        prescaler--;
6000dcd8:	3e01      	subs	r6, #1
    while (prescaler != 0U)
6000dcda:	2e00      	cmp	r6, #0
6000dcdc:	d1fb      	bne.n	6000dcd6 <LPI2C_GetCyclesForWidth+0x16>
    }

    uint32_t busCycle_ns = 1000000U / (sourceClock_Hz / divider / 1000U);
    /* Calculate the cycle count, round up the calculated value. */
    uint32_t cycles = (width_ns * 10U / busCycle_ns + 5U) / 10U;
6000dcde:	200a      	movs	r0, #10
    uint32_t busCycle_ns = 1000000U / (sourceClock_Hz / divider / 1000U);
6000dce0:	fbb4 f4f2 	udiv	r4, r4, r2
6000dce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    uint32_t cycles = (width_ns * 10U / busCycle_ns + 5U) / 10U;
6000dce8:	4341      	muls	r1, r0
    uint32_t busCycle_ns = 1000000U / (sourceClock_Hz / divider / 1000U);
6000dcea:	fbb4 f4f2 	udiv	r4, r4, r2
6000dcee:	4a0c      	ldr	r2, [pc, #48]	; (6000dd20 <LPI2C_GetCyclesForWidth+0x60>)
6000dcf0:	fbb2 f2f4 	udiv	r2, r2, r4
    uint32_t cycles = (width_ns * 10U / busCycle_ns + 5U) / 10U;
6000dcf4:	fbb1 f2f2 	udiv	r2, r1, r2
6000dcf8:	3205      	adds	r2, #5
6000dcfa:	fbb2 f2f0 	udiv	r2, r2, r0
    if (cycles > maxCycles)
    {
        cycles = maxCycles;
    }

    return cycles;
6000dcfe:	42aa      	cmp	r2, r5
6000dd00:	bf38      	it	cc
6000dd02:	462a      	movcc	r2, r5
}
6000dd04:	429a      	cmp	r2, r3
6000dd06:	bf28      	it	cs
6000dd08:	461a      	movcs	r2, r3
6000dd0a:	4610      	mov	r0, r2
6000dd0c:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t divider = 1U;
6000dd0e:	2201      	movs	r2, #1
6000dd10:	e7e3      	b.n	6000dcda <LPI2C_GetCyclesForWidth+0x1a>
6000dd12:	bf00      	nop
6000dd14:	6001e191 	.word	0x6001e191
6000dd18:	6001e2fc 	.word	0x6001e2fc
6000dd1c:	6001e1a5 	.word	0x6001e1a5
6000dd20:	000f4240 	.word	0x000f4240

6000dd24 <LPI2C_GetInstance>:
{
6000dd24:	b508      	push	{r3, lr}
        if (kLpi2cBases[instance] == base)
6000dd26:	b1a8      	cbz	r0, 6000dd54 <LPI2C_GetInstance+0x30>
6000dd28:	4b0e      	ldr	r3, [pc, #56]	; (6000dd64 <LPI2C_GetInstance+0x40>)
6000dd2a:	4298      	cmp	r0, r3
6000dd2c:	d011      	beq.n	6000dd52 <LPI2C_GetInstance+0x2e>
6000dd2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000dd32:	4298      	cmp	r0, r3
6000dd34:	d00f      	beq.n	6000dd56 <LPI2C_GetInstance+0x32>
6000dd36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000dd3a:	4298      	cmp	r0, r3
6000dd3c:	d00d      	beq.n	6000dd5a <LPI2C_GetInstance+0x36>
6000dd3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000dd42:	4298      	cmp	r0, r3
6000dd44:	d00b      	beq.n	6000dd5e <LPI2C_GetInstance+0x3a>
    assert(instance < ARRAY_SIZE(kLpi2cBases));
6000dd46:	4b08      	ldr	r3, [pc, #32]	; (6000dd68 <LPI2C_GetInstance+0x44>)
6000dd48:	2184      	movs	r1, #132	; 0x84
6000dd4a:	4a08      	ldr	r2, [pc, #32]	; (6000dd6c <LPI2C_GetInstance+0x48>)
6000dd4c:	4808      	ldr	r0, [pc, #32]	; (6000dd70 <LPI2C_GetInstance+0x4c>)
6000dd4e:	f004 fff7 	bl	60012d40 <__assert_func>
    for (instance = 0U; instance < ARRAY_SIZE(kLpi2cBases); ++instance)
6000dd52:	2001      	movs	r0, #1
}
6000dd54:	bd08      	pop	{r3, pc}
    for (instance = 0U; instance < ARRAY_SIZE(kLpi2cBases); ++instance)
6000dd56:	2002      	movs	r0, #2
6000dd58:	e7fc      	b.n	6000dd54 <LPI2C_GetInstance+0x30>
6000dd5a:	2003      	movs	r0, #3
6000dd5c:	e7fa      	b.n	6000dd54 <LPI2C_GetInstance+0x30>
6000dd5e:	2004      	movs	r0, #4
    return instance;
6000dd60:	e7f8      	b.n	6000dd54 <LPI2C_GetInstance+0x30>
6000dd62:	bf00      	nop
6000dd64:	403f0000 	.word	0x403f0000
6000dd68:	6001e1e9 	.word	0x6001e1e9
6000dd6c:	6001e326 	.word	0x6001e326
6000dd70:	6001e1a5 	.word	0x6001e1a5

6000dd74 <LPI2C_MasterGetDefaultConfig>:
 * prior to initializing the master driver with LPI2C_MasterInit().
 *
 * param[out] masterConfig User provided configuration structure for default values. Refer to #lpi2c_master_config_t.
 */
void LPI2C_MasterGetDefaultConfig(lpi2c_master_config_t *masterConfig)
{
6000dd74:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
6000dd76:	2217      	movs	r2, #23
6000dd78:	4604      	mov	r4, r0
6000dd7a:	2100      	movs	r1, #0
6000dd7c:	3005      	adds	r0, #5
6000dd7e:	f005 fadf 	bl	60013340 <memset>
    /* Initializes the configure structure to zero. */
    (void)memset(masterConfig, 0, sizeof(*masterConfig));

    masterConfig->enableMaster            = true;
6000dd82:	f240 1301 	movw	r3, #257	; 0x101
6000dd86:	6023      	str	r3, [r4, #0]
    masterConfig->debugEnable             = false;
    masterConfig->enableDoze              = true;
    masterConfig->ignoreAck               = false;
    masterConfig->pinConfig               = kLPI2C_2PinOpenDrain;
6000dd88:	2300      	movs	r3, #0
6000dd8a:	7123      	strb	r3, [r4, #4]
    masterConfig->baudRate_Hz             = 100000U;
6000dd8c:	4b02      	ldr	r3, [pc, #8]	; (6000dd98 <LPI2C_MasterGetDefaultConfig+0x24>)
6000dd8e:	60a3      	str	r3, [r4, #8]
    masterConfig->pinLowTimeout_ns        = 0U; /* Set to 0 to disable the function */
    masterConfig->sdaGlitchFilterWidth_ns = 0U; /* Set to 0 to disable the function */
    masterConfig->sclGlitchFilterWidth_ns = 0U; /* Set to 0 to disable the function */
    masterConfig->hostRequest.enable      = false;
    masterConfig->hostRequest.source      = kLPI2C_HostRequestExternalPin;
    masterConfig->hostRequest.polarity    = kLPI2C_HostRequestPinActiveHigh;
6000dd90:	2301      	movs	r3, #1
6000dd92:	7623      	strb	r3, [r4, #24]
}
6000dd94:	bd10      	pop	{r4, pc}
6000dd96:	bf00      	nop
6000dd98:	000186a0 	.word	0x000186a0

6000dd9c <LPI2C_MasterInit>:
 *      that you can override.
 * param sourceClock_Hz Frequency in Hertz of the LPI2C functional clock. Used to calculate the baud rate divisors,
 *      filter widths, and timeout periods.
 */
void LPI2C_MasterInit(LPI2C_Type *base, const lpi2c_master_config_t *masterConfig, uint32_t sourceClock_Hz)
{
6000dd9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
6000dda0:	4604      	mov	r4, r0
6000dda2:	460d      	mov	r5, r1
6000dda4:	4616      	mov	r6, r2
    uint32_t cfgr2;
    uint32_t value;

#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

    uint32_t instance = LPI2C_GetInstance(base);
6000dda6:	f7ff ffbd 	bl	6000dd24 <LPI2C_GetInstance>
 *
 * @param name  Which clock to enable, see \ref clock_ip_name_t.
 */
static inline void CLOCK_EnableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
6000ddaa:	4b3d      	ldr	r3, [pc, #244]	; (6000dea0 <LPI2C_MasterInit+0x104>)
6000ddac:	2103      	movs	r1, #3
6000ddae:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
6000ddb2:	f7ff ff5d 	bl	6000dc70 <CLOCK_ControlGate>
 *
 * @param base The LPI2C peripheral base address.
 */
static inline void LPI2C_MasterReset(LPI2C_Type *base)
{
    base->MCR = LPI2C_MCR_RST_MASK;
6000ddb6:	2302      	movs	r3, #2
    base->MCR = 0;
6000ddb8:	2000      	movs	r0, #0
    base->MCR = LPI2C_MCR_RST_MASK;
6000ddba:	6123      	str	r3, [r4, #16]
    base->MCR = 0;
6000ddbc:	6120      	str	r0, [r4, #16]

    /* Reset peripheral before configuring it. */
    LPI2C_MasterReset(base);

    /* Doze bit: 0 is enable, 1 is disable */
    base->MCR = LPI2C_MCR_DBGEN(masterConfig->debugEnable) | LPI2C_MCR_DOZEN(!(masterConfig->enableDoze));
6000ddbe:	786a      	ldrb	r2, [r5, #1]
6000ddc0:	78ab      	ldrb	r3, [r5, #2]
6000ddc2:	f082 0201 	eor.w	r2, r2, #1
6000ddc6:	00db      	lsls	r3, r3, #3
6000ddc8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
6000ddcc:	6123      	str	r3, [r4, #16]

    /* host request */
    value = base->MCFGR0;
6000ddce:	6a21      	ldr	r1, [r4, #32]
    value &= (~(LPI2C_MCFGR0_HREN_MASK | LPI2C_MCFGR0_HRPOL_MASK | LPI2C_MCFGR0_HRSEL_MASK));
    value |= LPI2C_MCFGR0_HREN(masterConfig->hostRequest.enable) |
             LPI2C_MCFGR0_HRPOL(masterConfig->hostRequest.polarity) |
6000ddd0:	7e2a      	ldrb	r2, [r5, #24]
    value |= LPI2C_MCFGR0_HREN(masterConfig->hostRequest.enable) |
6000ddd2:	7dab      	ldrb	r3, [r5, #22]
    value &= (~(LPI2C_MCFGR0_HREN_MASK | LPI2C_MCFGR0_HRPOL_MASK | LPI2C_MCFGR0_HRSEL_MASK));
6000ddd4:	f021 0107 	bic.w	r1, r1, #7
             LPI2C_MCFGR0_HRPOL(masterConfig->hostRequest.polarity) |
6000ddd8:	0052      	lsls	r2, r2, #1
6000ddda:	430b      	orrs	r3, r1
6000dddc:	f002 0202 	and.w	r2, r2, #2
6000dde0:	431a      	orrs	r2, r3
             LPI2C_MCFGR0_HRSEL(masterConfig->hostRequest.source);
6000dde2:	7deb      	ldrb	r3, [r5, #23]
6000dde4:	009b      	lsls	r3, r3, #2
6000dde6:	f003 0304 	and.w	r3, r3, #4
    value |= LPI2C_MCFGR0_HREN(masterConfig->hostRequest.enable) |
6000ddea:	4313      	orrs	r3, r2
    base->MCFGR0 = value;
6000ddec:	6223      	str	r3, [r4, #32]

    /* pin config and ignore ack */
    value = base->MCFGR1;
6000ddee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    value &= ~(LPI2C_MCFGR1_PINCFG_MASK | LPI2C_MCFGR1_IGNACK_MASK);
    value |= LPI2C_MCFGR1_PINCFG(masterConfig->pinConfig);
    value |= LPI2C_MCFGR1_IGNACK(masterConfig->ignoreAck);
6000ddf0:	78ea      	ldrb	r2, [r5, #3]
    value &= ~(LPI2C_MCFGR1_PINCFG_MASK | LPI2C_MCFGR1_IGNACK_MASK);
6000ddf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
6000ddf6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
6000ddfa:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
    value |= LPI2C_MCFGR1_PINCFG(masterConfig->pinConfig);
6000ddfe:	792b      	ldrb	r3, [r5, #4]
6000de00:	061b      	lsls	r3, r3, #24
6000de02:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    value |= LPI2C_MCFGR1_IGNACK(masterConfig->ignoreAck);
6000de06:	4313      	orrs	r3, r2
    base->MCFGR1 = value;
6000de08:	6263      	str	r3, [r4, #36]	; 0x24
 *      the number of words in the receive FIFO is greater than @a rxWords. Writing a value equal or greater
 *      than the FIFO size is truncated.
 */
static inline void LPI2C_MasterSetWatermarks(LPI2C_Type *base, size_t txWords, size_t rxWords)
{
    base->MFCR = LPI2C_MFCR_TXWATER(txWords) | LPI2C_MFCR_RXWATER(rxWords);
6000de0a:	65a0      	str	r0, [r4, #88]	; 0x58

    LPI2C_MasterSetWatermarks(base, (size_t)kDefaultTxWatermark, (size_t)kDefaultRxWatermark);

    /* Configure glitch filters. */
    cfgr2 = base->MCFGR2;
    if (0U != (masterConfig->sdaGlitchFilterWidth_ns))
6000de0c:	7d29      	ldrb	r1, [r5, #20]
    cfgr2 = base->MCFGR2;
6000de0e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    if (0U != (masterConfig->sdaGlitchFilterWidth_ns))
6000de10:	b139      	cbz	r1, 6000de22 <LPI2C_MasterInit+0x86>
    {
        /* Calculate SDA filter width. The width is equal to FILTSDA cycles of functional clock.
           And set FILTSDA to 0 disables the fileter, so the min value is 1. */
        cycles = LPI2C_GetCyclesForWidth(sourceClock_Hz, masterConfig->sdaGlitchFilterWidth_ns, 1U,
6000de12:	9000      	str	r0, [sp, #0]
6000de14:	230f      	movs	r3, #15
6000de16:	2201      	movs	r2, #1
6000de18:	4630      	mov	r0, r6
6000de1a:	f7ff ff51 	bl	6000dcc0 <LPI2C_GetCyclesForWidth>
                                         (LPI2C_MCFGR2_FILTSDA_MASK >> LPI2C_MCFGR2_FILTSDA_SHIFT), 0U);
        cfgr2 &= ~LPI2C_MCFGR2_FILTSDA_MASK;
        cfgr2 |= LPI2C_MCFGR2_FILTSDA(cycles);
6000de1e:	f360 671b 	bfi	r7, r0, #24, #4
    }
    if (0U != masterConfig->sclGlitchFilterWidth_ns)
6000de22:	7d69      	ldrb	r1, [r5, #21]
6000de24:	b141      	cbz	r1, 6000de38 <LPI2C_MasterInit+0x9c>
    {
        /* Calculate SDL filter width. The width is equal to FILTSCL cycles of functional clock.
           And set FILTSCL to 0 disables the fileter, so the min value is 1. */
        cycles = LPI2C_GetCyclesForWidth(sourceClock_Hz, masterConfig->sclGlitchFilterWidth_ns, 1U,
6000de26:	2300      	movs	r3, #0
6000de28:	2201      	movs	r2, #1
6000de2a:	4630      	mov	r0, r6
6000de2c:	9300      	str	r3, [sp, #0]
6000de2e:	230f      	movs	r3, #15
6000de30:	f7ff ff46 	bl	6000dcc0 <LPI2C_GetCyclesForWidth>
                                         (LPI2C_MCFGR2_FILTSCL_MASK >> LPI2C_MCFGR2_FILTSCL_SHIFT), 0U);
        cfgr2 &= ~LPI2C_MCFGR2_FILTSCL_MASK;
        cfgr2 |= LPI2C_MCFGR2_FILTSCL(cycles);
6000de34:	f360 4713 	bfi	r7, r0, #16, #4
    }
    base->MCFGR2 = cfgr2;

    /* Configure baudrate after the SDA/SCL glitch filter setting,
       since the baudrate calculation needs them as parameter. */
    LPI2C_MasterSetBaudRate(base, sourceClock_Hz, masterConfig->baudRate_Hz);
6000de38:	4631      	mov	r1, r6
    base->MCFGR2 = cfgr2;
6000de3a:	62a7      	str	r7, [r4, #40]	; 0x28
    LPI2C_MasterSetBaudRate(base, sourceClock_Hz, masterConfig->baudRate_Hz);
6000de3c:	4620      	mov	r0, r4
6000de3e:	68aa      	ldr	r2, [r5, #8]
6000de40:	f00b f813 	bl	60018e6a <LPI2C_MasterSetBaudRate>

    /* Configure bus idle and pin low timeouts after baudrate setting,
       since the timeout calculation needs prescaler as parameter. */
    prescaler = (base->MCFGR1 & LPI2C_MCFGR1_PRESCALE_MASK) >> LPI2C_MCFGR1_PRESCALE_SHIFT;
6000de44:	6a63      	ldr	r3, [r4, #36]	; 0x24

    if (0U != (masterConfig->busIdleTimeout_ns))
6000de46:	68e9      	ldr	r1, [r5, #12]
    prescaler = (base->MCFGR1 & LPI2C_MCFGR1_PRESCALE_MASK) >> LPI2C_MCFGR1_PRESCALE_SHIFT;
6000de48:	f003 0807 	and.w	r8, r3, #7
    if (0U != (masterConfig->busIdleTimeout_ns))
6000de4c:	b149      	cbz	r1, 6000de62 <LPI2C_MasterInit+0xc6>
    {
        /* Calculate bus idle timeout value. The value is equal to BUSIDLE cycles of functional clock divided by
           prescaler. And set BUSIDLE to 0 disables the fileter, so the min value is 1. */
        cycles = LPI2C_GetCyclesForWidth(sourceClock_Hz, masterConfig->busIdleTimeout_ns, 1U,
6000de4e:	f640 73ff 	movw	r3, #4095	; 0xfff
6000de52:	2201      	movs	r2, #1
6000de54:	4630      	mov	r0, r6
6000de56:	f8cd 8000 	str.w	r8, [sp]
6000de5a:	f7ff ff31 	bl	6000dcc0 <LPI2C_GetCyclesForWidth>
                                         (LPI2C_MCFGR2_BUSIDLE_MASK >> LPI2C_MCFGR2_BUSIDLE_SHIFT), prescaler);
        cfgr2 &= ~LPI2C_MCFGR2_BUSIDLE_MASK;
        cfgr2 |= LPI2C_MCFGR2_BUSIDLE(cycles);
6000de5e:	f360 070b 	bfi	r7, r0, #0, #12
    }
    base->MCFGR2 = cfgr2;
6000de62:	62a7      	str	r7, [r4, #40]	; 0x28
    if (0U != masterConfig->pinLowTimeout_ns)
6000de64:	6929      	ldr	r1, [r5, #16]
6000de66:	b191      	cbz	r1, 6000de8e <LPI2C_MasterInit+0xf2>
    {
        /* Calculate bus pin low timeout value. The value is equal to PINLOW cycles of functional clock divided by
           prescaler. And set PINLOW to 0 disables the fileter, so the min value is 1. */
        cycles       = LPI2C_GetCyclesForWidth(sourceClock_Hz, masterConfig->pinLowTimeout_ns / 256U, 1U,
6000de68:	f640 73ff 	movw	r3, #4095	; 0xfff
6000de6c:	2201      	movs	r2, #1
6000de6e:	0a09      	lsrs	r1, r1, #8
6000de70:	4630      	mov	r0, r6
6000de72:	f8cd 8000 	str.w	r8, [sp]
6000de76:	f7ff ff23 	bl	6000dcc0 <LPI2C_GetCyclesForWidth>
                                         (LPI2C_MCFGR2_BUSIDLE_MASK >> LPI2C_MCFGR2_BUSIDLE_SHIFT), prescaler);
        base->MCFGR3 = (base->MCFGR3 & ~LPI2C_MCFGR3_PINLOW_MASK) | LPI2C_MCFGR3_PINLOW(cycles);
6000de7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
6000de7c:	4b09      	ldr	r3, [pc, #36]	; (6000dea4 <LPI2C_MasterInit+0x108>)
6000de7e:	f422 227f 	bic.w	r2, r2, #1044480	; 0xff000
6000de82:	ea03 2300 	and.w	r3, r3, r0, lsl #8
6000de86:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
6000de8a:	4313      	orrs	r3, r2
6000de8c:	62e3      	str	r3, [r4, #44]	; 0x2c
    base->MCR = (base->MCR & ~LPI2C_MCR_MEN_MASK) | LPI2C_MCR_MEN(enable);
6000de8e:	6923      	ldr	r3, [r4, #16]
6000de90:	782a      	ldrb	r2, [r5, #0]
6000de92:	f023 0301 	bic.w	r3, r3, #1
6000de96:	4313      	orrs	r3, r2
6000de98:	6123      	str	r3, [r4, #16]
    }

    LPI2C_MasterEnable(base, masterConfig->enableMaster);
}
6000de9a:	b002      	add	sp, #8
6000de9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
6000dea0:	6001c0aa 	.word	0x6001c0aa
6000dea4:	000fff00 	.word	0x000fff00

6000dea8 <LPI2C_MasterTransferCreateHandle>:
 */
void LPI2C_MasterTransferCreateHandle(LPI2C_Type *base,
                                      lpi2c_master_handle_t *handle,
                                      lpi2c_master_transfer_callback_t callback,
                                      void *userData)
{
6000dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000deaa:	4605      	mov	r5, r0
6000deac:	4617      	mov	r7, r2
6000deae:	461e      	mov	r6, r3
    uint32_t instance;

    assert(NULL != handle);
6000deb0:	460c      	mov	r4, r1
6000deb2:	b931      	cbnz	r1, 6000dec2 <LPI2C_MasterTransferCreateHandle+0x1a>
6000deb4:	4b13      	ldr	r3, [pc, #76]	; (6000df04 <LPI2C_MasterTransferCreateHandle+0x5c>)
6000deb6:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
6000deba:	4a13      	ldr	r2, [pc, #76]	; (6000df08 <LPI2C_MasterTransferCreateHandle+0x60>)
6000debc:	4813      	ldr	r0, [pc, #76]	; (6000df0c <LPI2C_MasterTransferCreateHandle+0x64>)
6000debe:	f004 ff3f 	bl	60012d40 <__assert_func>
6000dec2:	2234      	movs	r2, #52	; 0x34
6000dec4:	2100      	movs	r1, #0
6000dec6:	4620      	mov	r0, r4
6000dec8:	f005 fa3a 	bl	60013340 <memset>

    /* Clear out the handle. */
    (void)memset(handle, 0, sizeof(*handle));

    /* Look up instance number */
    instance = LPI2C_GetInstance(base);
6000decc:	4628      	mov	r0, r5
6000dece:	f7ff ff29 	bl	6000dd24 <LPI2C_GetInstance>
    /* Save base and instance. */
    handle->completionCallback = callback;
    handle->userData           = userData;

    /* Save this handle for IRQ use. */
    s_lpi2cMasterHandle[instance] = handle;
6000ded2:	4b0f      	ldr	r3, [pc, #60]	; (6000df10 <LPI2C_MasterTransferCreateHandle+0x68>)

    /* Set irq handler. */
    s_lpi2cMasterIsr = LPI2C_MasterTransferHandleIRQ;
6000ded4:	4a0f      	ldr	r2, [pc, #60]	; (6000df14 <LPI2C_MasterTransferCreateHandle+0x6c>)
    s_lpi2cMasterHandle[instance] = handle;
6000ded6:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
    s_lpi2cMasterIsr = LPI2C_MasterTransferHandleIRQ;
6000deda:	4b0f      	ldr	r3, [pc, #60]	; (6000df18 <LPI2C_MasterTransferCreateHandle+0x70>)
    handle->userData           = userData;
6000dedc:	e9c4 760b 	strd	r7, r6, [r4, #44]	; 0x2c
    s_lpi2cMasterIsr = LPI2C_MasterTransferHandleIRQ;
6000dee0:	601a      	str	r2, [r3, #0]
    base->MIER &= ~interruptMask;
6000dee2:	69ab      	ldr	r3, [r5, #24]
6000dee4:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000dee8:	f023 0303 	bic.w	r3, r3, #3
6000deec:	61ab      	str	r3, [r5, #24]
    LPI2C_MasterDisableInterrupts(base, (uint32_t)kLPI2C_MasterIrqFlags);

    /* Enable NVIC IRQ, this only enables the IRQ directly connected to the NVIC.
     In some cases the LPI2C IRQ is configured through INTMUX, user needs to enable
     INTMUX IRQ in application code. */
    (void)EnableIRQ(kLpi2cIrqs[instance]);
6000deee:	4b0b      	ldr	r3, [pc, #44]	; (6000df1c <LPI2C_MasterTransferCreateHandle+0x74>)
6000def0:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 */
static inline status_t EnableIRQ(IRQn_Type interrupt)
{
    status_t status = kStatus_Success;

    if (NotAvail_IRQn == interrupt)
6000def4:	f110 0f80 	cmn.w	r0, #128	; 0x80
6000def8:	d003      	beq.n	6000df02 <LPI2C_MasterTransferCreateHandle+0x5a>
}
6000defa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    else
    {
#if defined(__GIC_PRIO_BITS)
        GIC_EnableIRQ(interrupt);
#else
        NVIC_EnableIRQ(interrupt);
6000defe:	f7ff bea9 	b.w	6000dc54 <__NVIC_EnableIRQ>
6000df02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000df04:	6001e256 	.word	0x6001e256
6000df08:	6001e2db 	.word	0x6001e2db
6000df0c:	6001e1a5 	.word	0x6001e1a5
6000df10:	20204cd8 	.word	0x20204cd8
6000df14:	6000e085 	.word	0x6000e085
6000df18:	20204cec 	.word	0x20204cec
6000df1c:	6001c0b4 	.word	0x6001c0b4

6000df20 <LPI2C_MasterTransferNonBlocking>:
 *      transaction is already in progress.
 */
status_t LPI2C_MasterTransferNonBlocking(LPI2C_Type *base,
                                         lpi2c_master_handle_t *handle,
                                         lpi2c_master_transfer_t *transfer)
{
6000df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000df22:	4606      	mov	r6, r0
6000df24:	4615      	mov	r5, r2
    assert(NULL != handle);
6000df26:	460c      	mov	r4, r1
6000df28:	b931      	cbnz	r1, 6000df38 <LPI2C_MasterTransferNonBlocking+0x18>
6000df2a:	4b44      	ldr	r3, [pc, #272]	; (6000e03c <LPI2C_MasterTransferNonBlocking+0x11c>)
6000df2c:	f240 5151 	movw	r1, #1361	; 0x551
6000df30:	4a43      	ldr	r2, [pc, #268]	; (6000e040 <LPI2C_MasterTransferNonBlocking+0x120>)
    assert(NULL != transfer);
6000df32:	4844      	ldr	r0, [pc, #272]	; (6000e044 <LPI2C_MasterTransferNonBlocking+0x124>)
6000df34:	f004 ff04 	bl	60012d40 <__assert_func>
6000df38:	b922      	cbnz	r2, 6000df44 <LPI2C_MasterTransferNonBlocking+0x24>
6000df3a:	4b43      	ldr	r3, [pc, #268]	; (6000e048 <LPI2C_MasterTransferNonBlocking+0x128>)
6000df3c:	f240 5152 	movw	r1, #1362	; 0x552
6000df40:	4a3f      	ldr	r2, [pc, #252]	; (6000e040 <LPI2C_MasterTransferNonBlocking+0x120>)
6000df42:	e7f6      	b.n	6000df32 <LPI2C_MasterTransferNonBlocking+0x12>
    assert(transfer->subaddressSize <= sizeof(transfer->subaddress));
6000df44:	68d3      	ldr	r3, [r2, #12]
6000df46:	2b04      	cmp	r3, #4
6000df48:	d904      	bls.n	6000df54 <LPI2C_MasterTransferNonBlocking+0x34>
6000df4a:	4b40      	ldr	r3, [pc, #256]	; (6000e04c <LPI2C_MasterTransferNonBlocking+0x12c>)
6000df4c:	f240 5153 	movw	r1, #1363	; 0x553
6000df50:	4a3b      	ldr	r2, [pc, #236]	; (6000e040 <LPI2C_MasterTransferNonBlocking+0x120>)
6000df52:	e7ee      	b.n	6000df32 <LPI2C_MasterTransferNonBlocking+0x12>

    status_t result;

    /* Check transfer data size in read operation. */
    if ((transfer->direction == kLPI2C_Read) &&
6000df54:	7993      	ldrb	r3, [r2, #6]
6000df56:	2b01      	cmp	r3, #1
6000df58:	d103      	bne.n	6000df62 <LPI2C_MasterTransferNonBlocking+0x42>
6000df5a:	6953      	ldr	r3, [r2, #20]
6000df5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
6000df60:	d867      	bhi.n	6000e032 <LPI2C_MasterTransferNonBlocking+0x112>
    {
        return kStatus_InvalidArgument;
    }

    /* Return busy if another transaction is in progress. */
    if (handle->state != (uint8_t)kIdleState)
6000df62:	7823      	ldrb	r3, [r4, #0]
6000df64:	2b00      	cmp	r3, #0
6000df66:	d166      	bne.n	6000e036 <LPI2C_MasterTransferNonBlocking+0x116>
    {
        result = kStatus_LPI2C_Busy;
    }
    else
    {
        result = LPI2C_CheckForBusyBus(base);
6000df68:	4630      	mov	r0, r6
6000df6a:	f00a ff74 	bl	60018e56 <LPI2C_CheckForBusyBus>
    }

    if ((status_t)kStatus_Success == result)
6000df6e:	4607      	mov	r7, r0
6000df70:	2800      	cmp	r0, #0
6000df72:	d12c      	bne.n	6000dfce <LPI2C_MasterTransferNonBlocking+0xae>
6000df74:	69b3      	ldr	r3, [r6, #24]

        /* Reset FIFO in case there are data. */
        base->MCR |= LPI2C_MCR_RRF_MASK | LPI2C_MCR_RTF_MASK;

        /* Save transfer into handle. */
        handle->transfer = *transfer;
6000df76:	f104 0c14 	add.w	ip, r4, #20
6000df7a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000df7e:	f023 0303 	bic.w	r3, r3, #3
6000df82:	61b3      	str	r3, [r6, #24]
        base->MCR |= LPI2C_MCR_RRF_MASK | LPI2C_MCR_RTF_MASK;
6000df84:	6933      	ldr	r3, [r6, #16]
6000df86:	f443 7340 	orr.w	r3, r3, #768	; 0x300
6000df8a:	6133      	str	r3, [r6, #16]
        handle->transfer = *transfer;
6000df8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
6000df8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
6000df92:	e895 0003 	ldmia.w	r5, {r0, r1}
6000df96:	e88c 0003 	stmia.w	ip, {r0, r1}
    if (0U != (xfer->flags & (uint32_t)kLPI2C_TransferNoStartFlag))
6000df9a:	6963      	ldr	r3, [r4, #20]
6000df9c:	07db      	lsls	r3, r3, #31
6000df9e:	d518      	bpl.n	6000dfd2 <LPI2C_MasterTransferNonBlocking+0xb2>
        if (xfer->direction == kLPI2C_Read)
6000dfa0:	7ea3      	ldrb	r3, [r4, #26]
            handle->state = (uint8_t)kIssueReadCommandState;
6000dfa2:	2b01      	cmp	r3, #1
6000dfa4:	bf14      	ite	ne
6000dfa6:	2303      	movne	r3, #3
6000dfa8:	2302      	moveq	r3, #2
6000dfaa:	7023      	strb	r3, [r4, #0]
        handle->buf            = (uint8_t *)xfer->data;
6000dfac:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000dfae:	6063      	str	r3, [r4, #4]
        handle->remainingBytes = (uint16_t)xfer->dataSize;
6000dfb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000dfb2:	8063      	strh	r3, [r4, #2]
    base->MSR = statusMask;
6000dfb4:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
6000dfb8:	6173      	str	r3, [r6, #20]

        /* Clear all flags. */
        LPI2C_MasterClearStatusFlags(base, (uint32_t)kLPI2C_MasterClearFlags);

        /* Turn off auto-stop option. */
        base->MCFGR1 &= ~LPI2C_MCFGR1_AUTOSTOP_MASK;
6000dfba:	6a73      	ldr	r3, [r6, #36]	; 0x24
6000dfbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
6000dfc0:	6273      	str	r3, [r6, #36]	; 0x24
    base->MIER |= interruptMask;
6000dfc2:	69b3      	ldr	r3, [r6, #24]
6000dfc4:	f443 5378 	orr.w	r3, r3, #15872	; 0x3e00
6000dfc8:	f043 0303 	orr.w	r3, r3, #3
6000dfcc:	61b3      	str	r3, [r6, #24]
        /* Enable LPI2C internal IRQ sources. NVIC IRQ was enabled in CreateHandle() */
        LPI2C_MasterEnableInterrupts(base, (uint32_t)kLPI2C_MasterIrqFlags);
    }

    return result;
}
6000dfce:	4638      	mov	r0, r7
6000dfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            (uint16_t)kStartCmd | (uint16_t)((uint16_t)((uint16_t)xfer->slaveAddress << 1U) | (uint16_t)direction);
6000dfd2:	8b23      	ldrh	r3, [r4, #24]
        uint16_t *cmd     = (uint16_t *)&handle->commandBuffer;
6000dfd4:	f104 0208 	add.w	r2, r4, #8
        lpi2c_direction_t direction = (0U != xfer->subaddressSize) ? kLPI2C_Write : xfer->direction;
6000dfd8:	6a21      	ldr	r1, [r4, #32]
            (uint16_t)kStartCmd | (uint16_t)((uint16_t)((uint16_t)xfer->slaveAddress << 1U) | (uint16_t)direction);
6000dfda:	005b      	lsls	r3, r3, #1
6000dfdc:	b29b      	uxth	r3, r3
        lpi2c_direction_t direction = (0U != xfer->subaddressSize) ? kLPI2C_Write : xfer->direction;
6000dfde:	b1e9      	cbz	r1, 6000e01c <LPI2C_MasterTransferNonBlocking+0xfc>
        cmd[cmdCount++] =
6000dfe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
            while (0U != (subaddressRemaining--))
6000dfe4:	1e48      	subs	r0, r1, #1
6000dfe6:	4615      	mov	r5, r2
        cmd[cmdCount++] =
6000dfe8:	8123      	strh	r3, [r4, #8]
                uint8_t subaddressByte = (uint8_t)((xfer->subaddress >> (8U * subaddressRemaining)) & 0xffU);
6000dfea:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
6000dfee:	69e3      	ldr	r3, [r4, #28]
            while (0U != (subaddressRemaining--))
6000dff0:	3801      	subs	r0, #1
                uint8_t subaddressByte = (uint8_t)((xfer->subaddress >> (8U * subaddressRemaining)) & 0xffU);
6000dff2:	fa23 f30c 	lsr.w	r3, r3, ip
                cmd[cmdCount++]        = subaddressByte;
6000dff6:	b2db      	uxtb	r3, r3
6000dff8:	f825 3f02 	strh.w	r3, [r5, #2]!
            while (0U != (subaddressRemaining--))
6000dffc:	d2f5      	bcs.n	6000dfea <LPI2C_MasterTransferNonBlocking+0xca>
        if ((0U != xfer->dataSize) && (xfer->direction == kLPI2C_Read))
6000dffe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                cmd[cmdCount++]        = subaddressByte;
6000e000:	1c4b      	adds	r3, r1, #1
        if ((0U != xfer->dataSize) && (xfer->direction == kLPI2C_Read))
6000e002:	b188      	cbz	r0, 6000e028 <LPI2C_MasterTransferNonBlocking+0x108>
6000e004:	7ea0      	ldrb	r0, [r4, #26]
6000e006:	2801      	cmp	r0, #1
6000e008:	d10e      	bne.n	6000e028 <LPI2C_MasterTransferNonBlocking+0x108>
                                  (uint16_t)((uint16_t)((uint16_t)xfer->slaveAddress << 1U) | (uint16_t)kLPI2C_Read);
6000e00a:	8b25      	ldrh	r5, [r4, #24]
                cmd[cmdCount++] = (uint16_t)kStartCmd |
6000e00c:	f240 4001 	movw	r0, #1025	; 0x401
6000e010:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
6000e014:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
6000e018:	1c8b      	adds	r3, r1, #2
6000e01a:	e005      	b.n	6000e028 <LPI2C_MasterTransferNonBlocking+0x108>
            (uint16_t)kStartCmd | (uint16_t)((uint16_t)((uint16_t)xfer->slaveAddress << 1U) | (uint16_t)direction);
6000e01c:	7ea1      	ldrb	r1, [r4, #26]
6000e01e:	430b      	orrs	r3, r1
        cmd[cmdCount++] =
6000e020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
6000e024:	8123      	strh	r3, [r4, #8]
6000e026:	2301      	movs	r3, #1
        handle->state          = (uint8_t)kSendCommandState;
6000e028:	2101      	movs	r1, #1
        handle->remainingBytes = (uint16_t)cmdCount;
6000e02a:	8063      	strh	r3, [r4, #2]
        handle->buf            = (uint8_t *)&handle->commandBuffer;
6000e02c:	6062      	str	r2, [r4, #4]
        handle->state          = (uint8_t)kSendCommandState;
6000e02e:	7021      	strb	r1, [r4, #0]
        handle->buf            = (uint8_t *)&handle->commandBuffer;
6000e030:	e7c0      	b.n	6000dfb4 <LPI2C_MasterTransferNonBlocking+0x94>
        return kStatus_InvalidArgument;
6000e032:	2704      	movs	r7, #4
6000e034:	e7cb      	b.n	6000dfce <LPI2C_MasterTransferNonBlocking+0xae>
        result = kStatus_LPI2C_Busy;
6000e036:	f44f 7761 	mov.w	r7, #900	; 0x384
6000e03a:	e7c8      	b.n	6000dfce <LPI2C_MasterTransferNonBlocking+0xae>
6000e03c:	6001e256 	.word	0x6001e256
6000e040:	6001e2bb 	.word	0x6001e2bb
6000e044:	6001e1a5 	.word	0x6001e1a5
6000e048:	6001e20c 	.word	0x6001e20c
6000e04c:	6001e21d 	.word	0x6001e21d

6000e050 <LPI2C_MasterTransferAbort>:
 * retval #kStatus_Success A transaction was successfully aborted.
 * retval #kStatus_LPI2C_Idle There is not a non-blocking transaction currently in progress.
 */
void LPI2C_MasterTransferAbort(LPI2C_Type *base, lpi2c_master_handle_t *handle)
{
    if (handle->state != (uint8_t)kIdleState)
6000e050:	780b      	ldrb	r3, [r1, #0]
6000e052:	b1a3      	cbz	r3, 6000e07e <LPI2C_MasterTransferAbort+0x2e>
    base->MIER &= ~interruptMask;
6000e054:	6983      	ldr	r3, [r0, #24]
6000e056:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000e05a:	f023 0303 	bic.w	r3, r3, #3
6000e05e:	6183      	str	r3, [r0, #24]
    {
        /* Disable internal IRQ enables. */
        LPI2C_MasterDisableInterrupts(base, (uint32_t)kLPI2C_MasterIrqFlags);

        /* Reset fifos. */
        base->MCR |= LPI2C_MCR_RRF_MASK | LPI2C_MCR_RTF_MASK;
6000e060:	6903      	ldr	r3, [r0, #16]
6000e062:	f443 7340 	orr.w	r3, r3, #768	; 0x300
6000e066:	6103      	str	r3, [r0, #16]

        /* If master is still busy and has not send out stop signal yet. */
        if ((LPI2C_MasterGetStatusFlags(base) & ((uint32_t)kLPI2C_MasterStopDetectFlag |
6000e068:	4b05      	ldr	r3, [pc, #20]	; (6000e080 <LPI2C_MasterTransferAbort+0x30>)
    return base->MSR;
6000e06a:	6942      	ldr	r2, [r0, #20]
6000e06c:	4013      	ands	r3, r2
6000e06e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
6000e072:	d102      	bne.n	6000e07a <LPI2C_MasterTransferAbort+0x2a>
                                                 (uint32_t)kLPI2C_MasterBusyFlag)) == (uint32_t)kLPI2C_MasterBusyFlag)
        {
            /* Send a stop command to finalize the transfer. */
            base->MTDR = (uint32_t)kStopCmd;
6000e074:	f44f 7300 	mov.w	r3, #512	; 0x200
6000e078:	6603      	str	r3, [r0, #96]	; 0x60
        }

        /* Reset handle. */
        handle->state = (uint8_t)kIdleState;
6000e07a:	2300      	movs	r3, #0
6000e07c:	700b      	strb	r3, [r1, #0]
    }
}
6000e07e:	4770      	bx	lr
6000e080:	01000200 	.word	0x01000200

6000e084 <LPI2C_MasterTransferHandleIRQ>:
 *  nonblocking API's interrupt handler routines to add special functionality.
 * param base The LPI2C peripheral base address.
 * param lpi2cMasterHandle Pointer to the LPI2C master driver handle.
 */
void LPI2C_MasterTransferHandleIRQ(LPI2C_Type *base, void *lpi2cMasterHandle)
{
6000e084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000e088:	4605      	mov	r5, r0
    assert(lpi2cMasterHandle != NULL);
6000e08a:	460c      	mov	r4, r1
6000e08c:	b931      	cbnz	r1, 6000e09c <LPI2C_MasterTransferHandleIRQ+0x18>
6000e08e:	4b6c      	ldr	r3, [pc, #432]	; (6000e240 <LPI2C_MasterTransferHandleIRQ+0x1bc>)
6000e090:	f240 51ef 	movw	r1, #1519	; 0x5ef
6000e094:	4a6b      	ldr	r2, [pc, #428]	; (6000e244 <LPI2C_MasterTransferHandleIRQ+0x1c0>)
                    assert(false);
6000e096:	486c      	ldr	r0, [pc, #432]	; (6000e248 <LPI2C_MasterTransferHandleIRQ+0x1c4>)
6000e098:	f004 fe52 	bl	60012d40 <__assert_func>
    status_t result;

    /* Don't do anything if we don't have a valid handle. */
    if (NULL != handle)
    {
        if (handle->state != (uint8_t)kIdleState)
6000e09c:	780a      	ldrb	r2, [r1, #0]
6000e09e:	2a00      	cmp	r2, #0
6000e0a0:	f000 8098 	beq.w	6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
6000e0a4:	6941      	ldr	r1, [r0, #20]
    if (handle->remainingBytes == 0U)
6000e0a6:	8863      	ldrh	r3, [r4, #2]
 */
static inline void LPI2C_MasterGetFifoCounts(LPI2C_Type *base, size_t *rxCount, size_t *txCount)
{
    if (NULL != txCount)
    {
        *txCount = (base->MFSR & LPI2C_MFSR_TXCOUNT_MASK) >> LPI2C_MFSR_TXCOUNT_SHIFT;
6000e0a8:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
    }
    if (NULL != rxCount)
    {
        *rxCount = (base->MFSR & LPI2C_MFSR_RXCOUNT_MASK) >> LPI2C_MFSR_RXCOUNT_SHIFT;
6000e0aa:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
        *txCount = (base->MFSR & LPI2C_MFSR_TXCOUNT_MASK) >> LPI2C_MFSR_TXCOUNT_SHIFT;
6000e0ae:	f006 0607 	and.w	r6, r6, #7
6000e0b2:	b95b      	cbnz	r3, 6000e0cc <LPI2C_MasterTransferHandleIRQ+0x48>
        if ((xfer->dataSize != 0U) &&
6000e0b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000e0b6:	b14b      	cbz	r3, 6000e0cc <LPI2C_MasterTransferHandleIRQ+0x48>
6000e0b8:	b136      	cbz	r6, 6000e0c8 <LPI2C_MasterTransferHandleIRQ+0x44>
            ((txCount == 0U) || ((txCount == 1U) && (handle->state == (uint8_t)kWaitForCompletionState) &&
6000e0ba:	2e01      	cmp	r6, #1
6000e0bc:	d106      	bne.n	6000e0cc <LPI2C_MasterTransferHandleIRQ+0x48>
6000e0be:	2a05      	cmp	r2, #5
6000e0c0:	d104      	bne.n	6000e0cc <LPI2C_MasterTransferHandleIRQ+0x48>
                                 ((xfer->flags & (uint32_t)kLPI2C_TransferNoStopFlag) == 0U))))
6000e0c2:	6963      	ldr	r3, [r4, #20]
            ((txCount == 0U) || ((txCount == 1U) && (handle->state == (uint8_t)kWaitForCompletionState) &&
6000e0c4:	075f      	lsls	r7, r3, #29
6000e0c6:	d401      	bmi.n	6000e0cc <LPI2C_MasterTransferHandleIRQ+0x48>
            status &= ~(uint32_t)kLPI2C_MasterNackDetectFlag;
6000e0c8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    result = LPI2C_MasterCheckAndClearError(base, status);
6000e0cc:	4628      	mov	r0, r5
6000e0ce:	f00a fe9f 	bl	60018e10 <LPI2C_MasterCheckAndClearError>
    if (kStatus_Success == result)
6000e0d2:	4607      	mov	r7, r0
6000e0d4:	b1b0      	cbz	r0, 6000e104 <LPI2C_MasterTransferHandleIRQ+0x80>
            if ((result != kStatus_Success) || isDone)
            {
                /* Handle error, terminate xfer */
                if (result != kStatus_Success)
                {
                    LPI2C_MasterTransferAbort(base, handle);
6000e0d6:	4621      	mov	r1, r4
6000e0d8:	4628      	mov	r0, r5
6000e0da:	f7ff ffb9 	bl	6000e050 <LPI2C_MasterTransferAbort>
    base->MIER &= ~interruptMask;
6000e0de:	69ab      	ldr	r3, [r5, #24]
6000e0e0:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000e0e4:	f023 0303 	bic.w	r3, r3, #3
6000e0e8:	61ab      	str	r3, [r5, #24]

                /* Disable internal IRQ enables. */
                LPI2C_MasterDisableInterrupts(base, (uint32_t)kLPI2C_MasterIrqFlags);

                /* Set handle to idle state. */
                handle->state = (uint8_t)kIdleState;
6000e0ea:	2300      	movs	r3, #0

                /* Invoke callback. */
                if (NULL != handle->completionCallback)
6000e0ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                handle->state = (uint8_t)kIdleState;
6000e0ee:	7023      	strb	r3, [r4, #0]
                if (NULL != handle->completionCallback)
6000e0f0:	2e00      	cmp	r6, #0
6000e0f2:	d06f      	beq.n	6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
                {
                    handle->completionCallback(base, handle, result, handle->userData);
6000e0f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
6000e0f6:	463a      	mov	r2, r7
6000e0f8:	4621      	mov	r1, r4
6000e0fa:	4628      	mov	r0, r5
6000e0fc:	46b4      	mov	ip, r6
                }
            }
        }
    }
}
6000e0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    handle->completionCallback(base, handle, result, handle->userData);
6000e102:	4760      	bx	ip
        *rxCount = (base->MFSR & LPI2C_MFSR_RXCOUNT_MASK) >> LPI2C_MFSR_RXCOUNT_SHIFT;
6000e104:	f3c8 4002 	ubfx	r0, r8, #16, #3
        txCount = txFifoSize - txCount;
6000e108:	f1c6 0304 	rsb	r3, r6, #4
            switch (handle->state)
6000e10c:	7822      	ldrb	r2, [r4, #0]
6000e10e:	3a01      	subs	r2, #1
6000e110:	2a04      	cmp	r2, #4
6000e112:	f200 8090 	bhi.w	6000e236 <LPI2C_MasterTransferHandleIRQ+0x1b2>
6000e116:	e8df f002 	tbb	[pc, r2]
6000e11a:	3703      	.short	0x3703
6000e11c:	6b48      	.short	0x6b48
6000e11e:	7f          	.byte	0x7f
6000e11f:	00          	.byte	0x00
                    if (0U == txCount--)
6000e120:	2b00      	cmp	r3, #0
6000e122:	d057      	beq.n	6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
                    base->MTDR = sendval;
6000e124:	6862      	ldr	r2, [r4, #4]
6000e126:	8812      	ldrh	r2, [r2, #0]
6000e128:	662a      	str	r2, [r5, #96]	; 0x60
                    handle->buf++;
6000e12a:	6862      	ldr	r2, [r4, #4]
6000e12c:	3202      	adds	r2, #2
6000e12e:	6062      	str	r2, [r4, #4]
                    if (--handle->remainingBytes == 0U)
6000e130:	8862      	ldrh	r2, [r4, #2]
6000e132:	3a01      	subs	r2, #1
6000e134:	b292      	uxth	r2, r2
6000e136:	8062      	strh	r2, [r4, #2]
6000e138:	bb22      	cbnz	r2, 6000e184 <LPI2C_MasterTransferHandleIRQ+0x100>
                        if (0U != xfer->dataSize)
6000e13a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
6000e13c:	b302      	cbz	r2, 6000e180 <LPI2C_MasterTransferHandleIRQ+0xfc>
                            handle->state          = (uint8_t)kTransferDataState;
6000e13e:	2603      	movs	r6, #3
                            handle->remainingBytes = (uint16_t)xfer->dataSize;
6000e140:	8062      	strh	r2, [r4, #2]
                            if (xfer->direction == kLPI2C_Read)
6000e142:	7ea2      	ldrb	r2, [r4, #26]
                            handle->state          = (uint8_t)kTransferDataState;
6000e144:	7026      	strb	r6, [r4, #0]
                            if (xfer->direction == kLPI2C_Read)
6000e146:	2a01      	cmp	r2, #1
                            handle->buf            = (uint8_t *)xfer->data;
6000e148:	6a66      	ldr	r6, [r4, #36]	; 0x24
6000e14a:	6066      	str	r6, [r4, #4]
                            if (xfer->direction == kLPI2C_Read)
6000e14c:	d11a      	bne.n	6000e184 <LPI2C_MasterTransferHandleIRQ+0x100>
    base->MIER &= ~interruptMask;
6000e14e:	69aa      	ldr	r2, [r5, #24]
6000e150:	f022 0201 	bic.w	r2, r2, #1
6000e154:	61aa      	str	r2, [r5, #24]
                                size_t tmpRxSize = xfer->dataSize;
6000e156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
                                while (tmpRxSize != 0U)
6000e158:	b1a6      	cbz	r6, 6000e184 <LPI2C_MasterTransferHandleIRQ+0x100>
                                        base->MTDR = (uint32_t)(kRxDataCmd) | (uint32_t)LPI2C_MTDR_DATA(0xFFU);
6000e15a:	f240 12ff 	movw	r2, #511	; 0x1ff
        *txCount = (base->MFSR & LPI2C_MFSR_TXCOUNT_MASK) >> LPI2C_MFSR_TXCOUNT_SHIFT;
6000e15e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
6000e160:	f003 0307 	and.w	r3, r3, #7
                                    while (txFifoSize == txCount)
6000e164:	2b04      	cmp	r3, #4
6000e166:	d0fa      	beq.n	6000e15e <LPI2C_MasterTransferHandleIRQ+0xda>
                                    if (tmpRxSize > 256U)
6000e168:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
6000e16c:	d903      	bls.n	6000e176 <LPI2C_MasterTransferHandleIRQ+0xf2>
                                        tmpRxSize -= 256U;
6000e16e:	f5a6 7680 	sub.w	r6, r6, #256	; 0x100
                                        base->MTDR = (uint32_t)(kRxDataCmd) | (uint32_t)LPI2C_MTDR_DATA(0xFFU);
6000e172:	662a      	str	r2, [r5, #96]	; 0x60
                                while (tmpRxSize != 0U)
6000e174:	e7f3      	b.n	6000e15e <LPI2C_MasterTransferHandleIRQ+0xda>
                                        base->MTDR = (uint32_t)(kRxDataCmd) | (uint32_t)LPI2C_MTDR_DATA(tmpRxSize - 1U);
6000e176:	3e01      	subs	r6, #1
6000e178:	f446 7680 	orr.w	r6, r6, #256	; 0x100
6000e17c:	662e      	str	r6, [r5, #96]	; 0x60
                                while (tmpRxSize != 0U)
6000e17e:	e7c5      	b.n	6000e10c <LPI2C_MasterTransferHandleIRQ+0x88>
                            handle->state = (uint8_t)kStopState;
6000e180:	2204      	movs	r2, #4
6000e182:	7022      	strb	r2, [r4, #0]
                    if (0U == txCount--)
6000e184:	3b01      	subs	r3, #1
        while (!state_complete)
6000e186:	e7c1      	b.n	6000e10c <LPI2C_MasterTransferHandleIRQ+0x88>
                    if (0U == txCount--)
6000e188:	b323      	cbz	r3, 6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
                    base->MTDR = (uint32_t)kRxDataCmd | LPI2C_MTDR_DATA(xfer->dataSize - 1U);
6000e18a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
                    handle->state = (uint8_t)kTransferDataState;
6000e18c:	2203      	movs	r2, #3
                    base->MTDR = (uint32_t)kRxDataCmd | LPI2C_MTDR_DATA(xfer->dataSize - 1U);
6000e18e:	3e01      	subs	r6, #1
6000e190:	b2f6      	uxtb	r6, r6
6000e192:	f446 7680 	orr.w	r6, r6, #256	; 0x100
6000e196:	662e      	str	r6, [r5, #96]	; 0x60
                    handle->state = (uint8_t)kTransferDataState;
6000e198:	7022      	strb	r2, [r4, #0]
                    if (xfer->direction == kLPI2C_Read)
6000e19a:	7ea2      	ldrb	r2, [r4, #26]
6000e19c:	2a01      	cmp	r2, #1
6000e19e:	d1f1      	bne.n	6000e184 <LPI2C_MasterTransferHandleIRQ+0x100>
    base->MIER &= ~interruptMask;
6000e1a0:	69aa      	ldr	r2, [r5, #24]
6000e1a2:	f022 0201 	bic.w	r2, r2, #1
6000e1a6:	61aa      	str	r2, [r5, #24]
}
6000e1a8:	e7ec      	b.n	6000e184 <LPI2C_MasterTransferHandleIRQ+0x100>
                    if (xfer->direction == kLPI2C_Write)
6000e1aa:	7ea2      	ldrb	r2, [r4, #26]
6000e1ac:	b9a2      	cbnz	r2, 6000e1d8 <LPI2C_MasterTransferHandleIRQ+0x154>
                        if (0U == txCount--)
6000e1ae:	1e5a      	subs	r2, r3, #1
6000e1b0:	b183      	cbz	r3, 6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
                        base->MTDR = *(handle->buf)++;
6000e1b2:	6863      	ldr	r3, [r4, #4]
6000e1b4:	1c5e      	adds	r6, r3, #1
6000e1b6:	6066      	str	r6, [r4, #4]
6000e1b8:	781b      	ldrb	r3, [r3, #0]
6000e1ba:	662b      	str	r3, [r5, #96]	; 0x60
6000e1bc:	4613      	mov	r3, r2
                    if (--handle->remainingBytes == 0U)
6000e1be:	8862      	ldrh	r2, [r4, #2]
6000e1c0:	3a01      	subs	r2, #1
6000e1c2:	b292      	uxth	r2, r2
6000e1c4:	8062      	strh	r2, [r4, #2]
6000e1c6:	2a00      	cmp	r2, #0
6000e1c8:	d1a0      	bne.n	6000e10c <LPI2C_MasterTransferHandleIRQ+0x88>
                        handle->state = (uint8_t)kStopState;
6000e1ca:	2604      	movs	r6, #4
                        if (xfer->direction == kLPI2C_Write)
6000e1cc:	7ea2      	ldrb	r2, [r4, #26]
                        handle->state = (uint8_t)kStopState;
6000e1ce:	7026      	strb	r6, [r4, #0]
        while (!state_complete)
6000e1d0:	2a00      	cmp	r2, #0
6000e1d2:	d19b      	bne.n	6000e10c <LPI2C_MasterTransferHandleIRQ+0x88>
}
6000e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        if (0U == rxCount--)
6000e1d8:	1e46      	subs	r6, r0, #1
6000e1da:	2800      	cmp	r0, #0
6000e1dc:	d0fa      	beq.n	6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
                        *(handle->buf)++ = (uint8_t)(base->MRDR & LPI2C_MRDR_DATA_MASK);
6000e1de:	6862      	ldr	r2, [r4, #4]
6000e1e0:	6f28      	ldr	r0, [r5, #112]	; 0x70
6000e1e2:	f102 0c01 	add.w	ip, r2, #1
6000e1e6:	f8c4 c004 	str.w	ip, [r4, #4]
6000e1ea:	7010      	strb	r0, [r2, #0]
6000e1ec:	4630      	mov	r0, r6
6000e1ee:	e7e6      	b.n	6000e1be <LPI2C_MasterTransferHandleIRQ+0x13a>
                    if ((xfer->flags & (uint32_t)kLPI2C_TransferNoStopFlag) == 0U)
6000e1f0:	6962      	ldr	r2, [r4, #20]
6000e1f2:	0756      	lsls	r6, r2, #29
6000e1f4:	d409      	bmi.n	6000e20a <LPI2C_MasterTransferHandleIRQ+0x186>
                        if (0U == txCount--)
6000e1f6:	1e5a      	subs	r2, r3, #1
6000e1f8:	2b00      	cmp	r3, #0
6000e1fa:	d0eb      	beq.n	6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
                        base->MTDR = (uint32_t)kStopCmd;
6000e1fc:	f44f 7300 	mov.w	r3, #512	; 0x200
6000e200:	662b      	str	r3, [r5, #96]	; 0x60
                    handle->state = (uint8_t)kWaitForCompletionState;
6000e202:	2305      	movs	r3, #5
6000e204:	7023      	strb	r3, [r4, #0]
                    break;
6000e206:	4613      	mov	r3, r2
6000e208:	e780      	b.n	6000e10c <LPI2C_MasterTransferHandleIRQ+0x88>
                        if (xfer->direction == kLPI2C_Read)
6000e20a:	7ea3      	ldrb	r3, [r4, #26]
6000e20c:	2b01      	cmp	r3, #1
6000e20e:	f04f 0305 	mov.w	r3, #5
                    handle->state = (uint8_t)kWaitForCompletionState;
6000e212:	7023      	strb	r3, [r4, #0]
                        if (xfer->direction == kLPI2C_Read)
6000e214:	d1de      	bne.n	6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
6000e216:	e762      	b.n	6000e0de <LPI2C_MasterTransferHandleIRQ+0x5a>
                    if ((xfer->flags & (uint32_t)kLPI2C_TransferNoStopFlag) == 0U)
6000e218:	6963      	ldr	r3, [r4, #20]
6000e21a:	0758      	lsls	r0, r3, #29
6000e21c:	d403      	bmi.n	6000e226 <LPI2C_MasterTransferHandleIRQ+0x1a2>
                        if (0U != (status & (uint32_t)kLPI2C_MasterStopDetectFlag))
6000e21e:	058a      	lsls	r2, r1, #22
6000e220:	f53f af5d 	bmi.w	6000e0de <LPI2C_MasterTransferHandleIRQ+0x5a>
6000e224:	e7d6      	b.n	6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
                        if ((xfer->direction == kLPI2C_Write) && ((base->MFSR & LPI2C_MFSR_TXCOUNT_MASK) == 0U))
6000e226:	7ea3      	ldrb	r3, [r4, #26]
6000e228:	2b00      	cmp	r3, #0
6000e22a:	d1d3      	bne.n	6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
6000e22c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
6000e22e:	075b      	lsls	r3, r3, #29
6000e230:	f43f af55 	beq.w	6000e0de <LPI2C_MasterTransferHandleIRQ+0x5a>
6000e234:	e7ce      	b.n	6000e1d4 <LPI2C_MasterTransferHandleIRQ+0x150>
                    assert(false);
6000e236:	4b05      	ldr	r3, [pc, #20]	; (6000e24c <LPI2C_MasterTransferHandleIRQ+0x1c8>)
6000e238:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
6000e23c:	4a04      	ldr	r2, [pc, #16]	; (6000e250 <LPI2C_MasterTransferHandleIRQ+0x1cc>)
6000e23e:	e72a      	b.n	6000e096 <LPI2C_MasterTransferHandleIRQ+0x12>
6000e240:	6001e265 	.word	0x6001e265
6000e244:	6001e29d 	.word	0x6001e29d
6000e248:	6001e1a5 	.word	0x6001e1a5
6000e24c:	6001e118 	.word	0x6001e118
6000e250:	6001e27f 	.word	0x6001e27f

6000e254 <CLOCK_ControlGate>:
    assert(index <= 7UL);
6000e254:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    uint32_t index = ((uint32_t)name) >> 8UL;
6000e258:	ea4f 2210 	mov.w	r2, r0, lsr #8
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
6000e25c:	f000 031f 	and.w	r3, r0, #31
{
6000e260:	b510      	push	{r4, lr}
    assert(index <= 7UL);
6000e262:	d306      	bcc.n	6000e272 <CLOCK_ControlGate+0x1e>
6000e264:	4b0b      	ldr	r3, [pc, #44]	; (6000e294 <CLOCK_ControlGate+0x40>)
6000e266:	f240 51de 	movw	r1, #1502	; 0x5de
6000e26a:	4a0b      	ldr	r2, [pc, #44]	; (6000e298 <CLOCK_ControlGate+0x44>)
6000e26c:	480b      	ldr	r0, [pc, #44]	; (6000e29c <CLOCK_ControlGate+0x48>)
6000e26e:	f004 fd67 	bl	60012d40 <__assert_func>
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000e272:	480b      	ldr	r0, [pc, #44]	; (6000e2a0 <CLOCK_ControlGate+0x4c>)
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000e274:	4099      	lsls	r1, r3
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000e276:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000e27a:	2203      	movs	r2, #3
6000e27c:	409a      	lsls	r2, r3
    _SDK_ATOMIC_LOCAL_OPS_4BYTE(addr, s_val, s_val = (s_val & ~clearBits) | setBits);
6000e27e:	43d2      	mvns	r2, r2
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000e280:	e850 3f00 	ldrex	r3, [r0]
6000e284:	4013      	ands	r3, r2
6000e286:	430b      	orrs	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000e288:	e840 3400 	strex	r4, r3, [r0]
6000e28c:	2c00      	cmp	r4, #0
6000e28e:	d1f7      	bne.n	6000e280 <CLOCK_ControlGate+0x2c>
}
6000e290:	bd10      	pop	{r4, pc}
6000e292:	bf00      	nop
6000e294:	6001e131 	.word	0x6001e131
6000e298:	6001e47f 	.word	0x6001e47f
6000e29c:	6001e13e 	.word	0x6001e13e
6000e2a0:	400fc068 	.word	0x400fc068

6000e2a4 <LPUART_GetInstance>:
 *
 * param base LPUART peripheral base address.
 * return LPUART instance.
 */
uint32_t LPUART_GetInstance(LPUART_Type *base)
{
6000e2a4:	b508      	push	{r3, lr}
6000e2a6:	4a08      	ldr	r2, [pc, #32]	; (6000e2c8 <LPUART_GetInstance+0x24>)
6000e2a8:	4603      	mov	r3, r0
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0U; instance < ARRAY_SIZE(s_lpuartBases); instance++)
6000e2aa:	2000      	movs	r0, #0
    {
        if (s_lpuartBases[instance] == base)
6000e2ac:	f852 1b04 	ldr.w	r1, [r2], #4
6000e2b0:	4299      	cmp	r1, r3
6000e2b2:	d008      	beq.n	6000e2c6 <LPUART_GetInstance+0x22>
    for (instance = 0U; instance < ARRAY_SIZE(s_lpuartBases); instance++)
6000e2b4:	3001      	adds	r0, #1
6000e2b6:	2809      	cmp	r0, #9
6000e2b8:	d1f8      	bne.n	6000e2ac <LPUART_GetInstance+0x8>
        {
            break;
        }
    }

    assert(instance < ARRAY_SIZE(s_lpuartBases));
6000e2ba:	4b04      	ldr	r3, [pc, #16]	; (6000e2cc <LPUART_GetInstance+0x28>)
6000e2bc:	217b      	movs	r1, #123	; 0x7b
6000e2be:	4a04      	ldr	r2, [pc, #16]	; (6000e2d0 <LPUART_GetInstance+0x2c>)
6000e2c0:	4804      	ldr	r0, [pc, #16]	; (6000e2d4 <LPUART_GetInstance+0x30>)
6000e2c2:	f004 fd3d 	bl	60012d40 <__assert_func>

    return instance;
}
6000e2c6:	bd08      	pop	{r3, pc}
6000e2c8:	6001bda0 	.word	0x6001bda0
6000e2cc:	6001e38b 	.word	0x6001e38b
6000e2d0:	6001e49d 	.word	0x6001e49d
6000e2d4:	6001e345 	.word	0x6001e345

6000e2d8 <LPUART_Init>:
 * param srcClock_Hz LPUART clock source frequency in HZ.
 * retval kStatus_LPUART_BaudrateNotSupport Baudrate is not support in current clock source.
 * retval kStatus_Success LPUART initialize succeed
 */
status_t LPUART_Init(LPUART_Type *base, const lpuart_config_t *config, uint32_t srcClock_Hz)
{
6000e2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000e2dc:	4604      	mov	r4, r0
    assert(NULL != config);
6000e2de:	460d      	mov	r5, r1
6000e2e0:	b929      	cbnz	r1, 6000e2ee <LPUART_Init+0x16>
6000e2e2:	4b6e      	ldr	r3, [pc, #440]	; (6000e49c <LPUART_Init+0x1c4>)
6000e2e4:	21f2      	movs	r1, #242	; 0xf2
6000e2e6:	4a6e      	ldr	r2, [pc, #440]	; (6000e4a0 <LPUART_Init+0x1c8>)
    assert(0U < config->baudRate_Bps);
6000e2e8:	486e      	ldr	r0, [pc, #440]	; (6000e4a4 <LPUART_Init+0x1cc>)
6000e2ea:	f004 fd29 	bl	60012d40 <__assert_func>
6000e2ee:	680b      	ldr	r3, [r1, #0]
6000e2f0:	b91b      	cbnz	r3, 6000e2fa <LPUART_Init+0x22>
6000e2f2:	4b6d      	ldr	r3, [pc, #436]	; (6000e4a8 <LPUART_Init+0x1d0>)
6000e2f4:	21f3      	movs	r1, #243	; 0xf3
6000e2f6:	4a6a      	ldr	r2, [pc, #424]	; (6000e4a0 <LPUART_Init+0x1c8>)
6000e2f8:	e7f6      	b.n	6000e2e8 <LPUART_Init+0x10>
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    assert((uint8_t)FSL_FEATURE_LPUART_FIFO_SIZEn(base) > config->txFifoWatermark);
6000e2fa:	7a09      	ldrb	r1, [r1, #8]
6000e2fc:	2903      	cmp	r1, #3
6000e2fe:	d903      	bls.n	6000e308 <LPUART_Init+0x30>
6000e300:	4b6a      	ldr	r3, [pc, #424]	; (6000e4ac <LPUART_Init+0x1d4>)
6000e302:	21f5      	movs	r1, #245	; 0xf5
6000e304:	4a66      	ldr	r2, [pc, #408]	; (6000e4a0 <LPUART_Init+0x1c8>)
6000e306:	e7ef      	b.n	6000e2e8 <LPUART_Init+0x10>
    assert((uint8_t)FSL_FEATURE_LPUART_FIFO_SIZEn(base) > config->rxFifoWatermark);
6000e308:	7a69      	ldrb	r1, [r5, #9]
6000e30a:	2903      	cmp	r1, #3
6000e30c:	f200 80b7 	bhi.w	6000e47e <LPUART_Init+0x1a6>
    osr      = 0U;
    sbr      = 0U;
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
    {
        /* calculate the temporary sbr value   */
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
6000e310:	f04f 090a 	mov.w	r9, #10
    osr      = 0U;
6000e314:	2600      	movs	r6, #0
6000e316:	ea4f 0883 	mov.w	r8, r3, lsl #2
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
6000e31a:	469e      	mov	lr, r3
6000e31c:	fb09 fa02 	mul.w	sl, r9, r2
6000e320:	f04f 0c04 	mov.w	ip, #4
    sbr      = 0U;
6000e324:	4637      	mov	r7, r6
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
6000e326:	fbba f1f8 	udiv	r1, sl, r8
6000e32a:	3105      	adds	r1, #5
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
6000e32c:	4498      	add	r8, r3
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
6000e32e:	fbb1 f1f9 	udiv	r1, r1, r9
6000e332:	b289      	uxth	r1, r1
6000e334:	2901      	cmp	r1, #1
6000e336:	bf38      	it	cc
6000e338:	2101      	movcc	r1, #1
        if (sbrTemp == 0U)
        {
            sbrTemp = 1U;
        }
        /* Calculate the baud rate based on the temporary OSR and SBR values */
        calculatedBaud = (srcClock_Hz / ((uint32_t)osrTemp * (uint32_t)sbrTemp));
6000e33a:	fb0c f001 	mul.w	r0, ip, r1
6000e33e:	fbb2 f0f0 	udiv	r0, r2, r0
        tempDiff       = calculatedBaud > config->baudRate_Bps ? (calculatedBaud - config->baudRate_Bps) :
6000e342:	4283      	cmp	r3, r0
6000e344:	bf34      	ite	cc
6000e346:	1ac0      	subcc	r0, r0, r3
6000e348:	1a18      	subcs	r0, r3, r0
                                                           (config->baudRate_Bps - calculatedBaud);

        if (tempDiff <= baudDiff)
6000e34a:	4570      	cmp	r0, lr
6000e34c:	bf98      	it	ls
6000e34e:	fa5f f68c 	uxtbls.w	r6, ip
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
6000e352:	f10c 0c01 	add.w	ip, ip, #1
        if (tempDiff <= baudDiff)
6000e356:	bf9c      	itt	ls
6000e358:	4686      	movls	lr, r0
        {
            baudDiff = tempDiff;
            osr      = osrTemp; /* update and store the best OSR value calculated */
            sbr      = sbrTemp; /* update store the best SBR value calculated */
6000e35a:	460f      	movls	r7, r1
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
6000e35c:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
6000e360:	d1e1      	bne.n	6000e326 <LPUART_Init+0x4e>
        }
    }

    /* Check to see if actual baud rate is within 3% of desired baud rate
     * based on the best calculate OSR value */
    if (baudDiff > ((config->baudRate_Bps / 100U) * 3U))
6000e362:	2264      	movs	r2, #100	; 0x64
6000e364:	fbb3 f3f2 	udiv	r3, r3, r2
6000e368:	eb03 0343 	add.w	r3, r3, r3, lsl #1
6000e36c:	4573      	cmp	r3, lr
6000e36e:	f0c0 8092 	bcc.w	6000e496 <LPUART_Init+0x1be>
    }
    else
    {
#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

        uint32_t instance = LPUART_GetInstance(base);
6000e372:	4620      	mov	r0, r4
        temp &= ~LPUART_BAUD_OSR_MASK;
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);

        /* write the sbr value to the BAUD registers */
        temp &= ~LPUART_BAUD_SBR_MASK;
        base->BAUD = temp | LPUART_BAUD_SBR(sbr);
6000e374:	f3c7 070c 	ubfx	r7, r7, #0, #13
        uint32_t instance = LPUART_GetInstance(base);
6000e378:	f7ff ff94 	bl	6000e2a4 <LPUART_GetInstance>
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
6000e37c:	4b4c      	ldr	r3, [pc, #304]	; (6000e4b0 <LPUART_Init+0x1d8>)
6000e37e:	2103      	movs	r1, #3
6000e380:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
6000e384:	f7ff ff66 	bl	6000e254 <CLOCK_ControlGate>
 *
 * @param base LPUART peripheral base address.
 */
static inline void LPUART_SoftwareReset(LPUART_Type *base)
{
    base->GLOBAL |= LPUART_GLOBAL_RST_MASK;
6000e388:	68a3      	ldr	r3, [r4, #8]
        if ((osr > 3U) && (osr < 8U))
6000e38a:	1f32      	subs	r2, r6, #4
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);
6000e38c:	3e01      	subs	r6, #1
6000e38e:	f043 0302 	orr.w	r3, r3, #2
        if ((osr > 3U) && (osr < 8U))
6000e392:	2a03      	cmp	r2, #3
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);
6000e394:	ea4f 6606 	mov.w	r6, r6, lsl #24
6000e398:	60a3      	str	r3, [r4, #8]
    base->GLOBAL &= ~LPUART_GLOBAL_RST_MASK;
6000e39a:	68a3      	ldr	r3, [r4, #8]
6000e39c:	f006 56f8 	and.w	r6, r6, #520093696	; 0x1f000000
6000e3a0:	f023 0302 	bic.w	r3, r3, #2
6000e3a4:	60a3      	str	r3, [r4, #8]
        temp = base->BAUD;
6000e3a6:	6923      	ldr	r3, [r4, #16]
            temp |= LPUART_BAUD_BOTHEDGE_MASK;
6000e3a8:	bf98      	it	ls
6000e3aa:	f443 3300 	orrls.w	r3, r3, #131072	; 0x20000
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);
6000e3ae:	f023 231f 	bic.w	r3, r3, #520101632	; 0x1f001f00
6000e3b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
        temp &= ~LPUART_BAUD_SBR_MASK;
6000e3b6:	4333      	orrs	r3, r6
        base->BAUD = temp | LPUART_BAUD_SBR(sbr);
6000e3b8:	431f      	orrs	r7, r3
6000e3ba:	6127      	str	r7, [r4, #16]

        /* Set bit count and parity mode. */
        base->BAUD &= ~LPUART_BAUD_M10_MASK;
6000e3bc:	6923      	ldr	r3, [r4, #16]
6000e3be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
6000e3c2:	6123      	str	r3, [r4, #16]

        temp = base->CTRL & ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
6000e3c4:	69a3      	ldr	r3, [r4, #24]
                              LPUART_CTRL_IDLECFG_MASK);

        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000e3c6:	7bea      	ldrb	r2, [r5, #15]
        temp = base->CTRL & ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
6000e3c8:	f423 63e2 	bic.w	r3, r3, #1808	; 0x710
        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000e3cc:	7929      	ldrb	r1, [r5, #4]
6000e3ce:	0212      	lsls	r2, r2, #8
        temp = base->CTRL & ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
6000e3d0:	f023 0307 	bic.w	r3, r3, #7
        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000e3d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
6000e3d8:	430b      	orrs	r3, r1
6000e3da:	431a      	orrs	r2, r3
                LPUART_CTRL_ILT(config->rxIdleType);
6000e3dc:	7bab      	ldrb	r3, [r5, #14]
6000e3de:	009b      	lsls	r3, r3, #2
6000e3e0:	f003 0304 	and.w	r3, r3, #4
        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000e3e4:	4313      	orrs	r3, r2

#if defined(FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT) && FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT
        if (kLPUART_SevenDataBits == config->dataBitsCount)
6000e3e6:	796a      	ldrb	r2, [r5, #5]
6000e3e8:	2a01      	cmp	r2, #1
6000e3ea:	d14f      	bne.n	6000e48c <LPUART_Init+0x1b4>
        {
            if (kLPUART_ParityDisabled != config->parityMode)
6000e3ec:	2900      	cmp	r1, #0
6000e3ee:	d04a      	beq.n	6000e486 <LPUART_Init+0x1ae>
            {
                temp &= ~LPUART_CTRL_M7_MASK; /* Seven data bits and one parity bit */
6000e3f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
            {
                temp |= LPUART_CTRL_M_MASK; /* Eight data bits and one parity bit */
            }
        }

        base->CTRL = temp;
6000e3f4:	61a3      	str	r3, [r4, #24]

#if defined(FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT
        /* set stop bit per char */
        temp       = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
        base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
6000e3f6:	79eb      	ldrb	r3, [r5, #7]
        temp       = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
6000e3f8:	6922      	ldr	r2, [r4, #16]
        base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
6000e3fa:	035b      	lsls	r3, r3, #13
        temp       = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
6000e3fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
        base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
6000e400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
6000e404:	4313      	orrs	r3, r2
6000e406:	6123      	str	r3, [r4, #16]
           mark larger than 1.
           For example, if RX FIFO water mark is 2, upper layer needs 5 bytes and
           5 bytes are received. the last byte will be saved in FIFO but not trigger
           RX interrupt because the water mark is 2.
         */
        base->WATER = (((uint32_t)(config->rxFifoWatermark) << 16U) | config->txFifoWatermark);
6000e408:	7a6a      	ldrb	r2, [r5, #9]
6000e40a:	7a2b      	ldrb	r3, [r5, #8]
6000e40c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
6000e410:	62e3      	str	r3, [r4, #44]	; 0x2c

        /* Enable tx/rx FIFO */
        base->FIFO |= (LPUART_FIFO_TXFE_MASK | LPUART_FIFO_RXFE_MASK);
6000e412:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000e414:	f043 0388 	orr.w	r3, r3, #136	; 0x88
6000e418:	62a3      	str	r3, [r4, #40]	; 0x28

        /* Flush FIFO */
        base->FIFO |= (LPUART_FIFO_TXFLUSH_MASK | LPUART_FIFO_RXFLUSH_MASK);
6000e41a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
6000e41c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
6000e420:	62a3      	str	r3, [r4, #40]	; 0x28
        temp |= (LPUART_STAT_MA1F_MASK | LPUART_STAT_MA2F_MASK);
#endif

#if defined(FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT) && FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT
        /* Set the CTS configuration/TX CTS source. */
        base->MODIR |= LPUART_MODIR_TXCTSC(config->txCtsConfig) | LPUART_MODIR_TXCTSSRC(config->txCtsSource);
6000e422:	7b6b      	ldrb	r3, [r5, #13]
6000e424:	7b2a      	ldrb	r2, [r5, #12]
6000e426:	011b      	lsls	r3, r3, #4
6000e428:	6a61      	ldr	r1, [r4, #36]	; 0x24
6000e42a:	0152      	lsls	r2, r2, #5
6000e42c:	f003 0310 	and.w	r3, r3, #16
6000e430:	f002 0220 	and.w	r2, r2, #32
6000e434:	4313      	orrs	r3, r2
6000e436:	430b      	orrs	r3, r1
6000e438:	6263      	str	r3, [r4, #36]	; 0x24
        if (true == config->enableRxRTS)
6000e43a:	7aab      	ldrb	r3, [r5, #10]
6000e43c:	b11b      	cbz	r3, 6000e446 <LPUART_Init+0x16e>
        {
            /* Enable the receiver RTS(request-to-send) function. */
            base->MODIR |= LPUART_MODIR_RXRTSE_MASK;
6000e43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000e440:	f043 0308 	orr.w	r3, r3, #8
6000e444:	6263      	str	r3, [r4, #36]	; 0x24
        }
        if (true == config->enableTxCTS)
6000e446:	7aeb      	ldrb	r3, [r5, #11]
6000e448:	b11b      	cbz	r3, 6000e452 <LPUART_Init+0x17a>
        {
            /* Enable the CTS(clear-to-send) function. */
            base->MODIR |= LPUART_MODIR_TXCTSE_MASK;
6000e44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000e44c:	f043 0301 	orr.w	r3, r3, #1
6000e450:	6263      	str	r3, [r4, #36]	; 0x24
        }
#endif

        /* Set data bits order. */
        if (true == config->isMsb)
6000e452:	79a9      	ldrb	r1, [r5, #6]
        {
            temp |= LPUART_STAT_MSBF_MASK;
6000e454:	4b17      	ldr	r3, [pc, #92]	; (6000e4b4 <LPUART_Init+0x1dc>)
6000e456:	4a18      	ldr	r2, [pc, #96]	; (6000e4b8 <LPUART_Init+0x1e0>)
6000e458:	2900      	cmp	r1, #0
6000e45a:	bf18      	it	ne
6000e45c:	461a      	movne	r2, r3
        else
        {
            temp &= ~LPUART_STAT_MSBF_MASK;
        }

        base->STAT |= temp;
6000e45e:	6963      	ldr	r3, [r4, #20]
6000e460:	4313      	orrs	r3, r2
6000e462:	6163      	str	r3, [r4, #20]

        /* Enable TX/RX base on configure structure. */
        temp = base->CTRL;
        if (true == config->enableTx)
6000e464:	7c2a      	ldrb	r2, [r5, #16]
        temp = base->CTRL;
6000e466:	69a3      	ldr	r3, [r4, #24]
        if (true == config->enableTx)
6000e468:	b10a      	cbz	r2, 6000e46e <LPUART_Init+0x196>
        {
            temp |= LPUART_CTRL_TE_MASK;
6000e46a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
        }

        if (true == config->enableRx)
6000e46e:	7c6a      	ldrb	r2, [r5, #17]
6000e470:	b10a      	cbz	r2, 6000e476 <LPUART_Init+0x19e>
        {
            temp |= LPUART_CTRL_RE_MASK;
6000e472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    status_t status = kStatus_Success;
6000e476:	2000      	movs	r0, #0
        }

        base->CTRL = temp;
6000e478:	61a3      	str	r3, [r4, #24]
    }

    return status;
}
6000e47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert((uint8_t)FSL_FEATURE_LPUART_FIFO_SIZEn(base) > config->rxFifoWatermark);
6000e47e:	4b0f      	ldr	r3, [pc, #60]	; (6000e4bc <LPUART_Init+0x1e4>)
6000e480:	21f6      	movs	r1, #246	; 0xf6
6000e482:	4a07      	ldr	r2, [pc, #28]	; (6000e4a0 <LPUART_Init+0x1c8>)
6000e484:	e730      	b.n	6000e2e8 <LPUART_Init+0x10>
                temp |= LPUART_CTRL_M7_MASK;
6000e486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
6000e48a:	e7b3      	b.n	6000e3f4 <LPUART_Init+0x11c>
            if (kLPUART_ParityDisabled != config->parityMode)
6000e48c:	2900      	cmp	r1, #0
6000e48e:	d0b1      	beq.n	6000e3f4 <LPUART_Init+0x11c>
                temp |= LPUART_CTRL_M_MASK; /* Eight data bits and one parity bit */
6000e490:	f043 0310 	orr.w	r3, r3, #16
6000e494:	e7ae      	b.n	6000e3f4 <LPUART_Init+0x11c>
        status = kStatus_LPUART_BaudrateNotSupport;
6000e496:	f240 5021 	movw	r0, #1313	; 0x521
    return status;
6000e49a:	e7ee      	b.n	6000e47a <LPUART_Init+0x1a2>
6000e49c:	6001e3b0 	.word	0x6001e3b0
6000e4a0:	6001e491 	.word	0x6001e491
6000e4a4:	6001e345 	.word	0x6001e345
6000e4a8:	6001e3bf 	.word	0x6001e3bf
6000e4ac:	6001e3d9 	.word	0x6001e3d9
6000e4b0:	6001c0be 	.word	0x6001c0be
6000e4b4:	e01fc000 	.word	0xe01fc000
6000e4b8:	c01fc000 	.word	0xc01fc000
6000e4bc:	6001e420 	.word	0x6001e420

6000e4c0 <LPUART_Deinit>:
 * This function waits for transmit to complete, disables TX and RX, and disables the LPUART clock.
 *
 * param base LPUART peripheral base address.
 */
void LPUART_Deinit(LPUART_Type *base)
{
6000e4c0:	b510      	push	{r4, lr}
    uint32_t temp;

#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    /* Wait tx FIFO send out*/
    while (0U != ((base->WATER & LPUART_WATER_TXCOUNT_MASK) >> LPUART_WATER_TXWATER_SHIFT))
6000e4c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
6000e4c4:	f413 6fe0 	tst.w	r3, #1792	; 0x700
6000e4c8:	d1fb      	bne.n	6000e4c2 <LPUART_Deinit+0x2>
    {
    }
#endif
    /* Wait last char shift out */
    while (0U == (base->STAT & LPUART_STAT_TC_MASK))
6000e4ca:	6943      	ldr	r3, [r0, #20]
6000e4cc:	025b      	lsls	r3, r3, #9
6000e4ce:	d5fc      	bpl.n	6000e4ca <LPUART_Deinit+0xa>

#if defined(FSL_FEATURE_LPUART_HAS_ADDRESS_MATCHING) && FSL_FEATURE_LPUART_HAS_ADDRESS_MATCHING
    temp |= (LPUART_STAT_MA1F_MASK | LPUART_STAT_MA2F_MASK);
#endif

    base->STAT |= temp;
6000e4d0:	6943      	ldr	r3, [r0, #20]

    /* Disable the module. */
    base->CTRL = 0U;
6000e4d2:	2400      	movs	r4, #0
    base->STAT |= temp;
6000e4d4:	f043 23c0 	orr.w	r3, r3, #3221274624	; 0xc000c000
6000e4d8:	f443 13f8 	orr.w	r3, r3, #2031616	; 0x1f0000
6000e4dc:	6143      	str	r3, [r0, #20]
    base->CTRL = 0U;
6000e4de:	6184      	str	r4, [r0, #24]

#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
    uint32_t instance = LPUART_GetInstance(base);
6000e4e0:	f7ff fee0 	bl	6000e2a4 <LPUART_GetInstance>
 *
 * @param name  Which clock to disable, see \ref clock_ip_name_t.
 */
static inline void CLOCK_DisableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNotNeeded);
6000e4e4:	4b03      	ldr	r3, [pc, #12]	; (6000e4f4 <LPUART_Deinit+0x34>)
6000e4e6:	4621      	mov	r1, r4
6000e4e8:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
#if defined(LPUART_PERIPH_CLOCKS)
    (void)CLOCK_DisableClock(s_lpuartPeriphClocks[instance]);
#endif

#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
}
6000e4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6000e4f0:	f7ff beb0 	b.w	6000e254 <CLOCK_ControlGate>
6000e4f4:	6001c0be 	.word	0x6001c0be

6000e4f8 <LPUART_GetDefaultConfig>:
 *   lpuartConfig->enableRx = false;
 *
 * param config Pointer to a configuration structure.
 */
void LPUART_GetDefaultConfig(lpuart_config_t *config)
{
6000e4f8:	b508      	push	{r3, lr}
    assert(NULL != config);
6000e4fa:	b930      	cbnz	r0, 6000e50a <LPUART_GetDefaultConfig+0x12>
6000e4fc:	4b08      	ldr	r3, [pc, #32]	; (6000e520 <LPUART_GetDefaultConfig+0x28>)
6000e4fe:	f240 2106 	movw	r1, #518	; 0x206
6000e502:	4a08      	ldr	r2, [pc, #32]	; (6000e524 <LPUART_GetDefaultConfig+0x2c>)
6000e504:	4808      	ldr	r0, [pc, #32]	; (6000e528 <LPUART_GetDefaultConfig+0x30>)
6000e506:	f004 fc1b 	bl	60012d40 <__assert_func>
6000e50a:	2300      	movs	r3, #0

    /* Initializes the configure structure to zero. */
    (void)memset(config, 0, sizeof(*config));

    config->baudRate_Bps  = 115200U;
6000e50c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
6000e510:	8243      	strh	r3, [r0, #18]
    config->txCtsConfig = kLPUART_CtsSampleAtStart;
    config->txCtsSource = kLPUART_CtsSourcePin;
#endif
    config->rxIdleType   = kLPUART_IdleTypeStartBit;
    config->rxIdleConfig = kLPUART_IdleCharacter1;
    config->enableTx     = false;
6000e512:	8203      	strh	r3, [r0, #16]
    config->parityMode    = kLPUART_ParityDisabled;
6000e514:	e9c0 2300 	strd	r2, r3, [r0]
    config->txCtsSource = kLPUART_CtsSourcePin;
6000e518:	e9c0 3302 	strd	r3, r3, [r0, #8]
    config->enableRx     = false;
}
6000e51c:	bd08      	pop	{r3, pc}
6000e51e:	bf00      	nop
6000e520:	6001e3b0 	.word	0x6001e3b0
6000e524:	6001e467 	.word	0x6001e467
6000e528:	6001e345 	.word	0x6001e345

6000e52c <LPUART_GetEnabledInterrupts>:
 * return LPUART interrupt flags which are logical OR of the enumerators in ref _lpuart_interrupt_enable.
 */
uint32_t LPUART_GetEnabledInterrupts(LPUART_Type *base)
{
    /* Check int enable bits in base->CTRL */
    uint32_t temp = (uint32_t)(base->CTRL & (uint32_t)kLPUART_AllInterruptEnable);
6000e52c:	6981      	ldr	r1, [r0, #24]

    /* Check int enable bits in base->BAUD */
    temp = (temp & ~(uint32_t)kLPUART_RxActiveEdgeInterruptEnable) | ((base->BAUD & LPUART_BAUD_RXEDGIE_MASK) >> 8U);
6000e52e:	6902      	ldr	r2, [r0, #16]
6000e530:	4b08      	ldr	r3, [pc, #32]	; (6000e554 <LPUART_GetEnabledInterrupts+0x28>)
6000e532:	0a12      	lsrs	r2, r2, #8
6000e534:	400b      	ands	r3, r1
6000e536:	f002 0240 	and.w	r2, r2, #64	; 0x40
#if defined(FSL_FEATURE_LPUART_HAS_LIN_BREAK_DETECT) && FSL_FEATURE_LPUART_HAS_LIN_BREAK_DETECT
    temp = (temp & ~(uint32_t)kLPUART_LinBreakInterruptEnable) | ((base->BAUD & LPUART_BAUD_LBKDIE_MASK) >> 8U);
6000e53a:	431a      	orrs	r2, r3
6000e53c:	6903      	ldr	r3, [r0, #16]

#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    /* Check int enable bits in base->FIFO */
    temp =
        (temp & ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable)) |
        (base->FIFO & (LPUART_FIFO_TXOFE_MASK | LPUART_FIFO_RXUFE_MASK));
6000e53e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    temp = (temp & ~(uint32_t)kLPUART_LinBreakInterruptEnable) | ((base->BAUD & LPUART_BAUD_LBKDIE_MASK) >> 8U);
6000e540:	0a1b      	lsrs	r3, r3, #8
        (base->FIFO & (LPUART_FIFO_TXOFE_MASK | LPUART_FIFO_RXUFE_MASK));
6000e542:	f400 7040 	and.w	r0, r0, #768	; 0x300
    temp = (temp & ~(uint32_t)kLPUART_LinBreakInterruptEnable) | ((base->BAUD & LPUART_BAUD_LBKDIE_MASK) >> 8U);
6000e546:	f003 0380 	and.w	r3, r3, #128	; 0x80
6000e54a:	4313      	orrs	r3, r2
        (temp & ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable)) |
6000e54c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
#endif

    return temp;
}
6000e550:	4318      	orrs	r0, r3
6000e552:	4770      	bx	lr
6000e554:	0ff0c300 	.word	0x0ff0c300

6000e558 <LPUART_GetStatusFlags>:
 * return LPUART status flags which are ORed by the enumerators in the _lpuart_flags.
 */
uint32_t LPUART_GetStatusFlags(LPUART_Type *base)
{
    uint32_t temp;
    temp = base->STAT;
6000e558:	6942      	ldr	r2, [r0, #20]
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    temp |= (base->FIFO &
6000e55a:	6a83      	ldr	r3, [r0, #40]	; 0x28
            16U;
#endif
    /* Only keeps the status bits */
    temp &= (uint32_t)kLPUART_AllFlags;
    return temp;
}
6000e55c:	4803      	ldr	r0, [pc, #12]	; (6000e56c <LPUART_GetStatusFlags+0x14>)
             (LPUART_FIFO_TXEMPT_MASK | LPUART_FIFO_RXEMPT_MASK | LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) >>
6000e55e:	0c1b      	lsrs	r3, r3, #16
6000e560:	f003 03c3 	and.w	r3, r3, #195	; 0xc3
    temp |= (base->FIFO &
6000e564:	4313      	orrs	r3, r2
}
6000e566:	4018      	ands	r0, r3
6000e568:	4770      	bx	lr
6000e56a:	bf00      	nop
6000e56c:	c1ffc0c3 	.word	0xc1ffc0c3

6000e570 <LPUART_ClearStatusFlags>:
 * retval kStatus_LPUART_FlagCannotClearManually The flag can't be cleared by this function but
 *         it is cleared automatically by hardware.
 * retval kStatus_Success Status in the mask are cleared.
 */
status_t LPUART_ClearStatusFlags(LPUART_Type *base, uint32_t mask)
{
6000e570:	b510      	push	{r4, lr}

    /* Only deal with the clearable flags */
    mask &= (uint32_t)kLPUART_AllClearFlags;
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    /* Status bits in FIFO register */
    if ((mask & ((uint32_t)kLPUART_TxFifoOverflowFlag | (uint32_t)kLPUART_RxFifoUnderflowFlag)) != 0U)
6000e572:	078b      	lsls	r3, r1, #30
    mask &= (uint32_t)kLPUART_AllClearFlags;
6000e574:	4c0c      	ldr	r4, [pc, #48]	; (6000e5a8 <LPUART_ClearStatusFlags+0x38>)
6000e576:	ea04 0401 	and.w	r4, r4, r1
    if ((mask & ((uint32_t)kLPUART_TxFifoOverflowFlag | (uint32_t)kLPUART_RxFifoUnderflowFlag)) != 0U)
6000e57a:	d007      	beq.n	6000e58c <LPUART_ClearStatusFlags+0x1c>
    {
        /* Get the FIFO register value and mask the rx/tx FIFO flush bits and the status bits that can be W1C in case
           they are written 1 accidentally. */
        temp = (uint32_t)base->FIFO;
6000e57c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        temp &= (uint32_t)(
            ~(LPUART_FIFO_TXFLUSH_MASK | LPUART_FIFO_RXFLUSH_MASK | LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK));
        temp |= (mask << 16U) & (LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK);
6000e57e:	0423      	lsls	r3, r4, #16
        temp &= (uint32_t)(
6000e580:	f422 3270 	bic.w	r2, r2, #245760	; 0x3c000
        temp |= (mask << 16U) & (LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK);
6000e584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
6000e588:	4313      	orrs	r3, r2
        base->FIFO = temp;
6000e58a:	6283      	str	r3, [r0, #40]	; 0x28
    }
#endif
    /* Status bits in STAT register */
    /* First get the STAT register value and mask all the bits that not represent status, then OR with the status bit
     * that is to be W1C */
    temp       = (base->STAT & 0x3E000000UL) | mask;
6000e58c:	6943      	ldr	r3, [r0, #20]
6000e58e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
6000e592:	4323      	orrs	r3, r4
    base->STAT = temp;
6000e594:	6143      	str	r3, [r0, #20]
    /* If some flags still pending. */
    if (0U != (mask & LPUART_GetStatusFlags(base)))
6000e596:	f7ff ffdf 	bl	6000e558 <LPUART_GetStatusFlags>
    {
        status = kStatus_LPUART_FlagCannotClearManually;
6000e59a:	4220      	tst	r0, r4
    {
        status = kStatus_Success;
    }

    return status;
}
6000e59c:	f240 501a 	movw	r0, #1306	; 0x51a
6000e5a0:	bf08      	it	eq
6000e5a2:	2000      	moveq	r0, #0
6000e5a4:	bd10      	pop	{r4, pc}
6000e5a6:	bf00      	nop
6000e5a8:	c01fc003 	.word	0xc01fc003

6000e5ac <GPIO_PinWrite>:
 *        - 0: corresponding pin output low-logic level.
 *        - 1: corresponding pin output high-logic level.
 */
void GPIO_PinWrite(GPIO_Type *base, uint32_t pin, uint8_t output)
{
    assert(pin < 32U);
6000e5ac:	291f      	cmp	r1, #31
{
6000e5ae:	b508      	push	{r3, lr}
    assert(pin < 32U);
6000e5b0:	d905      	bls.n	6000e5be <GPIO_PinWrite+0x12>
6000e5b2:	4b08      	ldr	r3, [pc, #32]	; (6000e5d4 <GPIO_PinWrite+0x28>)
6000e5b4:	2175      	movs	r1, #117	; 0x75
6000e5b6:	4a08      	ldr	r2, [pc, #32]	; (6000e5d8 <GPIO_PinWrite+0x2c>)
6000e5b8:	4808      	ldr	r0, [pc, #32]	; (6000e5dc <GPIO_PinWrite+0x30>)
6000e5ba:	f004 fbc1 	bl	60012d40 <__assert_func>
    if (output == 0U)
    {
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_CLEAR) && FSL_FEATURE_IGPIO_HAS_DR_CLEAR)
        base->DR_CLEAR = (1UL << pin);
6000e5be:	2301      	movs	r3, #1
6000e5c0:	fa03 f101 	lsl.w	r1, r3, r1
    if (output == 0U)
6000e5c4:	b912      	cbnz	r2, 6000e5cc <GPIO_PinWrite+0x20>
        base->DR_CLEAR = (1UL << pin);
6000e5c6:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
        base->DR_SET = (1UL << pin);
#else
        base->DR |= (1UL << pin);  /* Set pin output to high level.*/
#endif
    }
}
6000e5ca:	bd08      	pop	{r3, pc}
        base->DR_SET = (1UL << pin);
6000e5cc:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
}
6000e5d0:	e7fb      	b.n	6000e5ca <GPIO_PinWrite+0x1e>
6000e5d2:	bf00      	nop
6000e5d4:	6001e4b0 	.word	0x6001e4b0
6000e5d8:	6001e4fd 	.word	0x6001e4fd
6000e5dc:	6001e4ba 	.word	0x6001e4ba

6000e5e0 <PWM_GetInstance>:
    /* Rounding calculations to improve the accuracy of reloadValue */
    return ((65535U * dutyCyclePercent) + 50U) / 100U;
}

static uint32_t PWM_GetInstance(PWM_Type *base)
{
6000e5e0:	b508      	push	{r3, lr}
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_pwmBases); instance++)
    {
        if (s_pwmBases[instance] == base)
6000e5e2:	b1a8      	cbz	r0, 6000e610 <PWM_GetInstance+0x30>
6000e5e4:	4b0e      	ldr	r3, [pc, #56]	; (6000e620 <PWM_GetInstance+0x40>)
6000e5e6:	4298      	cmp	r0, r3
6000e5e8:	d011      	beq.n	6000e60e <PWM_GetInstance+0x2e>
6000e5ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000e5ee:	4298      	cmp	r0, r3
6000e5f0:	d00f      	beq.n	6000e612 <PWM_GetInstance+0x32>
6000e5f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000e5f6:	4298      	cmp	r0, r3
6000e5f8:	d00d      	beq.n	6000e616 <PWM_GetInstance+0x36>
6000e5fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000e5fe:	4298      	cmp	r0, r3
6000e600:	d00b      	beq.n	6000e61a <PWM_GetInstance+0x3a>
        {
            break;
        }
    }

    assert(instance < ARRAY_SIZE(s_pwmBases));
6000e602:	4b08      	ldr	r3, [pc, #32]	; (6000e624 <PWM_GetInstance+0x44>)
6000e604:	214b      	movs	r1, #75	; 0x4b
6000e606:	4a08      	ldr	r2, [pc, #32]	; (6000e628 <PWM_GetInstance+0x48>)
6000e608:	4808      	ldr	r0, [pc, #32]	; (6000e62c <PWM_GetInstance+0x4c>)
6000e60a:	f004 fb99 	bl	60012d40 <__assert_func>
    for (instance = 0; instance < ARRAY_SIZE(s_pwmBases); instance++)
6000e60e:	2001      	movs	r0, #1

    return instance;
}
6000e610:	bd08      	pop	{r3, pc}
    for (instance = 0; instance < ARRAY_SIZE(s_pwmBases); instance++)
6000e612:	2002      	movs	r0, #2
6000e614:	e7fc      	b.n	6000e610 <PWM_GetInstance+0x30>
6000e616:	2003      	movs	r0, #3
6000e618:	e7fa      	b.n	6000e610 <PWM_GetInstance+0x30>
6000e61a:	2004      	movs	r0, #4
    return instance;
6000e61c:	e7f8      	b.n	6000e610 <PWM_GetInstance+0x30>
6000e61e:	bf00      	nop
6000e620:	403dc000 	.word	0x403dc000
6000e624:	6001e50b 	.word	0x6001e50b
6000e628:	6001e63a 	.word	0x6001e63a
6000e62c:	6001e52d 	.word	0x6001e52d

6000e630 <CLOCK_ControlGate>:
    assert(index <= 7UL);
6000e630:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    uint32_t index = ((uint32_t)name) >> 8UL;
6000e634:	ea4f 2210 	mov.w	r2, r0, lsr #8
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
6000e638:	f000 031f 	and.w	r3, r0, #31
{
6000e63c:	b510      	push	{r4, lr}
    assert(index <= 7UL);
6000e63e:	d306      	bcc.n	6000e64e <CLOCK_ControlGate+0x1e>
6000e640:	4b0b      	ldr	r3, [pc, #44]	; (6000e670 <CLOCK_ControlGate+0x40>)
6000e642:	f240 51de 	movw	r1, #1502	; 0x5de
6000e646:	4a0b      	ldr	r2, [pc, #44]	; (6000e674 <CLOCK_ControlGate+0x44>)
6000e648:	480b      	ldr	r0, [pc, #44]	; (6000e678 <CLOCK_ControlGate+0x48>)
6000e64a:	f004 fb79 	bl	60012d40 <__assert_func>
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000e64e:	480b      	ldr	r0, [pc, #44]	; (6000e67c <CLOCK_ControlGate+0x4c>)
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000e650:	4099      	lsls	r1, r3
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000e652:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000e656:	2203      	movs	r2, #3
6000e658:	409a      	lsls	r2, r3
6000e65a:	43d2      	mvns	r2, r2
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000e65c:	e850 3f00 	ldrex	r3, [r0]
6000e660:	4013      	ands	r3, r2
6000e662:	430b      	orrs	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000e664:	e840 3400 	strex	r4, r3, [r0]
6000e668:	2c00      	cmp	r4, #0
6000e66a:	d1f7      	bne.n	6000e65c <CLOCK_ControlGate+0x2c>
}
6000e66c:	bd10      	pop	{r4, pc}
6000e66e:	bf00      	nop
6000e670:	6001e131 	.word	0x6001e131
6000e674:	6001e628 	.word	0x6001e628
6000e678:	6001e13e 	.word	0x6001e13e
6000e67c:	400fc068 	.word	0x400fc068

6000e680 <PWM_Init>:
 * param config    Pointer to user's PWM config structure.
 *
 * return kStatus_Success means success; else failed.
 */
status_t PWM_Init(PWM_Type *base, pwm_submodule_t subModule, const pwm_config_t *config)
{
6000e680:	b570      	push	{r4, r5, r6, lr}
6000e682:	4606      	mov	r6, r0
6000e684:	460d      	mov	r5, r1
    assert(config);
6000e686:	4614      	mov	r4, r2
6000e688:	b92a      	cbnz	r2, 6000e696 <PWM_Init+0x16>
6000e68a:	4b49      	ldr	r3, [pc, #292]	; (6000e7b0 <PWM_Init+0x130>)
6000e68c:	215d      	movs	r1, #93	; 0x5d
6000e68e:	4a49      	ldr	r2, [pc, #292]	; (6000e7b4 <PWM_Init+0x134>)
            break;
        case kPWM_ComplementaryPwmB:
            base->MCTRL |= ((uint16_t)1U << (PWM_MCTRL_IPOL_SHIFT + (uint16_t)subModule));
            break;
        default:
            assert(false);
6000e690:	4849      	ldr	r0, [pc, #292]	; (6000e7b8 <PWM_Init+0x138>)
6000e692:	f004 fb55 	bl	60012d40 <__assert_func>
    if ((config->clockSource == kPWM_Submodule0Clock) && (subModule == kPWM_Module_0))
6000e696:	78d3      	ldrb	r3, [r2, #3]
6000e698:	2b02      	cmp	r3, #2
6000e69a:	d102      	bne.n	6000e6a2 <PWM_Init+0x22>
6000e69c:	b925      	cbnz	r5, 6000e6a8 <PWM_Init+0x28>
        return kStatus_Fail;
6000e69e:	2001      	movs	r0, #1
6000e6a0:	e073      	b.n	6000e78a <PWM_Init+0x10a>
    if ((config->reloadSelect == kPWM_MasterReload) && (subModule == kPWM_Module_0))
6000e6a2:	79d3      	ldrb	r3, [r2, #7]
6000e6a4:	2b01      	cmp	r3, #1
6000e6a6:	d0f9      	beq.n	6000e69c <PWM_Init+0x1c>
    CLOCK_EnableClock(s_pwmClocks[PWM_GetInstance(base)][subModule]);
6000e6a8:	4630      	mov	r0, r6
6000e6aa:	f7ff ff99 	bl	6000e5e0 <PWM_GetInstance>
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
6000e6ae:	4b43      	ldr	r3, [pc, #268]	; (6000e7bc <PWM_Init+0x13c>)
6000e6b0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
6000e6b4:	2103      	movs	r1, #3
6000e6b6:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
6000e6ba:	f7ff ffb9 	bl	6000e630 <CLOCK_ControlGate>
    base->FSTS |= PWM_FSTS_FFLAG_MASK;
6000e6be:	f8b6 318e 	ldrh.w	r3, [r6, #398]	; 0x18e
6000e6c2:	2260      	movs	r2, #96	; 0x60
6000e6c4:	b29b      	uxth	r3, r3
6000e6c6:	fb02 6205 	mla	r2, r2, r5, r6
6000e6ca:	f043 030f 	orr.w	r3, r3, #15
6000e6ce:	f8a6 318e 	strh.w	r3, [r6, #398]	; 0x18e
    reg |= (PWM_CTRL2_CLK_SEL(config->clockSource) | PWM_CTRL2_FORCE_SEL(config->forceTrigger) |
6000e6d2:	78e3      	ldrb	r3, [r4, #3]
    reg = base->SM[subModule].CTRL2;
6000e6d4:	8891      	ldrh	r1, [r2, #4]
    reg |= (PWM_CTRL2_CLK_SEL(config->clockSource) | PWM_CTRL2_FORCE_SEL(config->forceTrigger) |
6000e6d6:	f003 0303 	and.w	r3, r3, #3
            PWM_CTRL2_INIT_SEL(config->initializationControl) | PWM_CTRL2_DBGEN(config->enableDebugMode) |
6000e6da:	7820      	ldrb	r0, [r4, #0]
    reg &= ~(uint16_t)(PWM_CTRL2_CLK_SEL_MASK | PWM_CTRL2_FORCE_SEL_MASK | PWM_CTRL2_INIT_SEL_MASK |
6000e6dc:	f401 51e6 	and.w	r1, r1, #7360	; 0x1cc0
6000e6e0:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
6000e6e4:	430b      	orrs	r3, r1
            PWM_CTRL2_WAITEN(config->enableWait) | PWM_CTRL2_RELOAD_SEL(config->reloadSelect));
6000e6e6:	7861      	ldrb	r1, [r4, #1]
6000e6e8:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
    reg |= (PWM_CTRL2_CLK_SEL(config->clockSource) | PWM_CTRL2_FORCE_SEL(config->forceTrigger) |
6000e6ec:	7a61      	ldrb	r1, [r4, #9]
6000e6ee:	00c9      	lsls	r1, r1, #3
6000e6f0:	f001 0138 	and.w	r1, r1, #56	; 0x38
6000e6f4:	430b      	orrs	r3, r1
            PWM_CTRL2_INIT_SEL(config->initializationControl) | PWM_CTRL2_DBGEN(config->enableDebugMode) |
6000e6f6:	78a1      	ldrb	r1, [r4, #2]
6000e6f8:	0209      	lsls	r1, r1, #8
6000e6fa:	f401 7140 	and.w	r1, r1, #768	; 0x300
6000e6fe:	430b      	orrs	r3, r1
            PWM_CTRL2_WAITEN(config->enableWait) | PWM_CTRL2_RELOAD_SEL(config->reloadSelect));
6000e700:	79e1      	ldrb	r1, [r4, #7]
6000e702:	0089      	lsls	r1, r1, #2
6000e704:	b29b      	uxth	r3, r3
6000e706:	f001 0104 	and.w	r1, r1, #4
    reg |= (PWM_CTRL2_CLK_SEL(config->clockSource) | PWM_CTRL2_FORCE_SEL(config->forceTrigger) |
6000e70a:	430b      	orrs	r3, r1
    switch (config->pairOperation)
6000e70c:	7961      	ldrb	r1, [r4, #5]
6000e70e:	2901      	cmp	r1, #1
6000e710:	d01a      	beq.n	6000e748 <PWM_Init+0xc8>
6000e712:	2902      	cmp	r1, #2
6000e714:	d022      	beq.n	6000e75c <PWM_Init+0xdc>
6000e716:	bb49      	cbnz	r1, 6000e76c <PWM_Init+0xec>
            reg |= PWM_CTRL2_INDEP_MASK;
6000e718:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
            break;
    }
    base->SM[subModule].CTRL2 = reg;
6000e71c:	8093      	strh	r3, [r2, #4]

    reg = base->SM[subModule].CTRL;
6000e71e:	88d3      	ldrh	r3, [r2, #6]

    /* Setup the clock prescale, load mode and frequency */
    reg &= ~(uint16_t)(PWM_CTRL_PRSC_MASK | PWM_CTRL_LDFQ_MASK | PWM_CTRL_LDMOD_MASK);
    reg |= (PWM_CTRL_PRSC(config->prescale) | PWM_CTRL_LDFQ(config->reloadFrequency));
6000e720:	7a21      	ldrb	r1, [r4, #8]
    reg &= ~(uint16_t)(PWM_CTRL_PRSC_MASK | PWM_CTRL_LDFQ_MASK | PWM_CTRL_LDMOD_MASK);
6000e722:	f023 0374 	bic.w	r3, r3, #116	; 0x74
6000e726:	051b      	lsls	r3, r3, #20
6000e728:	0d1b      	lsrs	r3, r3, #20
6000e72a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    reg |= (PWM_CTRL_PRSC(config->prescale) | PWM_CTRL_LDFQ(config->reloadFrequency));
6000e72e:	7921      	ldrb	r1, [r4, #4]
6000e730:	0109      	lsls	r1, r1, #4
6000e732:	b29b      	uxth	r3, r3
6000e734:	f001 0170 	and.w	r1, r1, #112	; 0x70
6000e738:	430b      	orrs	r3, r1

    /* Setup register reload logic */
    switch (config->reloadLogic)
6000e73a:	79a1      	ldrb	r1, [r4, #6]
6000e73c:	2903      	cmp	r1, #3
6000e73e:	d832      	bhi.n	6000e7a6 <PWM_Init+0x126>
6000e740:	e8df f001 	tbb	[pc, r1]
6000e744:	2e292418 	.word	0x2e292418
            base->MCTRL &= ~((uint16_t)1U << (PWM_MCTRL_IPOL_SHIFT + (uint16_t)subModule));
6000e748:	f8b6 0188 	ldrh.w	r0, [r6, #392]	; 0x188
6000e74c:	350c      	adds	r5, #12
6000e74e:	b280      	uxth	r0, r0
6000e750:	40a9      	lsls	r1, r5
6000e752:	ea20 0101 	bic.w	r1, r0, r1
            base->MCTRL |= ((uint16_t)1U << (PWM_MCTRL_IPOL_SHIFT + (uint16_t)subModule));
6000e756:	f8a6 1188 	strh.w	r1, [r6, #392]	; 0x188
            break;
6000e75a:	e7df      	b.n	6000e71c <PWM_Init+0x9c>
            base->MCTRL |= ((uint16_t)1U << (PWM_MCTRL_IPOL_SHIFT + (uint16_t)subModule));
6000e75c:	350c      	adds	r5, #12
6000e75e:	2101      	movs	r1, #1
6000e760:	f8b6 0188 	ldrh.w	r0, [r6, #392]	; 0x188
6000e764:	40a9      	lsls	r1, r5
6000e766:	4301      	orrs	r1, r0
6000e768:	b289      	uxth	r1, r1
6000e76a:	e7f4      	b.n	6000e756 <PWM_Init+0xd6>
            assert(false);
6000e76c:	4b14      	ldr	r3, [pc, #80]	; (6000e7c0 <PWM_Init+0x140>)
6000e76e:	218d      	movs	r1, #141	; 0x8d
6000e770:	4a10      	ldr	r2, [pc, #64]	; (6000e7b4 <PWM_Init+0x134>)
6000e772:	e78d      	b.n	6000e690 <PWM_Init+0x10>
    {
        case kPWM_ReloadImmediate:
            reg |= PWM_CTRL_LDMOD_MASK;
6000e774:	f043 0304 	orr.w	r3, r3, #4
            break;
        default:
            assert(false);
            break;
    }
    base->SM[subModule].CTRL = reg;
6000e778:	80d3      	strh	r3, [r2, #6]

    /* Issue a Force trigger event when configured to trigger locally */
    if (config->forceTrigger == kPWM_Force_Local)
6000e77a:	7a63      	ldrb	r3, [r4, #9]
6000e77c:	b923      	cbnz	r3, 6000e788 <PWM_Init+0x108>
    {
        base->SM[subModule].CTRL2 |= PWM_CTRL2_FORCE(1U);
6000e77e:	8893      	ldrh	r3, [r2, #4]
6000e780:	b29b      	uxth	r3, r3
6000e782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
6000e786:	8093      	strh	r3, [r2, #4]
    }

    return kStatus_Success;
6000e788:	2000      	movs	r0, #0
}
6000e78a:	bd70      	pop	{r4, r5, r6, pc}
            reg &= (uint16_t)(~PWM_CTRL_FULL_MASK);
6000e78c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
6000e790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
            break;
6000e794:	e7f0      	b.n	6000e778 <PWM_Init+0xf8>
            reg &= (uint16_t)(~PWM_CTRL_HALF_MASK);
6000e796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
            reg |= PWM_CTRL_FULL_MASK;
6000e79a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
            break;
6000e79e:	e7eb      	b.n	6000e778 <PWM_Init+0xf8>
            reg |= PWM_CTRL_FULL_MASK;
6000e7a0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
            break;
6000e7a4:	e7e8      	b.n	6000e778 <PWM_Init+0xf8>
            assert(false);
6000e7a6:	4b06      	ldr	r3, [pc, #24]	; (6000e7c0 <PWM_Init+0x140>)
6000e7a8:	21ab      	movs	r1, #171	; 0xab
6000e7aa:	4a02      	ldr	r2, [pc, #8]	; (6000e7b4 <PWM_Init+0x134>)
6000e7ac:	e770      	b.n	6000e690 <PWM_Init+0x10>
6000e7ae:	bf00      	nop
6000e7b0:	6001e3b8 	.word	0x6001e3b8
6000e7b4:	6001e64a 	.word	0x6001e64a
6000e7b8:	6001e52d 	.word	0x6001e52d
6000e7bc:	6001c0d0 	.word	0x6001c0d0
6000e7c0:	6001e118 	.word	0x6001e118

6000e7c4 <PWM_GetDefaultConfig>:
 *   config->pairOperation = kPWM_Independent;
 * endcode
 * param config Pointer to user's PWM config structure.
 */
void PWM_GetDefaultConfig(pwm_config_t *config)
{
6000e7c4:	b508      	push	{r3, lr}
    assert(config);
6000e7c6:	b928      	cbnz	r0, 6000e7d4 <PWM_GetDefaultConfig+0x10>
6000e7c8:	4b08      	ldr	r3, [pc, #32]	; (6000e7ec <PWM_GetDefaultConfig+0x28>)
6000e7ca:	21de      	movs	r1, #222	; 0xde
6000e7cc:	4a08      	ldr	r2, [pc, #32]	; (6000e7f0 <PWM_GetDefaultConfig+0x2c>)
6000e7ce:	4809      	ldr	r0, [pc, #36]	; (6000e7f4 <PWM_GetDefaultConfig+0x30>)
6000e7d0:	f004 fab6 	bl	60012d40 <__assert_func>

    /* Initializes the configure structure to zero. */
    (void)memset(config, 0, sizeof(*config));

    /* PWM is paused in debug mode */
    config->enableDebugMode = false;
6000e7d4:	2300      	movs	r3, #0
6000e7d6:	7003      	strb	r3, [r0, #0]
    /* PWM is paused in wait mode */
    config->enableWait = false;
6000e7d8:	7043      	strb	r3, [r0, #1]
    /* PWM module uses the local reload signal to reload registers */
    config->reloadSelect = kPWM_LocalReload;
6000e7da:	71c3      	strb	r3, [r0, #7]
    /* Use the IP Bus clock as source clock for the PWM submodule */
    config->clockSource = kPWM_BusClock;
6000e7dc:	70c3      	strb	r3, [r0, #3]
    /* Clock source prescale is set to divide by 1*/
    config->prescale = kPWM_Prescale_Divide_1;
6000e7de:	7103      	strb	r3, [r0, #4]
    /* Local sync causes initialization */
    config->initializationControl = kPWM_Initialize_LocalSync;
6000e7e0:	7083      	strb	r3, [r0, #2]
    /* The local force signal, CTRL2[FORCE], from the submodule is used to force updates */
    config->forceTrigger = kPWM_Force_Local;
6000e7e2:	7243      	strb	r3, [r0, #9]
    /* PWM reload frequency, reload opportunity is PWM half cycle or full cycle.
     * This field is not used in Immediate reload mode
     */
    config->reloadFrequency = kPWM_LoadEveryOportunity;
6000e7e4:	7203      	strb	r3, [r0, #8]
    /* Buffered-registers get loaded with new values as soon as LDOK bit is set */
    config->reloadLogic = kPWM_ReloadImmediate;
6000e7e6:	7183      	strb	r3, [r0, #6]
    /* PWM A & PWM B operate as 2 independent channels */
    config->pairOperation = kPWM_Independent;
6000e7e8:	7143      	strb	r3, [r0, #5]
}
6000e7ea:	bd08      	pop	{r3, pc}
6000e7ec:	6001e3b8 	.word	0x6001e3b8
6000e7f0:	6001e613 	.word	0x6001e613
6000e7f4:	6001e52d 	.word	0x6001e52d

6000e7f8 <PWM_SetupPwm>:
                      const pwm_signal_param_t *chnlParams,
                      uint8_t numOfChnls,
                      pwm_mode_t mode,
                      uint32_t pwmFreq_Hz,
                      uint32_t srcClock_Hz)
{
6000e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000e7fc:	b087      	sub	sp, #28
6000e7fe:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
6000e802:	e9dd 6711 	ldrd	r6, r7, [sp, #68]	; 0x44
6000e806:	9405      	str	r4, [sp, #20]
    assert(chnlParams);
6000e808:	b932      	cbnz	r2, 6000e818 <PWM_SetupPwm+0x20>
6000e80a:	4bce      	ldr	r3, [pc, #824]	; (6000eb44 <PWM_SetupPwm+0x34c>)
6000e80c:	f44f 718b 	mov.w	r1, #278	; 0x116
6000e810:	4acd      	ldr	r2, [pc, #820]	; (6000eb48 <PWM_SetupPwm+0x350>)
    assert(pwmFreq_Hz);
6000e812:	48ce      	ldr	r0, [pc, #824]	; (6000eb4c <PWM_SetupPwm+0x354>)
6000e814:	f004 fa94 	bl	60012d40 <__assert_func>
6000e818:	b926      	cbnz	r6, 6000e824 <PWM_SetupPwm+0x2c>
6000e81a:	4bcd      	ldr	r3, [pc, #820]	; (6000eb50 <PWM_SetupPwm+0x358>)
6000e81c:	f240 1117 	movw	r1, #279	; 0x117
6000e820:	4ac9      	ldr	r2, [pc, #804]	; (6000eb48 <PWM_SetupPwm+0x350>)
6000e822:	e7f6      	b.n	6000e812 <PWM_SetupPwm+0x1a>
    assert(numOfChnls);
6000e824:	b923      	cbnz	r3, 6000e830 <PWM_SetupPwm+0x38>
6000e826:	4bcb      	ldr	r3, [pc, #812]	; (6000eb54 <PWM_SetupPwm+0x35c>)
6000e828:	f44f 718c 	mov.w	r1, #280	; 0x118
6000e82c:	4ac6      	ldr	r2, [pc, #792]	; (6000eb48 <PWM_SetupPwm+0x350>)
6000e82e:	e7f0      	b.n	6000e812 <PWM_SetupPwm+0x1a>
    assert(srcClock_Hz);
6000e830:	b927      	cbnz	r7, 6000e83c <PWM_SetupPwm+0x44>
6000e832:	4bc9      	ldr	r3, [pc, #804]	; (6000eb58 <PWM_SetupPwm+0x360>)
6000e834:	f240 1119 	movw	r1, #281	; 0x119
6000e838:	4ac3      	ldr	r2, [pc, #780]	; (6000eb48 <PWM_SetupPwm+0x350>)
6000e83a:	e7ea      	b.n	6000e812 <PWM_SetupPwm+0x1a>
    uint32_t pwmClock;
    uint16_t pulseCnt = 0, pwmHighPulse = 0;
    uint16_t modulo = 0;
    uint8_t i, polarityShift = 0, outputEnableShift = 0;

    if (numOfChnls > 2U)
6000e83c:	2b02      	cmp	r3, #2
6000e83e:	f200 827b 	bhi.w	6000ed38 <PWM_SetupPwm+0x540>
        /* Each submodule has 2 signals; PWM A & PWM B */
        return kStatus_Fail;
    }

    /* Divide the clock by the prescale value */
    pwmClock = (srcClock_Hz / (1UL << ((base->SM[subModule].CTRL & PWM_CTRL_PRSC_MASK) >> PWM_CTRL_PRSC_SHIFT)));
6000e842:	f04f 0960 	mov.w	r9, #96	; 0x60
6000e846:	3208      	adds	r2, #8
6000e848:	fb09 0401 	mla	r4, r9, r1, r0
6000e84c:	88e5      	ldrh	r5, [r4, #6]
6000e84e:	f3c5 1502 	ubfx	r5, r5, #4, #3
6000e852:	40ef      	lsrs	r7, r5
    pulseCnt = (uint16_t)(pwmClock / pwmFreq_Hz);
6000e854:	fbb7 f7f6 	udiv	r7, r7, r6
                /* Indicates the start of the PWM period */
                if (i == 0U)
                {
                    base->SM[subModule].INIT = 0;
                    /* Indicates the center value */
                    base->SM[subModule].VAL0 = (pulseCnt / 2U);
6000e858:	f3c7 0e4e 	ubfx	lr, r7, #1, #15
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000e85c:	b2be      	uxth	r6, r7
    return (~value + 1U);
6000e85e:	f1ce 0500 	rsb	r5, lr, #0
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000e862:	9601      	str	r6, [sp, #4]
                    /* Indicates the end of the PWM period */
                    /* The change during the end to start of the PWM period requires a count time */
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000e864:	1e7e      	subs	r6, r7, #1
    return (~value + 1U);
6000e866:	b2ad      	uxth	r5, r5
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000e868:	b2b6      	uxth	r6, r6
    return (~value + 1U);
6000e86a:	9503      	str	r5, [sp, #12]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000e86c:	f10e 35ff 	add.w	r5, lr, #4294967295	; 0xffffffff
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000e870:	9604      	str	r6, [sp, #16]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000e872:	b2ad      	uxth	r5, r5
6000e874:	9502      	str	r5, [sp, #8]
    for (i = 0; i < numOfChnls; i++)
6000e876:	2500      	movs	r5, #0
    uint16_t modulo = 0;
6000e878:	46a8      	mov	r8, r5
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000e87a:	9e01      	ldr	r6, [sp, #4]
6000e87c:	f812 cc07 	ldrb.w	ip, [r2, #-7]
        switch (mode)
6000e880:	f8dd b014 	ldr.w	fp, [sp, #20]
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000e884:	fb06 fc0c 	mul.w	ip, r6, ip
6000e888:	2664      	movs	r6, #100	; 0x64
6000e88a:	fbbc fcf6 	udiv	ip, ip, r6
6000e88e:	fa1f f68c 	uxth.w	r6, ip
        switch (mode)
6000e892:	f1bb 0f03 	cmp.w	fp, #3
6000e896:	f200 81b3 	bhi.w	6000ec00 <PWM_SetupPwm+0x408>
6000e89a:	e8df f01b 	tbh	[pc, fp, lsl #1]
6000e89e:	0004      	.short	0x0004
6000e8a0:	00dd0076 	.word	0x00dd0076
6000e8a4:	019c      	.short	0x019c
                if (i == 0U)
6000e8a6:	b94d      	cbnz	r5, 6000e8bc <PWM_SetupPwm+0xc4>
                    base->SM[subModule].INIT = PWM_GetComplementU16(modulo);
6000e8a8:	f8dd c00c 	ldr.w	ip, [sp, #12]
                    modulo = (pulseCnt >> 1U);
6000e8ac:	46f0      	mov	r8, lr
                    base->SM[subModule].INIT = PWM_GetComplementU16(modulo);
6000e8ae:	f8a4 c002 	strh.w	ip, [r4, #2]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000e8b2:	f8dd c008 	ldr.w	ip, [sp, #8]
                    base->SM[subModule].VAL0 = 0;
6000e8b6:	8165      	strh	r5, [r4, #10]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000e8b8:	f8a4 c00e 	strh.w	ip, [r4, #14]
                    base->SM[subModule].VAL2 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000e8bc:	0876      	lsrs	r6, r6, #1
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000e8be:	f812 ac08 	ldrb.w	sl, [r2, #-8]
    return (~value + 1U);
6000e8c2:	f1c6 0c00 	rsb	ip, r6, #0
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000e8c6:	f1ba 0f01 	cmp.w	sl, #1
    return (~value + 1U);
6000e8ca:	fa1f fc8c 	uxth.w	ip, ip
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000e8ce:	d158      	bne.n	6000e982 <PWM_SetupPwm+0x18a>
                    base->SM[subModule].VAL2 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000e8d0:	f8a4 c012 	strh.w	ip, [r4, #18]
                    base->SM[subModule].VAL3 = (pwmHighPulse / 2U);
6000e8d4:	82e6      	strh	r6, [r4, #22]
                break;
        }
        /* Setup register shift values based on the channel being configured.
         * Also setup the deadtime value
         */
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000e8d6:	f812 cc08 	ldrb.w	ip, [r2, #-8]
        {
            polarityShift              = PWM_OCTRL_POLA_SHIFT;
            outputEnableShift          = PWM_OUTEN_PWMA_EN_SHIFT;
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000e8da:	f832 6c04 	ldrh.w	r6, [r2, #-4]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000e8de:	f1bc 0f01 	cmp.w	ip, #1
6000e8e2:	f040 8192 	bne.w	6000ec0a <PWM_SetupPwm+0x412>
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000e8e6:	fb09 0c01 	mla	ip, r9, r1, r0
6000e8ea:	f8ac 6030 	strh.w	r6, [ip, #48]	; 0x30
            outputEnableShift          = PWM_OUTEN_PWMB_EN_SHIFT;
            base->SM[subModule].DTCNT1 = PWM_DTCNT1_DTCNT1(chnlParams->deadtimeValue);
        }

        /* Set PWM output fault status */
        switch (chnlParams->pwmChannel)
6000e8ee:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000e8f2:	2e01      	cmp	r6, #1
6000e8f4:	f040 81d8 	bne.w	6000eca8 <PWM_SetupPwm+0x4b0>
        {
            case kPWM_PwmA:
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000e8f8:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000e8fc:	f02a 0a30 	bic.w	sl, sl, #48	; 0x30
6000e900:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
6000e904:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
6000e908:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000e90c:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000e910:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000e914:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
6000e918:	fa1f fa8a 	uxth.w	sl, sl
6000e91c:	f00b 0b30 	and.w	fp, fp, #48	; 0x30
6000e920:	ea4a 0a0b 	orr.w	sl, sl, fp
6000e924:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
                assert(false);
                break;
        }

        /* Setup signal active level */
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000e928:	f812 ac06 	ldrb.w	sl, [r2, #-6]
6000e92c:	f1ba 0f00 	cmp.w	sl, #0
6000e930:	f040 81e7 	bne.w	6000ed02 <PWM_SetupPwm+0x50a>
        {
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000e934:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
    for (i = 0; i < numOfChnls; i++)
6000e938:	3501      	adds	r5, #1
6000e93a:	3208      	adds	r2, #8
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000e93c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
    for (i = 0; i < numOfChnls; i++)
6000e940:	b2ed      	uxtb	r5, r5
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000e942:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
    for (i = 0; i < numOfChnls; i++)
6000e946:	429d      	cmp	r5, r3
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000e948:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
6000e94c:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
        else
        {
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
        }
        /* Enable PWM output */
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000e950:	f101 0c08 	add.w	ip, r1, #8
6000e954:	f8b0 a180 	ldrh.w	sl, [r0, #384]	; 0x180
6000e958:	fa06 fc0c 	lsl.w	ip, r6, ip
6000e95c:	ea4c 0c0a 	orr.w	ip, ip, sl
6000e960:	fa1f fc8c 	uxth.w	ip, ip
6000e964:	f8a0 c180 	strh.w	ip, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000e968:	d06e      	beq.n	6000ea48 <PWM_SetupPwm+0x250>
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000e96a:	f812 6c07 	ldrb.w	r6, [r2, #-7]
6000e96e:	fa1f fc87 	uxth.w	ip, r7
6000e972:	fb0c f606 	mul.w	r6, ip, r6
6000e976:	f04f 0c64 	mov.w	ip, #100	; 0x64
6000e97a:	fbb6 f6fc 	udiv	r6, r6, ip
6000e97e:	b2b6      	uxth	r6, r6
        switch (mode)
6000e980:	e791      	b.n	6000e8a6 <PWM_SetupPwm+0xae>
                    base->SM[subModule].VAL4 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000e982:	f8a4 c01a 	strh.w	ip, [r4, #26]
                    base->SM[subModule].VAL5 = (pwmHighPulse / 2U);
6000e986:	83e6      	strh	r6, [r4, #30]
6000e988:	e7a5      	b.n	6000e8d6 <PWM_SetupPwm+0xde>
                if (i == 0U)
6000e98a:	b925      	cbnz	r5, 6000e996 <PWM_SetupPwm+0x19e>
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000e98c:	9e04      	ldr	r6, [sp, #16]
                    base->SM[subModule].INIT = 0;
6000e98e:	8065      	strh	r5, [r4, #2]
                    base->SM[subModule].VAL0 = (pulseCnt / 2U);
6000e990:	f8a4 e00a 	strh.w	lr, [r4, #10]
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000e994:	81e6      	strh	r6, [r4, #14]
                    base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000e996:	9e01      	ldr	r6, [sp, #4]
6000e998:	fa1f fc8c 	uxth.w	ip, ip
6000e99c:	eba6 0a0c 	sub.w	sl, r6, ip
                    base->SM[subModule].VAL3 = ((pulseCnt + pwmHighPulse) / 2U);
6000e9a0:	44b4      	add	ip, r6
6000e9a2:	ea4f 065c 	mov.w	r6, ip, lsr #1
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000e9a6:	f812 cc08 	ldrb.w	ip, [r2, #-8]
                    base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000e9aa:	f3ca 0a4f 	ubfx	sl, sl, #1, #16
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000e9ae:	f1bc 0f01 	cmp.w	ip, #1
6000e9b2:	d14d      	bne.n	6000ea50 <PWM_SetupPwm+0x258>
                    base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000e9b4:	f8a4 a012 	strh.w	sl, [r4, #18]
                    base->SM[subModule].VAL3 = pwmHighPulse;
6000e9b8:	82e6      	strh	r6, [r4, #22]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000e9ba:	f812 cc08 	ldrb.w	ip, [r2, #-8]
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000e9be:	f832 6c04 	ldrh.w	r6, [r2, #-4]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000e9c2:	f1bc 0f01 	cmp.w	ip, #1
6000e9c6:	f040 8169 	bne.w	6000ec9c <PWM_SetupPwm+0x4a4>
            outputEnableShift          = PWM_OUTEN_PWMA_EN_SHIFT;
6000e9ca:	f04f 0c08 	mov.w	ip, #8
            polarityShift              = PWM_OCTRL_POLA_SHIFT;
6000e9ce:	f04f 0a0a 	mov.w	sl, #10
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000e9d2:	8626      	strh	r6, [r4, #48]	; 0x30
        switch (chnlParams->pwmChannel)
6000e9d4:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000e9d8:	2e01      	cmp	r6, #1
6000e9da:	f040 8169 	bne.w	6000ecb0 <PWM_SetupPwm+0x4b8>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000e9de:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000e9e0:	f026 0630 	bic.w	r6, r6, #48	; 0x30
6000e9e4:	0436      	lsls	r6, r6, #16
6000e9e6:	0c36      	lsrs	r6, r6, #16
6000e9e8:	8466      	strh	r6, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000e9ea:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000e9ee:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000e9f0:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
6000e9f4:	b2b6      	uxth	r6, r6
6000e9f6:	f00b 0b30 	and.w	fp, fp, #48	; 0x30
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMBFS_SHIFT) &
6000e9fa:	ea46 060b 	orr.w	r6, r6, fp
6000e9fe:	8466      	strh	r6, [r4, #34]	; 0x22
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000ea00:	2601      	movs	r6, #1
6000ea02:	fa06 f60a 	lsl.w	r6, r6, sl
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000ea06:	f812 ac06 	ldrb.w	sl, [r2, #-6]
6000ea0a:	f1ba 0f00 	cmp.w	sl, #0
6000ea0e:	f040 818c 	bne.w	6000ed2a <PWM_SetupPwm+0x532>
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000ea12:	f8b4 a022 	ldrh.w	sl, [r4, #34]	; 0x22
6000ea16:	fa1f fa8a 	uxth.w	sl, sl
6000ea1a:	ea2a 0a06 	bic.w	sl, sl, r6
6000ea1e:	f8a4 a022 	strh.w	sl, [r4, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000ea22:	448c      	add	ip, r1
6000ea24:	f04f 0a01 	mov.w	sl, #1
6000ea28:	f8b0 6180 	ldrh.w	r6, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000ea2c:	3501      	adds	r5, #1
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000ea2e:	fa0a fa0c 	lsl.w	sl, sl, ip
    for (i = 0; i < numOfChnls; i++)
6000ea32:	3208      	adds	r2, #8
6000ea34:	b2ed      	uxtb	r5, r5
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000ea36:	ea4a 0a06 	orr.w	sl, sl, r6
    for (i = 0; i < numOfChnls; i++)
6000ea3a:	42ab      	cmp	r3, r5
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000ea3c:	fa1f fa8a 	uxth.w	sl, sl
6000ea40:	f8a0 a180 	strh.w	sl, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000ea44:	f47f af19 	bne.w	6000e87a <PWM_SetupPwm+0x82>

        /* Get the next channel parameters */
        chnlParams++;
    }

    return kStatus_Success;
6000ea48:	2000      	movs	r0, #0
}
6000ea4a:	b007      	add	sp, #28
6000ea4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    base->SM[subModule].VAL4 = ((pulseCnt - pwmHighPulse) / 2U);
6000ea50:	f8a4 a01a 	strh.w	sl, [r4, #26]
                    base->SM[subModule].VAL5 = pwmHighPulse;
6000ea54:	83e6      	strh	r6, [r4, #30]
6000ea56:	e7b0      	b.n	6000e9ba <PWM_SetupPwm+0x1c2>
                if (i == 0U)
6000ea58:	b94d      	cbnz	r5, 6000ea6e <PWM_SetupPwm+0x276>
                    base->SM[subModule].INIT = PWM_GetComplementU16(modulo);
6000ea5a:	f8dd c00c 	ldr.w	ip, [sp, #12]
                    modulo = (pulseCnt >> 1U);
6000ea5e:	46f0      	mov	r8, lr
                    base->SM[subModule].INIT = PWM_GetComplementU16(modulo);
6000ea60:	f8a4 c002 	strh.w	ip, [r4, #2]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000ea64:	f8dd c008 	ldr.w	ip, [sp, #8]
                    base->SM[subModule].VAL0 = 0;
6000ea68:	8165      	strh	r5, [r4, #10]
                    base->SM[subModule].VAL1 = modulo - 1U;
6000ea6a:	f8a4 c00e 	strh.w	ip, [r4, #14]
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000ea6e:	f812 ac08 	ldrb.w	sl, [r2, #-8]
6000ea72:	eba6 0608 	sub.w	r6, r6, r8
    return (~value + 1U);
6000ea76:	f1c8 0c00 	rsb	ip, r8, #0
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000ea7a:	f1ba 0f01 	cmp.w	sl, #1
6000ea7e:	b2b6      	uxth	r6, r6
    return (~value + 1U);
6000ea80:	fa1f fc8c 	uxth.w	ip, ip
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000ea84:	f040 80a3 	bne.w	6000ebce <PWM_SetupPwm+0x3d6>
                    base->SM[subModule].VAL2 = PWM_GetComplementU16(modulo);
6000ea88:	f8a4 c012 	strh.w	ip, [r4, #18]
                    base->SM[subModule].VAL3 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000ea8c:	82e6      	strh	r6, [r4, #22]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000ea8e:	f812 cc08 	ldrb.w	ip, [r2, #-8]
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000ea92:	f832 6c04 	ldrh.w	r6, [r2, #-4]
        if (chnlParams->pwmChannel == kPWM_PwmA)
6000ea96:	f1bc 0f01 	cmp.w	ip, #1
6000ea9a:	d15f      	bne.n	6000eb5c <PWM_SetupPwm+0x364>
            base->SM[subModule].DTCNT0 = PWM_DTCNT0_DTCNT0(chnlParams->deadtimeValue);
6000ea9c:	fb09 0c01 	mla	ip, r9, r1, r0
6000eaa0:	f8ac 6030 	strh.w	r6, [ip, #48]	; 0x30
        switch (chnlParams->pwmChannel)
6000eaa4:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000eaa8:	2e01      	cmp	r6, #1
6000eaaa:	f040 80fd 	bne.w	6000eca8 <PWM_SetupPwm+0x4b0>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000eaae:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000eab2:	f02a 0a30 	bic.w	sl, sl, #48	; 0x30
6000eab6:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
6000eaba:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
6000eabe:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000eac2:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000eac6:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000eaca:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
6000eace:	fa1f fa8a 	uxth.w	sl, sl
6000ead2:	f00b 0b30 	and.w	fp, fp, #48	; 0x30
6000ead6:	ea4a 0a0b 	orr.w	sl, sl, fp
6000eada:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000eade:	f812 ac06 	ldrb.w	sl, [r2, #-6]
6000eae2:	f1ba 0f00 	cmp.w	sl, #0
6000eae6:	d125      	bne.n	6000eb34 <PWM_SetupPwm+0x33c>
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000eae8:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000eaec:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
6000eaf0:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
6000eaf4:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000eaf8:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000eafc:	f101 0c08 	add.w	ip, r1, #8
6000eb00:	f8b0 a180 	ldrh.w	sl, [r0, #384]	; 0x180
6000eb04:	fa06 fc0c 	lsl.w	ip, r6, ip
    for (i = 0; i < numOfChnls; i++)
6000eb08:	3501      	adds	r5, #1
6000eb0a:	3208      	adds	r2, #8
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000eb0c:	ea4c 0c0a 	orr.w	ip, ip, sl
    for (i = 0; i < numOfChnls; i++)
6000eb10:	b2ed      	uxtb	r5, r5
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000eb12:	fa1f fc8c 	uxth.w	ip, ip
    for (i = 0; i < numOfChnls; i++)
6000eb16:	42ab      	cmp	r3, r5
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000eb18:	f8a0 c180 	strh.w	ip, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000eb1c:	d094      	beq.n	6000ea48 <PWM_SetupPwm+0x250>
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000eb1e:	f812 cc07 	ldrb.w	ip, [r2, #-7]
6000eb22:	b2be      	uxth	r6, r7
6000eb24:	fb0c f606 	mul.w	r6, ip, r6
6000eb28:	f04f 0c64 	mov.w	ip, #100	; 0x64
6000eb2c:	fbb6 f6fc 	udiv	r6, r6, ip
6000eb30:	b2b6      	uxth	r6, r6
        switch (mode)
6000eb32:	e791      	b.n	6000ea58 <PWM_SetupPwm+0x260>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000eb34:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000eb38:	fa1f fa8a 	uxth.w	sl, sl
6000eb3c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
6000eb40:	e7da      	b.n	6000eaf8 <PWM_SetupPwm+0x300>
6000eb42:	bf00      	nop
6000eb44:	6001e56d 	.word	0x6001e56d
6000eb48:	6001e606 	.word	0x6001e606
6000eb4c:	6001e52d 	.word	0x6001e52d
6000eb50:	6001e578 	.word	0x6001e578
6000eb54:	6001e583 	.word	0x6001e583
6000eb58:	6001e58e 	.word	0x6001e58e
            base->SM[subModule].DTCNT1 = PWM_DTCNT1_DTCNT1(chnlParams->deadtimeValue);
6000eb5c:	8666      	strh	r6, [r4, #50]	; 0x32
        switch (chnlParams->pwmChannel)
6000eb5e:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000eb62:	2e01      	cmp	r6, #1
6000eb64:	f040 80b6 	bne.w	6000ecd4 <PWM_SetupPwm+0x4dc>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000eb68:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000eb6c:	f02c 0c30 	bic.w	ip, ip, #48	; 0x30
6000eb70:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
6000eb74:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
6000eb78:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000eb7c:	f812 ac02 	ldrb.w	sl, [r2, #-2]
6000eb80:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000eb84:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
6000eb88:	fa1f fc8c 	uxth.w	ip, ip
6000eb8c:	f00a 0a30 	and.w	sl, sl, #48	; 0x30
6000eb90:	ea4c 0c0a 	orr.w	ip, ip, sl
6000eb94:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000eb98:	f812 cc06 	ldrb.w	ip, [r2, #-6]
6000eb9c:	f1bc 0f00 	cmp.w	ip, #0
6000eba0:	d10e      	bne.n	6000ebc0 <PWM_SetupPwm+0x3c8>
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000eba2:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000eba6:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
6000ebaa:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
6000ebae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000ebb2:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000ebb6:	f101 0c04 	add.w	ip, r1, #4
6000ebba:	f8b0 a180 	ldrh.w	sl, [r0, #384]	; 0x180
6000ebbe:	e7a1      	b.n	6000eb04 <PWM_SetupPwm+0x30c>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000ebc0:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000ebc4:	fa1f fc8c 	uxth.w	ip, ip
6000ebc8:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
6000ebcc:	e7f1      	b.n	6000ebb2 <PWM_SetupPwm+0x3ba>
                    base->SM[subModule].VAL4 = PWM_GetComplementU16(modulo);
6000ebce:	f8a4 c01a 	strh.w	ip, [r4, #26]
                    base->SM[subModule].VAL5 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000ebd2:	83e6      	strh	r6, [r4, #30]
6000ebd4:	e75b      	b.n	6000ea8e <PWM_SetupPwm+0x296>
                if (i == 0U)
6000ebd6:	b935      	cbnz	r5, 6000ebe6 <PWM_SetupPwm+0x3ee>
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000ebd8:	f8dd c010 	ldr.w	ip, [sp, #16]
                    base->SM[subModule].INIT = 0;
6000ebdc:	8065      	strh	r5, [r4, #2]
                    base->SM[subModule].VAL0 = (pulseCnt / 2U);
6000ebde:	f8a4 e00a 	strh.w	lr, [r4, #10]
                    base->SM[subModule].VAL1 = pulseCnt - 1U;
6000ebe2:	f8a4 c00e 	strh.w	ip, [r4, #14]
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000ebe6:	f812 cc08 	ldrb.w	ip, [r2, #-8]
6000ebea:	f1bc 0f01 	cmp.w	ip, #1
                    base->SM[subModule].VAL2 = 0;
6000ebee:	f04f 0c00 	mov.w	ip, #0
                if (chnlParams->pwmChannel == kPWM_PwmA)
6000ebf2:	d102      	bne.n	6000ebfa <PWM_SetupPwm+0x402>
                    base->SM[subModule].VAL2 = 0;
6000ebf4:	f8a4 c012 	strh.w	ip, [r4, #18]
6000ebf8:	e6de      	b.n	6000e9b8 <PWM_SetupPwm+0x1c0>
                    base->SM[subModule].VAL4 = 0;
6000ebfa:	f8a4 c01a 	strh.w	ip, [r4, #26]
6000ebfe:	e729      	b.n	6000ea54 <PWM_SetupPwm+0x25c>
                assert(false);
6000ec00:	4b4e      	ldr	r3, [pc, #312]	; (6000ed3c <PWM_SetupPwm+0x544>)
6000ec02:	f44f 71cd 	mov.w	r1, #410	; 0x19a
6000ec06:	4a4e      	ldr	r2, [pc, #312]	; (6000ed40 <PWM_SetupPwm+0x548>)
6000ec08:	e603      	b.n	6000e812 <PWM_SetupPwm+0x1a>
            base->SM[subModule].DTCNT1 = PWM_DTCNT1_DTCNT1(chnlParams->deadtimeValue);
6000ec0a:	8666      	strh	r6, [r4, #50]	; 0x32
        switch (chnlParams->pwmChannel)
6000ec0c:	f812 6c08 	ldrb.w	r6, [r2, #-8]
6000ec10:	2e01      	cmp	r6, #1
6000ec12:	d15f      	bne.n	6000ecd4 <PWM_SetupPwm+0x4dc>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMAFS_MASK);
6000ec14:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000ec18:	f02c 0c30 	bic.w	ip, ip, #48	; 0x30
6000ec1c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
6000ec20:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
6000ec24:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMAFS_SHIFT) &
6000ec28:	f812 ac02 	ldrb.w	sl, [r2, #-2]
6000ec2c:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000ec30:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
6000ec34:	fa1f fc8c 	uxth.w	ip, ip
6000ec38:	f00a 0a30 	and.w	sl, sl, #48	; 0x30
6000ec3c:	ea4c 0c0a 	orr.w	ip, ip, sl
6000ec40:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
        if ((bool)chnlParams->level == kPWM_HighTrue)
6000ec44:	f812 cc06 	ldrb.w	ip, [r2, #-6]
6000ec48:	f1bc 0f00 	cmp.w	ip, #0
6000ec4c:	d11f      	bne.n	6000ec8e <PWM_SetupPwm+0x496>
            base->SM[subModule].OCTRL &= ~((uint16_t)1U << (uint16_t)polarityShift);
6000ec4e:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000ec52:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
6000ec56:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
6000ec5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000ec5e:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000ec62:	f101 0c04 	add.w	ip, r1, #4
6000ec66:	f8b0 a180 	ldrh.w	sl, [r0, #384]	; 0x180
6000ec6a:	fa06 fc0c 	lsl.w	ip, r6, ip
6000ec6e:	ea4c 0c0a 	orr.w	ip, ip, sl
6000ec72:	fa1f fc8c 	uxth.w	ip, ip
6000ec76:	f8a0 c180 	strh.w	ip, [r0, #384]	; 0x180
    for (i = 0; i < numOfChnls; i++)
6000ec7a:	3501      	adds	r5, #1
6000ec7c:	3208      	adds	r2, #8
6000ec7e:	b2ed      	uxtb	r5, r5
6000ec80:	42ab      	cmp	r3, r5
6000ec82:	f43f aee1 	beq.w	6000ea48 <PWM_SetupPwm+0x250>
        pwmHighPulse = (pulseCnt * chnlParams->dutyCyclePercent) / 100U;
6000ec86:	b2be      	uxth	r6, r7
6000ec88:	f812 cc07 	ldrb.w	ip, [r2, #-7]
6000ec8c:	e671      	b.n	6000e972 <PWM_SetupPwm+0x17a>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000ec8e:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
6000ec92:	fa1f fc8c 	uxth.w	ip, ip
6000ec96:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
6000ec9a:	e7e0      	b.n	6000ec5e <PWM_SetupPwm+0x466>
            outputEnableShift          = PWM_OUTEN_PWMB_EN_SHIFT;
6000ec9c:	f04f 0c04 	mov.w	ip, #4
            polarityShift              = PWM_OCTRL_POLB_SHIFT;
6000eca0:	f04f 0a09 	mov.w	sl, #9
            base->SM[subModule].DTCNT1 = PWM_DTCNT1_DTCNT1(chnlParams->deadtimeValue);
6000eca4:	8666      	strh	r6, [r4, #50]	; 0x32
6000eca6:	e695      	b.n	6000e9d4 <PWM_SetupPwm+0x1dc>
            outputEnableShift          = PWM_OUTEN_PWMA_EN_SHIFT;
6000eca8:	f04f 0c08 	mov.w	ip, #8
            polarityShift              = PWM_OCTRL_POLA_SHIFT;
6000ecac:	f04f 0a0a 	mov.w	sl, #10
        switch (chnlParams->pwmChannel)
6000ecb0:	2e02      	cmp	r6, #2
6000ecb2:	d014      	beq.n	6000ecde <PWM_SetupPwm+0x4e6>
6000ecb4:	bb06      	cbnz	r6, 6000ecf8 <PWM_SetupPwm+0x500>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMBFS_MASK);
6000ecb6:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000ecb8:	f026 060c 	bic.w	r6, r6, #12
6000ecbc:	0436      	lsls	r6, r6, #16
6000ecbe:	0c36      	lsrs	r6, r6, #16
6000ecc0:	8466      	strh	r6, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMBFS_SHIFT) &
6000ecc2:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000ecc6:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000ecc8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
6000eccc:	b2b6      	uxth	r6, r6
6000ecce:	f00b 0b0c 	and.w	fp, fp, #12
6000ecd2:	e692      	b.n	6000e9fa <PWM_SetupPwm+0x202>
            outputEnableShift          = PWM_OUTEN_PWMB_EN_SHIFT;
6000ecd4:	f04f 0c04 	mov.w	ip, #4
            polarityShift              = PWM_OCTRL_POLB_SHIFT;
6000ecd8:	f04f 0a09 	mov.w	sl, #9
6000ecdc:	e7e8      	b.n	6000ecb0 <PWM_SetupPwm+0x4b8>
                base->SM[subModule].OCTRL &= ~((uint16_t)PWM_OCTRL_PWMXFS_MASK);
6000ecde:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000ece0:	f026 0603 	bic.w	r6, r6, #3
6000ece4:	0436      	lsls	r6, r6, #16
6000ece6:	0c36      	lsrs	r6, r6, #16
6000ece8:	8466      	strh	r6, [r4, #34]	; 0x22
                base->SM[subModule].OCTRL |= (((uint16_t)(chnlParams->faultState) << (uint16_t)PWM_OCTRL_PWMXFS_SHIFT) &
6000ecea:	8c66      	ldrh	r6, [r4, #34]	; 0x22
6000ecec:	f812 bc02 	ldrb.w	fp, [r2, #-2]
6000ecf0:	b2b6      	uxth	r6, r6
6000ecf2:	f00b 0b03 	and.w	fp, fp, #3
6000ecf6:	e680      	b.n	6000e9fa <PWM_SetupPwm+0x202>
                assert(false);
6000ecf8:	4b10      	ldr	r3, [pc, #64]	; (6000ed3c <PWM_SetupPwm+0x544>)
6000ecfa:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
6000ecfe:	4a10      	ldr	r2, [pc, #64]	; (6000ed40 <PWM_SetupPwm+0x548>)
6000ed00:	e587      	b.n	6000e812 <PWM_SetupPwm+0x1a>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000ed02:	f8bc a022 	ldrh.w	sl, [ip, #34]	; 0x22
6000ed06:	fa1f fa8a 	uxth.w	sl, sl
6000ed0a:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
6000ed0e:	f8ac a022 	strh.w	sl, [ip, #34]	; 0x22
        base->OUTEN |= ((uint16_t)1U << ((uint16_t)outputEnableShift + (uint16_t)subModule));
6000ed12:	f101 0a08 	add.w	sl, r1, #8
6000ed16:	f8b0 c180 	ldrh.w	ip, [r0, #384]	; 0x180
6000ed1a:	fa06 f60a 	lsl.w	r6, r6, sl
6000ed1e:	ea46 060c 	orr.w	r6, r6, ip
6000ed22:	b2b6      	uxth	r6, r6
6000ed24:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
6000ed28:	e7a7      	b.n	6000ec7a <PWM_SetupPwm+0x482>
            base->SM[subModule].OCTRL |= ((uint16_t)1U << (uint16_t)polarityShift);
6000ed2a:	f8b4 a022 	ldrh.w	sl, [r4, #34]	; 0x22
6000ed2e:	ea46 060a 	orr.w	r6, r6, sl
6000ed32:	b2b6      	uxth	r6, r6
6000ed34:	8466      	strh	r6, [r4, #34]	; 0x22
6000ed36:	e674      	b.n	6000ea22 <PWM_SetupPwm+0x22a>
        return kStatus_Fail;
6000ed38:	2001      	movs	r0, #1
6000ed3a:	e686      	b.n	6000ea4a <PWM_SetupPwm+0x252>
6000ed3c:	6001e118 	.word	0x6001e118
6000ed40:	6001e606 	.word	0x6001e606

6000ed44 <PWM_UpdatePwmDutycycleHighAccuracy>:
 *                          65535=active signal (100% duty cycle)
 */
void PWM_UpdatePwmDutycycleHighAccuracy(
    PWM_Type *base, pwm_submodule_t subModule, pwm_channels_t pwmSignal, pwm_mode_t currPwmMode, uint16_t dutyCycle)
{
    assert((uint16_t)pwmSignal < 2U);
6000ed44:	2a01      	cmp	r2, #1
{
6000ed46:	b570      	push	{r4, r5, r6, lr}
6000ed48:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    assert((uint16_t)pwmSignal < 2U);
6000ed4c:	d906      	bls.n	6000ed5c <PWM_UpdatePwmDutycycleHighAccuracy+0x18>
6000ed4e:	4b40      	ldr	r3, [pc, #256]	; (6000ee50 <PWM_UpdatePwmDutycycleHighAccuracy+0x10c>)
6000ed50:	f240 2105 	movw	r1, #517	; 0x205
6000ed54:	4a3f      	ldr	r2, [pc, #252]	; (6000ee54 <PWM_UpdatePwmDutycycleHighAccuracy+0x110>)
                base->SM[subModule].VAL4 = 0;
                base->SM[subModule].VAL5 = pwmHighPulse;
            }
            break;
        default:
            assert(false);
6000ed56:	4840      	ldr	r0, [pc, #256]	; (6000ee58 <PWM_UpdatePwmDutycycleHighAccuracy+0x114>)
6000ed58:	f003 fff2 	bl	60012d40 <__assert_func>
    switch (currPwmMode)
6000ed5c:	2560      	movs	r5, #96	; 0x60
6000ed5e:	2b03      	cmp	r3, #3
6000ed60:	d871      	bhi.n	6000ee46 <PWM_UpdatePwmDutycycleHighAccuracy+0x102>
6000ed62:	e8df f003 	tbb	[pc, r3]
6000ed66:	1f02      	.short	0x1f02
6000ed68:	5b3c      	.short	0x5b3c
            modulo   = base->SM[subModule].VAL1 + 1U;
6000ed6a:	fb05 0001 	mla	r0, r5, r1, r0
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000ed6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
            if (pwmSignal == kPWM_PwmA)
6000ed72:	2a01      	cmp	r2, #1
            modulo   = base->SM[subModule].VAL1 + 1U;
6000ed74:	89c3      	ldrh	r3, [r0, #14]
6000ed76:	b29b      	uxth	r3, r3
6000ed78:	f103 0301 	add.w	r3, r3, #1
            pulseCnt = modulo * 2U;
6000ed7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000ed80:	b29b      	uxth	r3, r3
6000ed82:	fb04 f303 	mul.w	r3, r4, r3
6000ed86:	fbb3 f3f1 	udiv	r3, r3, r1
            if (pwmSignal == kPWM_PwmA)
6000ed8a:	f3c3 034e 	ubfx	r3, r3, #1, #15
                base->SM[subModule].VAL2 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000ed8e:	b29a      	uxth	r2, r3
    return (~value + 1U);
6000ed90:	f1c3 0300 	rsb	r3, r3, #0
6000ed94:	b29b      	uxth	r3, r3
            if (pwmSignal == kPWM_PwmA)
6000ed96:	d102      	bne.n	6000ed9e <PWM_UpdatePwmDutycycleHighAccuracy+0x5a>
                base->SM[subModule].VAL2 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000ed98:	8243      	strh	r3, [r0, #18]
                base->SM[subModule].VAL3 = (pwmHighPulse / 2U);
6000ed9a:	82c2      	strh	r2, [r0, #22]
            break;
    }
}
6000ed9c:	bd70      	pop	{r4, r5, r6, pc}
                base->SM[subModule].VAL4 = PWM_GetComplementU16(pwmHighPulse / 2U);
6000ed9e:	8343      	strh	r3, [r0, #26]
                base->SM[subModule].VAL5 = (pwmHighPulse / 2U);
6000eda0:	83c2      	strh	r2, [r0, #30]
6000eda2:	e7fb      	b.n	6000ed9c <PWM_UpdatePwmDutycycleHighAccuracy+0x58>
            pulseCnt = base->SM[subModule].VAL1 + 1U;
6000eda4:	fb05 0001 	mla	r0, r5, r1, r0
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000eda8:	f64f 71ff 	movw	r1, #65535	; 0xffff
            if (pwmSignal == kPWM_PwmA)
6000edac:	2a01      	cmp	r2, #1
            pulseCnt = base->SM[subModule].VAL1 + 1U;
6000edae:	89c3      	ldrh	r3, [r0, #14]
6000edb0:	f103 0301 	add.w	r3, r3, #1
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000edb4:	b29b      	uxth	r3, r3
6000edb6:	fb03 f404 	mul.w	r4, r3, r4
6000edba:	fbb4 f4f1 	udiv	r4, r4, r1
            if (pwmSignal == kPWM_PwmA)
6000edbe:	eba3 0204 	sub.w	r2, r3, r4
6000edc2:	4423      	add	r3, r4
                base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000edc4:	f3c2 024f 	ubfx	r2, r2, #1, #16
            if (pwmSignal == kPWM_PwmA)
6000edc8:	d104      	bne.n	6000edd4 <PWM_UpdatePwmDutycycleHighAccuracy+0x90>
                base->SM[subModule].VAL3 = ((pulseCnt + pwmHighPulse) / 2U);
6000edca:	f3c3 034f 	ubfx	r3, r3, #1, #16
                base->SM[subModule].VAL2 = ((pulseCnt - pwmHighPulse) / 2U);
6000edce:	8242      	strh	r2, [r0, #18]
                base->SM[subModule].VAL3 = pwmHighPulse;
6000edd0:	82c3      	strh	r3, [r0, #22]
6000edd2:	e7e3      	b.n	6000ed9c <PWM_UpdatePwmDutycycleHighAccuracy+0x58>
                base->SM[subModule].VAL5 = ((pulseCnt + pwmHighPulse) / 2U);
6000edd4:	f3c3 034f 	ubfx	r3, r3, #1, #16
                base->SM[subModule].VAL4 = ((pulseCnt - pwmHighPulse) / 2U);
6000edd8:	8342      	strh	r2, [r0, #26]
                base->SM[subModule].VAL5 = pwmHighPulse;
6000edda:	83c3      	strh	r3, [r0, #30]
6000eddc:	e7de      	b.n	6000ed9c <PWM_UpdatePwmDutycycleHighAccuracy+0x58>
            modulo   = base->SM[subModule].VAL1 + 1U;
6000edde:	fb05 0001 	mla	r0, r5, r1, r0
            if (pwmSignal == kPWM_PwmA)
6000ede2:	2a01      	cmp	r2, #1
            modulo   = base->SM[subModule].VAL1 + 1U;
6000ede4:	89c1      	ldrh	r1, [r0, #14]
6000ede6:	b289      	uxth	r1, r1
6000ede8:	f101 0301 	add.w	r3, r1, #1
6000edec:	ea6f 0201 	mvn.w	r2, r1
            pulseCnt = modulo * 2U;
6000edf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    return (~value + 1U);
6000edf4:	b292      	uxth	r2, r2
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000edf6:	b29b      	uxth	r3, r3
6000edf8:	fb04 f303 	mul.w	r3, r4, r3
6000edfc:	f64f 74ff 	movw	r4, #65535	; 0xffff
6000ee00:	fbb3 f3f4 	udiv	r3, r3, r4
6000ee04:	b29b      	uxth	r3, r3
            if (pwmSignal == kPWM_PwmA)
6000ee06:	eba3 0301 	sub.w	r3, r3, r1
6000ee0a:	d103      	bne.n	6000ee14 <PWM_UpdatePwmDutycycleHighAccuracy+0xd0>
                base->SM[subModule].VAL3 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000ee0c:	3b01      	subs	r3, #1
                base->SM[subModule].VAL2 = PWM_GetComplementU16(modulo);
6000ee0e:	8242      	strh	r2, [r0, #18]
                base->SM[subModule].VAL3 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000ee10:	b29b      	uxth	r3, r3
6000ee12:	e7dd      	b.n	6000edd0 <PWM_UpdatePwmDutycycleHighAccuracy+0x8c>
                base->SM[subModule].VAL5 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000ee14:	3b01      	subs	r3, #1
                base->SM[subModule].VAL4 = PWM_GetComplementU16(modulo);
6000ee16:	8342      	strh	r2, [r0, #26]
                base->SM[subModule].VAL5 = PWM_GetComplementU16(modulo) + pwmHighPulse;
6000ee18:	b29b      	uxth	r3, r3
6000ee1a:	e7de      	b.n	6000edda <PWM_UpdatePwmDutycycleHighAccuracy+0x96>
            pulseCnt = base->SM[subModule].VAL1 + 1U;
6000ee1c:	fb05 0001 	mla	r0, r5, r1, r0
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000ee20:	f64f 71ff 	movw	r1, #65535	; 0xffff
            if (pwmSignal == kPWM_PwmA)
6000ee24:	2a01      	cmp	r2, #1
6000ee26:	f04f 0200 	mov.w	r2, #0
            pulseCnt = base->SM[subModule].VAL1 + 1U;
6000ee2a:	89c3      	ldrh	r3, [r0, #14]
6000ee2c:	f103 0301 	add.w	r3, r3, #1
            pwmHighPulse = (pulseCnt * dutyCycle) / 65535U;
6000ee30:	b29b      	uxth	r3, r3
6000ee32:	fb04 f303 	mul.w	r3, r4, r3
6000ee36:	fbb3 f3f1 	udiv	r3, r3, r1
6000ee3a:	b29b      	uxth	r3, r3
            if (pwmSignal == kPWM_PwmA)
6000ee3c:	d101      	bne.n	6000ee42 <PWM_UpdatePwmDutycycleHighAccuracy+0xfe>
                base->SM[subModule].VAL2 = 0;
6000ee3e:	8242      	strh	r2, [r0, #18]
6000ee40:	e7c6      	b.n	6000edd0 <PWM_UpdatePwmDutycycleHighAccuracy+0x8c>
                base->SM[subModule].VAL4 = 0;
6000ee42:	8342      	strh	r2, [r0, #26]
6000ee44:	e7c9      	b.n	6000edda <PWM_UpdatePwmDutycycleHighAccuracy+0x96>
            assert(false);
6000ee46:	4b05      	ldr	r3, [pc, #20]	; (6000ee5c <PWM_UpdatePwmDutycycleHighAccuracy+0x118>)
6000ee48:	f240 2152 	movw	r1, #594	; 0x252
6000ee4c:	4a01      	ldr	r2, [pc, #4]	; (6000ee54 <PWM_UpdatePwmDutycycleHighAccuracy+0x110>)
6000ee4e:	e782      	b.n	6000ed56 <PWM_UpdatePwmDutycycleHighAccuracy+0x12>
6000ee50:	6001e59a 	.word	0x6001e59a
6000ee54:	6001e5cc 	.word	0x6001e5cc
6000ee58:	6001e52d 	.word	0x6001e52d
6000ee5c:	6001e118 	.word	0x6001e118

6000ee60 <PWM_UpdatePwmDutycycle>:
{
6000ee60:	b570      	push	{r4, r5, r6, lr}
6000ee62:	f89d 4010 	ldrb.w	r4, [sp, #16]
    assert(dutyCyclePercent <= 100U);
6000ee66:	2c64      	cmp	r4, #100	; 0x64
6000ee68:	d906      	bls.n	6000ee78 <PWM_UpdatePwmDutycycle+0x18>
6000ee6a:	4b0d      	ldr	r3, [pc, #52]	; (6000eea0 <PWM_UpdatePwmDutycycle+0x40>)
6000ee6c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
6000ee70:	4a0c      	ldr	r2, [pc, #48]	; (6000eea4 <PWM_UpdatePwmDutycycle+0x44>)
    assert((uint16_t)pwmSignal < 2U);
6000ee72:	480d      	ldr	r0, [pc, #52]	; (6000eea8 <PWM_UpdatePwmDutycycle+0x48>)
6000ee74:	f003 ff64 	bl	60012d40 <__assert_func>
6000ee78:	2a01      	cmp	r2, #1
6000ee7a:	d904      	bls.n	6000ee86 <PWM_UpdatePwmDutycycle+0x26>
6000ee7c:	4b0b      	ldr	r3, [pc, #44]	; (6000eeac <PWM_UpdatePwmDutycycle+0x4c>)
6000ee7e:	f240 11ed 	movw	r1, #493	; 0x1ed
6000ee82:	4a08      	ldr	r2, [pc, #32]	; (6000eea4 <PWM_UpdatePwmDutycycle+0x44>)
6000ee84:	e7f5      	b.n	6000ee72 <PWM_UpdatePwmDutycycle+0x12>
    return ((65535U * dutyCyclePercent) + 50U) / 100U;
6000ee86:	ebc4 4404 	rsb	r4, r4, r4, lsl #16
6000ee8a:	2564      	movs	r5, #100	; 0x64
6000ee8c:	3432      	adds	r4, #50	; 0x32
6000ee8e:	fbb4 f4f5 	udiv	r4, r4, r5
    PWM_UpdatePwmDutycycleHighAccuracy(base, subModule, pwmSignal, currPwmMode, reloadValue);
6000ee92:	b2a4      	uxth	r4, r4
6000ee94:	9404      	str	r4, [sp, #16]
}
6000ee96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PWM_UpdatePwmDutycycleHighAccuracy(base, subModule, pwmSignal, currPwmMode, reloadValue);
6000ee9a:	f7ff bf53 	b.w	6000ed44 <PWM_UpdatePwmDutycycleHighAccuracy>
6000ee9e:	bf00      	nop
6000eea0:	6001e5b3 	.word	0x6001e5b3
6000eea4:	6001e5ef 	.word	0x6001e5ef
6000eea8:	6001e52d 	.word	0x6001e52d
6000eeac:	6001e59a 	.word	0x6001e59a

6000eeb0 <ADC_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
static uint32_t ADC_GetInstance(ADC_Type *base)
{
6000eeb0:	b508      	push	{r3, lr}
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_adcBases); instance++)
    {
        if (s_adcBases[instance] == base)
6000eeb2:	b168      	cbz	r0, 6000eed0 <ADC_GetInstance+0x20>
6000eeb4:	4b08      	ldr	r3, [pc, #32]	; (6000eed8 <ADC_GetInstance+0x28>)
6000eeb6:	4298      	cmp	r0, r3
6000eeb8:	d009      	beq.n	6000eece <ADC_GetInstance+0x1e>
6000eeba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
6000eebe:	4298      	cmp	r0, r3
6000eec0:	d007      	beq.n	6000eed2 <ADC_GetInstance+0x22>
        {
            break;
        }
    }

    assert(instance < ARRAY_SIZE(s_adcBases));
6000eec2:	4b06      	ldr	r3, [pc, #24]	; (6000eedc <ADC_GetInstance+0x2c>)
6000eec4:	2135      	movs	r1, #53	; 0x35
6000eec6:	4a06      	ldr	r2, [pc, #24]	; (6000eee0 <ADC_GetInstance+0x30>)
6000eec8:	4806      	ldr	r0, [pc, #24]	; (6000eee4 <ADC_GetInstance+0x34>)
6000eeca:	f003 ff39 	bl	60012d40 <__assert_func>
    for (instance = 0; instance < ARRAY_SIZE(s_adcBases); instance++)
6000eece:	2001      	movs	r0, #1

    return instance;
}
6000eed0:	bd08      	pop	{r3, pc}
    for (instance = 0; instance < ARRAY_SIZE(s_adcBases); instance++)
6000eed2:	2002      	movs	r0, #2
    return instance;
6000eed4:	e7fc      	b.n	6000eed0 <ADC_GetInstance+0x20>
6000eed6:	bf00      	nop
6000eed8:	400c4000 	.word	0x400c4000
6000eedc:	6001e653 	.word	0x6001e653
6000eee0:	6001e740 	.word	0x6001e740
6000eee4:	6001e675 	.word	0x6001e675

6000eee8 <CLOCK_ControlGate>:
    assert(index <= 7UL);
6000eee8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    uint32_t index = ((uint32_t)name) >> 8UL;
6000eeec:	ea4f 2210 	mov.w	r2, r0, lsr #8
    uint32_t shift = ((uint32_t)name) & 0x1FUL;
6000eef0:	f000 031f 	and.w	r3, r0, #31
{
6000eef4:	b510      	push	{r4, lr}
    assert(index <= 7UL);
6000eef6:	d306      	bcc.n	6000ef06 <CLOCK_ControlGate+0x1e>
6000eef8:	4b0b      	ldr	r3, [pc, #44]	; (6000ef28 <CLOCK_ControlGate+0x40>)
6000eefa:	f240 51de 	movw	r1, #1502	; 0x5de
6000eefe:	4a0b      	ldr	r2, [pc, #44]	; (6000ef2c <CLOCK_ControlGate+0x44>)
6000ef00:	480b      	ldr	r0, [pc, #44]	; (6000ef30 <CLOCK_ControlGate+0x48>)
6000ef02:	f003 ff1d 	bl	60012d40 <__assert_func>
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000ef06:	480b      	ldr	r0, [pc, #44]	; (6000ef34 <CLOCK_ControlGate+0x4c>)
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000ef08:	4099      	lsls	r1, r3
    reg = (volatile uint32_t *)(&(((volatile uint32_t *)&CCM->CCGR0)[index]));
6000ef0a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (uint32_t)(((uint32_t)value) << (uint32_t)shift));
6000ef0e:	2203      	movs	r2, #3
6000ef10:	409a      	lsls	r2, r3
6000ef12:	43d2      	mvns	r2, r2
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000ef14:	e850 3f00 	ldrex	r3, [r0]
6000ef18:	4013      	ands	r3, r2
6000ef1a:	430b      	orrs	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
6000ef1c:	e840 3400 	strex	r4, r3, [r0]
6000ef20:	2c00      	cmp	r4, #0
6000ef22:	d1f7      	bne.n	6000ef14 <CLOCK_ControlGate+0x2c>
}
6000ef24:	bd10      	pop	{r4, pc}
6000ef26:	bf00      	nop
6000ef28:	6001e131 	.word	0x6001e131
6000ef2c:	6001e72e 	.word	0x6001e72e
6000ef30:	6001e13e 	.word	0x6001e13e
6000ef34:	400fc068 	.word	0x400fc068

6000ef38 <ADC_Init>:
 *
 * param base ADC peripheral base address.
 * param config Pointer to "adc_config_t" structure.
 */
void ADC_Init(ADC_Type *base, const adc_config_t *config)
{
6000ef38:	b538      	push	{r3, r4, r5, lr}
6000ef3a:	4605      	mov	r5, r0
    assert(NULL != config);
6000ef3c:	460c      	mov	r4, r1
6000ef3e:	b929      	cbnz	r1, 6000ef4c <ADC_Init+0x14>
6000ef40:	4b23      	ldr	r3, [pc, #140]	; (6000efd0 <ADC_Init+0x98>)
6000ef42:	2142      	movs	r1, #66	; 0x42
6000ef44:	4a23      	ldr	r2, [pc, #140]	; (6000efd4 <ADC_Init+0x9c>)
6000ef46:	4824      	ldr	r0, [pc, #144]	; (6000efd8 <ADC_Init+0xa0>)
6000ef48:	f003 fefa 	bl	60012d40 <__assert_func>

    uint32_t tmp32;

#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
    /* Enable the clock. */
    CLOCK_EnableClock(s_adcClocks[ADC_GetInstance(base)]);
6000ef4c:	f7ff ffb0 	bl	6000eeb0 <ADC_GetInstance>
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
6000ef50:	4b22      	ldr	r3, [pc, #136]	; (6000efdc <ADC_Init+0xa4>)
6000ef52:	2103      	movs	r1, #3
6000ef54:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
6000ef58:	f7ff ffc6 	bl	6000eee8 <CLOCK_ControlGate>
#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
    /* ADCx_CFG */
    tmp32 = base->CFG & (ADC_CFG_AVGS_MASK | ADC_CFG_ADTRG_MASK); /* Reserve AVGS and ADTRG bits. */
6000ef5c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    tmp32 |= ADC_CFG_REFSEL(config->referenceVoltageSource) | ADC_CFG_ADSTS(config->samplePeriodMode) |
             ADC_CFG_ADICLK(config->clockSource) | ADC_CFG_ADIV(config->clockDriver) | ADC_CFG_MODE(config->resolution);
6000ef5e:	7a22      	ldrb	r2, [r4, #8]
    tmp32 = base->CFG & (ADC_CFG_AVGS_MASK | ADC_CFG_ADTRG_MASK); /* Reserve AVGS and ADTRG bits. */
6000ef60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
             ADC_CFG_ADICLK(config->clockSource) | ADC_CFG_ADIV(config->clockDriver) | ADC_CFG_MODE(config->resolution);
6000ef64:	f002 0203 	and.w	r2, r2, #3
6000ef68:	431a      	orrs	r2, r3
    tmp32 |= ADC_CFG_REFSEL(config->referenceVoltageSource) | ADC_CFG_ADSTS(config->samplePeriodMode) |
6000ef6a:	79a3      	ldrb	r3, [r4, #6]
6000ef6c:	02db      	lsls	r3, r3, #11
6000ef6e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
6000ef72:	431a      	orrs	r2, r3
6000ef74:	79e3      	ldrb	r3, [r4, #7]
6000ef76:	021b      	lsls	r3, r3, #8
6000ef78:	f403 7340 	and.w	r3, r3, #768	; 0x300
6000ef7c:	431a      	orrs	r2, r3
             ADC_CFG_ADICLK(config->clockSource) | ADC_CFG_ADIV(config->clockDriver) | ADC_CFG_MODE(config->resolution);
6000ef7e:	7a63      	ldrb	r3, [r4, #9]
6000ef80:	015b      	lsls	r3, r3, #5
6000ef82:	f003 0360 	and.w	r3, r3, #96	; 0x60
6000ef86:	431a      	orrs	r2, r3
6000ef88:	7aa3      	ldrb	r3, [r4, #10]
6000ef8a:	009b      	lsls	r3, r3, #2
6000ef8c:	f003 030c 	and.w	r3, r3, #12
    tmp32 |= ADC_CFG_REFSEL(config->referenceVoltageSource) | ADC_CFG_ADSTS(config->samplePeriodMode) |
6000ef90:	4313      	orrs	r3, r2
    if (config->enableOverWrite)
6000ef92:	7822      	ldrb	r2, [r4, #0]
6000ef94:	b10a      	cbz	r2, 6000ef9a <ADC_Init+0x62>
    {
        tmp32 |= ADC_CFG_OVWREN_MASK;
6000ef96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    }
    if (config->enableLongSample)
6000ef9a:	7922      	ldrb	r2, [r4, #4]
6000ef9c:	b10a      	cbz	r2, 6000efa2 <ADC_Init+0x6a>
    {
        tmp32 |= ADC_CFG_ADLSMP_MASK;
6000ef9e:	f043 0310 	orr.w	r3, r3, #16
    }
    if (config->enableLowPower)
6000efa2:	78e2      	ldrb	r2, [r4, #3]
6000efa4:	b10a      	cbz	r2, 6000efaa <ADC_Init+0x72>
    {
        tmp32 |= ADC_CFG_ADLPC_MASK;
6000efa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    }
    if (config->enableHighSpeed)
6000efaa:	78a2      	ldrb	r2, [r4, #2]
6000efac:	b10a      	cbz	r2, 6000efb2 <ADC_Init+0x7a>
    {
        tmp32 |= ADC_CFG_ADHSC_MASK;
6000efae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    }
    base->CFG = tmp32;
6000efb2:	646b      	str	r3, [r5, #68]	; 0x44

    /* ADCx_GC  */
    tmp32 = base->GC & ~(ADC_GC_ADCO_MASK | ADC_GC_ADACKEN_MASK);
6000efb4:	6cab      	ldr	r3, [r5, #72]	; 0x48
    if (config->enableContinuousConversion)
6000efb6:	7862      	ldrb	r2, [r4, #1]
    tmp32 = base->GC & ~(ADC_GC_ADCO_MASK | ADC_GC_ADACKEN_MASK);
6000efb8:	f023 0341 	bic.w	r3, r3, #65	; 0x41
    if (config->enableContinuousConversion)
6000efbc:	b10a      	cbz	r2, 6000efc2 <ADC_Init+0x8a>
    {
        tmp32 |= ADC_GC_ADCO_MASK;
6000efbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    }
    if (config->enableAsynchronousClockOutput)
6000efc2:	7962      	ldrb	r2, [r4, #5]
6000efc4:	b10a      	cbz	r2, 6000efca <ADC_Init+0x92>
    {
        tmp32 |= ADC_GC_ADACKEN_MASK;
6000efc6:	f043 0301 	orr.w	r3, r3, #1
    }
    base->GC = tmp32;
6000efca:	64ab      	str	r3, [r5, #72]	; 0x48
}
6000efcc:	bd38      	pop	{r3, r4, r5, pc}
6000efce:	bf00      	nop
6000efd0:	6001e3b0 	.word	0x6001e3b0
6000efd4:	6001e750 	.word	0x6001e750
6000efd8:	6001e675 	.word	0x6001e675
6000efdc:	6001c0f8 	.word	0x6001c0f8

6000efe0 <ADC_GetDefaultConfig>:
 * endcode
 * param base   ADC peripheral base address.
 * param config Pointer to the configuration structure.
 */
void ADC_GetDefaultConfig(adc_config_t *config)
{
6000efe0:	b508      	push	{r3, lr}
    assert(NULL != config);
6000efe2:	b928      	cbnz	r0, 6000eff0 <ADC_GetDefaultConfig+0x10>
6000efe4:	4b0a      	ldr	r3, [pc, #40]	; (6000f010 <ADC_GetDefaultConfig+0x30>)
6000efe6:	2190      	movs	r1, #144	; 0x90
6000efe8:	4a0a      	ldr	r2, [pc, #40]	; (6000f014 <ADC_GetDefaultConfig+0x34>)
6000efea:	480b      	ldr	r0, [pc, #44]	; (6000f018 <ADC_GetDefaultConfig+0x38>)
6000efec:	f003 fea8 	bl	60012d40 <__assert_func>

    /* Initializes the configure structure to zero. */
    (void)memset(config, 0, sizeof(*config));

    config->enableAsynchronousClockOutput = true;
6000eff0:	2301      	movs	r3, #1
    config->enableHighSpeed               = false;
    config->enableLowPower                = false;
    config->enableLongSample              = false;
    config->referenceVoltageSource        = kADC_ReferenceVoltageSourceAlt0;
    config->samplePeriodMode              = kADC_SamplePeriod2or12Clocks;
    config->clockSource                   = kADC_ClockSourceAD;
6000eff2:	2203      	movs	r2, #3
    config->enableAsynchronousClockOutput = true;
6000eff4:	7143      	strb	r3, [r0, #5]
    config->enableOverWrite               = false;
6000eff6:	2300      	movs	r3, #0
    config->clockSource                   = kADC_ClockSourceAD;
6000eff8:	7202      	strb	r2, [r0, #8]
    config->enableOverWrite               = false;
6000effa:	7003      	strb	r3, [r0, #0]
    config->enableContinuousConversion    = false;
6000effc:	7043      	strb	r3, [r0, #1]
    config->enableHighSpeed               = false;
6000effe:	7083      	strb	r3, [r0, #2]
    config->enableLowPower                = false;
6000f000:	70c3      	strb	r3, [r0, #3]
    config->enableLongSample              = false;
6000f002:	7103      	strb	r3, [r0, #4]
    config->referenceVoltageSource        = kADC_ReferenceVoltageSourceAlt0;
6000f004:	7183      	strb	r3, [r0, #6]
    config->samplePeriodMode              = kADC_SamplePeriod2or12Clocks;
6000f006:	71c3      	strb	r3, [r0, #7]
    config->clockDriver                   = kADC_ClockDriver1;
6000f008:	7243      	strb	r3, [r0, #9]
    config->resolution                    = kADC_Resolution12Bit;
6000f00a:	2302      	movs	r3, #2
6000f00c:	7283      	strb	r3, [r0, #10]
}
6000f00e:	bd08      	pop	{r3, pc}
6000f010:	6001e3b0 	.word	0x6001e3b0
6000f014:	6001e719 	.word	0x6001e719
6000f018:	6001e675 	.word	0x6001e675

6000f01c <ADC_SetChannelConfig>:
 * param base          ADC peripheral base address.
 * param channelGroup  Channel group index.
 * param config        Pointer to the "adc_channel_config_t" structure for the conversion channel.
 */
void ADC_SetChannelConfig(ADC_Type *base, uint32_t channelGroup, const adc_channel_config_t *config)
{
6000f01c:	b508      	push	{r3, lr}
    assert(NULL != config);
6000f01e:	b92a      	cbnz	r2, 6000f02c <ADC_SetChannelConfig+0x10>
6000f020:	4b0a      	ldr	r3, [pc, #40]	; (6000f04c <ADC_SetChannelConfig+0x30>)
6000f022:	21bf      	movs	r1, #191	; 0xbf
6000f024:	4a0a      	ldr	r2, [pc, #40]	; (6000f050 <ADC_SetChannelConfig+0x34>)
    assert(channelGroup < (uint32_t)FSL_FEATURE_ADC_CONVERSION_CONTROL_COUNT);
6000f026:	480b      	ldr	r0, [pc, #44]	; (6000f054 <ADC_SetChannelConfig+0x38>)
6000f028:	f003 fe8a 	bl	60012d40 <__assert_func>
6000f02c:	2907      	cmp	r1, #7
6000f02e:	d903      	bls.n	6000f038 <ADC_SetChannelConfig+0x1c>
6000f030:	4b09      	ldr	r3, [pc, #36]	; (6000f058 <ADC_SetChannelConfig+0x3c>)
6000f032:	21c0      	movs	r1, #192	; 0xc0
6000f034:	4a06      	ldr	r2, [pc, #24]	; (6000f050 <ADC_SetChannelConfig+0x34>)
6000f036:	e7f6      	b.n	6000f026 <ADC_SetChannelConfig+0xa>

    uint32_t tmp32;

    tmp32 = ADC_HC_ADCH(config->channelNumber);
6000f038:	6813      	ldr	r3, [r2, #0]
    if (config->enableInterruptOnConversionCompleted)
6000f03a:	7912      	ldrb	r2, [r2, #4]
    tmp32 = ADC_HC_ADCH(config->channelNumber);
6000f03c:	f003 031f 	and.w	r3, r3, #31
    if (config->enableInterruptOnConversionCompleted)
6000f040:	b10a      	cbz	r2, 6000f046 <ADC_SetChannelConfig+0x2a>
    {
        tmp32 |= ADC_HC_AIEN_MASK;
6000f042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    }
    base->HC[channelGroup] = tmp32;
6000f046:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
6000f04a:	bd08      	pop	{r3, pc}
6000f04c:	6001e3b0 	.word	0x6001e3b0
6000f050:	6001e704 	.word	0x6001e704
6000f054:	6001e675 	.word	0x6001e675
6000f058:	6001e6c2 	.word	0x6001e6c2

6000f05c <DCACHE_CleanByRange>:
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
6000f05c:	2900      	cmp	r1, #0
6000f05e:	dd10      	ble.n	6000f082 <DCACHE_CleanByRange+0x26>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
6000f060:	f000 031f 	and.w	r3, r0, #31
6000f064:	440b      	add	r3, r1
  __ASM volatile ("dsb 0xF":::"memory");
6000f066:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
6000f06a:	4906      	ldr	r1, [pc, #24]	; (6000f084 <DCACHE_CleanByRange+0x28>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
6000f06c:	4403      	add	r3, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
6000f06e:	f8c1 0268 	str.w	r0, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
6000f072:	3020      	adds	r0, #32
      } while ( op_size > 0 );
6000f074:	1a1a      	subs	r2, r3, r0
6000f076:	2a00      	cmp	r2, #0
6000f078:	dcf9      	bgt.n	6000f06e <DCACHE_CleanByRange+0x12>
6000f07a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000f07e:	f3bf 8f6f 	isb	sy
#if defined(FSL_FEATURE_SOC_L2CACHEC_COUNT) && FSL_FEATURE_SOC_L2CACHEC_COUNT
#if defined(FSL_SDK_DISBLE_L2CACHE_PRESENT) && !FSL_SDK_DISBLE_L2CACHE_PRESENT
    L2CACHE_CleanByRange(address, size_byte);
#endif /* !FSL_SDK_DISBLE_L2CACHE_PRESENT */
#endif /* FSL_FEATURE_SOC_L2CACHEC_COUNT */
}
6000f082:	4770      	bx	lr
6000f084:	e000ed00 	.word	0xe000ed00

6000f088 <USB_EhciPhyGetBase>:
#include "fsl_device_registers.h"

#include "usb_phy.h"

void *USB_EhciPhyGetBase(uint8_t controllerId)
{
6000f088:	b530      	push	{r4, r5, lr}
    void *usbPhyBase = NULL;
#if ((defined FSL_FEATURE_SOC_USBPHY_COUNT) && (FSL_FEATURE_SOC_USBPHY_COUNT > 0U))
    uint32_t instance;
    uint32_t newinstance        = 0;
    uint32_t usbphy_base_temp[] = USBPHY_BASE_ADDRS;
6000f08a:	4b1a      	ldr	r3, [pc, #104]	; (6000f0f4 <USB_EhciPhyGetBase+0x6c>)
{
6000f08c:	b087      	sub	sp, #28
6000f08e:	4605      	mov	r5, r0
    uint32_t usbphy_base_temp[] = USBPHY_BASE_ADDRS;
6000f090:	466c      	mov	r4, sp
    uint32_t usbphy_base[]      = USBPHY_BASE_ADDRS;
    uint32_t *temp;
    if (controllerId < (uint8_t)kUSB_ControllerEhci0)
6000f092:	2d01      	cmp	r5, #1
    uint32_t usbphy_base_temp[] = USBPHY_BASE_ADDRS;
6000f094:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    uint32_t usbphy_base[]      = USBPHY_BASE_ADDRS;
6000f098:	ab06      	add	r3, sp, #24
    uint32_t usbphy_base_temp[] = USBPHY_BASE_ADDRS;
6000f09a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t usbphy_base[]      = USBPHY_BASE_ADDRS;
6000f09e:	e903 0007 	stmdb	r3, {r0, r1, r2}
    if (controllerId < (uint8_t)kUSB_ControllerEhci0)
6000f0a2:	d802      	bhi.n	6000f0aa <USB_EhciPhyGetBase+0x22>
    {
        return NULL;
6000f0a4:	2000      	movs	r0, #0
    }
    temp       = (uint32_t *)usbphy_base[controllerId];
    usbPhyBase = (void *)temp;
#endif
    return usbPhyBase;
}
6000f0a6:	b007      	add	sp, #28
6000f0a8:	bd30      	pop	{r4, r5, pc}
    if ((controllerId == (uint8_t)kUSB_ControllerEhci0) || (controllerId == (uint8_t)kUSB_ControllerEhci1))
6000f0aa:	1eab      	subs	r3, r5, #2
6000f0ac:	b2db      	uxtb	r3, r3
6000f0ae:	2b01      	cmp	r3, #1
6000f0b0:	d909      	bls.n	6000f0c6 <USB_EhciPhyGetBase+0x3e>
    else if ((controllerId == (uint8_t)kUSB_ControllerLpcIp3511Hs0) ||
6000f0b2:	1fab      	subs	r3, r5, #6
6000f0b4:	b2db      	uxtb	r3, r3
6000f0b6:	2b01      	cmp	r3, #1
6000f0b8:	d905      	bls.n	6000f0c6 <USB_EhciPhyGetBase+0x3e>
    else if ((controllerId == (uint8_t)kUSB_ControllerIp3516Hs0) || (controllerId == (uint8_t)kUSB_ControllerIp3516Hs1))
6000f0ba:	f1a5 030a 	sub.w	r3, r5, #10
6000f0be:	b2db      	uxtb	r3, r3
6000f0c0:	2b01      	cmp	r3, #1
6000f0c2:	bf88      	it	hi
6000f0c4:	462b      	movhi	r3, r5
    uint32_t newinstance        = 0;
6000f0c6:	2200      	movs	r2, #0
    for (instance = 0; instance < (sizeof(usbphy_base_temp) / sizeof(usbphy_base_temp[0])); instance++)
6000f0c8:	4611      	mov	r1, r2
        if (0U != usbphy_base_temp[instance])
6000f0ca:	f854 0b04 	ldr.w	r0, [r4], #4
6000f0ce:	b128      	cbz	r0, 6000f0dc <USB_EhciPhyGetBase+0x54>
            usbphy_base[newinstance++] = usbphy_base_temp[instance];
6000f0d0:	ad06      	add	r5, sp, #24
6000f0d2:	eb05 0582 	add.w	r5, r5, r2, lsl #2
6000f0d6:	3201      	adds	r2, #1
6000f0d8:	f845 0c0c 	str.w	r0, [r5, #-12]
    for (instance = 0; instance < (sizeof(usbphy_base_temp) / sizeof(usbphy_base_temp[0])); instance++)
6000f0dc:	3101      	adds	r1, #1
6000f0de:	2903      	cmp	r1, #3
6000f0e0:	d1f3      	bne.n	6000f0ca <USB_EhciPhyGetBase+0x42>
    if (controllerId > newinstance)
6000f0e2:	4293      	cmp	r3, r2
6000f0e4:	d8de      	bhi.n	6000f0a4 <USB_EhciPhyGetBase+0x1c>
    temp       = (uint32_t *)usbphy_base[controllerId];
6000f0e6:	aa06      	add	r2, sp, #24
6000f0e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
6000f0ec:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    return usbPhyBase;
6000f0f0:	e7d9      	b.n	6000f0a6 <USB_EhciPhyGetBase+0x1e>
6000f0f2:	bf00      	nop
6000f0f4:	6001a438 	.word	0x6001a438

6000f0f8 <USB_DeviceEhciTransfer>:
 */
static usb_status_t USB_DeviceEhciTransfer(usb_device_ehci_state_struct_t *ehciState,
                                           uint8_t endpointAddress,
                                           uint8_t *buffer,
                                           uint32_t length)
{
6000f0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    usb_device_ehci_dtd_struct_t *dtd;
    usb_device_ehci_dtd_struct_t *dtdHard;
    uint32_t index = (((uint32_t)endpointAddress & USB_ENDPOINT_NUMBER_MASK) << 1U) |
6000f0fc:	004d      	lsls	r5, r1, #1
{
6000f0fe:	b085      	sub	sp, #20
    uint8_t waitingSafelyAccess = 1U;
    uint32_t primeTimesCount    = 0U;
    void *temp;
    OSA_SR_ALLOC();

    if (NULL == ehciState)
6000f100:	4604      	mov	r4, r0
    uint32_t index = (((uint32_t)endpointAddress & USB_ENDPOINT_NUMBER_MASK) << 1U) |
6000f102:	f005 051e 	and.w	r5, r5, #30
{
6000f106:	9203      	str	r2, [sp, #12]
                     (((uint32_t)endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
6000f108:	09ca      	lsrs	r2, r1, #7
    uint32_t index = (((uint32_t)endpointAddress & USB_ENDPOINT_NUMBER_MASK) << 1U) |
6000f10a:	ea45 15d1 	orr.w	r5, r5, r1, lsr #7
                     (((uint32_t)endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
6000f10e:	9200      	str	r2, [sp, #0]
    if (NULL == ehciState)
6000f110:	2800      	cmp	r0, #0
6000f112:	f000 80f9 	beq.w	6000f308 <USB_DeviceEhciTransfer+0x210>
    {
        return kStatus_USB_InvalidHandle;
    }

    if (0U == ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.isOpened)
6000f116:	6882      	ldr	r2, [r0, #8]
6000f118:	ea4f 1c85 	mov.w	ip, r5, lsl #6
6000f11c:	eb02 1285 	add.w	r2, r2, r5, lsl #6
6000f120:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
6000f124:	f012 0201 	ands.w	r2, r2, #1
6000f128:	9201      	str	r2, [sp, #4]
6000f12a:	d002      	beq.n	6000f132 <USB_DeviceEhciTransfer+0x3a>
    {
        return kStatus_USB_Error;
    }
    /* Return error when ehci is doing reset */
    if (0U != ehciState->isResetting)
6000f12c:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
6000f130:	b118      	cbz	r0, 6000f13a <USB_DeviceEhciTransfer+0x42>
        return kStatus_USB_Error;
6000f132:	2001      	movs	r0, #1
        }
    }

    OSA_EXIT_CRITICAL();
    return kStatus_USB_Success;
}
6000f134:	b005      	add	sp, #20
6000f136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t dtdRequestCount    = (length + USB_DEVICE_ECHI_DTD_TOTAL_BYTES - 1U) / USB_DEVICE_ECHI_DTD_TOTAL_BYTES;
6000f13a:	f503 527f 	add.w	r2, r3, #16320	; 0x3fc0
6000f13e:	323f      	adds	r2, #63	; 0x3f
    if (0U == dtdRequestCount)
6000f140:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    uint32_t dtdRequestCount    = (length + USB_DEVICE_ECHI_DTD_TOTAL_BYTES - 1U) / USB_DEVICE_ECHI_DTD_TOTAL_BYTES;
6000f144:	bf2c      	ite	cs
6000f146:	0b92      	lsrcs	r2, r2, #14
        dtdRequestCount = 1U;
6000f148:	2201      	movcc	r2, #1
	__asm__ volatile(
6000f14a:	f04f 0610 	mov.w	r6, #16
6000f14e:	f3ef 8e11 	mrs	lr, BASEPRI
6000f152:	f386 8812 	msr	BASEPRI_MAX, r6
6000f156:	f3bf 8f6f 	isb	sy
    if (dtdRequestCount > (uint32_t)ehciState->dtdCount)
6000f15a:	f894 6094 	ldrb.w	r6, [r4, #148]	; 0x94
6000f15e:	4296      	cmp	r6, r2
6000f160:	d205      	bcs.n	6000f16e <USB_DeviceEhciTransfer+0x76>
	__asm__ volatile(
6000f162:	f38e 8811 	msr	BASEPRI, lr
6000f166:	f3bf 8f6f 	isb	sy
        return kStatus_USB_Busy;
6000f16a:	2002      	movs	r0, #2
6000f16c:	e7e2      	b.n	6000f134 <USB_DeviceEhciTransfer+0x3c>
    uint8_t qhIdle              = 0U;
6000f16e:	f04f 0800 	mov.w	r8, #0
6000f172:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    uint32_t currentIndex       = 0U;
6000f176:	46c1      	mov	r9, r8
        dtd = ehciState->dtdFree;
6000f178:	6922      	ldr	r2, [r4, #16]
        if (length > USB_DEVICE_ECHI_DTD_TOTAL_BYTES)
6000f17a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
6000f17e:	9302      	str	r3, [sp, #8]
6000f180:	461e      	mov	r6, r3
        ehciState->dtdFree = (usb_device_ehci_dtd_struct_t *)dtd->nextDtdPointer;
6000f182:	6817      	ldr	r7, [r2, #0]
        if (length > USB_DEVICE_ECHI_DTD_TOTAL_BYTES)
6000f184:	bf28      	it	cs
6000f186:	f44f 4680 	movcs.w	r6, #16384	; 0x4000
        if (0U == currentIndex)
6000f18a:	f1b9 0f00 	cmp.w	r9, #0
6000f18e:	bf08      	it	eq
6000f190:	4693      	moveq	fp, r2
        ehciState->dtdFree = (usb_device_ehci_dtd_struct_t *)dtd->nextDtdPointer;
6000f192:	6127      	str	r7, [r4, #16]
        if (0U == length)
6000f194:	1b9b      	subs	r3, r3, r6
        ehciState->dtdCount--;
6000f196:	f894 7094 	ldrb.w	r7, [r4, #148]	; 0x94
6000f19a:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
6000f19e:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
        dtd->nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000f1a2:	f04f 0701 	mov.w	r7, #1
6000f1a6:	6017      	str	r7, [r2, #0]
        dtd->dtdTokenUnion.dtdToken = 0U;
6000f1a8:	f04f 0700 	mov.w	r7, #0
6000f1ac:	6057      	str	r7, [r2, #4]
        dtd->bufferPointerPage[0]   = (uint32_t)(buffer + currentIndex);
6000f1ae:	9f03      	ldr	r7, [sp, #12]
6000f1b0:	444f      	add	r7, r9
6000f1b2:	6097      	str	r7, [r2, #8]
            (dtd->bufferPointerPage[0] + USB_DEVICE_ECHI_DTD_PAGE_BLOCK) & USB_DEVICE_ECHI_DTD_PAGE_MASK;
6000f1b4:	6897      	ldr	r7, [r2, #8]
6000f1b6:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
6000f1ba:	f427 677f 	bic.w	r7, r7, #4080	; 0xff0
6000f1be:	f027 070f 	bic.w	r7, r7, #15
        dtd->bufferPointerPage[1] =
6000f1c2:	60d7      	str	r7, [r2, #12]
        dtd->bufferPointerPage[2] = dtd->bufferPointerPage[1] + USB_DEVICE_ECHI_DTD_PAGE_BLOCK;
6000f1c4:	68d7      	ldr	r7, [r2, #12]
6000f1c6:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
6000f1ca:	6117      	str	r7, [r2, #16]
        dtd->bufferPointerPage[3] = dtd->bufferPointerPage[2] + USB_DEVICE_ECHI_DTD_PAGE_BLOCK;
6000f1cc:	6917      	ldr	r7, [r2, #16]
6000f1ce:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
6000f1d2:	6157      	str	r7, [r2, #20]
        dtd->bufferPointerPage[4] = dtd->bufferPointerPage[3] + USB_DEVICE_ECHI_DTD_PAGE_BLOCK;
6000f1d4:	6957      	ldr	r7, [r2, #20]
6000f1d6:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
6000f1da:	6197      	str	r7, [r2, #24]
        dtd->dtdTokenUnion.dtdTokenBitmap.totalBytes = sendLength;
6000f1dc:	6857      	ldr	r7, [r2, #4]
6000f1de:	f366 471e 	bfi	r7, r6, #16, #15
6000f1e2:	6057      	str	r7, [r2, #4]
        dtd->reservedUnion.originalBufferInfo.originalBufferLength = sendLength;
6000f1e4:	69d7      	ldr	r7, [r2, #28]
            dtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_OFFSET_MASK;
6000f1e6:	f8d2 a008 	ldr.w	sl, [r2, #8]
        dtd->reservedUnion.originalBufferInfo.originalBufferLength = sendLength;
6000f1ea:	f366 371e 	bfi	r7, r6, #12, #19
        dtd->reservedUnion.originalBufferInfo.originalBufferOffest =
6000f1ee:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
        dtd->reservedUnion.originalBufferInfo.originalBufferLength = sendLength;
6000f1f2:	61d7      	str	r7, [r2, #28]
        dtd->reservedUnion.originalBufferInfo.originalBufferOffest =
6000f1f4:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
6000f1f8:	f427 677f 	bic.w	r7, r7, #4080	; 0xff0
6000f1fc:	f027 070f 	bic.w	r7, r7, #15
6000f200:	ea47 070a 	orr.w	r7, r7, sl
6000f204:	61d7      	str	r7, [r2, #28]
        if (0U == length)
6000f206:	d103      	bne.n	6000f210 <USB_DeviceEhciTransfer+0x118>
            dtd->dtdTokenUnion.dtdTokenBitmap.ioc = 1U;
6000f208:	6857      	ldr	r7, [r2, #4]
6000f20a:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
6000f20e:	6057      	str	r7, [r2, #4]
        dtd->dtdTokenUnion.dtdTokenBitmap.status = USB_DEVICE_ECHI_DTD_STATUS_ACTIVE;
6000f210:	6857      	ldr	r7, [r2, #4]
6000f212:	f04f 0a80 	mov.w	sl, #128	; 0x80
        currentIndex += sendLength;
6000f216:	44b1      	add	r9, r6
        dtd->dtdTokenUnion.dtdTokenBitmap.status = USB_DEVICE_ECHI_DTD_STATUS_ACTIVE;
6000f218:	f36a 0707 	bfi	r7, sl, #0, #8
6000f21c:	6057      	str	r7, [r2, #4]
        if (NULL != (ehciState->dtdTail[index]))
6000f21e:	6d6f      	ldr	r7, [r5, #84]	; 0x54
6000f220:	2f00      	cmp	r7, #0
6000f222:	d036      	beq.n	6000f292 <USB_DeviceEhciTransfer+0x19a>
            ehciState->dtdTail[index]->nextDtdPointer = (uint32_t)dtd;
6000f224:	603a      	str	r2, [r7, #0]
            ehciState->dtdTail[index]                 = dtd;
6000f226:	656a      	str	r2, [r5, #84]	; 0x54
    } while (0U != length);
6000f228:	2b00      	cmp	r3, #0
6000f22a:	d1a5      	bne.n	6000f178 <USB_DeviceEhciTransfer+0x80>
    if ((USB_CONTROL_ENDPOINT == (endpointAddress & USB_ENDPOINT_NUMBER_MASK)) &&
6000f22c:	f011 020f 	ands.w	r2, r1, #15
6000f230:	d11c      	bne.n	6000f26c <USB_DeviceEhciTransfer+0x174>
6000f232:	9d00      	ldr	r5, [sp, #0]
6000f234:	b1d5      	cbz	r5, 6000f26c <USB_DeviceEhciTransfer+0x174>
        temp                            = (void *)&ehciState->qh[setupindex].setupBufferBack[0];
6000f236:	68a5      	ldr	r5, [r4, #8]
        if (1U == ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.zlt)
6000f238:	eb05 070c 	add.w	r7, r5, ip
6000f23c:	f897 7038 	ldrb.w	r7, [r7, #56]	; 0x38
6000f240:	07bf      	lsls	r7, r7, #30
6000f242:	d513      	bpl.n	6000f26c <USB_DeviceEhciTransfer+0x174>
            if ((0U != sendLength) && (sendLength < deviceSetup->wLength) &&
6000f244:	9f02      	ldr	r7, [sp, #8]
6000f246:	b18f      	cbz	r7, 6000f26c <USB_DeviceEhciTransfer+0x174>
6000f248:	8eef      	ldrh	r7, [r5, #54]	; 0x36
6000f24a:	42b7      	cmp	r7, r6
6000f24c:	d90e      	bls.n	6000f26c <USB_DeviceEhciTransfer+0x174>
                                   .capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.maxPacketSize)))
6000f24e:	f855 700c 	ldr.w	r7, [r5, ip]
6000f252:	f3c7 470a 	ubfx	r7, r7, #16, #11
                 (sendLength % ehciState->qh[index]
6000f256:	fbb6 f9f7 	udiv	r9, r6, r7
6000f25a:	fb07 6619 	mls	r6, r7, r9, r6
            if ((0U != sendLength) && (sendLength < deviceSetup->wLength) &&
6000f25e:	b92e      	cbnz	r6, 6000f26c <USB_DeviceEhciTransfer+0x174>
                ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt = 0U;
6000f260:	f855 600c 	ldr.w	r6, [r5, ip]
6000f264:	f363 765d 	bfi	r6, r3, #29, #1
6000f268:	f845 600c 	str.w	r6, [r5, ip]
                                ((endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
6000f26c:	08c9      	lsrs	r1, r1, #3
    uint32_t primeBit = 1UL << ((endpointAddress & USB_ENDPOINT_NUMBER_MASK) +
6000f26e:	2301      	movs	r3, #1
                                ((endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
6000f270:	f001 0110 	and.w	r1, r1, #16
    uint32_t primeBit = 1UL << ((endpointAddress & USB_ENDPOINT_NUMBER_MASK) +
6000f274:	4311      	orrs	r1, r2
6000f276:	408b      	lsls	r3, r1
    if (0U == qhIdle)
6000f278:	f1b8 0f00 	cmp.w	r8, #0
6000f27c:	d123      	bne.n	6000f2c6 <USB_DeviceEhciTransfer+0x1ce>
        if (0U != (ehciState->registerBase->EPPRIME & primeBit))
6000f27e:	6862      	ldr	r2, [r4, #4]
6000f280:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
6000f284:	421a      	tst	r2, r3
6000f286:	d008      	beq.n	6000f29a <USB_DeviceEhciTransfer+0x1a2>
6000f288:	f38e 8811 	msr	BASEPRI, lr
6000f28c:	f3bf 8f6f 	isb	sy
    return kStatus_USB_Success;
6000f290:	e750      	b.n	6000f134 <USB_DeviceEhciTransfer+0x3c>
            qhIdle                    = 1U;
6000f292:	f8dd 8004 	ldr.w	r8, [sp, #4]
            ehciState->dtdHard[index] = dtd;
6000f296:	616a      	str	r2, [r5, #20]
            qhIdle                    = 1U;
6000f298:	e7c5      	b.n	6000f226 <USB_DeviceEhciTransfer+0x12e>
            ehciState->registerBase->USBCMD |= USBHS_USBCMD_ATDTW_MASK;
6000f29a:	6861      	ldr	r1, [r4, #4]
6000f29c:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
6000f2a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
6000f2a4:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
            epStatus = ehciState->registerBase->EPSR;
6000f2a8:	6862      	ldr	r2, [r4, #4]
6000f2aa:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
            if (0U != (ehciState->registerBase->USBCMD & USBHS_USBCMD_ATDTW_MASK))
6000f2ae:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
6000f2b2:	0449      	lsls	r1, r1, #17
6000f2b4:	d5f1      	bpl.n	6000f29a <USB_DeviceEhciTransfer+0x1a2>
        ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_ATDTW_MASK;
6000f2b6:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
    if ((0U != qhIdle) || (0U == (epStatus & primeBit)))
6000f2ba:	422b      	tst	r3, r5
        ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_ATDTW_MASK;
6000f2bc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
6000f2c0:	f8c2 1140 	str.w	r1, [r2, #320]	; 0x140
    if ((0U != qhIdle) || (0U == (epStatus & primeBit)))
6000f2c4:	d1e0      	bne.n	6000f288 <USB_DeviceEhciTransfer+0x190>
        ehciState->qh[index].nextDtdPointer         = (uint32_t)dtdHard;
6000f2c6:	68a2      	ldr	r2, [r4, #8]
        ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
6000f2c8:	2100      	movs	r1, #0
        ehciState->qh[index].nextDtdPointer         = (uint32_t)dtdHard;
6000f2ca:	4462      	add	r2, ip
6000f2cc:	f8c2 b008 	str.w	fp, [r2, #8]
        ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
6000f2d0:	68a2      	ldr	r2, [r4, #8]
6000f2d2:	4462      	add	r2, ip
6000f2d4:	60d1      	str	r1, [r2, #12]
  __ASM volatile ("dsb 0xF":::"memory");
6000f2d6:	f3bf 8f4f 	dsb	sy
        while (0U == (ehciState->registerBase->EPSR & primeBit))
6000f2da:	490c      	ldr	r1, [pc, #48]	; (6000f30c <USB_DeviceEhciTransfer+0x214>)
        ehciState->registerBase->EPPRIME = primeBit;
6000f2dc:	6862      	ldr	r2, [r4, #4]
6000f2de:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
        while (0U == (ehciState->registerBase->EPSR & primeBit))
6000f2e2:	6862      	ldr	r2, [r4, #4]
6000f2e4:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
6000f2e8:	421d      	tst	r5, r3
6000f2ea:	d1cd      	bne.n	6000f288 <USB_DeviceEhciTransfer+0x190>
            if (primeTimesCount == USB_DEVICE_MAX_TRANSFER_PRIME_TIMES)
6000f2ec:	3901      	subs	r1, #1
6000f2ee:	d104      	bne.n	6000f2fa <USB_DeviceEhciTransfer+0x202>
6000f2f0:	f38e 8811 	msr	BASEPRI, lr
6000f2f4:	f3bf 8f6f 	isb	sy
                return kStatus_USB_Error;
6000f2f8:	e71b      	b.n	6000f132 <USB_DeviceEhciTransfer+0x3a>
            if (0U != (ehciState->registerBase->EPCOMPLETE & primeBit))
6000f2fa:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
6000f2fe:	421d      	tst	r5, r3
6000f300:	d1c2      	bne.n	6000f288 <USB_DeviceEhciTransfer+0x190>
                ehciState->registerBase->EPPRIME = primeBit;
6000f302:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
6000f306:	e7ec      	b.n	6000f2e2 <USB_DeviceEhciTransfer+0x1ea>
        return kStatus_USB_InvalidHandle;
6000f308:	2003      	movs	r0, #3
6000f30a:	e713      	b.n	6000f134 <USB_DeviceEhciTransfer+0x3c>
6000f30c:	00989680 	.word	0x00989680

6000f310 <USB_DeviceEhciCancelControlPipe>:
{
6000f310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t index = ((uint32_t)endpoint << 1U) + (uint32_t)direction;
6000f314:	eb02 0941 	add.w	r9, r2, r1, lsl #1
    message.buffer = NULL;
6000f318:	2600      	movs	r6, #0
            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
6000f31a:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
{
6000f31e:	4605      	mov	r5, r0
6000f320:	eb00 0889 	add.w	r8, r0, r9, lsl #2
            message.buffer         = (uint8_t *)((bufferAddress & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000f324:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 6000f3e0 <USB_DeviceEhciCancelControlPipe+0xd0>
            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000f328:	ea4f 1989 	mov.w	r9, r9, lsl #6
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000f32c:	f8d8 4014 	ldr.w	r4, [r8, #20]
            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
6000f330:	b2cf      	uxtb	r7, r1
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000f332:	f024 041f 	bic.w	r4, r4, #31
    message.length = 0U;
6000f336:	e9cd 6601 	strd	r6, r6, [sp, #4]
    while (NULL != currentDtd)
6000f33a:	b914      	cbnz	r4, 6000f342 <USB_DeviceEhciCancelControlPipe+0x32>
}
6000f33c:	b004      	add	sp, #16
6000f33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (NULL == message.buffer)
6000f342:	9b01      	ldr	r3, [sp, #4]
6000f344:	b93b      	cbnz	r3, 6000f356 <USB_DeviceEhciCancelControlPipe+0x46>
            uint32_t bufferAddress = currentDtd->bufferPointerPage[0];
6000f346:	68a3      	ldr	r3, [r4, #8]
                                         (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
6000f348:	8ba2      	ldrh	r2, [r4, #28]
            message.buffer         = (uint8_t *)((bufferAddress & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000f34a:	ea03 030a 	and.w	r3, r3, sl
                                         (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
6000f34e:	f3c2 020b 	ubfx	r2, r2, #0, #12
            message.buffer         = (uint8_t *)((bufferAddress & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000f352:	4313      	orrs	r3, r2
6000f354:	9301      	str	r3, [sp, #4]
        if (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE))
6000f356:	6863      	ldr	r3, [r4, #4]
6000f358:	061a      	lsls	r2, r3, #24
6000f35a:	d439      	bmi.n	6000f3d0 <USB_DeviceEhciCancelControlPipe+0xc0>
                               currentDtd->dtdTokenUnion.dtdTokenBitmap.totalBytes);
6000f35c:	6862      	ldr	r2, [r4, #4]
            message.length += (currentDtd->reservedUnion.originalBufferInfo.originalBufferLength -
6000f35e:	69e3      	ldr	r3, [r4, #28]
                               currentDtd->dtdTokenUnion.dtdTokenBitmap.totalBytes);
6000f360:	f3c2 420e 	ubfx	r2, r2, #16, #15
            message.length += (currentDtd->reservedUnion.originalBufferInfo.originalBufferLength -
6000f364:	f3c3 3312 	ubfx	r3, r3, #12, #19
6000f368:	1a9b      	subs	r3, r3, r2
6000f36a:	9a02      	ldr	r2, [sp, #8]
6000f36c:	4413      	add	r3, r2
        if (ehciState->dtdHard[index] == ehciState->dtdTail[index])
6000f36e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
6000f372:	9302      	str	r3, [sp, #8]
6000f374:	f8d8 3014 	ldr.w	r3, [r8, #20]
6000f378:	4293      	cmp	r3, r2
6000f37a:	d12c      	bne.n	6000f3d6 <USB_DeviceEhciCancelControlPipe+0xc6>
            ehciState->dtdHard[index]                   = NULL;
6000f37c:	f8c8 6014 	str.w	r6, [r8, #20]
            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000f380:	2201      	movs	r2, #1
            ehciState->dtdTail[index]                   = NULL;
6000f382:	f8c8 6054 	str.w	r6, [r8, #84]	; 0x54
            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000f386:	68ab      	ldr	r3, [r5, #8]
6000f388:	444b      	add	r3, r9
6000f38a:	609a      	str	r2, [r3, #8]
            ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
6000f38c:	68ab      	ldr	r3, [r5, #8]
6000f38e:	444b      	add	r3, r9
6000f390:	60de      	str	r6, [r3, #12]
        if ((0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc) ||
6000f392:	6863      	ldr	r3, [r4, #4]
6000f394:	041b      	lsls	r3, r3, #16
6000f396:	d403      	bmi.n	6000f3a0 <USB_DeviceEhciCancelControlPipe+0x90>
6000f398:	f8d8 3014 	ldr.w	r3, [r8, #20]
6000f39c:	2b1f      	cmp	r3, #31
6000f39e:	d809      	bhi.n	6000f3b4 <USB_DeviceEhciCancelControlPipe+0xa4>
            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6000f3a0:	a901      	add	r1, sp, #4
6000f3a2:	6828      	ldr	r0, [r5, #0]
            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
6000f3a4:	f88d 700c 	strb.w	r7, [sp, #12]
            message.isSetup = 0U;
6000f3a8:	f88d 600d 	strb.w	r6, [sp, #13]
            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6000f3ac:	f7fc ffa6 	bl	6000c2fc <USB_DeviceNotificationTrigger>
            message.length = 0U;
6000f3b0:	e9cd 6601 	strd	r6, r6, [sp, #4]
        currentDtd->dtdTokenUnion.dtdToken = 0U;
6000f3b4:	6066      	str	r6, [r4, #4]
        currentDtd->nextDtdPointer = (uint32_t)ehciState->dtdFree;
6000f3b6:	692b      	ldr	r3, [r5, #16]
6000f3b8:	6023      	str	r3, [r4, #0]
        ehciState->dtdCount++;
6000f3ba:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
        ehciState->dtdFree         = currentDtd;
6000f3be:	612c      	str	r4, [r5, #16]
        ehciState->dtdCount++;
6000f3c0:	3301      	adds	r3, #1
6000f3c2:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
            (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000f3c6:	f8d8 4014 	ldr.w	r4, [r8, #20]
6000f3ca:	f024 041f 	bic.w	r4, r4, #31
6000f3ce:	e7b4      	b.n	6000f33a <USB_DeviceEhciCancelControlPipe+0x2a>
            message.length = USB_CANCELLED_TRANSFER_LENGTH;
6000f3d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000f3d4:	e7cb      	b.n	6000f36e <USB_DeviceEhciCancelControlPipe+0x5e>
            ehciState->dtdHard[index] = (usb_device_ehci_dtd_struct_t *)ehciState->dtdHard[index]->nextDtdPointer;
6000f3d6:	681b      	ldr	r3, [r3, #0]
6000f3d8:	f8c8 3014 	str.w	r3, [r8, #20]
6000f3dc:	e7d9      	b.n	6000f392 <USB_DeviceEhciCancelControlPipe+0x82>
6000f3de:	bf00      	nop
6000f3e0:	fffff000 	.word	0xfffff000

6000f3e4 <USB_DeviceEhciInit>:
usb_status_t USB_DeviceEhciInit(uint8_t controllerId,
                                usb_device_handle handle,
                                usb_device_controller_handle *ehciHandle)
{
    usb_device_ehci_state_struct_t *ehciState = NULL;
    uint32_t ehci_base[]                      = USBHS_BASE_ADDRS;
6000f3e4:	4b25      	ldr	r3, [pc, #148]	; (6000f47c <USB_DeviceEhciInit+0x98>)
{
6000f3e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t ehci_base[]                      = USBHS_BASE_ADDRS;
6000f3e8:	9300      	str	r3, [sp, #0]
6000f3ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
{
6000f3ee:	4616      	mov	r6, r2
    uint32_t ehci_base[]                      = USBHS_BASE_ADDRS;
6000f3f0:	9301      	str	r3, [sp, #4]
    uint8_t index;
    usb_phydcd_config_struct_t phyDcdParamConfig;
    usb_phydcd_status_t phyDcdError = kStatus_phydcd_Success;
#endif

    if ((controllerId < (uint8_t)kUSB_ControllerEhci0) ||
6000f3f2:	1e83      	subs	r3, r0, #2
6000f3f4:	b2da      	uxtb	r2, r3
6000f3f6:	2a01      	cmp	r2, #1
6000f3f8:	d935      	bls.n	6000f466 <USB_DeviceEhciInit+0x82>
        ((uint32_t)((uint32_t)controllerId - (uint32_t)kUSB_ControllerEhci0) >= (sizeof(ehci_base) / sizeof(uint32_t))))
    {
        return kStatus_USB_ControllerNotFound;
6000f3fa:	2506      	movs	r5, #6
6000f3fc:	e038      	b.n	6000f470 <USB_DeviceEhciInit+0x8c>
            g_UsbDeviceEhciStateStatus[instance] = 1U;
6000f3fe:	2401      	movs	r4, #1
6000f400:	7014      	strb	r4, [r2, #0]
    ehciState = USB_EhciGetValidEhciState(&intanceIndex);
    if (NULL == ehciState)
    {
        return kStatus_USB_InvalidHandle;
    }
    ehciState->dtd = s_UsbDeviceEhciDtd[intanceIndex];
6000f402:	4c1f      	ldr	r4, [pc, #124]	; (6000f480 <USB_DeviceEhciInit+0x9c>)
6000f404:	4a1f      	ldr	r2, [pc, #124]	; (6000f484 <USB_DeviceEhciInit+0xa0>)
    temp           = (void *)&qh_buffer[intanceIndex * 2048U];
    ehciState->qh  = (usb_device_ehci_qh_struct_t *)temp;

    ehciState->controllerId = controllerId;
6000f406:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
    ehciState->dtd = s_UsbDeviceEhciDtd[intanceIndex];
6000f40a:	60e2      	str	r2, [r4, #12]
    ehciState->qh  = (usb_device_ehci_qh_struct_t *)temp;
6000f40c:	4a1e      	ldr	r2, [pc, #120]	; (6000f488 <USB_DeviceEhciInit+0xa4>)
6000f40e:	60a2      	str	r2, [r4, #8]

    ehciState->registerBase = (USBHS_Type *)ehci_base[controllerId - (uint8_t)kUSB_ControllerEhci0];
6000f410:	aa02      	add	r2, sp, #8
6000f412:	eb02 0383 	add.w	r3, r2, r3, lsl #2
6000f416:	f853 3c08 	ldr.w	r3, [r3, #-8]
        (USBNC_Type *)USB_EhciGetBase(controllerId, &usbnc_base[0], sizeof(usbnc_base) / sizeof(uint32_t));
#endif

#endif
    /* Reset the controller. */
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_RST_MASK;
6000f41a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ehciState->registerBase = (USBHS_Type *)ehci_base[controllerId - (uint8_t)kUSB_ControllerEhci0];
6000f41e:	6063      	str	r3, [r4, #4]
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_RST_MASK;
6000f420:	f042 0202 	orr.w	r2, r2, #2
6000f424:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    while (0U != (ehciState->registerBase->USBCMD & USBHS_USBCMD_RST_MASK))
6000f428:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
6000f42c:	0792      	lsls	r2, r2, #30
6000f42e:	d4fb      	bmi.n	6000f428 <USB_DeviceEhciInit+0x44>
    {
    }

    /* Get the HW's endpoint count */
    ehciState->endpointCount =
        (uint8_t)((ehciState->registerBase->DCCPARAMS & USBHS_DCCPARAMS_DEN_MASK) >> USBHS_DCCPARAMS_DEN_SHIFT);
6000f430:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
6000f434:	f002 001f 	and.w	r0, r2, #31

    if (ehciState->endpointCount < USB_DEVICE_CONFIG_ENDPOINTS)
6000f438:	f012 0f18 	tst.w	r2, #24
    ehciState->endpointCount =
6000f43c:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    if (ehciState->endpointCount < USB_DEVICE_CONFIG_ENDPOINTS)
6000f440:	d019      	beq.n	6000f476 <USB_DeviceEhciInit+0x92>
        return kStatus_USB_Error;
    }
    ehciState->deviceHandle = (usb_device_struct_t *)handle;

    /* Clear the controller mode field and set to device mode. */
    ehciState->registerBase->USBMODE &= ~USBHS_USBMODE_CM_MASK;
6000f442:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
    ehciState->registerBase->USBMODE |= USBHS_USBMODE_CM(0x02U);

    /* Set the EHCI to default status. */
    USB_DeviceEhciSetDefaultState(ehciState);
6000f446:	480e      	ldr	r0, [pc, #56]	; (6000f480 <USB_DeviceEhciInit+0x9c>)
    ehciState->registerBase->USBMODE &= ~USBHS_USBMODE_CM_MASK;
6000f448:	f022 0203 	bic.w	r2, r2, #3
    ehciState->deviceHandle = (usb_device_struct_t *)handle;
6000f44c:	6021      	str	r1, [r4, #0]
    ehciState->registerBase->USBMODE &= ~USBHS_USBMODE_CM_MASK;
6000f44e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    ehciState->registerBase->USBMODE |= USBHS_USBMODE_CM(0x02U);
6000f452:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
6000f456:	f042 0202 	orr.w	r2, r2, #2
6000f45a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    USB_DeviceEhciSetDefaultState(ehciState);
6000f45e:	f009 fe61 	bl	60019124 <USB_DeviceEhciSetDefaultState>
    *ehciHandle = (usb_device_controller_handle)ehciState;
6000f462:	6034      	str	r4, [r6, #0]
        (void)USB_PHYDCD_Control(ehciState->dcdHandle, kUSB_DevicePHYDcdRun, NULL);
#endif
    }
#endif

    return kStatus_USB_Success;
6000f464:	e004      	b.n	6000f470 <USB_DeviceEhciInit+0x8c>
        if (0U == g_UsbDeviceEhciStateStatus[instance])
6000f466:	4a09      	ldr	r2, [pc, #36]	; (6000f48c <USB_DeviceEhciInit+0xa8>)
6000f468:	7815      	ldrb	r5, [r2, #0]
6000f46a:	2d00      	cmp	r5, #0
6000f46c:	d0c7      	beq.n	6000f3fe <USB_DeviceEhciInit+0x1a>
        return kStatus_USB_InvalidHandle;
6000f46e:	2503      	movs	r5, #3
}
6000f470:	4628      	mov	r0, r5
6000f472:	b002      	add	sp, #8
6000f474:	bd70      	pop	{r4, r5, r6, pc}
        return kStatus_USB_Error;
6000f476:	2501      	movs	r5, #1
6000f478:	e7fa      	b.n	6000f470 <USB_DeviceEhciInit+0x8c>
6000f47a:	bf00      	nop
6000f47c:	402e0000 	.word	0x402e0000
6000f480:	20204cf0 	.word	0x20204cf0
6000f484:	20201000 	.word	0x20201000
6000f488:	20201800 	.word	0x20201800
6000f48c:	20204e45 	.word	0x20204e45

6000f490 <USB_DeviceEhciDeinit>:
 */
usb_status_t USB_DeviceEhciDeinit(usb_device_controller_handle ehciHandle)
{
    usb_device_ehci_state_struct_t *ehciState = (usb_device_ehci_state_struct_t *)ehciHandle;

    if (NULL == ehciHandle)
6000f490:	b908      	cbnz	r0, 6000f496 <USB_DeviceEhciDeinit+0x6>
    {
        return kStatus_USB_InvalidHandle;
6000f492:	2003      	movs	r0, #3
    (void)USB_PHYDCD_Deinit(ehciState->dcdHandle);
#endif
#endif

    return kStatus_USB_Success;
}
6000f494:	4770      	bx	lr
        if (ehciState == &g_UsbDeviceEhciState[instance])
6000f496:	4b0d      	ldr	r3, [pc, #52]	; (6000f4cc <USB_DeviceEhciDeinit+0x3c>)
6000f498:	4298      	cmp	r0, r3
6000f49a:	d102      	bne.n	6000f4a2 <USB_DeviceEhciDeinit+0x12>
6000f49c:	4b0c      	ldr	r3, [pc, #48]	; (6000f4d0 <USB_DeviceEhciDeinit+0x40>)
6000f49e:	2200      	movs	r2, #0
6000f4a0:	701a      	strb	r2, [r3, #0]
    ehciState->registerBase->USBINTR = 0U;
6000f4a2:	6842      	ldr	r2, [r0, #4]
6000f4a4:	2300      	movs	r3, #0
6000f4a6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_RS_MASK;
6000f4aa:	6841      	ldr	r1, [r0, #4]
6000f4ac:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
6000f4b0:	f022 0201 	bic.w	r2, r2, #1
6000f4b4:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_RST_MASK;
6000f4b8:	6841      	ldr	r1, [r0, #4]
    return kStatus_USB_Success;
6000f4ba:	4618      	mov	r0, r3
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_RST_MASK;
6000f4bc:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
6000f4c0:	f042 0202 	orr.w	r2, r2, #2
6000f4c4:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    return kStatus_USB_Success;
6000f4c8:	4770      	bx	lr
6000f4ca:	bf00      	nop
6000f4cc:	20204cf0 	.word	0x20204cf0
6000f4d0:	20204e45 	.word	0x20204e45

6000f4d4 <USB_DeviceEhciCancel>:
 * @param ep               Endpoint address, bit7 is the direction of endpoint, 1U - IN, 0U - OUT.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceEhciCancel(usb_device_controller_handle ehciHandle, uint8_t ep)
{
6000f4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    usb_device_ehci_state_struct_t *ehciState = (usb_device_ehci_state_struct_t *)ehciHandle;
    usb_device_callback_message_struct_t message;
    usb_device_ehci_dtd_struct_t *currentDtd;
    uint32_t primeBit =
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
6000f4d8:	08cb      	lsrs	r3, r1, #3
6000f4da:	f001 020f 	and.w	r2, r1, #15
    uint32_t primeBit =
6000f4de:	2501      	movs	r5, #1
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
6000f4e0:	f003 0310 	and.w	r3, r3, #16
6000f4e4:	4313      	orrs	r3, r2
    uint8_t index =
        ((ep & USB_ENDPOINT_NUMBER_MASK) << 1U) | ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x07U);
6000f4e6:	004a      	lsls	r2, r1, #1
6000f4e8:	f002 021e 	and.w	r2, r2, #30
    uint32_t primeBit =
6000f4ec:	409d      	lsls	r5, r3
    uint8_t index =
6000f4ee:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
    uint8_t flag = 0;

    OSA_SR_ALLOC();

    if (NULL == ehciHandle)
6000f4f2:	2800      	cmp	r0, #0
6000f4f4:	f000 8091 	beq.w	6000f61a <USB_DeviceEhciCancel+0x146>
	__asm__ volatile(
6000f4f8:	f04f 0310 	mov.w	r3, #16
6000f4fc:	f3ef 8c11 	mrs	ip, BASEPRI
6000f500:	f383 8812 	msr	BASEPRI_MAX, r3
6000f504:	f3bf 8f6f 	isb	sy
    }

    OSA_ENTER_CRITICAL();

    message.buffer = NULL;
    message.length = USB_CANCELLED_TRANSFER_LENGTH;
6000f508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000f50c:	2400      	movs	r4, #0
6000f50e:	b217      	sxth	r7, r2
6000f510:	eb00 0282 	add.w	r2, r0, r2, lsl #2
6000f514:	e9cd 4301 	strd	r4, r3, [sp, #4]

    /* Get the first dtd */
    currentDtd =
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000f518:	6953      	ldr	r3, [r2, #20]
     * be fixed.
     */
    while (NULL != currentDtd)
    {
        currentDtd->reservedUnion.originalBufferInfo.dtdInvalid = 1U;
        currentDtd = (usb_device_ehci_dtd_struct_t *)(currentDtd->nextDtdPointer & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000f51a:	f023 031f 	bic.w	r3, r3, #31
    while (NULL != currentDtd)
6000f51e:	b9cb      	cbnz	r3, 6000f554 <USB_DeviceEhciCancel+0x80>
    }

    /* Get the first dtd */
    currentDtd =
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000f520:	6954      	ldr	r4, [r2, #20]
            }

            /* Remove the dtd from the dtd in-used queue. */
            if (ehciState->dtdHard[index] == ehciState->dtdTail[index])
            {
                ehciState->dtdHard[index] = NULL;
6000f522:	469a      	mov	sl, r3
                message.buffer = (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000f524:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 6000f620 <USB_DeviceEhciCancel+0x14c>
        (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000f528:	f024 041f 	bic.w	r4, r4, #31
    while (NULL != currentDtd)
6000f52c:	b9c4      	cbnz	r4, 6000f560 <USB_DeviceEhciCancel+0x8c>
            (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
    }
    if (NULL == currentDtd)
    {
        /* Set the QH to empty. */
        ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
6000f52e:	6882      	ldr	r2, [r0, #8]
6000f530:	2501      	movs	r5, #1
6000f532:	eb02 1287 	add.w	r2, r2, r7, lsl #6
6000f536:	6095      	str	r5, [r2, #8]
        ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
6000f538:	6882      	ldr	r2, [r0, #8]
6000f53a:	eb02 1287 	add.w	r2, r2, r7, lsl #6
6000f53e:	60d4      	str	r4, [r2, #12]
	__asm__ volatile(
6000f540:	f38c 8811 	msr	BASEPRI, ip
6000f544:	f3bf 8f6f 	isb	sy
    }
    OSA_EXIT_CRITICAL();

    if (0U != flag)
6000f548:	2b00      	cmp	r3, #0
6000f54a:	d15c      	bne.n	6000f606 <USB_DeviceEhciCancel+0x132>
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
#endif
        message.buffer = NULL;
    }

    return kStatus_USB_Success;
6000f54c:	2000      	movs	r0, #0
}
6000f54e:	b004      	add	sp, #16
6000f550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        currentDtd->reservedUnion.originalBufferInfo.dtdInvalid = 1U;
6000f554:	7fdc      	ldrb	r4, [r3, #31]
6000f556:	f044 0480 	orr.w	r4, r4, #128	; 0x80
6000f55a:	77dc      	strb	r4, [r3, #31]
        currentDtd = (usb_device_ehci_dtd_struct_t *)(currentDtd->nextDtdPointer & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000f55c:	681b      	ldr	r3, [r3, #0]
6000f55e:	e7dc      	b.n	6000f51a <USB_DeviceEhciCancel+0x46>
        if (0U == currentDtd->reservedUnion.originalBufferInfo.dtdInvalid)
6000f560:	f994 801f 	ldrsb.w	r8, [r4, #31]
6000f564:	f1b8 0f00 	cmp.w	r8, #0
6000f568:	daea      	bge.n	6000f540 <USB_DeviceEhciCancel+0x6c>
            if (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE))
6000f56a:	f8d4 8004 	ldr.w	r8, [r4, #4]
6000f56e:	f018 0f80 	tst.w	r8, #128	; 0x80
6000f572:	d013      	beq.n	6000f59c <USB_DeviceEhciCancel+0xc8>
                    ehciState->registerBase->EPFLUSH |= primeBit;
6000f574:	f8d0 9004 	ldr.w	r9, [r0, #4]
6000f578:	f8d9 81b4 	ldr.w	r8, [r9, #436]	; 0x1b4
6000f57c:	ea48 0805 	orr.w	r8, r8, r5
6000f580:	f8c9 81b4 	str.w	r8, [r9, #436]	; 0x1b4
                    while (0U != (ehciState->registerBase->EPFLUSH & primeBit))
6000f584:	f8d0 8004 	ldr.w	r8, [r0, #4]
6000f588:	f8d8 91b4 	ldr.w	r9, [r8, #436]	; 0x1b4
6000f58c:	ea19 0f05 	tst.w	r9, r5
6000f590:	d1fa      	bne.n	6000f588 <USB_DeviceEhciCancel+0xb4>
                } while (0U != (ehciState->registerBase->EPSR & primeBit));
6000f592:	f8d8 81b8 	ldr.w	r8, [r8, #440]	; 0x1b8
6000f596:	ea18 0f05 	tst.w	r8, r5
6000f59a:	e7ea      	b.n	6000f572 <USB_DeviceEhciCancel+0x9e>
            if (NULL == message.buffer)
6000f59c:	9e01      	ldr	r6, [sp, #4]
6000f59e:	b95e      	cbnz	r6, 6000f5b8 <USB_DeviceEhciCancel+0xe4>
                message.buffer = (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000f5a0:	f8d4 8008 	ldr.w	r8, [r4, #8]
                                             (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
6000f5a4:	f8b4 901c 	ldrh.w	r9, [r4, #28]
                message.buffer = (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000f5a8:	ea08 080e 	and.w	r8, r8, lr
                                             (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
6000f5ac:	f3c9 090b 	ubfx	r9, r9, #0, #12
                message.buffer = (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6000f5b0:	ea48 0809 	orr.w	r8, r8, r9
6000f5b4:	f8cd 8004 	str.w	r8, [sp, #4]
            if (ehciState->dtdHard[index] == ehciState->dtdTail[index])
6000f5b8:	f8d2 8014 	ldr.w	r8, [r2, #20]
6000f5bc:	6d56      	ldr	r6, [r2, #84]	; 0x54
6000f5be:	45b0      	cmp	r8, r6
6000f5c0:	d11a      	bne.n	6000f5f8 <USB_DeviceEhciCancel+0x124>
                ehciState->dtdHard[index] = NULL;
6000f5c2:	f8c2 a014 	str.w	sl, [r2, #20]
                ehciState->dtdTail[index] = NULL;
6000f5c6:	f8c2 a054 	str.w	sl, [r2, #84]	; 0x54
            if ((0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc) ||
6000f5ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
6000f5ce:	f418 4f00 	tst.w	r8, #32768	; 0x8000
6000f5d2:	d116      	bne.n	6000f602 <USB_DeviceEhciCancel+0x12e>
                flag = 1;
6000f5d4:	6956      	ldr	r6, [r2, #20]
6000f5d6:	2e1f      	cmp	r6, #31
6000f5d8:	bf98      	it	ls
6000f5da:	2301      	movls	r3, #1
            currentDtd->dtdTokenUnion.dtdToken = 0U;
6000f5dc:	f8c4 a004 	str.w	sl, [r4, #4]
            currentDtd->nextDtdPointer = (uint32_t)ehciState->dtdFree;
6000f5e0:	6906      	ldr	r6, [r0, #16]
6000f5e2:	6026      	str	r6, [r4, #0]
            ehciState->dtdFree         = currentDtd;
6000f5e4:	6104      	str	r4, [r0, #16]
            ehciState->dtdCount++;
6000f5e6:	f890 4094 	ldrb.w	r4, [r0, #148]	; 0x94
6000f5ea:	3401      	adds	r4, #1
6000f5ec:	f880 4094 	strb.w	r4, [r0, #148]	; 0x94
            (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] & USB_DEVICE_ECHI_DTD_POINTER_MASK);
6000f5f0:	6954      	ldr	r4, [r2, #20]
6000f5f2:	f024 041f 	bic.w	r4, r4, #31
6000f5f6:	e799      	b.n	6000f52c <USB_DeviceEhciCancel+0x58>
                ehciState->dtdHard[index] = (usb_device_ehci_dtd_struct_t *)ehciState->dtdHard[index]->nextDtdPointer;
6000f5f8:	f8d8 8000 	ldr.w	r8, [r8]
6000f5fc:	f8c2 8014 	str.w	r8, [r2, #20]
6000f600:	e7e3      	b.n	6000f5ca <USB_DeviceEhciCancel+0xf6>
                flag = 1;
6000f602:	2301      	movs	r3, #1
6000f604:	e7ea      	b.n	6000f5dc <USB_DeviceEhciCancel+0x108>
        message.isSetup = 0U;
6000f606:	2300      	movs	r3, #0
        message.code    = ep;
6000f608:	f88d 100c 	strb.w	r1, [sp, #12]
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6000f60c:	6800      	ldr	r0, [r0, #0]
6000f60e:	a901      	add	r1, sp, #4
        message.isSetup = 0U;
6000f610:	f88d 300d 	strb.w	r3, [sp, #13]
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6000f614:	f7fc fe72 	bl	6000c2fc <USB_DeviceNotificationTrigger>
        message.buffer = NULL;
6000f618:	e798      	b.n	6000f54c <USB_DeviceEhciCancel+0x78>
        return kStatus_USB_InvalidHandle;
6000f61a:	2003      	movs	r0, #3
6000f61c:	e797      	b.n	6000f54e <USB_DeviceEhciCancel+0x7a>
6000f61e:	bf00      	nop
6000f620:	fffff000 	.word	0xfffff000

6000f624 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
6000f624:	4b01      	ldr	r3, [pc, #4]	; (6000f62c <z_impl_z_errno+0x8>)
6000f626:	6898      	ldr	r0, [r3, #8]
}
6000f628:	3060      	adds	r0, #96	; 0x60
6000f62a:	4770      	bx	lr
6000f62c:	20204d8c 	.word	0x20204d8c

6000f630 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
6000f630:	b510      	push	{r4, lr}
6000f632:	4604      	mov	r4, r0
6000f634:	b086      	sub	sp, #24
	z_impl_log_panic();
6000f636:	f7f9 f8df 	bl	600087f8 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
6000f63a:	4b07      	ldr	r3, [pc, #28]	; (6000f658 <k_sys_fatal_error_handler+0x28>)
6000f63c:	9305      	str	r3, [sp, #20]
6000f63e:	2302      	movs	r3, #2
6000f640:	9304      	str	r3, [sp, #16]
	z_impl_z_log_msg_static_create(source, desc, package, data);
6000f642:	4806      	ldr	r0, [pc, #24]	; (6000f65c <k_sys_fatal_error_handler+0x2c>)
6000f644:	2300      	movs	r3, #0
6000f646:	aa04      	add	r2, sp, #16
6000f648:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000f64c:	f7f9 fa3a 	bl	60008ac4 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
6000f650:	4620      	mov	r0, r4
6000f652:	f00a f919 	bl	60019888 <arch_system_halt>
6000f656:	bf00      	nop
6000f658:	6001e759 	.word	0x6001e759
6000f65c:	6001a3e4 	.word	0x6001a3e4

6000f660 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
6000f660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000f664:	b086      	sub	sp, #24
6000f666:	4604      	mov	r4, r0
6000f668:	460e      	mov	r6, r1
6000f66a:	af00      	add	r7, sp, #0
	__asm__ volatile(
6000f66c:	f04f 0310 	mov.w	r3, #16
6000f670:	f3ef 8811 	mrs	r8, BASEPRI
6000f674:	f383 8812 	msr	BASEPRI_MAX, r3
6000f678:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
6000f67c:	f002 fb36 	bl	60011cec <z_impl_z_current_get>
6000f680:	2c04      	cmp	r4, #4
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
6000f682:	46e9      	mov	r9, sp
6000f684:	b08a      	sub	sp, #40	; 0x28
6000f686:	bf98      	it	ls
6000f688:	4b33      	ldrls	r3, [pc, #204]	; (6000f758 <z_fatal_error+0xf8>)
6000f68a:	4605      	mov	r5, r0
6000f68c:	bf88      	it	hi
6000f68e:	4b33      	ldrhi	r3, [pc, #204]	; (6000f75c <z_fatal_error+0xfc>)
6000f690:	466a      	mov	r2, sp
6000f692:	bf98      	it	ls
6000f694:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
6000f698:	61d3      	str	r3, [r2, #28]
6000f69a:	f240 3301 	movw	r3, #769	; 0x301
6000f69e:	4930      	ldr	r1, [pc, #192]	; (6000f760 <z_fatal_error+0x100>)
6000f6a0:	f04f 0a00 	mov.w	sl, #0
6000f6a4:	8493      	strh	r3, [r2, #36]	; 0x24
6000f6a6:	4b2f      	ldr	r3, [pc, #188]	; (6000f764 <z_fatal_error+0x104>)
6000f6a8:	f8c2 a020 	str.w	sl, [r2, #32]
6000f6ac:	e9c2 1405 	strd	r1, r4, [r2, #20]
6000f6b0:	f842 3f10 	str.w	r3, [r2, #16]!
6000f6b4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
6000f6b8:	4653      	mov	r3, sl
6000f6ba:	482b      	ldr	r0, [pc, #172]	; (6000f768 <z_fatal_error+0x108>)
6000f6bc:	f7f9 fa02 	bl	60008ac4 <z_impl_z_log_msg_static_create>
6000f6c0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
6000f6c2:	b17e      	cbz	r6, 6000f6e4 <z_fatal_error+0x84>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
6000f6c4:	69f3      	ldr	r3, [r6, #28]
6000f6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
6000f6ca:	b15b      	cbz	r3, 6000f6e4 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
6000f6cc:	4b27      	ldr	r3, [pc, #156]	; (6000f76c <z_fatal_error+0x10c>)
6000f6ce:	617b      	str	r3, [r7, #20]
6000f6d0:	2302      	movs	r3, #2
6000f6d2:	613b      	str	r3, [r7, #16]
6000f6d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000f6d8:	4653      	mov	r3, sl
6000f6da:	f107 0210 	add.w	r2, r7, #16
6000f6de:	4822      	ldr	r0, [pc, #136]	; (6000f768 <z_fatal_error+0x108>)
6000f6e0:	f7f9 f9f0 	bl	60008ac4 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
6000f6e4:	b12d      	cbz	r5, 6000f6f2 <z_fatal_error+0x92>
6000f6e6:	4628      	mov	r0, r5
6000f6e8:	f00a f8f6 	bl	600198d8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
6000f6ec:	b108      	cbz	r0, 6000f6f2 <z_fatal_error+0x92>
6000f6ee:	7803      	ldrb	r3, [r0, #0]
6000f6f0:	b903      	cbnz	r3, 6000f6f4 <z_fatal_error+0x94>
		thread_name = "unknown";
6000f6f2:	481f      	ldr	r0, [pc, #124]	; (6000f770 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
6000f6f4:	46e9      	mov	r9, sp
6000f6f6:	b08a      	sub	sp, #40	; 0x28
6000f6f8:	466a      	mov	r2, sp
6000f6fa:	4b1e      	ldr	r3, [pc, #120]	; (6000f774 <z_fatal_error+0x114>)
6000f6fc:	61d0      	str	r0, [r2, #28]
6000f6fe:	e9c2 3505 	strd	r3, r5, [r2, #20]
6000f702:	f240 3301 	movw	r3, #769	; 0x301
6000f706:	8413      	strh	r3, [r2, #32]
6000f708:	4b1b      	ldr	r3, [pc, #108]	; (6000f778 <z_fatal_error+0x118>)
6000f70a:	f842 3f10 	str.w	r3, [r2, #16]!
6000f70e:	2300      	movs	r3, #0
6000f710:	f44f 5111 	mov.w	r1, #9280	; 0x2440
6000f714:	4814      	ldr	r0, [pc, #80]	; (6000f768 <z_fatal_error+0x108>)
6000f716:	f7f9 f9d5 	bl	60008ac4 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
6000f71a:	4631      	mov	r1, r6
6000f71c:	4620      	mov	r0, r4
6000f71e:	46cd      	mov	sp, r9
6000f720:	f7ff ff86 	bl	6000f630 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
6000f724:	2c04      	cmp	r4, #4
6000f726:	d10c      	bne.n	6000f742 <z_fatal_error+0xe2>
6000f728:	4914      	ldr	r1, [pc, #80]	; (6000f77c <z_fatal_error+0x11c>)
6000f72a:	2393      	movs	r3, #147	; 0x93
6000f72c:	4a14      	ldr	r2, [pc, #80]	; (6000f780 <z_fatal_error+0x120>)
6000f72e:	4815      	ldr	r0, [pc, #84]	; (6000f784 <z_fatal_error+0x124>)
6000f730:	f008 fbe7 	bl	60017f02 <assert_print>
6000f734:	4814      	ldr	r0, [pc, #80]	; (6000f788 <z_fatal_error+0x128>)
6000f736:	f008 fbe4 	bl	60017f02 <assert_print>
6000f73a:	2193      	movs	r1, #147	; 0x93
6000f73c:	4810      	ldr	r0, [pc, #64]	; (6000f780 <z_fatal_error+0x120>)
6000f73e:	f008 fbd9 	bl	60017ef4 <assert_post_action>
	__asm__ volatile(
6000f742:	f388 8811 	msr	BASEPRI, r8
6000f746:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
6000f74a:	4628      	mov	r0, r5
6000f74c:	f7fb fd64 	bl	6000b218 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
6000f750:	3718      	adds	r7, #24
6000f752:	46bd      	mov	sp, r7
6000f754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000f758:	6001bdc8 	.word	0x6001bdc8
6000f75c:	6001e768 	.word	0x6001e768
6000f760:	6001e77e 	.word	0x6001e77e
6000f764:	01000005 	.word	0x01000005
6000f768:	6001a3e4 	.word	0x6001a3e4
6000f76c:	6001e7a6 	.word	0x6001e7a6
6000f770:	6001e776 	.word	0x6001e776
6000f774:	6001e7c7 	.word	0x6001e7c7
6000f778:	01000004 	.word	0x01000004
6000f77c:	6001e801 	.word	0x6001e801
6000f780:	6001e7df 	.word	0x6001e7df
6000f784:	6001c3d7 	.word	0x6001c3d7
6000f788:	6001e81e 	.word	0x6001e81e

6000f78c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
6000f78c:	4b0f      	ldr	r3, [pc, #60]	; (6000f7cc <z_sys_init_run_level+0x40>)
{
6000f78e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
6000f790:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
6000f794:	3001      	adds	r0, #1
6000f796:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
6000f79a:	42a6      	cmp	r6, r4
6000f79c:	d800      	bhi.n	6000f7a0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
6000f79e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
6000f7a0:	e9d4 3500 	ldrd	r3, r5, [r4]
6000f7a4:	4628      	mov	r0, r5
6000f7a6:	4798      	blx	r3
		if (dev != NULL) {
6000f7a8:	b16d      	cbz	r5, 6000f7c6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
6000f7aa:	b138      	cbz	r0, 6000f7bc <z_sys_init_run_level+0x30>
				if (rc < 0) {
6000f7ac:	2800      	cmp	r0, #0
				dev->state->init_res = rc;
6000f7ae:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
6000f7b0:	bfb8      	it	lt
6000f7b2:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
6000f7b4:	28ff      	cmp	r0, #255	; 0xff
6000f7b6:	bfa8      	it	ge
6000f7b8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
6000f7ba:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
6000f7bc:	68ea      	ldr	r2, [r5, #12]
6000f7be:	7853      	ldrb	r3, [r2, #1]
6000f7c0:	f043 0301 	orr.w	r3, r3, #1
6000f7c4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
6000f7c6:	3408      	adds	r4, #8
6000f7c8:	e7e7      	b.n	6000f79a <z_sys_init_run_level+0xe>
6000f7ca:	bf00      	nop
6000f7cc:	6001bddc 	.word	0x6001bddc

6000f7d0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
6000f7d0:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
6000f7d2:	2003      	movs	r0, #3
{
6000f7d4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
6000f7d6:	4b09      	ldr	r3, [pc, #36]	; (6000f7fc <bg_thread_main+0x2c>)
6000f7d8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
6000f7da:	f7ff ffd7 	bl	6000f78c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
6000f7de:	f003 f839 	bl	60012854 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
6000f7e2:	2004      	movs	r0, #4
6000f7e4:	f7ff ffd2 	bl	6000f78c <z_sys_init_run_level>

	z_init_static_threads();
6000f7e8:	f000 fa7e 	bl	6000fce8 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
6000f7ec:	f008 f86b 	bl	600178c6 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
6000f7f0:	4a03      	ldr	r2, [pc, #12]	; (6000f800 <bg_thread_main+0x30>)
6000f7f2:	7b13      	ldrb	r3, [r2, #12]
6000f7f4:	f023 0301 	bic.w	r3, r3, #1
6000f7f8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
6000f7fa:	bd08      	pop	{r3, pc}
6000f7fc:	20204e46 	.word	0x20204e46
6000f800:	20204580 	.word	0x20204580

6000f804 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
6000f804:	4806      	ldr	r0, [pc, #24]	; (6000f820 <z_bss_zero+0x1c>)
6000f806:	2100      	movs	r1, #0
6000f808:	4a06      	ldr	r2, [pc, #24]	; (6000f824 <z_bss_zero+0x20>)
{
6000f80a:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
6000f80c:	1a12      	subs	r2, r2, r0
6000f80e:	f00a f844 	bl	6001989a <z_early_memset>
		       - (uintptr_t) &__dtcm_bss_start);
6000f812:	4805      	ldr	r0, [pc, #20]	; (6000f828 <z_bss_zero+0x24>)
	z_early_memset(&__dtcm_bss_start, 0,
6000f814:	4a05      	ldr	r2, [pc, #20]	; (6000f82c <z_bss_zero+0x28>)
6000f816:	2100      	movs	r1, #0
6000f818:	1a12      	subs	r2, r2, r0
6000f81a:	f00a f83e 	bl	6001989a <z_early_memset>
}
6000f81e:	bd08      	pop	{r3, pc}
6000f820:	20203640 	.word	0x20203640
6000f824:	20204e48 	.word	0x20204e48
6000f828:	20000000 	.word	0x20000000
6000f82c:	20000000 	.word	0x20000000

6000f830 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
6000f830:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
6000f832:	2300      	movs	r3, #0
{
6000f834:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
6000f836:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
6000f838:	4e14      	ldr	r6, [pc, #80]	; (6000f88c <z_init_cpu+0x5c>)
	z_setup_new_thread(thread, stack,
6000f83a:	9301      	str	r3, [sp, #4]
{
6000f83c:	4604      	mov	r4, r0
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
6000f83e:	4d14      	ldr	r5, [pc, #80]	; (6000f890 <z_init_cpu+0x60>)
	struct k_thread *thread = &z_idle_threads[i];
6000f840:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
6000f844:	4913      	ldr	r1, [pc, #76]	; (6000f894 <z_init_cpu+0x64>)
6000f846:	e9cd 2304 	strd	r2, r3, [sp, #16]
6000f84a:	220f      	movs	r2, #15
6000f84c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
6000f850:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
6000f852:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
6000f856:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
6000f85a:	f44f 70c0 	mov.w	r0, #384	; 0x180
6000f85e:	4b0e      	ldr	r3, [pc, #56]	; (6000f898 <z_init_cpu+0x68>)
6000f860:	fb00 1104 	mla	r1, r0, r4, r1
6000f864:	4630      	mov	r0, r6
6000f866:	9500      	str	r5, [sp, #0]
6000f868:	f000 f9a0 	bl	6000fbac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
6000f86c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
6000f86e:	4a0b      	ldr	r2, [pc, #44]	; (6000f89c <z_init_cpu+0x6c>)
6000f870:	f023 0304 	bic.w	r3, r3, #4
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
6000f874:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].id = id;
6000f876:	752c      	strb	r4, [r5, #20]
6000f878:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
6000f87a:	f44f 6304 	mov.w	r3, #2112	; 0x840
6000f87e:	fb04 3303 	mla	r3, r4, r3, r3
6000f882:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
6000f884:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
6000f886:	b006      	add	sp, #24
6000f888:	bd70      	pop	{r4, r5, r6, pc}
6000f88a:	bf00      	nop
6000f88c:	20204500 	.word	0x20204500
6000f890:	20204d8c 	.word	0x20204d8c
6000f894:	20207f00 	.word	0x20207f00
6000f898:	6000fe15 	.word	0x6000fe15
6000f89c:	202076c0 	.word	0x202076c0

6000f8a0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
6000f8a0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
6000f8a2:	2000      	movs	r0, #0
{
6000f8a4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
6000f8a6:	f7ff ff71 	bl	6000f78c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
6000f8aa:	4b2c      	ldr	r3, [pc, #176]	; (6000f95c <z_cstart+0xbc>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
6000f8ac:	f383 8808 	msr	MSP, r3
6000f8b0:	4d2b      	ldr	r5, [pc, #172]	; (6000f960 <z_cstart+0xc0>)
6000f8b2:	2400      	movs	r4, #0
6000f8b4:	23f0      	movs	r3, #240	; 0xf0

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
6000f8b6:	4e2b      	ldr	r6, [pc, #172]	; (6000f964 <z_cstart+0xc4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
6000f8b8:	4f2b      	ldr	r7, [pc, #172]	; (6000f968 <z_cstart+0xc8>)
6000f8ba:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
6000f8be:	77ec      	strb	r4, [r5, #31]
6000f8c0:	762c      	strb	r4, [r5, #24]
6000f8c2:	766c      	strb	r4, [r5, #25]
6000f8c4:	76ac      	strb	r4, [r5, #26]
6000f8c6:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
6000f8ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
6000f8cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
6000f8d0:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
6000f8d2:	f7fb fc6b 	bl	6000b1ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
6000f8d6:	f7fa ff85 	bl	6000a7e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
6000f8da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6000f8de:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
6000f8e0:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
6000f8e2:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
6000f8e4:	f7fb fd9e 	bl	6000b424 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
6000f8e8:	f7fb fcac 	bl	6000b244 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
6000f8ec:	f7f8 fede 	bl	600086ac <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
6000f8f0:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
6000f8f4:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
6000f8f6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
6000f8fa:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
6000f8fe:	f002 ffa3 	bl	60012848 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
6000f902:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
6000f904:	f009 ffb4 	bl	60019870 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
6000f908:	2001      	movs	r0, #1
6000f90a:	f7ff ff3f 	bl	6000f78c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
6000f90e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
6000f910:	4d16      	ldr	r5, [pc, #88]	; (6000f96c <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
6000f912:	f7ff ff3b 	bl	6000f78c <z_sys_init_run_level>
	z_sched_init();
6000f916:	f002 f871 	bl	600119fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
6000f91a:	4b15      	ldr	r3, [pc, #84]	; (6000f970 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
6000f91c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
6000f91e:	f44f 6280 	mov.w	r2, #1024	; 0x400
6000f922:	9305      	str	r3, [sp, #20]
6000f924:	2301      	movs	r3, #1
6000f926:	4913      	ldr	r1, [pc, #76]	; (6000f974 <z_cstart+0xd4>)
6000f928:	4628      	mov	r0, r5
6000f92a:	9400      	str	r4, [sp, #0]
6000f92c:	e9cd 4303 	strd	r4, r3, [sp, #12]
6000f930:	e9cd 4401 	strd	r4, r4, [sp, #4]
6000f934:	463b      	mov	r3, r7
6000f936:	f000 f939 	bl	6000fbac <z_setup_new_thread>
6000f93a:	7b6a      	ldrb	r2, [r5, #13]
6000f93c:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
6000f93e:	4628      	mov	r0, r5
6000f940:	f022 0204 	bic.w	r2, r2, #4
6000f944:	736a      	strb	r2, [r5, #13]
6000f946:	f001 fa2d 	bl	60010da4 <z_ready_thread>
	z_init_cpu(0);
6000f94a:	4620      	mov	r0, r4
6000f94c:	f7ff ff70 	bl	6000f830 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
6000f950:	463a      	mov	r2, r7
6000f952:	4631      	mov	r1, r6
6000f954:	4628      	mov	r0, r5
6000f956:	f7fb f8a7 	bl	6000aaa8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
6000f95a:	bf00      	nop
6000f95c:	20207f00 	.word	0x20207f00
6000f960:	e000ed00 	.word	0xe000ed00
6000f964:	20204d8c 	.word	0x20204d8c
6000f968:	6000f7d1 	.word	0x6000f7d1
6000f96c:	20204580 	.word	0x20204580
6000f970:	6001e89d 	.word	0x6001e89d
6000f974:	20208080 	.word	0x20208080

6000f978 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
6000f978:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
6000f97a:	4c0d      	ldr	r4, [pc, #52]	; (6000f9b0 <statics_init+0x38>)
6000f97c:	4d0d      	ldr	r5, [pc, #52]	; (6000f9b4 <statics_init+0x3c>)
6000f97e:	42ac      	cmp	r4, r5
6000f980:	d913      	bls.n	6000f9aa <statics_init+0x32>
6000f982:	490d      	ldr	r1, [pc, #52]	; (6000f9b8 <statics_init+0x40>)
6000f984:	2318      	movs	r3, #24
6000f986:	4a0d      	ldr	r2, [pc, #52]	; (6000f9bc <statics_init+0x44>)
6000f988:	480d      	ldr	r0, [pc, #52]	; (6000f9c0 <statics_init+0x48>)
6000f98a:	f008 faba 	bl	60017f02 <assert_print>
6000f98e:	480d      	ldr	r0, [pc, #52]	; (6000f9c4 <statics_init+0x4c>)
6000f990:	f008 fab7 	bl	60017f02 <assert_print>
6000f994:	2118      	movs	r1, #24
6000f996:	4809      	ldr	r0, [pc, #36]	; (6000f9bc <statics_init+0x44>)
6000f998:	f008 faac 	bl	60017ef4 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
6000f99c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
6000f9a0:	4620      	mov	r0, r4
	STRUCT_SECTION_FOREACH(k_heap, h) {
6000f9a2:	3418      	adds	r4, #24
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
6000f9a4:	f009 ff7d 	bl	600198a2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
6000f9a8:	e7e9      	b.n	6000f97e <statics_init+0x6>
6000f9aa:	d3f7      	bcc.n	6000f99c <statics_init+0x24>
		}
	}
	return 0;
}
6000f9ac:	2000      	movs	r0, #0
6000f9ae:	bd38      	pop	{r3, r4, r5, pc}
6000f9b0:	20203438 	.word	0x20203438
6000f9b4:	20203468 	.word	0x20203468
6000f9b8:	6001e8c7 	.word	0x6001e8c7
6000f9bc:	6001e8a5 	.word	0x6001e8a5
6000f9c0:	6001c3d7 	.word	0x6001c3d7
6000f9c4:	6001c858 	.word	0x6001c858

6000f9c8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
6000f9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000f9cc:	b085      	sub	sp, #20
6000f9ce:	4680      	mov	r8, r0
6000f9d0:	4692      	mov	sl, r2
6000f9d2:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;

	k_spinlock_key_t key = k_spin_lock(&h->lock);
6000f9d4:	f108 0414 	add.w	r4, r8, #20
{
6000f9d8:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
6000f9dc:	4648      	mov	r0, r9
6000f9de:	4659      	mov	r1, fp
6000f9e0:	f009 fff8 	bl	600199d4 <sys_clock_timeout_end_calc>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
6000f9e4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
6000f9e8:	bf08      	it	eq
6000f9ea:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
6000f9ee:	4606      	mov	r6, r0
6000f9f0:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
6000f9f2:	bf04      	itt	eq
6000f9f4:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
6000f9f8:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000
	__asm__ volatile(
6000f9fc:	f04f 0310 	mov.w	r3, #16
6000fa00:	f3ef 8511 	mrs	r5, BASEPRI
6000fa04:	f383 8812 	msr	BASEPRI_MAX, r3
6000fa08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fa0c:	4620      	mov	r0, r4
6000fa0e:	f000 f9dd 	bl	6000fdcc <z_spin_lock_valid>
6000fa12:	b960      	cbnz	r0, 6000fa2e <k_heap_aligned_alloc+0x66>
6000fa14:	2394      	movs	r3, #148	; 0x94
6000fa16:	4a33      	ldr	r2, [pc, #204]	; (6000fae4 <k_heap_aligned_alloc+0x11c>)
6000fa18:	4933      	ldr	r1, [pc, #204]	; (6000fae8 <k_heap_aligned_alloc+0x120>)
6000fa1a:	4834      	ldr	r0, [pc, #208]	; (6000faec <k_heap_aligned_alloc+0x124>)
6000fa1c:	f008 fa71 	bl	60017f02 <assert_print>
6000fa20:	4621      	mov	r1, r4
6000fa22:	4833      	ldr	r0, [pc, #204]	; (6000faf0 <k_heap_aligned_alloc+0x128>)
6000fa24:	f008 fa6d 	bl	60017f02 <assert_print>
6000fa28:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fa2a:	482e      	ldr	r0, [pc, #184]	; (6000fae4 <k_heap_aligned_alloc+0x11c>)
6000fa2c:	e031      	b.n	6000fa92 <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
6000fa2e:	4620      	mov	r0, r4
6000fa30:	f000 f9e8 	bl	6000fe04 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
6000fa34:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
6000fa38:	b113      	cbz	r3, 6000fa40 <k_heap_aligned_alloc+0x78>
6000fa3a:	ea5b 0909 	orrs.w	r9, fp, r9
6000fa3e:	d11d      	bne.n	6000fa7c <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
6000fa40:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
6000fa44:	4652      	mov	r2, sl
6000fa46:	9903      	ldr	r1, [sp, #12]
6000fa48:	4640      	mov	r0, r8
6000fa4a:	f7f7 f989 	bl	60006d60 <sys_heap_aligned_alloc>
6000fa4e:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
6000fa50:	f002 fd1a 	bl	60012488 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
6000fa54:	f1b9 0f00 	cmp.w	r9, #0
6000fa58:	d01d      	beq.n	6000fa96 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fa5a:	4620      	mov	r0, r4
6000fa5c:	f000 f9c4 	bl	6000fde8 <z_spin_unlock_valid>
6000fa60:	2800      	cmp	r0, #0
6000fa62:	d137      	bne.n	6000fad4 <k_heap_aligned_alloc+0x10c>
6000fa64:	23c2      	movs	r3, #194	; 0xc2
6000fa66:	4a1f      	ldr	r2, [pc, #124]	; (6000fae4 <k_heap_aligned_alloc+0x11c>)
6000fa68:	4922      	ldr	r1, [pc, #136]	; (6000faf4 <k_heap_aligned_alloc+0x12c>)
6000fa6a:	4820      	ldr	r0, [pc, #128]	; (6000faec <k_heap_aligned_alloc+0x124>)
6000fa6c:	f008 fa49 	bl	60017f02 <assert_print>
6000fa70:	4621      	mov	r1, r4
6000fa72:	4821      	ldr	r0, [pc, #132]	; (6000faf8 <k_heap_aligned_alloc+0x130>)
6000fa74:	f008 fa45 	bl	60017f02 <assert_print>
6000fa78:	21c2      	movs	r1, #194	; 0xc2
6000fa7a:	e7d6      	b.n	6000fa2a <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
6000fa7c:	491f      	ldr	r1, [pc, #124]	; (6000fafc <k_heap_aligned_alloc+0x134>)
6000fa7e:	234c      	movs	r3, #76	; 0x4c
6000fa80:	4a1f      	ldr	r2, [pc, #124]	; (6000fb00 <k_heap_aligned_alloc+0x138>)
6000fa82:	481a      	ldr	r0, [pc, #104]	; (6000faec <k_heap_aligned_alloc+0x124>)
6000fa84:	f008 fa3d 	bl	60017f02 <assert_print>
6000fa88:	481e      	ldr	r0, [pc, #120]	; (6000fb04 <k_heap_aligned_alloc+0x13c>)
6000fa8a:	f008 fa3a 	bl	60017f02 <assert_print>
6000fa8e:	214c      	movs	r1, #76	; 0x4c
6000fa90:	481b      	ldr	r0, [pc, #108]	; (6000fb00 <k_heap_aligned_alloc+0x138>)
6000fa92:	f008 fa2f 	bl	60017ef4 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
6000fa96:	1a30      	subs	r0, r6, r0
6000fa98:	eb67 0101 	sbc.w	r1, r7, r1
6000fa9c:	2801      	cmp	r0, #1
6000fa9e:	f171 0300 	sbcs.w	r3, r1, #0
6000faa2:	dbda      	blt.n	6000fa5a <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
6000faa4:	465a      	mov	r2, fp
6000faa6:	e9cd 0100 	strd	r0, r1, [sp]
6000faaa:	4629      	mov	r1, r5
6000faac:	4620      	mov	r0, r4
6000faae:	f001 fcd5 	bl	6001145c <z_pend_curr>
6000fab2:	f04f 0310 	mov.w	r3, #16
6000fab6:	f3ef 8511 	mrs	r5, BASEPRI
6000faba:	f383 8812 	msr	BASEPRI_MAX, r3
6000fabe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fac2:	4620      	mov	r0, r4
6000fac4:	f000 f982 	bl	6000fdcc <z_spin_lock_valid>
6000fac8:	2800      	cmp	r0, #0
6000faca:	d0a3      	beq.n	6000fa14 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
6000facc:	4620      	mov	r0, r4
6000face:	f000 f999 	bl	6000fe04 <z_spin_lock_set_owner>
	return k;
6000fad2:	e7b7      	b.n	6000fa44 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
6000fad4:	f385 8811 	msr	BASEPRI, r5
6000fad8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
6000fadc:	4648      	mov	r0, r9
6000fade:	b005      	add	sp, #20
6000fae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
6000fae4:	6001c758 	.word	0x6001c758
6000fae8:	6001c785 	.word	0x6001c785
6000faec:	6001c3d7 	.word	0x6001c3d7
6000faf0:	6001c79a 	.word	0x6001c79a
6000faf4:	6001c7b2 	.word	0x6001c7b2
6000faf8:	6001c7c9 	.word	0x6001c7c9
6000fafc:	6001e8dd 	.word	0x6001e8dd
6000fb00:	6001e8a5 	.word	0x6001e8a5
6000fb04:	6001e923 	.word	0x6001e923

6000fb08 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
6000fb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000fb0a:	4605      	mov	r5, r0
6000fb0c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
6000fb0e:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
6000fb12:	f04f 0310 	mov.w	r3, #16
6000fb16:	f3ef 8711 	mrs	r7, BASEPRI
6000fb1a:	f383 8812 	msr	BASEPRI_MAX, r3
6000fb1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fb22:	4620      	mov	r0, r4
6000fb24:	f000 f952 	bl	6000fdcc <z_spin_lock_valid>
6000fb28:	b968      	cbnz	r0, 6000fb46 <k_heap_free+0x3e>
6000fb2a:	2394      	movs	r3, #148	; 0x94
6000fb2c:	4a19      	ldr	r2, [pc, #100]	; (6000fb94 <k_heap_free+0x8c>)
6000fb2e:	491a      	ldr	r1, [pc, #104]	; (6000fb98 <k_heap_free+0x90>)
6000fb30:	481a      	ldr	r0, [pc, #104]	; (6000fb9c <k_heap_free+0x94>)
6000fb32:	f008 f9e6 	bl	60017f02 <assert_print>
6000fb36:	4621      	mov	r1, r4
6000fb38:	4819      	ldr	r0, [pc, #100]	; (6000fba0 <k_heap_free+0x98>)
6000fb3a:	f008 f9e2 	bl	60017f02 <assert_print>
6000fb3e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fb40:	4814      	ldr	r0, [pc, #80]	; (6000fb94 <k_heap_free+0x8c>)
6000fb42:	f008 f9d7 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
6000fb46:	4620      	mov	r0, r4
6000fb48:	f000 f95c 	bl	6000fe04 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
6000fb4c:	4628      	mov	r0, r5
6000fb4e:	4631      	mov	r1, r6
6000fb50:	f7f7 f8b8 	bl	60006cc4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
6000fb54:	f105 000c 	add.w	r0, r5, #12
6000fb58:	f009 ff16 	bl	60019988 <z_unpend_all>
6000fb5c:	b128      	cbz	r0, 6000fb6a <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
6000fb5e:	4639      	mov	r1, r7
6000fb60:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
6000fb62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
6000fb66:	f001 b9ab 	b.w	60010ec0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000fb6a:	4620      	mov	r0, r4
6000fb6c:	f000 f93c 	bl	6000fde8 <z_spin_unlock_valid>
6000fb70:	b958      	cbnz	r0, 6000fb8a <k_heap_free+0x82>
6000fb72:	23c2      	movs	r3, #194	; 0xc2
6000fb74:	4a07      	ldr	r2, [pc, #28]	; (6000fb94 <k_heap_free+0x8c>)
6000fb76:	490b      	ldr	r1, [pc, #44]	; (6000fba4 <k_heap_free+0x9c>)
6000fb78:	4808      	ldr	r0, [pc, #32]	; (6000fb9c <k_heap_free+0x94>)
6000fb7a:	f008 f9c2 	bl	60017f02 <assert_print>
6000fb7e:	4621      	mov	r1, r4
6000fb80:	4809      	ldr	r0, [pc, #36]	; (6000fba8 <k_heap_free+0xa0>)
6000fb82:	f008 f9be 	bl	60017f02 <assert_print>
6000fb86:	21c2      	movs	r1, #194	; 0xc2
6000fb88:	e7da      	b.n	6000fb40 <k_heap_free+0x38>
	__asm__ volatile(
6000fb8a:	f387 8811 	msr	BASEPRI, r7
6000fb8e:	f3bf 8f6f 	isb	sy
}
6000fb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000fb94:	6001c758 	.word	0x6001c758
6000fb98:	6001c785 	.word	0x6001c785
6000fb9c:	6001c3d7 	.word	0x6001c3d7
6000fba0:	6001c79a 	.word	0x6001c79a
6000fba4:	6001c7b2 	.word	0x6001c7b2
6000fba8:	6001c7c9 	.word	0x6001c7c9

6000fbac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
6000fbac:	b5f0      	push	{r4, r5, r6, r7, lr}
6000fbae:	b085      	sub	sp, #20
6000fbb0:	4604      	mov	r4, r0
6000fbb2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
6000fbb4:	2d0f      	cmp	r5, #15
6000fbb6:	d12e      	bne.n	6000fc16 <z_setup_new_thread+0x6a>
6000fbb8:	4822      	ldr	r0, [pc, #136]	; (6000fc44 <z_setup_new_thread+0x98>)
6000fbba:	4283      	cmp	r3, r0
6000fbbc:	d12f      	bne.n	6000fc1e <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
6000fbbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
6000fbc2:	3207      	adds	r2, #7
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
6000fbc4:	73a5      	strb	r5, [r4, #14]
	thread_base->pended_on = NULL;
6000fbc6:	2600      	movs	r6, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
6000fbc8:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
6000fbcc:	f101 0240 	add.w	r2, r1, #64	; 0x40
	thread_base->pended_on = NULL;
6000fbd0:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
6000fbd2:	73e6      	strb	r6, [r4, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
6000fbd4:	f105 0740 	add.w	r7, r5, #64	; 0x40
	new_thread->stack_info.delta = delta;
6000fbd8:	66e6      	str	r6, [r4, #108]	; 0x6c
	stack_ptr = (char *)stack + stack_obj_size;
6000fbda:	440f      	add	r7, r1
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
6000fbdc:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	thread_base->user_options = (uint8_t)options;
6000fbe0:	980e      	ldr	r0, [sp, #56]	; 0x38
	new_thread->stack_info.size = stack_buf_size;
6000fbe2:	e9c4 2519 	strd	r2, r5, [r4, #100]	; 0x64
	thread_base->user_options = (uint8_t)options;
6000fbe6:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
6000fbe8:	2004      	movs	r0, #4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
6000fbea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->thread_state = (uint8_t)initial_state;
6000fbec:	7360      	strb	r0, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
6000fbee:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
6000fbf0:	e9c4 6606 	strd	r6, r6, [r4, #24]
6000fbf4:	9202      	str	r2, [sp, #8]
6000fbf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
6000fbf8:	9201      	str	r2, [sp, #4]
6000fbfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
6000fbfc:	9200      	str	r2, [sp, #0]
6000fbfe:	463a      	mov	r2, r7
6000fc00:	f7fa ff26 	bl	6000aa50 <arch_new_thread>
	if (!_current) {
6000fc04:	4b10      	ldr	r3, [pc, #64]	; (6000fc48 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
6000fc06:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
6000fc08:	689b      	ldr	r3, [r3, #8]
6000fc0a:	b103      	cbz	r3, 6000fc0e <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
6000fc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
6000fc0e:	4638      	mov	r0, r7
6000fc10:	6723      	str	r3, [r4, #112]	; 0x70
6000fc12:	b005      	add	sp, #20
6000fc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
6000fc16:	f105 0010 	add.w	r0, r5, #16
6000fc1a:	281e      	cmp	r0, #30
6000fc1c:	d9cf      	bls.n	6000fbbe <z_setup_new_thread+0x12>
6000fc1e:	f44f 7306 	mov.w	r3, #536	; 0x218
6000fc22:	4a0a      	ldr	r2, [pc, #40]	; (6000fc4c <z_setup_new_thread+0xa0>)
6000fc24:	490a      	ldr	r1, [pc, #40]	; (6000fc50 <z_setup_new_thread+0xa4>)
6000fc26:	480b      	ldr	r0, [pc, #44]	; (6000fc54 <z_setup_new_thread+0xa8>)
6000fc28:	f008 f96b 	bl	60017f02 <assert_print>
6000fc2c:	4629      	mov	r1, r5
6000fc2e:	480a      	ldr	r0, [pc, #40]	; (6000fc58 <z_setup_new_thread+0xac>)
6000fc30:	f06f 030f 	mvn.w	r3, #15
6000fc34:	220e      	movs	r2, #14
6000fc36:	f008 f964 	bl	60017f02 <assert_print>
6000fc3a:	f44f 7106 	mov.w	r1, #536	; 0x218
6000fc3e:	4803      	ldr	r0, [pc, #12]	; (6000fc4c <z_setup_new_thread+0xa0>)
6000fc40:	f008 f958 	bl	60017ef4 <assert_post_action>
6000fc44:	6000fe15 	.word	0x6000fe15
6000fc48:	20204d8c 	.word	0x20204d8c
6000fc4c:	6001e926 	.word	0x6001e926
6000fc50:	6001e949 	.word	0x6001e949
6000fc54:	6001c3d7 	.word	0x6001c3d7
6000fc58:	6001e9c9 	.word	0x6001e9c9

6000fc5c <z_impl_k_thread_create>:
{
6000fc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
6000fc5e:	b087      	sub	sp, #28
6000fc60:	4604      	mov	r4, r0
6000fc62:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
6000fc66:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
6000fc6a:	b175      	cbz	r5, 6000fc8a <z_impl_k_thread_create+0x2e>
6000fc6c:	4919      	ldr	r1, [pc, #100]	; (6000fcd4 <z_impl_k_thread_create+0x78>)
6000fc6e:	f240 2387 	movw	r3, #647	; 0x287
6000fc72:	4a19      	ldr	r2, [pc, #100]	; (6000fcd8 <z_impl_k_thread_create+0x7c>)
6000fc74:	4819      	ldr	r0, [pc, #100]	; (6000fcdc <z_impl_k_thread_create+0x80>)
6000fc76:	f008 f944 	bl	60017f02 <assert_print>
6000fc7a:	4819      	ldr	r0, [pc, #100]	; (6000fce0 <z_impl_k_thread_create+0x84>)
6000fc7c:	f008 f941 	bl	60017f02 <assert_print>
6000fc80:	f240 2187 	movw	r1, #647	; 0x287
6000fc84:	4814      	ldr	r0, [pc, #80]	; (6000fcd8 <z_impl_k_thread_create+0x7c>)
6000fc86:	f008 f935 	bl	60017ef4 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
6000fc8a:	9505      	str	r5, [sp, #20]
6000fc8c:	9d10      	ldr	r5, [sp, #64]	; 0x40
6000fc8e:	9504      	str	r5, [sp, #16]
6000fc90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
6000fc92:	9503      	str	r5, [sp, #12]
6000fc94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
6000fc96:	9502      	str	r5, [sp, #8]
6000fc98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
6000fc9a:	9501      	str	r5, [sp, #4]
6000fc9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
6000fc9e:	9500      	str	r5, [sp, #0]
6000fca0:	f7ff ff84 	bl	6000fbac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
6000fca4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
6000fca8:	bf08      	it	eq
6000fcaa:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
6000fcae:	d005      	beq.n	6000fcbc <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
6000fcb0:	ea56 0307 	orrs.w	r3, r6, r7
6000fcb4:	d105      	bne.n	6000fcc2 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
6000fcb6:	4620      	mov	r0, r4
6000fcb8:	f001 f944 	bl	60010f44 <z_sched_start>
}
6000fcbc:	4620      	mov	r0, r4
6000fcbe:	b007      	add	sp, #28
6000fcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
6000fcc2:	463a      	mov	r2, r7
6000fcc4:	4633      	mov	r3, r6
6000fcc6:	4907      	ldr	r1, [pc, #28]	; (6000fce4 <z_impl_k_thread_create+0x88>)
6000fcc8:	f104 0018 	add.w	r0, r4, #24
6000fccc:	f002 f9cc 	bl	60012068 <z_add_timeout>
6000fcd0:	e7f4      	b.n	6000fcbc <z_impl_k_thread_create+0x60>
6000fcd2:	bf00      	nop
6000fcd4:	6001e9fa 	.word	0x6001e9fa
6000fcd8:	6001e926 	.word	0x6001e926
6000fcdc:	6001c3d7 	.word	0x6001c3d7
6000fce0:	6001ea0c 	.word	0x6001ea0c
6000fce4:	60011815 	.word	0x60011815

6000fce8 <z_init_static_threads>:
{
6000fce8:	b5f0      	push	{r4, r5, r6, r7, lr}
6000fcea:	4c31      	ldr	r4, [pc, #196]	; (6000fdb0 <z_init_static_threads+0xc8>)
6000fcec:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
6000fcee:	4d31      	ldr	r5, [pc, #196]	; (6000fdb4 <z_init_static_threads+0xcc>)
6000fcf0:	42ac      	cmp	r4, r5
6000fcf2:	4626      	mov	r6, r4
6000fcf4:	d92a      	bls.n	6000fd4c <z_init_static_threads+0x64>
6000fcf6:	4930      	ldr	r1, [pc, #192]	; (6000fdb8 <z_init_static_threads+0xd0>)
6000fcf8:	f240 23ee 	movw	r3, #750	; 0x2ee
6000fcfc:	4a2f      	ldr	r2, [pc, #188]	; (6000fdbc <z_init_static_threads+0xd4>)
6000fcfe:	4830      	ldr	r0, [pc, #192]	; (6000fdc0 <z_init_static_threads+0xd8>)
6000fd00:	f008 f8ff 	bl	60017f02 <assert_print>
6000fd04:	482f      	ldr	r0, [pc, #188]	; (6000fdc4 <z_init_static_threads+0xdc>)
6000fd06:	f008 f8fc 	bl	60017f02 <assert_print>
6000fd0a:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
6000fd0e:	482b      	ldr	r0, [pc, #172]	; (6000fdbc <z_init_static_threads+0xd4>)
6000fd10:	f008 f8f0 	bl	60017ef4 <assert_post_action>
		z_setup_new_thread(
6000fd14:	f854 3c04 	ldr.w	r3, [r4, #-4]
6000fd18:	9305      	str	r3, [sp, #20]
6000fd1a:	f854 3c10 	ldr.w	r3, [r4, #-16]
6000fd1e:	9304      	str	r3, [sp, #16]
6000fd20:	f854 3c14 	ldr.w	r3, [r4, #-20]
6000fd24:	9303      	str	r3, [sp, #12]
6000fd26:	f854 3c18 	ldr.w	r3, [r4, #-24]
6000fd2a:	9302      	str	r3, [sp, #8]
6000fd2c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
6000fd30:	9301      	str	r3, [sp, #4]
6000fd32:	f854 3c20 	ldr.w	r3, [r4, #-32]
6000fd36:	9300      	str	r3, [sp, #0]
6000fd38:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
6000fd3c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
6000fd40:	f7ff ff34 	bl	6000fbac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
6000fd44:	f854 3c30 	ldr.w	r3, [r4, #-48]
6000fd48:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
6000fd4a:	e7d1      	b.n	6000fcf0 <z_init_static_threads+0x8>
6000fd4c:	42ae      	cmp	r6, r5
6000fd4e:	f104 0430 	add.w	r4, r4, #48	; 0x30
6000fd52:	d3df      	bcc.n	6000fd14 <z_init_static_threads+0x2c>
	_FOREACH_STATIC_THREAD(thread_data) {
6000fd54:	4c16      	ldr	r4, [pc, #88]	; (6000fdb0 <z_init_static_threads+0xc8>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
6000fd56:	260a      	movs	r6, #10
6000fd58:	4f1b      	ldr	r7, [pc, #108]	; (6000fdc8 <z_init_static_threads+0xe0>)
	k_sched_lock();
6000fd5a:	f001 f945 	bl	60010fe8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
6000fd5e:	42ac      	cmp	r4, r5
6000fd60:	d920      	bls.n	6000fda4 <z_init_static_threads+0xbc>
6000fd62:	4915      	ldr	r1, [pc, #84]	; (6000fdb8 <z_init_static_threads+0xd0>)
6000fd64:	f240 330d 	movw	r3, #781	; 0x30d
6000fd68:	4a14      	ldr	r2, [pc, #80]	; (6000fdbc <z_init_static_threads+0xd4>)
6000fd6a:	4815      	ldr	r0, [pc, #84]	; (6000fdc0 <z_init_static_threads+0xd8>)
6000fd6c:	f008 f8c9 	bl	60017f02 <assert_print>
6000fd70:	4814      	ldr	r0, [pc, #80]	; (6000fdc4 <z_init_static_threads+0xdc>)
6000fd72:	f008 f8c6 	bl	60017f02 <assert_print>
6000fd76:	f240 310d 	movw	r1, #781	; 0x30d
6000fd7a:	e7c8      	b.n	6000fd0e <z_init_static_threads+0x26>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
6000fd7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
6000fd7e:	1c53      	adds	r3, r2, #1
6000fd80:	d009      	beq.n	6000fd96 <z_init_static_threads+0xae>
					    K_MSEC(thread_data->init_delay));
6000fd82:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
6000fd86:	6820      	ldr	r0, [r4, #0]
6000fd88:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
6000fd8c:	ea52 0103 	orrs.w	r1, r2, r3
6000fd90:	d103      	bne.n	6000fd9a <z_init_static_threads+0xb2>
	z_sched_start(thread);
6000fd92:	f001 f8d7 	bl	60010f44 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
6000fd96:	3430      	adds	r4, #48	; 0x30
6000fd98:	e7e1      	b.n	6000fd5e <z_init_static_threads+0x76>
6000fd9a:	4639      	mov	r1, r7
6000fd9c:	3018      	adds	r0, #24
6000fd9e:	f002 f963 	bl	60012068 <z_add_timeout>
6000fda2:	e7f8      	b.n	6000fd96 <z_init_static_threads+0xae>
6000fda4:	d3ea      	bcc.n	6000fd7c <z_init_static_threads+0x94>
}
6000fda6:	b007      	add	sp, #28
6000fda8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
6000fdac:	f001 b988 	b.w	600110c0 <k_sched_unlock>
6000fdb0:	6001a1ec 	.word	0x6001a1ec
6000fdb4:	6001a30c 	.word	0x6001a30c
6000fdb8:	6001ea31 	.word	0x6001ea31
6000fdbc:	6001e926 	.word	0x6001e926
6000fdc0:	6001c3d7 	.word	0x6001c3d7
6000fdc4:	6001c858 	.word	0x6001c858
6000fdc8:	60011815 	.word	0x60011815

6000fdcc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
6000fdcc:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
6000fdce:	b138      	cbz	r0, 6000fde0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
6000fdd0:	4b04      	ldr	r3, [pc, #16]	; (6000fde4 <z_spin_lock_valid+0x18>)
6000fdd2:	f000 0003 	and.w	r0, r0, #3
6000fdd6:	7d1b      	ldrb	r3, [r3, #20]
6000fdd8:	1ac0      	subs	r0, r0, r3
6000fdda:	bf18      	it	ne
6000fddc:	2001      	movne	r0, #1
6000fdde:	4770      	bx	lr
			return false;
		}
	}
	return true;
6000fde0:	2001      	movs	r0, #1
}
6000fde2:	4770      	bx	lr
6000fde4:	20204d8c 	.word	0x20204d8c

6000fde8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
6000fde8:	4a05      	ldr	r2, [pc, #20]	; (6000fe00 <z_spin_unlock_valid+0x18>)
{
6000fdea:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
6000fdec:	7d11      	ldrb	r1, [r2, #20]
6000fdee:	6892      	ldr	r2, [r2, #8]
6000fdf0:	430a      	orrs	r2, r1
6000fdf2:	6801      	ldr	r1, [r0, #0]
6000fdf4:	2000      	movs	r0, #0
6000fdf6:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
6000fdf8:	bf04      	itt	eq
6000fdfa:	6018      	streq	r0, [r3, #0]
	return true;
6000fdfc:	2001      	moveq	r0, #1
}
6000fdfe:	4770      	bx	lr
6000fe00:	20204d8c 	.word	0x20204d8c

6000fe04 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
6000fe04:	4b02      	ldr	r3, [pc, #8]	; (6000fe10 <z_spin_lock_set_owner+0xc>)
6000fe06:	7d1a      	ldrb	r2, [r3, #20]
6000fe08:	689b      	ldr	r3, [r3, #8]
6000fe0a:	4313      	orrs	r3, r2
6000fe0c:	6003      	str	r3, [r0, #0]
}
6000fe0e:	4770      	bx	lr
6000fe10:	20204d8c 	.word	0x20204d8c

6000fe14 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
6000fe14:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
6000fe16:	4b0d      	ldr	r3, [pc, #52]	; (6000fe4c <idle+0x38>)
6000fe18:	689b      	ldr	r3, [r3, #8]
6000fe1a:	f993 300e 	ldrsb.w	r3, [r3, #14]
6000fe1e:	2b00      	cmp	r3, #0
6000fe20:	da09      	bge.n	6000fe36 <idle+0x22>
6000fe22:	490b      	ldr	r1, [pc, #44]	; (6000fe50 <idle+0x3c>)
6000fe24:	2327      	movs	r3, #39	; 0x27
6000fe26:	480b      	ldr	r0, [pc, #44]	; (6000fe54 <idle+0x40>)
6000fe28:	4a0b      	ldr	r2, [pc, #44]	; (6000fe58 <idle+0x44>)
6000fe2a:	f008 f86a 	bl	60017f02 <assert_print>
6000fe2e:	2127      	movs	r1, #39	; 0x27
6000fe30:	4809      	ldr	r0, [pc, #36]	; (6000fe58 <idle+0x44>)
6000fe32:	f008 f85f 	bl	60017ef4 <assert_post_action>
	__asm__ volatile(
6000fe36:	f04f 0210 	mov.w	r2, #16
6000fe3a:	f3ef 8311 	mrs	r3, BASEPRI
6000fe3e:	f382 8812 	msr	BASEPRI_MAX, r2
6000fe42:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
6000fe46:	f7fa fcd3 	bl	6000a7f0 <arch_cpu_idle>
6000fe4a:	e7f4      	b.n	6000fe36 <idle+0x22>
6000fe4c:	20204d8c 	.word	0x20204d8c
6000fe50:	6001ea7f 	.word	0x6001ea7f
6000fe54:	6001c3d7 	.word	0x6001c3d7
6000fe58:	6001ea5e 	.word	0x6001ea5e

6000fe5c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
6000fe5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
6000fe60:	4604      	mov	r4, r0
6000fe62:	4689      	mov	r9, r1
6000fe64:	4690      	mov	r8, r2
6000fe66:	461e      	mov	r6, r3
6000fe68:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
6000fe6c:	b17b      	cbz	r3, 6000fe8e <z_impl_k_msgq_put+0x32>
6000fe6e:	ea52 0306 	orrs.w	r3, r2, r6
6000fe72:	d00c      	beq.n	6000fe8e <z_impl_k_msgq_put+0x32>
6000fe74:	493e      	ldr	r1, [pc, #248]	; (6000ff70 <z_impl_k_msgq_put+0x114>)
6000fe76:	2376      	movs	r3, #118	; 0x76
6000fe78:	4a3e      	ldr	r2, [pc, #248]	; (6000ff74 <z_impl_k_msgq_put+0x118>)
6000fe7a:	483f      	ldr	r0, [pc, #252]	; (6000ff78 <z_impl_k_msgq_put+0x11c>)
6000fe7c:	f008 f841 	bl	60017f02 <assert_print>
6000fe80:	483e      	ldr	r0, [pc, #248]	; (6000ff7c <z_impl_k_msgq_put+0x120>)
6000fe82:	f008 f83e 	bl	60017f02 <assert_print>
6000fe86:	2176      	movs	r1, #118	; 0x76
6000fe88:	483a      	ldr	r0, [pc, #232]	; (6000ff74 <z_impl_k_msgq_put+0x118>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000fe8a:	f008 f833 	bl	60017ef4 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
6000fe8e:	f104 0508 	add.w	r5, r4, #8
6000fe92:	f04f 0310 	mov.w	r3, #16
6000fe96:	f3ef 8711 	mrs	r7, BASEPRI
6000fe9a:	f383 8812 	msr	BASEPRI_MAX, r3
6000fe9e:	f3bf 8f6f 	isb	sy
6000fea2:	4628      	mov	r0, r5
6000fea4:	f7ff ff92 	bl	6000fdcc <z_spin_lock_valid>
6000fea8:	b960      	cbnz	r0, 6000fec4 <z_impl_k_msgq_put+0x68>
6000feaa:	2394      	movs	r3, #148	; 0x94
6000feac:	4a34      	ldr	r2, [pc, #208]	; (6000ff80 <z_impl_k_msgq_put+0x124>)
6000feae:	4935      	ldr	r1, [pc, #212]	; (6000ff84 <z_impl_k_msgq_put+0x128>)
6000feb0:	4831      	ldr	r0, [pc, #196]	; (6000ff78 <z_impl_k_msgq_put+0x11c>)
6000feb2:	f008 f826 	bl	60017f02 <assert_print>
6000feb6:	4629      	mov	r1, r5
6000feb8:	4833      	ldr	r0, [pc, #204]	; (6000ff88 <z_impl_k_msgq_put+0x12c>)
6000feba:	f008 f822 	bl	60017f02 <assert_print>
6000febe:	2194      	movs	r1, #148	; 0x94
6000fec0:	482f      	ldr	r0, [pc, #188]	; (6000ff80 <z_impl_k_msgq_put+0x124>)
6000fec2:	e7e2      	b.n	6000fe8a <z_impl_k_msgq_put+0x2e>
	z_spin_lock_set_owner(l);
6000fec4:	4628      	mov	r0, r5
6000fec6:	f7ff ff9d 	bl	6000fe04 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
6000feca:	6a62      	ldr	r2, [r4, #36]	; 0x24
6000fecc:	6923      	ldr	r3, [r4, #16]
6000fece:	429a      	cmp	r2, r3
6000fed0:	d236      	bcs.n	6000ff40 <z_impl_k_msgq_put+0xe4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
6000fed2:	4620      	mov	r0, r4
6000fed4:	f001 fd42 	bl	6001195c <z_unpend_first_thread>
		if (pending_thread != NULL) {
6000fed8:	68e2      	ldr	r2, [r4, #12]
6000feda:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
6000fedc:	4649      	mov	r1, r9
6000fede:	b178      	cbz	r0, 6000ff00 <z_impl_k_msgq_put+0xa4>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
6000fee0:	2400      	movs	r4, #0
6000fee2:	6940      	ldr	r0, [r0, #20]
6000fee4:	f7f3 fc28 	bl	60003738 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
6000fee8:	4630      	mov	r0, r6
6000feea:	67b4      	str	r4, [r6, #120]	; 0x78
6000feec:	f000 ff5a 	bl	60010da4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
6000fef0:	4639      	mov	r1, r7
6000fef2:	4628      	mov	r0, r5
6000fef4:	f000 ffe4 	bl	60010ec0 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
6000fef8:	4620      	mov	r0, r4
6000fefa:	b003      	add	sp, #12
6000fefc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
6000ff00:	6a20      	ldr	r0, [r4, #32]
6000ff02:	f7f3 fc19 	bl	60003738 <memcpy>
			msgq->write_ptr += msgq->msg_size;
6000ff06:	6a23      	ldr	r3, [r4, #32]
6000ff08:	68e2      	ldr	r2, [r4, #12]
6000ff0a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
6000ff0c:	69a2      	ldr	r2, [r4, #24]
6000ff0e:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
6000ff10:	6223      	str	r3, [r4, #32]
				msgq->write_ptr = msgq->buffer_start;
6000ff12:	bf04      	itt	eq
6000ff14:	6963      	ldreq	r3, [r4, #20]
6000ff16:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
6000ff18:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000ff1a:	3301      	adds	r3, #1
6000ff1c:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
6000ff1e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6000ff20:	4628      	mov	r0, r5
6000ff22:	f7ff ff61 	bl	6000fde8 <z_spin_unlock_valid>
6000ff26:	b9f0      	cbnz	r0, 6000ff66 <z_impl_k_msgq_put+0x10a>
6000ff28:	23c2      	movs	r3, #194	; 0xc2
6000ff2a:	4a15      	ldr	r2, [pc, #84]	; (6000ff80 <z_impl_k_msgq_put+0x124>)
6000ff2c:	4917      	ldr	r1, [pc, #92]	; (6000ff8c <z_impl_k_msgq_put+0x130>)
6000ff2e:	4812      	ldr	r0, [pc, #72]	; (6000ff78 <z_impl_k_msgq_put+0x11c>)
6000ff30:	f007 ffe7 	bl	60017f02 <assert_print>
6000ff34:	4629      	mov	r1, r5
6000ff36:	4816      	ldr	r0, [pc, #88]	; (6000ff90 <z_impl_k_msgq_put+0x134>)
6000ff38:	f007 ffe3 	bl	60017f02 <assert_print>
6000ff3c:	21c2      	movs	r1, #194	; 0xc2
6000ff3e:	e7bf      	b.n	6000fec0 <z_impl_k_msgq_put+0x64>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
6000ff40:	ea58 0306 	orrs.w	r3, r8, r6
6000ff44:	d00c      	beq.n	6000ff60 <z_impl_k_msgq_put+0x104>
		_current->base.swap_data = (void *) data;
6000ff46:	4b13      	ldr	r3, [pc, #76]	; (6000ff94 <z_impl_k_msgq_put+0x138>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
6000ff48:	4622      	mov	r2, r4
6000ff4a:	4639      	mov	r1, r7
6000ff4c:	4628      	mov	r0, r5
		_current->base.swap_data = (void *) data;
6000ff4e:	689b      	ldr	r3, [r3, #8]
6000ff50:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
6000ff54:	e9cd 8600 	strd	r8, r6, [sp]
6000ff58:	f001 fa80 	bl	6001145c <z_pend_curr>
6000ff5c:	4604      	mov	r4, r0
		return result;
6000ff5e:	e7cb      	b.n	6000fef8 <z_impl_k_msgq_put+0x9c>
		result = -ENOMSG;
6000ff60:	f06f 0422 	mvn.w	r4, #34	; 0x22
6000ff64:	e7dc      	b.n	6000ff20 <z_impl_k_msgq_put+0xc4>
	__asm__ volatile(
6000ff66:	f387 8811 	msr	BASEPRI, r7
6000ff6a:	f3bf 8f6f 	isb	sy
	return result;
6000ff6e:	e7c3      	b.n	6000fef8 <z_impl_k_msgq_put+0x9c>
6000ff70:	6001e8dd 	.word	0x6001e8dd
6000ff74:	6001eaa7 	.word	0x6001eaa7
6000ff78:	6001c3d7 	.word	0x6001c3d7
6000ff7c:	6001e923 	.word	0x6001e923
6000ff80:	6001c758 	.word	0x6001c758
6000ff84:	6001c785 	.word	0x6001c785
6000ff88:	6001c79a 	.word	0x6001c79a
6000ff8c:	6001c7b2 	.word	0x6001c7b2
6000ff90:	6001c7c9 	.word	0x6001c7c9
6000ff94:	20204d8c 	.word	0x20204d8c

6000ff98 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
6000ff98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
6000ff9c:	4604      	mov	r4, r0
6000ff9e:	4688      	mov	r8, r1
6000ffa0:	4617      	mov	r7, r2
6000ffa2:	461d      	mov	r5, r3
6000ffa4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
6000ffa8:	b17b      	cbz	r3, 6000ffca <z_impl_k_msgq_get+0x32>
6000ffaa:	ea52 0305 	orrs.w	r3, r2, r5
6000ffae:	d00c      	beq.n	6000ffca <z_impl_k_msgq_get+0x32>
6000ffb0:	4945      	ldr	r1, [pc, #276]	; (600100c8 <z_impl_k_msgq_get+0x130>)
6000ffb2:	23d0      	movs	r3, #208	; 0xd0
6000ffb4:	4a45      	ldr	r2, [pc, #276]	; (600100cc <z_impl_k_msgq_get+0x134>)
6000ffb6:	4846      	ldr	r0, [pc, #280]	; (600100d0 <z_impl_k_msgq_get+0x138>)
6000ffb8:	f007 ffa3 	bl	60017f02 <assert_print>
6000ffbc:	4845      	ldr	r0, [pc, #276]	; (600100d4 <z_impl_k_msgq_get+0x13c>)
6000ffbe:	f007 ffa0 	bl	60017f02 <assert_print>
6000ffc2:	21d0      	movs	r1, #208	; 0xd0
6000ffc4:	4841      	ldr	r0, [pc, #260]	; (600100cc <z_impl_k_msgq_get+0x134>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6000ffc6:	f007 ff95 	bl	60017ef4 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
6000ffca:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
6000ffce:	f04f 0310 	mov.w	r3, #16
6000ffd2:	f3ef 8911 	mrs	r9, BASEPRI
6000ffd6:	f383 8812 	msr	BASEPRI_MAX, r3
6000ffda:	f3bf 8f6f 	isb	sy
6000ffde:	4630      	mov	r0, r6
6000ffe0:	f7ff fef4 	bl	6000fdcc <z_spin_lock_valid>
6000ffe4:	b960      	cbnz	r0, 60010000 <z_impl_k_msgq_get+0x68>
6000ffe6:	2394      	movs	r3, #148	; 0x94
6000ffe8:	4a3b      	ldr	r2, [pc, #236]	; (600100d8 <z_impl_k_msgq_get+0x140>)
6000ffea:	493c      	ldr	r1, [pc, #240]	; (600100dc <z_impl_k_msgq_get+0x144>)
6000ffec:	4838      	ldr	r0, [pc, #224]	; (600100d0 <z_impl_k_msgq_get+0x138>)
6000ffee:	f007 ff88 	bl	60017f02 <assert_print>
6000fff2:	4631      	mov	r1, r6
6000fff4:	483a      	ldr	r0, [pc, #232]	; (600100e0 <z_impl_k_msgq_get+0x148>)
6000fff6:	f007 ff84 	bl	60017f02 <assert_print>
6000fffa:	2194      	movs	r1, #148	; 0x94
6000fffc:	4836      	ldr	r0, [pc, #216]	; (600100d8 <z_impl_k_msgq_get+0x140>)
6000fffe:	e7e2      	b.n	6000ffc6 <z_impl_k_msgq_get+0x2e>
	z_spin_lock_set_owner(l);
60010000:	4630      	mov	r0, r6
60010002:	f7ff feff 	bl	6000fe04 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
60010006:	6a63      	ldr	r3, [r4, #36]	; 0x24
60010008:	2b00      	cmp	r3, #0
6001000a:	d035      	beq.n	60010078 <z_impl_k_msgq_get+0xe0>
6001000c:	68e2      	ldr	r2, [r4, #12]
6001000e:	4640      	mov	r0, r8
60010010:	69e1      	ldr	r1, [r4, #28]
60010012:	f7f3 fb91 	bl	60003738 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
60010016:	69e3      	ldr	r3, [r4, #28]
60010018:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
6001001a:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
6001001c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
6001001e:	69a2      	ldr	r2, [r4, #24]
60010020:	4293      	cmp	r3, r2
		msgq->read_ptr += msgq->msg_size;
60010022:	61e3      	str	r3, [r4, #28]
			msgq->read_ptr = msgq->buffer_start;
60010024:	bf04      	itt	eq
60010026:	6963      	ldreq	r3, [r4, #20]
60010028:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
6001002a:	6a63      	ldr	r3, [r4, #36]	; 0x24
6001002c:	3b01      	subs	r3, #1
6001002e:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
60010030:	f001 fc94 	bl	6001195c <z_unpend_first_thread>
		if (pending_thread != NULL) {
60010034:	4605      	mov	r5, r0
60010036:	2800      	cmp	r0, #0
60010038:	d030      	beq.n	6001009c <z_impl_k_msgq_get+0x104>
6001003a:	6941      	ldr	r1, [r0, #20]
6001003c:	68e2      	ldr	r2, [r4, #12]
6001003e:	6a20      	ldr	r0, [r4, #32]
60010040:	f7f3 fb7a 	bl	60003738 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
60010044:	6a23      	ldr	r3, [r4, #32]
60010046:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
60010048:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
6001004a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
6001004c:	69a2      	ldr	r2, [r4, #24]
6001004e:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
60010050:	6223      	str	r3, [r4, #32]
				msgq->write_ptr = msgq->buffer_start;
60010052:	bf04      	itt	eq
60010054:	6963      	ldreq	r3, [r4, #20]
60010056:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
60010058:	6a63      	ldr	r3, [r4, #36]	; 0x24
6001005a:	3301      	adds	r3, #1
6001005c:	6263      	str	r3, [r4, #36]	; 0x24
6001005e:	2400      	movs	r4, #0
60010060:	67ac      	str	r4, [r5, #120]	; 0x78
			z_reschedule(&msgq->lock, key);

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
60010062:	4625      	mov	r5, r4
			z_ready_thread(pending_thread);
60010064:	f000 fe9e 	bl	60010da4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
60010068:	4649      	mov	r1, r9
6001006a:	4630      	mov	r0, r6
6001006c:	f000 ff28 	bl	60010ec0 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
60010070:	4628      	mov	r0, r5
60010072:	b003      	add	sp, #12
60010074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
60010078:	ea57 0305 	orrs.w	r3, r7, r5
6001007c:	d00c      	beq.n	60010098 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
6001007e:	4b19      	ldr	r3, [pc, #100]	; (600100e4 <z_impl_k_msgq_get+0x14c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
60010080:	4622      	mov	r2, r4
60010082:	4649      	mov	r1, r9
60010084:	4630      	mov	r0, r6
		_current->base.swap_data = data;
60010086:	689b      	ldr	r3, [r3, #8]
60010088:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
6001008c:	e9cd 7500 	strd	r7, r5, [sp]
60010090:	f001 f9e4 	bl	6001145c <z_pend_curr>
60010094:	4605      	mov	r5, r0
		return result;
60010096:	e7eb      	b.n	60010070 <z_impl_k_msgq_get+0xd8>
		result = -ENOMSG;
60010098:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6001009c:	4630      	mov	r0, r6
6001009e:	f7ff fea3 	bl	6000fde8 <z_spin_unlock_valid>
600100a2:	b958      	cbnz	r0, 600100bc <z_impl_k_msgq_get+0x124>
600100a4:	23c2      	movs	r3, #194	; 0xc2
600100a6:	4a0c      	ldr	r2, [pc, #48]	; (600100d8 <z_impl_k_msgq_get+0x140>)
600100a8:	490f      	ldr	r1, [pc, #60]	; (600100e8 <z_impl_k_msgq_get+0x150>)
600100aa:	4809      	ldr	r0, [pc, #36]	; (600100d0 <z_impl_k_msgq_get+0x138>)
600100ac:	f007 ff29 	bl	60017f02 <assert_print>
600100b0:	4631      	mov	r1, r6
600100b2:	480e      	ldr	r0, [pc, #56]	; (600100ec <z_impl_k_msgq_get+0x154>)
600100b4:	f007 ff25 	bl	60017f02 <assert_print>
600100b8:	21c2      	movs	r1, #194	; 0xc2
600100ba:	e79f      	b.n	6000fffc <z_impl_k_msgq_get+0x64>
	__asm__ volatile(
600100bc:	f389 8811 	msr	BASEPRI, r9
600100c0:	f3bf 8f6f 	isb	sy
	return result;
600100c4:	e7d4      	b.n	60010070 <z_impl_k_msgq_get+0xd8>
600100c6:	bf00      	nop
600100c8:	6001e8dd 	.word	0x6001e8dd
600100cc:	6001eaa7 	.word	0x6001eaa7
600100d0:	6001c3d7 	.word	0x6001c3d7
600100d4:	6001e923 	.word	0x6001e923
600100d8:	6001c758 	.word	0x6001c758
600100dc:	6001c785 	.word	0x6001c785
600100e0:	6001c79a 	.word	0x6001c79a
600100e4:	20204d8c 	.word	0x20204d8c
600100e8:	6001c7b2 	.word	0x6001c7b2
600100ec:	6001c7c9 	.word	0x6001c7c9

600100f0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
600100f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
600100f4:	4604      	mov	r4, r0
600100f6:	4617      	mov	r7, r2
600100f8:	461e      	mov	r6, r3
600100fa:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
600100fe:	b165      	cbz	r5, 6001011a <z_impl_k_mutex_lock+0x2a>
60010100:	4958      	ldr	r1, [pc, #352]	; (60010264 <z_impl_k_mutex_lock+0x174>)
60010102:	2365      	movs	r3, #101	; 0x65
60010104:	4a58      	ldr	r2, [pc, #352]	; (60010268 <z_impl_k_mutex_lock+0x178>)
60010106:	4859      	ldr	r0, [pc, #356]	; (6001026c <z_impl_k_mutex_lock+0x17c>)
60010108:	f007 fefb 	bl	60017f02 <assert_print>
6001010c:	4858      	ldr	r0, [pc, #352]	; (60010270 <z_impl_k_mutex_lock+0x180>)
6001010e:	f007 fef8 	bl	60017f02 <assert_print>
60010112:	2165      	movs	r1, #101	; 0x65
60010114:	4854      	ldr	r0, [pc, #336]	; (60010268 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010116:	f007 feed 	bl	60017ef4 <assert_post_action>
	__asm__ volatile(
6001011a:	f04f 0310 	mov.w	r3, #16
6001011e:	f3ef 8811 	mrs	r8, BASEPRI
60010122:	f383 8812 	msr	BASEPRI_MAX, r3
60010126:	f3bf 8f6f 	isb	sy
6001012a:	4852      	ldr	r0, [pc, #328]	; (60010274 <z_impl_k_mutex_lock+0x184>)
6001012c:	f7ff fe4e 	bl	6000fdcc <z_spin_lock_valid>
60010130:	b960      	cbnz	r0, 6001014c <z_impl_k_mutex_lock+0x5c>
60010132:	2394      	movs	r3, #148	; 0x94
60010134:	4a50      	ldr	r2, [pc, #320]	; (60010278 <z_impl_k_mutex_lock+0x188>)
60010136:	4951      	ldr	r1, [pc, #324]	; (6001027c <z_impl_k_mutex_lock+0x18c>)
60010138:	484c      	ldr	r0, [pc, #304]	; (6001026c <z_impl_k_mutex_lock+0x17c>)
6001013a:	f007 fee2 	bl	60017f02 <assert_print>
6001013e:	494d      	ldr	r1, [pc, #308]	; (60010274 <z_impl_k_mutex_lock+0x184>)
60010140:	484f      	ldr	r0, [pc, #316]	; (60010280 <z_impl_k_mutex_lock+0x190>)
60010142:	f007 fede 	bl	60017f02 <assert_print>
60010146:	2194      	movs	r1, #148	; 0x94
60010148:	484b      	ldr	r0, [pc, #300]	; (60010278 <z_impl_k_mutex_lock+0x188>)
6001014a:	e7e4      	b.n	60010116 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
6001014c:	4849      	ldr	r0, [pc, #292]	; (60010274 <z_impl_k_mutex_lock+0x184>)
6001014e:	f7ff fe59 	bl	6000fe04 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
60010152:	68e3      	ldr	r3, [r4, #12]
60010154:	4a4b      	ldr	r2, [pc, #300]	; (60010284 <z_impl_k_mutex_lock+0x194>)
60010156:	b19b      	cbz	r3, 60010180 <z_impl_k_mutex_lock+0x90>
60010158:	68a0      	ldr	r0, [r4, #8]
6001015a:	6891      	ldr	r1, [r2, #8]
6001015c:	4288      	cmp	r0, r1
6001015e:	d027      	beq.n	600101b0 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
60010160:	ea57 0306 	orrs.w	r3, r7, r6
60010164:	d12c      	bne.n	600101c0 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010166:	4843      	ldr	r0, [pc, #268]	; (60010274 <z_impl_k_mutex_lock+0x184>)
60010168:	f7ff fe3e 	bl	6000fde8 <z_spin_unlock_valid>
6001016c:	b1a0      	cbz	r0, 60010198 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
6001016e:	f388 8811 	msr	BASEPRI, r8
60010172:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
60010176:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
6001017a:	b002      	add	sp, #8
6001017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
60010180:	6891      	ldr	r1, [r2, #8]
60010182:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
60010186:	3301      	adds	r3, #1
60010188:	483a      	ldr	r0, [pc, #232]	; (60010274 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
6001018a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
6001018c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
6001018e:	6893      	ldr	r3, [r2, #8]
60010190:	60a3      	str	r3, [r4, #8]
60010192:	f7ff fe29 	bl	6000fde8 <z_spin_unlock_valid>
60010196:	b968      	cbnz	r0, 600101b4 <z_impl_k_mutex_lock+0xc4>
60010198:	23c2      	movs	r3, #194	; 0xc2
6001019a:	4a37      	ldr	r2, [pc, #220]	; (60010278 <z_impl_k_mutex_lock+0x188>)
6001019c:	493a      	ldr	r1, [pc, #232]	; (60010288 <z_impl_k_mutex_lock+0x198>)
6001019e:	4833      	ldr	r0, [pc, #204]	; (6001026c <z_impl_k_mutex_lock+0x17c>)
600101a0:	f007 feaf 	bl	60017f02 <assert_print>
600101a4:	4933      	ldr	r1, [pc, #204]	; (60010274 <z_impl_k_mutex_lock+0x184>)
600101a6:	4839      	ldr	r0, [pc, #228]	; (6001028c <z_impl_k_mutex_lock+0x19c>)
600101a8:	f007 feab 	bl	60017f02 <assert_print>
600101ac:	21c2      	movs	r1, #194	; 0xc2
600101ae:	e7cb      	b.n	60010148 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
600101b0:	6921      	ldr	r1, [r4, #16]
600101b2:	e7e8      	b.n	60010186 <z_impl_k_mutex_lock+0x96>
600101b4:	f388 8811 	msr	BASEPRI, r8
600101b8:	f3bf 8f6f 	isb	sy
		return 0;
600101bc:	2000      	movs	r0, #0
600101be:	e7dc      	b.n	6001017a <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
600101c0:	f991 100e 	ldrsb.w	r1, [r1, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
600101c4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
600101c8:	f990 300e 	ldrsb.w	r3, [r0, #14]
600101cc:	4299      	cmp	r1, r3
600101ce:	bfa8      	it	ge
600101d0:	4619      	movge	r1, r3
600101d2:	4291      	cmp	r1, r2
600101d4:	bfb8      	it	lt
600101d6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
600101d8:	428b      	cmp	r3, r1
600101da:	dd02      	ble.n	600101e2 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
600101dc:	f009 fb80 	bl	600198e0 <adjust_owner_prio.isra.0>
600101e0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
600101e2:	4622      	mov	r2, r4
600101e4:	4641      	mov	r1, r8
600101e6:	4823      	ldr	r0, [pc, #140]	; (60010274 <z_impl_k_mutex_lock+0x184>)
600101e8:	e9cd 7600 	strd	r7, r6, [sp]
600101ec:	f001 f936 	bl	6001145c <z_pend_curr>
	if (got_mutex == 0) {
600101f0:	2800      	cmp	r0, #0
600101f2:	d0e3      	beq.n	600101bc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
600101f4:	f04f 0310 	mov.w	r3, #16
600101f8:	f3ef 8611 	mrs	r6, BASEPRI
600101fc:	f383 8812 	msr	BASEPRI_MAX, r3
60010200:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010204:	481b      	ldr	r0, [pc, #108]	; (60010274 <z_impl_k_mutex_lock+0x184>)
60010206:	f7ff fde1 	bl	6000fdcc <z_spin_lock_valid>
6001020a:	2800      	cmp	r0, #0
6001020c:	d091      	beq.n	60010132 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
6001020e:	4819      	ldr	r0, [pc, #100]	; (60010274 <z_impl_k_mutex_lock+0x184>)
60010210:	f7ff fdf8 	bl	6000fe04 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
60010214:	68a0      	ldr	r0, [r4, #8]
60010216:	b1c0      	cbz	r0, 6001024a <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
60010218:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
6001021a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
6001021c:	429c      	cmp	r4, r3
6001021e:	d00a      	beq.n	60010236 <z_impl_k_mutex_lock+0x146>
60010220:	b14b      	cbz	r3, 60010236 <z_impl_k_mutex_lock+0x146>
60010222:	f993 300e 	ldrsb.w	r3, [r3, #14]
60010226:	4299      	cmp	r1, r3
60010228:	bfa8      	it	ge
6001022a:	4619      	movge	r1, r3
6001022c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
60010230:	4299      	cmp	r1, r3
60010232:	bfb8      	it	lt
60010234:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
60010236:	f009 fb53 	bl	600198e0 <adjust_owner_prio.isra.0>
6001023a:	b130      	cbz	r0, 6001024a <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
6001023c:	4631      	mov	r1, r6
6001023e:	480d      	ldr	r0, [pc, #52]	; (60010274 <z_impl_k_mutex_lock+0x184>)
60010240:	f000 fe3e 	bl	60010ec0 <z_reschedule>
	return -EAGAIN;
60010244:	f06f 000a 	mvn.w	r0, #10
60010248:	e797      	b.n	6001017a <z_impl_k_mutex_lock+0x8a>
	if (resched) {
6001024a:	2d00      	cmp	r5, #0
6001024c:	d1f6      	bne.n	6001023c <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6001024e:	4809      	ldr	r0, [pc, #36]	; (60010274 <z_impl_k_mutex_lock+0x184>)
60010250:	f7ff fdca 	bl	6000fde8 <z_spin_unlock_valid>
60010254:	2800      	cmp	r0, #0
60010256:	d09f      	beq.n	60010198 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
60010258:	f386 8811 	msr	BASEPRI, r6
6001025c:	f3bf 8f6f 	isb	sy
60010260:	e7f0      	b.n	60010244 <z_impl_k_mutex_lock+0x154>
60010262:	bf00      	nop
60010264:	6001e9fa 	.word	0x6001e9fa
60010268:	6001eac9 	.word	0x6001eac9
6001026c:	6001c3d7 	.word	0x6001c3d7
60010270:	6001eaeb 	.word	0x6001eaeb
60010274:	20204db0 	.word	0x20204db0
60010278:	6001c758 	.word	0x6001c758
6001027c:	6001c785 	.word	0x6001c785
60010280:	6001c79a 	.word	0x6001c79a
60010284:	20204d8c 	.word	0x20204d8c
60010288:	6001c7b2 	.word	0x6001c7b2
6001028c:	6001c7c9 	.word	0x6001c7c9

60010290 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
60010290:	b570      	push	{r4, r5, r6, lr}
60010292:	4604      	mov	r4, r0
60010294:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
60010298:	b166      	cbz	r6, 600102b4 <z_impl_k_mutex_unlock+0x24>
6001029a:	4938      	ldr	r1, [pc, #224]	; (6001037c <z_impl_k_mutex_unlock+0xec>)
6001029c:	23cd      	movs	r3, #205	; 0xcd
6001029e:	4a38      	ldr	r2, [pc, #224]	; (60010380 <z_impl_k_mutex_unlock+0xf0>)
600102a0:	4838      	ldr	r0, [pc, #224]	; (60010384 <z_impl_k_mutex_unlock+0xf4>)
600102a2:	f007 fe2e 	bl	60017f02 <assert_print>
600102a6:	4838      	ldr	r0, [pc, #224]	; (60010388 <z_impl_k_mutex_unlock+0xf8>)
600102a8:	f007 fe2b 	bl	60017f02 <assert_print>
600102ac:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
600102ae:	4834      	ldr	r0, [pc, #208]	; (60010380 <z_impl_k_mutex_unlock+0xf0>)
600102b0:	f007 fe20 	bl	60017ef4 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
600102b4:	6883      	ldr	r3, [r0, #8]
600102b6:	2b00      	cmp	r3, #0
600102b8:	d059      	beq.n	6001036e <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
600102ba:	4a34      	ldr	r2, [pc, #208]	; (6001038c <z_impl_k_mutex_unlock+0xfc>)
600102bc:	6892      	ldr	r2, [r2, #8]
600102be:	4293      	cmp	r3, r2
600102c0:	d158      	bne.n	60010374 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
600102c2:	68c3      	ldr	r3, [r0, #12]
600102c4:	b93b      	cbnz	r3, 600102d6 <z_impl_k_mutex_unlock+0x46>
600102c6:	4932      	ldr	r1, [pc, #200]	; (60010390 <z_impl_k_mutex_unlock+0x100>)
600102c8:	23e5      	movs	r3, #229	; 0xe5
600102ca:	4a2d      	ldr	r2, [pc, #180]	; (60010380 <z_impl_k_mutex_unlock+0xf0>)
600102cc:	482d      	ldr	r0, [pc, #180]	; (60010384 <z_impl_k_mutex_unlock+0xf4>)
600102ce:	f007 fe18 	bl	60017f02 <assert_print>
600102d2:	21e5      	movs	r1, #229	; 0xe5
600102d4:	e7eb      	b.n	600102ae <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
600102d6:	2b01      	cmp	r3, #1
600102d8:	d003      	beq.n	600102e2 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
600102da:	3b01      	subs	r3, #1
600102dc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
600102de:	2000      	movs	r0, #0
}
600102e0:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
600102e2:	f04f 0310 	mov.w	r3, #16
600102e6:	f3ef 8511 	mrs	r5, BASEPRI
600102ea:	f383 8812 	msr	BASEPRI_MAX, r3
600102ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600102f2:	4828      	ldr	r0, [pc, #160]	; (60010394 <z_impl_k_mutex_unlock+0x104>)
600102f4:	f7ff fd6a 	bl	6000fdcc <z_spin_lock_valid>
600102f8:	b960      	cbnz	r0, 60010314 <z_impl_k_mutex_unlock+0x84>
600102fa:	2394      	movs	r3, #148	; 0x94
600102fc:	4a26      	ldr	r2, [pc, #152]	; (60010398 <z_impl_k_mutex_unlock+0x108>)
600102fe:	4927      	ldr	r1, [pc, #156]	; (6001039c <z_impl_k_mutex_unlock+0x10c>)
60010300:	4820      	ldr	r0, [pc, #128]	; (60010384 <z_impl_k_mutex_unlock+0xf4>)
60010302:	f007 fdfe 	bl	60017f02 <assert_print>
60010306:	4923      	ldr	r1, [pc, #140]	; (60010394 <z_impl_k_mutex_unlock+0x104>)
60010308:	4825      	ldr	r0, [pc, #148]	; (600103a0 <z_impl_k_mutex_unlock+0x110>)
6001030a:	f007 fdfa 	bl	60017f02 <assert_print>
6001030e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010310:	4821      	ldr	r0, [pc, #132]	; (60010398 <z_impl_k_mutex_unlock+0x108>)
60010312:	e7cd      	b.n	600102b0 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
60010314:	481f      	ldr	r0, [pc, #124]	; (60010394 <z_impl_k_mutex_unlock+0x104>)
60010316:	f7ff fd75 	bl	6000fe04 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
6001031a:	6921      	ldr	r1, [r4, #16]
6001031c:	68a0      	ldr	r0, [r4, #8]
6001031e:	f009 fadf 	bl	600198e0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
60010322:	4620      	mov	r0, r4
60010324:	f001 fb1a 	bl	6001195c <z_unpend_first_thread>
	mutex->owner = new_owner;
60010328:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
6001032a:	b150      	cbz	r0, 60010342 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
6001032c:	f990 200e 	ldrsb.w	r2, [r0, #14]
60010330:	6122      	str	r2, [r4, #16]
60010332:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
60010334:	f000 fd36 	bl	60010da4 <z_ready_thread>
		z_reschedule(&lock, key);
60010338:	4629      	mov	r1, r5
6001033a:	4816      	ldr	r0, [pc, #88]	; (60010394 <z_impl_k_mutex_unlock+0x104>)
6001033c:	f000 fdc0 	bl	60010ec0 <z_reschedule>
60010340:	e7cd      	b.n	600102de <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
60010342:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010344:	4813      	ldr	r0, [pc, #76]	; (60010394 <z_impl_k_mutex_unlock+0x104>)
60010346:	f7ff fd4f 	bl	6000fde8 <z_spin_unlock_valid>
6001034a:	b958      	cbnz	r0, 60010364 <z_impl_k_mutex_unlock+0xd4>
6001034c:	23c2      	movs	r3, #194	; 0xc2
6001034e:	4a12      	ldr	r2, [pc, #72]	; (60010398 <z_impl_k_mutex_unlock+0x108>)
60010350:	4914      	ldr	r1, [pc, #80]	; (600103a4 <z_impl_k_mutex_unlock+0x114>)
60010352:	480c      	ldr	r0, [pc, #48]	; (60010384 <z_impl_k_mutex_unlock+0xf4>)
60010354:	f007 fdd5 	bl	60017f02 <assert_print>
60010358:	490e      	ldr	r1, [pc, #56]	; (60010394 <z_impl_k_mutex_unlock+0x104>)
6001035a:	4813      	ldr	r0, [pc, #76]	; (600103a8 <z_impl_k_mutex_unlock+0x118>)
6001035c:	f007 fdd1 	bl	60017f02 <assert_print>
60010360:	21c2      	movs	r1, #194	; 0xc2
60010362:	e7d5      	b.n	60010310 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
60010364:	f385 8811 	msr	BASEPRI, r5
60010368:	f3bf 8f6f 	isb	sy
6001036c:	e7b7      	b.n	600102de <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
6001036e:	f06f 0015 	mvn.w	r0, #21
60010372:	e7b5      	b.n	600102e0 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
60010374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60010378:	e7b2      	b.n	600102e0 <z_impl_k_mutex_unlock+0x50>
6001037a:	bf00      	nop
6001037c:	6001e9fa 	.word	0x6001e9fa
60010380:	6001eac9 	.word	0x6001eac9
60010384:	6001c3d7 	.word	0x6001c3d7
60010388:	6001eaeb 	.word	0x6001eaeb
6001038c:	20204d8c 	.word	0x20204d8c
60010390:	6001eb10 	.word	0x6001eb10
60010394:	20204db0 	.word	0x20204db0
60010398:	6001c758 	.word	0x6001c758
6001039c:	6001c785 	.word	0x6001c785
600103a0:	6001c79a 	.word	0x6001c79a
600103a4:	6001c7b2 	.word	0x6001c7b2
600103a8:	6001c7c9 	.word	0x6001c7c9

600103ac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
600103ac:	b538      	push	{r3, r4, r5, lr}
600103ae:	4604      	mov	r4, r0
	__asm__ volatile(
600103b0:	f04f 0310 	mov.w	r3, #16
600103b4:	f3ef 8511 	mrs	r5, BASEPRI
600103b8:	f383 8812 	msr	BASEPRI_MAX, r3
600103bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600103c0:	4814      	ldr	r0, [pc, #80]	; (60010414 <z_impl_k_sem_give+0x68>)
600103c2:	f7ff fd03 	bl	6000fdcc <z_spin_lock_valid>
600103c6:	b968      	cbnz	r0, 600103e4 <z_impl_k_sem_give+0x38>
600103c8:	2394      	movs	r3, #148	; 0x94
600103ca:	4a13      	ldr	r2, [pc, #76]	; (60010418 <z_impl_k_sem_give+0x6c>)
600103cc:	4913      	ldr	r1, [pc, #76]	; (6001041c <z_impl_k_sem_give+0x70>)
600103ce:	4814      	ldr	r0, [pc, #80]	; (60010420 <z_impl_k_sem_give+0x74>)
600103d0:	f007 fd97 	bl	60017f02 <assert_print>
600103d4:	490f      	ldr	r1, [pc, #60]	; (60010414 <z_impl_k_sem_give+0x68>)
600103d6:	4813      	ldr	r0, [pc, #76]	; (60010424 <z_impl_k_sem_give+0x78>)
600103d8:	f007 fd93 	bl	60017f02 <assert_print>
600103dc:	2194      	movs	r1, #148	; 0x94
600103de:	480e      	ldr	r0, [pc, #56]	; (60010418 <z_impl_k_sem_give+0x6c>)
600103e0:	f007 fd88 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
600103e4:	480b      	ldr	r0, [pc, #44]	; (60010414 <z_impl_k_sem_give+0x68>)
600103e6:	f7ff fd0d 	bl	6000fe04 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
600103ea:	4620      	mov	r0, r4
600103ec:	f001 fab6 	bl	6001195c <z_unpend_first_thread>

	if (thread != NULL) {
600103f0:	b148      	cbz	r0, 60010406 <z_impl_k_sem_give+0x5a>
600103f2:	2200      	movs	r2, #0
600103f4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
600103f6:	f000 fcd5 	bl	60010da4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
600103fa:	4629      	mov	r1, r5
600103fc:	4805      	ldr	r0, [pc, #20]	; (60010414 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
600103fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
60010402:	f000 bd5d 	b.w	60010ec0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
60010406:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
6001040a:	429a      	cmp	r2, r3
6001040c:	bf18      	it	ne
6001040e:	3301      	addne	r3, #1
60010410:	60a3      	str	r3, [r4, #8]
}
60010412:	e7f2      	b.n	600103fa <z_impl_k_sem_give+0x4e>
60010414:	20204db4 	.word	0x20204db4
60010418:	6001c758 	.word	0x6001c758
6001041c:	6001c785 	.word	0x6001c785
60010420:	6001c3d7 	.word	0x6001c3d7
60010424:	6001c79a 	.word	0x6001c79a

60010428 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
60010428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
6001042a:	4604      	mov	r4, r0
6001042c:	4616      	mov	r6, r2
6001042e:	461d      	mov	r5, r3
60010430:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
60010434:	b17b      	cbz	r3, 60010456 <z_impl_k_sem_take+0x2e>
60010436:	ea52 0305 	orrs.w	r3, r2, r5
6001043a:	d00c      	beq.n	60010456 <z_impl_k_sem_take+0x2e>
6001043c:	492d      	ldr	r1, [pc, #180]	; (600104f4 <z_impl_k_sem_take+0xcc>)
6001043e:	2379      	movs	r3, #121	; 0x79
60010440:	4a2d      	ldr	r2, [pc, #180]	; (600104f8 <z_impl_k_sem_take+0xd0>)
60010442:	482e      	ldr	r0, [pc, #184]	; (600104fc <z_impl_k_sem_take+0xd4>)
60010444:	f007 fd5d 	bl	60017f02 <assert_print>
60010448:	482d      	ldr	r0, [pc, #180]	; (60010500 <z_impl_k_sem_take+0xd8>)
6001044a:	f007 fd5a 	bl	60017f02 <assert_print>
6001044e:	2179      	movs	r1, #121	; 0x79
60010450:	4829      	ldr	r0, [pc, #164]	; (600104f8 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010452:	f007 fd4f 	bl	60017ef4 <assert_post_action>
60010456:	f04f 0310 	mov.w	r3, #16
6001045a:	f3ef 8711 	mrs	r7, BASEPRI
6001045e:	f383 8812 	msr	BASEPRI_MAX, r3
60010462:	f3bf 8f6f 	isb	sy
60010466:	4827      	ldr	r0, [pc, #156]	; (60010504 <z_impl_k_sem_take+0xdc>)
60010468:	f7ff fcb0 	bl	6000fdcc <z_spin_lock_valid>
6001046c:	b960      	cbnz	r0, 60010488 <z_impl_k_sem_take+0x60>
6001046e:	2394      	movs	r3, #148	; 0x94
60010470:	4a25      	ldr	r2, [pc, #148]	; (60010508 <z_impl_k_sem_take+0xe0>)
60010472:	4926      	ldr	r1, [pc, #152]	; (6001050c <z_impl_k_sem_take+0xe4>)
60010474:	4821      	ldr	r0, [pc, #132]	; (600104fc <z_impl_k_sem_take+0xd4>)
60010476:	f007 fd44 	bl	60017f02 <assert_print>
6001047a:	4922      	ldr	r1, [pc, #136]	; (60010504 <z_impl_k_sem_take+0xdc>)
6001047c:	4824      	ldr	r0, [pc, #144]	; (60010510 <z_impl_k_sem_take+0xe8>)
6001047e:	f007 fd40 	bl	60017f02 <assert_print>
60010482:	2194      	movs	r1, #148	; 0x94
60010484:	4820      	ldr	r0, [pc, #128]	; (60010508 <z_impl_k_sem_take+0xe0>)
60010486:	e7e4      	b.n	60010452 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
60010488:	481e      	ldr	r0, [pc, #120]	; (60010504 <z_impl_k_sem_take+0xdc>)
6001048a:	f7ff fcbb 	bl	6000fe04 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
6001048e:	68a3      	ldr	r3, [r4, #8]
60010490:	b1c3      	cbz	r3, 600104c4 <z_impl_k_sem_take+0x9c>
		sem->count--;
60010492:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010494:	481b      	ldr	r0, [pc, #108]	; (60010504 <z_impl_k_sem_take+0xdc>)
60010496:	60a3      	str	r3, [r4, #8]
60010498:	f7ff fca6 	bl	6000fde8 <z_spin_unlock_valid>
6001049c:	b958      	cbnz	r0, 600104b6 <z_impl_k_sem_take+0x8e>
6001049e:	23c2      	movs	r3, #194	; 0xc2
600104a0:	4a19      	ldr	r2, [pc, #100]	; (60010508 <z_impl_k_sem_take+0xe0>)
600104a2:	491c      	ldr	r1, [pc, #112]	; (60010514 <z_impl_k_sem_take+0xec>)
600104a4:	4815      	ldr	r0, [pc, #84]	; (600104fc <z_impl_k_sem_take+0xd4>)
600104a6:	f007 fd2c 	bl	60017f02 <assert_print>
600104aa:	4916      	ldr	r1, [pc, #88]	; (60010504 <z_impl_k_sem_take+0xdc>)
600104ac:	481a      	ldr	r0, [pc, #104]	; (60010518 <z_impl_k_sem_take+0xf0>)
600104ae:	f007 fd28 	bl	60017f02 <assert_print>
600104b2:	21c2      	movs	r1, #194	; 0xc2
600104b4:	e7e6      	b.n	60010484 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
600104b6:	f387 8811 	msr	BASEPRI, r7
600104ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
600104be:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
600104c0:	b003      	add	sp, #12
600104c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
600104c4:	ea56 0305 	orrs.w	r3, r6, r5
600104c8:	d10b      	bne.n	600104e2 <z_impl_k_sem_take+0xba>
600104ca:	480e      	ldr	r0, [pc, #56]	; (60010504 <z_impl_k_sem_take+0xdc>)
600104cc:	f7ff fc8c 	bl	6000fde8 <z_spin_unlock_valid>
600104d0:	2800      	cmp	r0, #0
600104d2:	d0e4      	beq.n	6001049e <z_impl_k_sem_take+0x76>
600104d4:	f387 8811 	msr	BASEPRI, r7
600104d8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
600104dc:	f06f 000f 	mvn.w	r0, #15
600104e0:	e7ee      	b.n	600104c0 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
600104e2:	4622      	mov	r2, r4
600104e4:	4639      	mov	r1, r7
600104e6:	4807      	ldr	r0, [pc, #28]	; (60010504 <z_impl_k_sem_take+0xdc>)
600104e8:	e9cd 6500 	strd	r6, r5, [sp]
600104ec:	f000 ffb6 	bl	6001145c <z_pend_curr>
	return ret;
600104f0:	e7e6      	b.n	600104c0 <z_impl_k_sem_take+0x98>
600104f2:	bf00      	nop
600104f4:	6001eb47 	.word	0x6001eb47
600104f8:	6001eb27 	.word	0x6001eb27
600104fc:	6001c3d7 	.word	0x6001c3d7
60010500:	6001e923 	.word	0x6001e923
60010504:	20204db4 	.word	0x20204db4
60010508:	6001c758 	.word	0x6001c758
6001050c:	6001c785 	.word	0x6001c785
60010510:	6001c79a 	.word	0x6001c79a
60010514:	6001c7b2 	.word	0x6001c7b2
60010518:	6001c7c9 	.word	0x6001c7c9

6001051c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
6001051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60010520:	4604      	mov	r4, r0
60010522:	b085      	sub	sp, #20
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010524:	4e6d      	ldr	r6, [pc, #436]	; (600106dc <work_queue_main+0x1c0>)
	return list->head;
60010526:	4f6e      	ldr	r7, [pc, #440]	; (600106e0 <work_queue_main+0x1c4>)
	__asm__ volatile(
60010528:	f04f 0310 	mov.w	r3, #16
6001052c:	f3ef 8811 	mrs	r8, BASEPRI
60010530:	f383 8812 	msr	BASEPRI_MAX, r3
60010534:	f3bf 8f6f 	isb	sy
60010538:	4630      	mov	r0, r6
6001053a:	f7ff fc47 	bl	6000fdcc <z_spin_lock_valid>
6001053e:	b968      	cbnz	r0, 6001055c <work_queue_main+0x40>
60010540:	2394      	movs	r3, #148	; 0x94
60010542:	4a68      	ldr	r2, [pc, #416]	; (600106e4 <work_queue_main+0x1c8>)
60010544:	4968      	ldr	r1, [pc, #416]	; (600106e8 <work_queue_main+0x1cc>)
60010546:	4869      	ldr	r0, [pc, #420]	; (600106ec <work_queue_main+0x1d0>)
60010548:	f007 fcdb 	bl	60017f02 <assert_print>
6001054c:	4963      	ldr	r1, [pc, #396]	; (600106dc <work_queue_main+0x1c0>)
6001054e:	4868      	ldr	r0, [pc, #416]	; (600106f0 <work_queue_main+0x1d4>)
60010550:	f007 fcd7 	bl	60017f02 <assert_print>
60010554:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010556:	4863      	ldr	r0, [pc, #396]	; (600106e4 <work_queue_main+0x1c8>)
60010558:	f007 fccc 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
6001055c:	4630      	mov	r0, r6
6001055e:	f7ff fc51 	bl	6000fe04 <z_spin_lock_set_owner>
60010562:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
60010566:	b9ad      	cbnz	r5, 60010594 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
60010568:	2102      	movs	r1, #2
6001056a:	f104 0098 	add.w	r0, r4, #152	; 0x98
6001056e:	f009 f9d2 	bl	60019916 <flag_test_and_clear>
60010572:	2800      	cmp	r0, #0
60010574:	d135      	bne.n	600105e2 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
60010576:	2300      	movs	r3, #0
60010578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6001057c:	4641      	mov	r1, r8
6001057e:	4630      	mov	r0, r6
60010580:	9302      	str	r3, [sp, #8]
60010582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60010586:	e9cd 2300 	strd	r2, r3, [sp]
6001058a:	f104 0288 	add.w	r2, r4, #136	; 0x88
6001058e:	f001 fcd9 	bl	60011f44 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
60010592:	e7c9      	b.n	60010528 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
60010594:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010598:	4630      	mov	r0, r6
	return node->next;
6001059a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
6001059c:	4295      	cmp	r5, r2
	list->head = node;
6001059e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	list->tail = node;
600105a2:	bf08      	it	eq
600105a4:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
600105a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
600105ac:	f043 0302 	orr.w	r3, r3, #2
600105b0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
600105b4:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
600105b6:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
600105ba:	f023 0304 	bic.w	r3, r3, #4
600105be:	f043 0301 	orr.w	r3, r3, #1
600105c2:	60eb      	str	r3, [r5, #12]
600105c4:	f7ff fc10 	bl	6000fde8 <z_spin_unlock_valid>
600105c8:	b9a8      	cbnz	r0, 600105f6 <work_queue_main+0xda>
600105ca:	23c2      	movs	r3, #194	; 0xc2
600105cc:	4a45      	ldr	r2, [pc, #276]	; (600106e4 <work_queue_main+0x1c8>)
600105ce:	4949      	ldr	r1, [pc, #292]	; (600106f4 <work_queue_main+0x1d8>)
600105d0:	4846      	ldr	r0, [pc, #280]	; (600106ec <work_queue_main+0x1d0>)
600105d2:	f007 fc96 	bl	60017f02 <assert_print>
600105d6:	4941      	ldr	r1, [pc, #260]	; (600106dc <work_queue_main+0x1c0>)
600105d8:	4847      	ldr	r0, [pc, #284]	; (600106f8 <work_queue_main+0x1dc>)
600105da:	f007 fc92 	bl	60017f02 <assert_print>
600105de:	21c2      	movs	r1, #194	; 0xc2
600105e0:	e7b9      	b.n	60010556 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
600105e2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
600105e6:	2200      	movs	r2, #0
600105e8:	2101      	movs	r1, #1
600105ea:	4628      	mov	r0, r5
600105ec:	f001 fc4c 	bl	60011e88 <z_sched_wake>
600105f0:	2800      	cmp	r0, #0
600105f2:	d1f8      	bne.n	600105e6 <work_queue_main+0xca>
600105f4:	e7bf      	b.n	60010576 <work_queue_main+0x5a>
	__asm__ volatile(
600105f6:	f388 8811 	msr	BASEPRI, r8
600105fa:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
600105fe:	f1b9 0f00 	cmp.w	r9, #0
60010602:	d10a      	bne.n	6001061a <work_queue_main+0xfe>
60010604:	493d      	ldr	r1, [pc, #244]	; (600106fc <work_queue_main+0x1e0>)
60010606:	f240 239b 	movw	r3, #667	; 0x29b
6001060a:	4838      	ldr	r0, [pc, #224]	; (600106ec <work_queue_main+0x1d0>)
6001060c:	4a3c      	ldr	r2, [pc, #240]	; (60010700 <work_queue_main+0x1e4>)
6001060e:	f007 fc78 	bl	60017f02 <assert_print>
60010612:	f240 219b 	movw	r1, #667	; 0x29b
60010616:	483a      	ldr	r0, [pc, #232]	; (60010700 <work_queue_main+0x1e4>)
60010618:	e79e      	b.n	60010558 <work_queue_main+0x3c>
		handler(work);
6001061a:	4628      	mov	r0, r5
6001061c:	47c8      	blx	r9
	__asm__ volatile(
6001061e:	f04f 0310 	mov.w	r3, #16
60010622:	f3ef 8a11 	mrs	sl, BASEPRI
60010626:	f383 8812 	msr	BASEPRI_MAX, r3
6001062a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6001062e:	4630      	mov	r0, r6
60010630:	f7ff fbcc 	bl	6000fdcc <z_spin_lock_valid>
60010634:	2800      	cmp	r0, #0
60010636:	d083      	beq.n	60010540 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
60010638:	4630      	mov	r0, r6
6001063a:	f7ff fbe3 	bl	6000fe04 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
6001063e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
60010640:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
60010642:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
60010646:	d417      	bmi.n	60010678 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
60010648:	60ea      	str	r2, [r5, #12]
6001064a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6001064e:	4630      	mov	r0, r6
60010650:	f023 0302 	bic.w	r3, r3, #2
60010654:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
60010658:	f3c3 2500 	ubfx	r5, r3, #8, #1
6001065c:	f7ff fbc4 	bl	6000fde8 <z_spin_unlock_valid>
60010660:	2800      	cmp	r0, #0
60010662:	d0b2      	beq.n	600105ca <work_queue_main+0xae>
	__asm__ volatile(
60010664:	f38a 8811 	msr	BASEPRI, sl
60010668:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
6001066c:	2d00      	cmp	r5, #0
6001066e:	f47f af5b 	bne.w	60010528 <work_queue_main+0xc>
	z_impl_k_yield();
60010672:	f001 f9cf 	bl	60011a14 <z_impl_k_yield>
}
60010676:	e757      	b.n	60010528 <work_queue_main+0xc>
	*flagp &= ~BIT(bit);
60010678:	f023 0303 	bic.w	r3, r3, #3
	return list->head;
6001067c:	6838      	ldr	r0, [r7, #0]
6001067e:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
60010680:	2800      	cmp	r0, #0
60010682:	d0e2      	beq.n	6001064a <work_queue_main+0x12e>
	return node->next;
60010684:	f04f 0800 	mov.w	r8, #0
60010688:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
6001068c:	46c3      	mov	fp, r8
6001068e:	2800      	cmp	r0, #0
60010690:	d0db      	beq.n	6001064a <work_queue_main+0x12e>
		if (wc->work == work) {
60010692:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
60010694:	4602      	mov	r2, r0
		if (wc->work == work) {
60010696:	429d      	cmp	r5, r3
60010698:	d10d      	bne.n	600106b6 <work_queue_main+0x19a>
	return node->next;
6001069a:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
6001069c:	f1b8 0f00 	cmp.w	r8, #0
600106a0:	d112      	bne.n	600106c8 <work_queue_main+0x1ac>
600106a2:	687b      	ldr	r3, [r7, #4]
	list->head = node;
600106a4:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
600106a6:	4283      	cmp	r3, r0
600106a8:	d100      	bne.n	600106ac <work_queue_main+0x190>
	list->tail = node;
600106aa:	607a      	str	r2, [r7, #4]
	parent->next = child;
600106ac:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
600106b0:	f7ff fe7c 	bl	600103ac <z_impl_k_sem_give>
}
600106b4:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
600106b6:	f1b9 0f00 	cmp.w	r9, #0
600106ba:	d00d      	beq.n	600106d8 <work_queue_main+0x1bc>
	return node->next;
600106bc:	f8d9 3000 	ldr.w	r3, [r9]
600106c0:	4648      	mov	r0, r9
600106c2:	4690      	mov	r8, r2
600106c4:	4699      	mov	r9, r3
600106c6:	e7e2      	b.n	6001068e <work_queue_main+0x172>
	parent->next = child;
600106c8:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
600106cc:	687b      	ldr	r3, [r7, #4]
600106ce:	4283      	cmp	r3, r0
	list->tail = node;
600106d0:	bf08      	it	eq
600106d2:	f8c7 8004 	streq.w	r8, [r7, #4]
}
600106d6:	e7e9      	b.n	600106ac <work_queue_main+0x190>
600106d8:	464b      	mov	r3, r9
600106da:	e7f1      	b.n	600106c0 <work_queue_main+0x1a4>
600106dc:	20204dc0 	.word	0x20204dc0
600106e0:	20204db8 	.word	0x20204db8
600106e4:	6001c758 	.word	0x6001c758
600106e8:	6001c785 	.word	0x6001c785
600106ec:	6001c3d7 	.word	0x6001c3d7
600106f0:	6001c79a 	.word	0x6001c79a
600106f4:	6001c7b2 	.word	0x6001c7b2
600106f8:	6001c7c9 	.word	0x6001c7c9
600106fc:	6001ebb6 	.word	0x6001ebb6
60010700:	6001eb95 	.word	0x6001eb95

60010704 <submit_to_queue_locked>:
{
60010704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
60010706:	68c3      	ldr	r3, [r0, #12]
{
60010708:	4604      	mov	r4, r0
6001070a:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
6001070c:	079a      	lsls	r2, r3, #30
6001070e:	f3c3 0640 	ubfx	r6, r3, #1, #1
60010712:	d439      	bmi.n	60010788 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
60010714:	075b      	lsls	r3, r3, #29
60010716:	d425      	bmi.n	60010764 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
60010718:	680b      	ldr	r3, [r1, #0]
6001071a:	b90b      	cbnz	r3, 60010720 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
6001071c:	6883      	ldr	r3, [r0, #8]
6001071e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
60010720:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
60010722:	07dd      	lsls	r5, r3, #31
60010724:	d521      	bpl.n	6001076a <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
60010726:	68a3      	ldr	r3, [r4, #8]
60010728:	b95b      	cbnz	r3, 60010742 <submit_to_queue_locked+0x3e>
6001072a:	4928      	ldr	r1, [pc, #160]	; (600107cc <submit_to_queue_locked+0xc8>)
6001072c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
60010730:	4827      	ldr	r0, [pc, #156]	; (600107d0 <submit_to_queue_locked+0xcc>)
60010732:	4a28      	ldr	r2, [pc, #160]	; (600107d4 <submit_to_queue_locked+0xd0>)
60010734:	f007 fbe5 	bl	60017f02 <assert_print>
60010738:	f44f 71a7 	mov.w	r1, #334	; 0x14e
6001073c:	4825      	ldr	r0, [pc, #148]	; (600107d4 <submit_to_queue_locked+0xd0>)
6001073e:	f007 fbd9 	bl	60017ef4 <assert_post_action>
			ret = 2;
60010742:	2602      	movs	r6, #2
			*queuep = work->queue;
60010744:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
60010746:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
60010748:	2d00      	cmp	r5, #0
6001074a:	d03c      	beq.n	600107c6 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
6001074c:	4b22      	ldr	r3, [pc, #136]	; (600107d8 <submit_to_queue_locked+0xd4>)
6001074e:	689b      	ldr	r3, [r3, #8]
60010750:	42ab      	cmp	r3, r5
60010752:	d00c      	beq.n	6001076e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
60010754:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
60010758:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
6001075a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
6001075e:	d416      	bmi.n	6001078e <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
60010760:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
60010764:	2300      	movs	r3, #0
60010766:	603b      	str	r3, [r7, #0]
	return ret;
60010768:	e027      	b.n	600107ba <submit_to_queue_locked+0xb6>
		ret = 1;
6001076a:	2601      	movs	r6, #1
6001076c:	e7eb      	b.n	60010746 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
6001076e:	f009 f8aa 	bl	600198c6 <k_is_in_isr>
60010772:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
60010776:	2800      	cmp	r0, #0
60010778:	d1ee      	bne.n	60010758 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
6001077a:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
6001077c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
60010780:	d5ee      	bpl.n	60010760 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
60010782:	b152      	cbz	r2, 6001079a <submit_to_queue_locked+0x96>
60010784:	075b      	lsls	r3, r3, #29
60010786:	d408      	bmi.n	6001079a <submit_to_queue_locked+0x96>
		ret = -EBUSY;
60010788:	f06f 060f 	mvn.w	r6, #15
6001078c:	e7ea      	b.n	60010764 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
6001078e:	2a00      	cmp	r2, #0
60010790:	d1fa      	bne.n	60010788 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
60010792:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
60010796:	2b00      	cmp	r3, #0
60010798:	d1f6      	bne.n	60010788 <submit_to_queue_locked+0x84>
	parent->next = child;
6001079a:	2300      	movs	r3, #0
6001079c:	6023      	str	r3, [r4, #0]
	return list->tail;
6001079e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
600107a2:	b963      	cbnz	r3, 600107be <submit_to_queue_locked+0xba>
	list->head = node;
600107a4:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
600107a8:	4628      	mov	r0, r5
600107aa:	f009 f8bf 	bl	6001992c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
600107ae:	68e3      	ldr	r3, [r4, #12]
600107b0:	f043 0304 	orr.w	r3, r3, #4
600107b4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
600107b6:	683b      	ldr	r3, [r7, #0]
600107b8:	60a3      	str	r3, [r4, #8]
}
600107ba:	4630      	mov	r0, r6
600107bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
600107be:	601c      	str	r4, [r3, #0]
	list->tail = node;
600107c0:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
600107c4:	e7f0      	b.n	600107a8 <submit_to_queue_locked+0xa4>
		return -EINVAL;
600107c6:	f06f 0615 	mvn.w	r6, #21
600107ca:	e7cb      	b.n	60010764 <submit_to_queue_locked+0x60>
600107cc:	6001ebcd 	.word	0x6001ebcd
600107d0:	6001c3d7 	.word	0x6001c3d7
600107d4:	6001eb95 	.word	0x6001eb95
600107d8:	20204d8c 	.word	0x20204d8c

600107dc <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
600107dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
600107de:	4604      	mov	r4, r0
	__asm__ volatile(
600107e0:	f04f 0310 	mov.w	r3, #16
600107e4:	f3ef 8511 	mrs	r5, BASEPRI
600107e8:	f383 8812 	msr	BASEPRI_MAX, r3
600107ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600107f0:	481c      	ldr	r0, [pc, #112]	; (60010864 <work_timeout+0x88>)
600107f2:	f7ff faeb 	bl	6000fdcc <z_spin_lock_valid>
600107f6:	b968      	cbnz	r0, 60010814 <work_timeout+0x38>
600107f8:	2394      	movs	r3, #148	; 0x94
600107fa:	4a1b      	ldr	r2, [pc, #108]	; (60010868 <work_timeout+0x8c>)
600107fc:	491b      	ldr	r1, [pc, #108]	; (6001086c <work_timeout+0x90>)
600107fe:	481c      	ldr	r0, [pc, #112]	; (60010870 <work_timeout+0x94>)
60010800:	f007 fb7f 	bl	60017f02 <assert_print>
60010804:	4917      	ldr	r1, [pc, #92]	; (60010864 <work_timeout+0x88>)
60010806:	481b      	ldr	r0, [pc, #108]	; (60010874 <work_timeout+0x98>)
60010808:	f007 fb7b 	bl	60017f02 <assert_print>
6001080c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6001080e:	4816      	ldr	r0, [pc, #88]	; (60010868 <work_timeout+0x8c>)
60010810:	f007 fb70 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
60010814:	4813      	ldr	r0, [pc, #76]	; (60010864 <work_timeout+0x88>)
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
60010816:	f1a4 0610 	sub.w	r6, r4, #16
6001081a:	f7ff faf3 	bl	6000fe04 <z_spin_lock_set_owner>
	struct k_work_q *queue = NULL;
6001081e:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
60010820:	2103      	movs	r1, #3
60010822:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
60010824:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
60010826:	f009 f876 	bl	60019916 <flag_test_and_clear>
6001082a:	b128      	cbz	r0, 60010838 <work_timeout+0x5c>
		queue = dw->queue;
6001082c:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
6001082e:	a901      	add	r1, sp, #4
60010830:	4630      	mov	r0, r6
		queue = dw->queue;
60010832:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
60010834:	f7ff ff66 	bl	60010704 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010838:	480a      	ldr	r0, [pc, #40]	; (60010864 <work_timeout+0x88>)
6001083a:	f7ff fad5 	bl	6000fde8 <z_spin_unlock_valid>
6001083e:	b958      	cbnz	r0, 60010858 <work_timeout+0x7c>
60010840:	23c2      	movs	r3, #194	; 0xc2
60010842:	4a09      	ldr	r2, [pc, #36]	; (60010868 <work_timeout+0x8c>)
60010844:	490c      	ldr	r1, [pc, #48]	; (60010878 <work_timeout+0x9c>)
60010846:	480a      	ldr	r0, [pc, #40]	; (60010870 <work_timeout+0x94>)
60010848:	f007 fb5b 	bl	60017f02 <assert_print>
6001084c:	4905      	ldr	r1, [pc, #20]	; (60010864 <work_timeout+0x88>)
6001084e:	480b      	ldr	r0, [pc, #44]	; (6001087c <work_timeout+0xa0>)
60010850:	f007 fb57 	bl	60017f02 <assert_print>
60010854:	21c2      	movs	r1, #194	; 0xc2
60010856:	e7da      	b.n	6001080e <work_timeout+0x32>
	__asm__ volatile(
60010858:	f385 8811 	msr	BASEPRI, r5
6001085c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
60010860:	b002      	add	sp, #8
60010862:	bd70      	pop	{r4, r5, r6, pc}
60010864:	20204dc0 	.word	0x20204dc0
60010868:	6001c758 	.word	0x6001c758
6001086c:	6001c785 	.word	0x6001c785
60010870:	6001c3d7 	.word	0x6001c3d7
60010874:	6001c79a 	.word	0x6001c79a
60010878:	6001c7b2 	.word	0x6001c7b2
6001087c:	6001c7c9 	.word	0x6001c7c9

60010880 <k_work_init>:
{
60010880:	b538      	push	{r3, r4, r5, lr}
60010882:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
60010884:	4604      	mov	r4, r0
60010886:	b948      	cbnz	r0, 6001089c <k_work_init+0x1c>
60010888:	490c      	ldr	r1, [pc, #48]	; (600108bc <k_work_init+0x3c>)
6001088a:	2389      	movs	r3, #137	; 0x89
6001088c:	4a0c      	ldr	r2, [pc, #48]	; (600108c0 <k_work_init+0x40>)
6001088e:	480d      	ldr	r0, [pc, #52]	; (600108c4 <k_work_init+0x44>)
60010890:	f007 fb37 	bl	60017f02 <assert_print>
60010894:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
60010896:	480a      	ldr	r0, [pc, #40]	; (600108c0 <k_work_init+0x40>)
60010898:	f007 fb2c 	bl	60017ef4 <assert_post_action>
6001089c:	b939      	cbnz	r1, 600108ae <k_work_init+0x2e>
6001089e:	490a      	ldr	r1, [pc, #40]	; (600108c8 <k_work_init+0x48>)
600108a0:	238a      	movs	r3, #138	; 0x8a
600108a2:	4a07      	ldr	r2, [pc, #28]	; (600108c0 <k_work_init+0x40>)
600108a4:	4807      	ldr	r0, [pc, #28]	; (600108c4 <k_work_init+0x44>)
600108a6:	f007 fb2c 	bl	60017f02 <assert_print>
600108aa:	218a      	movs	r1, #138	; 0x8a
600108ac:	e7f3      	b.n	60010896 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
600108ae:	2210      	movs	r2, #16
600108b0:	2100      	movs	r1, #0
600108b2:	f002 fd45 	bl	60013340 <memset>
600108b6:	6065      	str	r5, [r4, #4]
}
600108b8:	bd38      	pop	{r3, r4, r5, pc}
600108ba:	bf00      	nop
600108bc:	6001ec23 	.word	0x6001ec23
600108c0:	6001eb95 	.word	0x6001eb95
600108c4:	6001c3d7 	.word	0x6001c3d7
600108c8:	6001ebb6 	.word	0x6001ebb6

600108cc <z_work_submit_to_queue>:
{
600108cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
600108ce:	460c      	mov	r4, r1
{
600108d0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
600108d2:	b959      	cbnz	r1, 600108ec <z_work_submit_to_queue+0x20>
600108d4:	4921      	ldr	r1, [pc, #132]	; (6001095c <z_work_submit_to_queue+0x90>)
600108d6:	f44f 73ba 	mov.w	r3, #372	; 0x174
600108da:	4821      	ldr	r0, [pc, #132]	; (60010960 <z_work_submit_to_queue+0x94>)
600108dc:	4a21      	ldr	r2, [pc, #132]	; (60010964 <z_work_submit_to_queue+0x98>)
600108de:	f007 fb10 	bl	60017f02 <assert_print>
600108e2:	f44f 71ba 	mov.w	r1, #372	; 0x174
600108e6:	481f      	ldr	r0, [pc, #124]	; (60010964 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600108e8:	f007 fb04 	bl	60017ef4 <assert_post_action>
	__asm__ volatile(
600108ec:	f04f 0310 	mov.w	r3, #16
600108f0:	f3ef 8511 	mrs	r5, BASEPRI
600108f4:	f383 8812 	msr	BASEPRI_MAX, r3
600108f8:	f3bf 8f6f 	isb	sy
600108fc:	481a      	ldr	r0, [pc, #104]	; (60010968 <z_work_submit_to_queue+0x9c>)
600108fe:	f7ff fa65 	bl	6000fdcc <z_spin_lock_valid>
60010902:	b960      	cbnz	r0, 6001091e <z_work_submit_to_queue+0x52>
60010904:	2394      	movs	r3, #148	; 0x94
60010906:	4a19      	ldr	r2, [pc, #100]	; (6001096c <z_work_submit_to_queue+0xa0>)
60010908:	4919      	ldr	r1, [pc, #100]	; (60010970 <z_work_submit_to_queue+0xa4>)
6001090a:	4815      	ldr	r0, [pc, #84]	; (60010960 <z_work_submit_to_queue+0x94>)
6001090c:	f007 faf9 	bl	60017f02 <assert_print>
60010910:	4915      	ldr	r1, [pc, #84]	; (60010968 <z_work_submit_to_queue+0x9c>)
60010912:	4818      	ldr	r0, [pc, #96]	; (60010974 <z_work_submit_to_queue+0xa8>)
60010914:	f007 faf5 	bl	60017f02 <assert_print>
60010918:	2194      	movs	r1, #148	; 0x94
6001091a:	4814      	ldr	r0, [pc, #80]	; (6001096c <z_work_submit_to_queue+0xa0>)
6001091c:	e7e4      	b.n	600108e8 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
6001091e:	4812      	ldr	r0, [pc, #72]	; (60010968 <z_work_submit_to_queue+0x9c>)
60010920:	f7ff fa70 	bl	6000fe04 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
60010924:	4620      	mov	r0, r4
60010926:	a901      	add	r1, sp, #4
60010928:	f7ff feec 	bl	60010704 <submit_to_queue_locked>
6001092c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6001092e:	480e      	ldr	r0, [pc, #56]	; (60010968 <z_work_submit_to_queue+0x9c>)
60010930:	f7ff fa5a 	bl	6000fde8 <z_spin_unlock_valid>
60010934:	b958      	cbnz	r0, 6001094e <z_work_submit_to_queue+0x82>
60010936:	23c2      	movs	r3, #194	; 0xc2
60010938:	4a0c      	ldr	r2, [pc, #48]	; (6001096c <z_work_submit_to_queue+0xa0>)
6001093a:	490f      	ldr	r1, [pc, #60]	; (60010978 <z_work_submit_to_queue+0xac>)
6001093c:	4808      	ldr	r0, [pc, #32]	; (60010960 <z_work_submit_to_queue+0x94>)
6001093e:	f007 fae0 	bl	60017f02 <assert_print>
60010942:	4909      	ldr	r1, [pc, #36]	; (60010968 <z_work_submit_to_queue+0x9c>)
60010944:	480d      	ldr	r0, [pc, #52]	; (6001097c <z_work_submit_to_queue+0xb0>)
60010946:	f007 fadc 	bl	60017f02 <assert_print>
6001094a:	21c2      	movs	r1, #194	; 0xc2
6001094c:	e7e5      	b.n	6001091a <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
6001094e:	f385 8811 	msr	BASEPRI, r5
60010952:	f3bf 8f6f 	isb	sy
}
60010956:	4620      	mov	r0, r4
60010958:	b003      	add	sp, #12
6001095a:	bd30      	pop	{r4, r5, pc}
6001095c:	6001ec23 	.word	0x6001ec23
60010960:	6001c3d7 	.word	0x6001c3d7
60010964:	6001eb95 	.word	0x6001eb95
60010968:	20204dc0 	.word	0x20204dc0
6001096c:	6001c758 	.word	0x6001c758
60010970:	6001c785 	.word	0x6001c785
60010974:	6001c79a 	.word	0x6001c79a
60010978:	6001c7b2 	.word	0x6001c7b2
6001097c:	6001c7c9 	.word	0x6001c7c9

60010980 <k_work_queue_init>:
{
60010980:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
60010982:	b958      	cbnz	r0, 6001099c <k_work_queue_init+0x1c>
60010984:	4908      	ldr	r1, [pc, #32]	; (600109a8 <k_work_queue_init+0x28>)
60010986:	f240 23b9 	movw	r3, #697	; 0x2b9
6001098a:	4808      	ldr	r0, [pc, #32]	; (600109ac <k_work_queue_init+0x2c>)
6001098c:	4a08      	ldr	r2, [pc, #32]	; (600109b0 <k_work_queue_init+0x30>)
6001098e:	f007 fab8 	bl	60017f02 <assert_print>
60010992:	f240 21b9 	movw	r1, #697	; 0x2b9
60010996:	4806      	ldr	r0, [pc, #24]	; (600109b0 <k_work_queue_init+0x30>)
60010998:	f007 faac 	bl	60017ef4 <assert_post_action>
	*queue = (struct k_work_q) {
6001099c:	22a0      	movs	r2, #160	; 0xa0
6001099e:	2100      	movs	r1, #0
600109a0:	f002 fcce 	bl	60013340 <memset>
}
600109a4:	bd08      	pop	{r3, pc}
600109a6:	bf00      	nop
600109a8:	6001ebd3 	.word	0x6001ebd3
600109ac:	6001c3d7 	.word	0x6001c3d7
600109b0:	6001eb95 	.word	0x6001eb95

600109b4 <k_work_queue_start>:
{
600109b4:	b5f0      	push	{r4, r5, r6, r7, lr}
600109b6:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
600109b8:	4604      	mov	r4, r0
{
600109ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
600109bc:	b958      	cbnz	r0, 600109d6 <k_work_queue_start+0x22>
600109be:	492b      	ldr	r1, [pc, #172]	; (60010a6c <k_work_queue_start+0xb8>)
600109c0:	f44f 7332 	mov.w	r3, #712	; 0x2c8
600109c4:	4a2a      	ldr	r2, [pc, #168]	; (60010a70 <k_work_queue_start+0xbc>)
600109c6:	482b      	ldr	r0, [pc, #172]	; (60010a74 <k_work_queue_start+0xc0>)
600109c8:	f007 fa9b 	bl	60017f02 <assert_print>
600109cc:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
600109d0:	4827      	ldr	r0, [pc, #156]	; (60010a70 <k_work_queue_start+0xbc>)
600109d2:	f007 fa8f 	bl	60017ef4 <assert_post_action>
600109d6:	b949      	cbnz	r1, 600109ec <k_work_queue_start+0x38>
600109d8:	4927      	ldr	r1, [pc, #156]	; (60010a78 <k_work_queue_start+0xc4>)
600109da:	f240 23c9 	movw	r3, #713	; 0x2c9
600109de:	4a24      	ldr	r2, [pc, #144]	; (60010a70 <k_work_queue_start+0xbc>)
600109e0:	4824      	ldr	r0, [pc, #144]	; (60010a74 <k_work_queue_start+0xc0>)
600109e2:	f007 fa8e 	bl	60017f02 <assert_print>
600109e6:	f240 21c9 	movw	r1, #713	; 0x2c9
600109ea:	e7f1      	b.n	600109d0 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
600109ec:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
600109f0:	f010 0001 	ands.w	r0, r0, #1
600109f4:	d009      	beq.n	60010a0a <k_work_queue_start+0x56>
600109f6:	4921      	ldr	r1, [pc, #132]	; (60010a7c <k_work_queue_start+0xc8>)
600109f8:	f240 23ca 	movw	r3, #714	; 0x2ca
600109fc:	4a1c      	ldr	r2, [pc, #112]	; (60010a70 <k_work_queue_start+0xbc>)
600109fe:	481d      	ldr	r0, [pc, #116]	; (60010a74 <k_work_queue_start+0xc0>)
60010a00:	f007 fa7f 	bl	60017f02 <assert_print>
60010a04:	f240 21ca 	movw	r1, #714	; 0x2ca
60010a08:	e7e2      	b.n	600109d0 <k_work_queue_start+0x1c>
	list->tail = NULL;
60010a0a:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
60010a0e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
60010a12:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
60010a16:	f104 0090 	add.w	r0, r4, #144	; 0x90
60010a1a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
60010a1e:	b31d      	cbz	r5, 60010a68 <k_work_queue_start+0xb4>
60010a20:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
60010a22:	2800      	cmp	r0, #0
60010a24:	f240 1001 	movw	r0, #257	; 0x101
60010a28:	bf08      	it	eq
60010a2a:	2001      	moveq	r0, #1
	*flagp = flags;
60010a2c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
60010a30:	2000      	movs	r0, #0
60010a32:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
60010a36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
60010a3a:	9400      	str	r4, [sp, #0]
60010a3c:	e9cd 3003 	strd	r3, r0, [sp, #12]
60010a40:	e9cd 0001 	strd	r0, r0, [sp, #4]
60010a44:	4b0e      	ldr	r3, [pc, #56]	; (60010a80 <k_work_queue_start+0xcc>)
60010a46:	4620      	mov	r0, r4
60010a48:	e9cd 6706 	strd	r6, r7, [sp, #24]
60010a4c:	f7ff f906 	bl	6000fc5c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
60010a50:	b125      	cbz	r5, 60010a5c <k_work_queue_start+0xa8>
60010a52:	6829      	ldr	r1, [r5, #0]
60010a54:	b111      	cbz	r1, 60010a5c <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
60010a56:	4620      	mov	r0, r4
60010a58:	f008 ff3b 	bl	600198d2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
60010a5c:	4620      	mov	r0, r4
}
60010a5e:	b009      	add	sp, #36	; 0x24
60010a60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
60010a64:	f008 bf3a 	b.w	600198dc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
60010a68:	2001      	movs	r0, #1
60010a6a:	e7df      	b.n	60010a2c <k_work_queue_start+0x78>
60010a6c:	6001ebe8 	.word	0x6001ebe8
60010a70:	6001eb95 	.word	0x6001eb95
60010a74:	6001c3d7 	.word	0x6001c3d7
60010a78:	6001cb55 	.word	0x6001cb55
60010a7c:	6001ebee 	.word	0x6001ebee
60010a80:	6001051d 	.word	0x6001051d

60010a84 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
60010a84:	b538      	push	{r3, r4, r5, lr}
60010a86:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
60010a88:	4604      	mov	r4, r0
60010a8a:	b958      	cbnz	r0, 60010aa4 <k_work_init_delayable+0x20>
60010a8c:	490f      	ldr	r1, [pc, #60]	; (60010acc <k_work_init_delayable+0x48>)
60010a8e:	f44f 7350 	mov.w	r3, #832	; 0x340
60010a92:	4a0f      	ldr	r2, [pc, #60]	; (60010ad0 <k_work_init_delayable+0x4c>)
60010a94:	480f      	ldr	r0, [pc, #60]	; (60010ad4 <k_work_init_delayable+0x50>)
60010a96:	f007 fa34 	bl	60017f02 <assert_print>
60010a9a:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
60010a9e:	480c      	ldr	r0, [pc, #48]	; (60010ad0 <k_work_init_delayable+0x4c>)
60010aa0:	f007 fa28 	bl	60017ef4 <assert_post_action>
60010aa4:	b949      	cbnz	r1, 60010aba <k_work_init_delayable+0x36>
60010aa6:	490c      	ldr	r1, [pc, #48]	; (60010ad8 <k_work_init_delayable+0x54>)
60010aa8:	f240 3341 	movw	r3, #833	; 0x341
60010aac:	4a08      	ldr	r2, [pc, #32]	; (60010ad0 <k_work_init_delayable+0x4c>)
60010aae:	4809      	ldr	r0, [pc, #36]	; (60010ad4 <k_work_init_delayable+0x50>)
60010ab0:	f007 fa27 	bl	60017f02 <assert_print>
60010ab4:	f240 3141 	movw	r1, #833	; 0x341
60010ab8:	e7f1      	b.n	60010a9e <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
60010aba:	2230      	movs	r2, #48	; 0x30
60010abc:	2100      	movs	r1, #0
60010abe:	f002 fc3f 	bl	60013340 <memset>
60010ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
60010ac6:	6065      	str	r5, [r4, #4]
60010ac8:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
60010aca:	bd38      	pop	{r3, r4, r5, pc}
60010acc:	6001ec22 	.word	0x6001ec22
60010ad0:	6001eb95 	.word	0x6001eb95
60010ad4:	6001c3d7 	.word	0x6001c3d7
60010ad8:	6001ebb6 	.word	0x6001ebb6

60010adc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
60010adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
60010ade:	4616      	mov	r6, r2
60010ae0:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
60010ae2:	460c      	mov	r4, r1
{
60010ae4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
60010ae6:	b959      	cbnz	r1, 60010b00 <k_work_schedule_for_queue+0x24>
60010ae8:	492d      	ldr	r1, [pc, #180]	; (60010ba0 <k_work_schedule_for_queue+0xc4>)
60010aea:	f240 33ba 	movw	r3, #954	; 0x3ba
60010aee:	482d      	ldr	r0, [pc, #180]	; (60010ba4 <k_work_schedule_for_queue+0xc8>)
60010af0:	4a2d      	ldr	r2, [pc, #180]	; (60010ba8 <k_work_schedule_for_queue+0xcc>)
60010af2:	f007 fa06 	bl	60017f02 <assert_print>
60010af6:	f240 31ba 	movw	r1, #954	; 0x3ba
60010afa:	482b      	ldr	r0, [pc, #172]	; (60010ba8 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010afc:	f007 f9fa 	bl	60017ef4 <assert_post_action>
	__asm__ volatile(
60010b00:	f04f 0310 	mov.w	r3, #16
60010b04:	f3ef 8711 	mrs	r7, BASEPRI
60010b08:	f383 8812 	msr	BASEPRI_MAX, r3
60010b0c:	f3bf 8f6f 	isb	sy
60010b10:	4826      	ldr	r0, [pc, #152]	; (60010bac <k_work_schedule_for_queue+0xd0>)
60010b12:	f7ff f95b 	bl	6000fdcc <z_spin_lock_valid>
60010b16:	b960      	cbnz	r0, 60010b32 <k_work_schedule_for_queue+0x56>
60010b18:	2394      	movs	r3, #148	; 0x94
60010b1a:	4a25      	ldr	r2, [pc, #148]	; (60010bb0 <k_work_schedule_for_queue+0xd4>)
60010b1c:	4925      	ldr	r1, [pc, #148]	; (60010bb4 <k_work_schedule_for_queue+0xd8>)
60010b1e:	4821      	ldr	r0, [pc, #132]	; (60010ba4 <k_work_schedule_for_queue+0xc8>)
60010b20:	f007 f9ef 	bl	60017f02 <assert_print>
60010b24:	4921      	ldr	r1, [pc, #132]	; (60010bac <k_work_schedule_for_queue+0xd0>)
60010b26:	4824      	ldr	r0, [pc, #144]	; (60010bb8 <k_work_schedule_for_queue+0xdc>)
60010b28:	f007 f9eb 	bl	60017f02 <assert_print>
60010b2c:	2194      	movs	r1, #148	; 0x94
60010b2e:	4820      	ldr	r0, [pc, #128]	; (60010bb0 <k_work_schedule_for_queue+0xd4>)
60010b30:	e7e4      	b.n	60010afc <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
60010b32:	481e      	ldr	r0, [pc, #120]	; (60010bac <k_work_schedule_for_queue+0xd0>)
60010b34:	f7ff f966 	bl	6000fe04 <z_spin_lock_set_owner>
	return *flagp;
60010b38:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
60010b3a:	f013 0f0e 	tst.w	r3, #14
60010b3e:	d125      	bne.n	60010b8c <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
60010b40:	ea55 0206 	orrs.w	r2, r5, r6
60010b44:	d114      	bne.n	60010b70 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
60010b46:	4620      	mov	r0, r4
60010b48:	a901      	add	r1, sp, #4
60010b4a:	f7ff fddb 	bl	60010704 <submit_to_queue_locked>
60010b4e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010b50:	4816      	ldr	r0, [pc, #88]	; (60010bac <k_work_schedule_for_queue+0xd0>)
60010b52:	f7ff f949 	bl	6000fde8 <z_spin_unlock_valid>
60010b56:	b9d8      	cbnz	r0, 60010b90 <k_work_schedule_for_queue+0xb4>
60010b58:	23c2      	movs	r3, #194	; 0xc2
60010b5a:	4a15      	ldr	r2, [pc, #84]	; (60010bb0 <k_work_schedule_for_queue+0xd4>)
60010b5c:	4917      	ldr	r1, [pc, #92]	; (60010bbc <k_work_schedule_for_queue+0xe0>)
60010b5e:	4811      	ldr	r0, [pc, #68]	; (60010ba4 <k_work_schedule_for_queue+0xc8>)
60010b60:	f007 f9cf 	bl	60017f02 <assert_print>
60010b64:	4911      	ldr	r1, [pc, #68]	; (60010bac <k_work_schedule_for_queue+0xd0>)
60010b66:	4816      	ldr	r0, [pc, #88]	; (60010bc0 <k_work_schedule_for_queue+0xe4>)
60010b68:	f007 f9cb 	bl	60017f02 <assert_print>
60010b6c:	21c2      	movs	r1, #194	; 0xc2
60010b6e:	e7de      	b.n	60010b2e <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
60010b70:	f043 0308 	orr.w	r3, r3, #8
	z_add_timeout(&dwork->timeout, work_timeout, delay);
60010b74:	f104 0010 	add.w	r0, r4, #16
60010b78:	4632      	mov	r2, r6
60010b7a:	4912      	ldr	r1, [pc, #72]	; (60010bc4 <k_work_schedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
60010b7c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
60010b7e:	9b01      	ldr	r3, [sp, #4]
60010b80:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
60010b82:	462b      	mov	r3, r5
	return ret;
60010b84:	2401      	movs	r4, #1
	z_add_timeout(&dwork->timeout, work_timeout, delay);
60010b86:	f001 fa6f 	bl	60012068 <z_add_timeout>
	return ret;
60010b8a:	e7e1      	b.n	60010b50 <k_work_schedule_for_queue+0x74>
	int ret = 0;
60010b8c:	2400      	movs	r4, #0
60010b8e:	e7df      	b.n	60010b50 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
60010b90:	f387 8811 	msr	BASEPRI, r7
60010b94:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
60010b98:	4620      	mov	r0, r4
60010b9a:	b003      	add	sp, #12
60010b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
60010b9e:	bf00      	nop
60010ba0:	6001ec22 	.word	0x6001ec22
60010ba4:	6001c3d7 	.word	0x6001c3d7
60010ba8:	6001eb95 	.word	0x6001eb95
60010bac:	20204dc0 	.word	0x20204dc0
60010bb0:	6001c758 	.word	0x6001c758
60010bb4:	6001c785 	.word	0x6001c785
60010bb8:	6001c79a 	.word	0x6001c79a
60010bbc:	6001c7b2 	.word	0x6001c7b2
60010bc0:	6001c7c9 	.word	0x6001c7c9
60010bc4:	600107dd 	.word	0x600107dd

60010bc8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
60010bc8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
60010bca:	4d07      	ldr	r5, [pc, #28]	; (60010be8 <z_reset_time_slice+0x20>)
60010bcc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
60010bce:	b154      	cbz	r4, 60010be6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
60010bd0:	f7fc fce2 	bl	6000d598 <sys_clock_elapsed>
60010bd4:	4b05      	ldr	r3, [pc, #20]	; (60010bec <z_reset_time_slice+0x24>)
60010bd6:	4404      	add	r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
60010bd8:	2100      	movs	r1, #0
60010bda:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
60010bdc:	611c      	str	r4, [r3, #16]
	}
}
60010bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
60010be2:	f001 bb53 	b.w	6001228c <z_set_timeout_expiry>
}
60010be6:	bd38      	pop	{r3, r4, r5, pc}
60010be8:	20204dcc 	.word	0x20204dcc
60010bec:	20204d8c 	.word	0x20204d8c

60010bf0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
60010bf0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
60010bf2:	4d14      	ldr	r5, [pc, #80]	; (60010c44 <update_cache+0x54>)
60010bf4:	462b      	mov	r3, r5
60010bf6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
60010bfa:	429c      	cmp	r4, r3
60010bfc:	d000      	beq.n	60010c00 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
60010bfe:	b904      	cbnz	r4, 60010c02 <update_cache+0x12>
60010c00:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
60010c02:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
60010c04:	b9a8      	cbnz	r0, 60010c32 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
60010c06:	b963      	cbnz	r3, 60010c22 <update_cache+0x32>
60010c08:	490f      	ldr	r1, [pc, #60]	; (60010c48 <update_cache+0x58>)
60010c0a:	2389      	movs	r3, #137	; 0x89
60010c0c:	4a0f      	ldr	r2, [pc, #60]	; (60010c4c <update_cache+0x5c>)
60010c0e:	4810      	ldr	r0, [pc, #64]	; (60010c50 <update_cache+0x60>)
60010c10:	f007 f977 	bl	60017f02 <assert_print>
60010c14:	480f      	ldr	r0, [pc, #60]	; (60010c54 <update_cache+0x64>)
60010c16:	f007 f974 	bl	60017f02 <assert_print>
60010c1a:	2189      	movs	r1, #137	; 0x89
60010c1c:	480b      	ldr	r0, [pc, #44]	; (60010c4c <update_cache+0x5c>)
60010c1e:	f007 f969 	bl	60017ef4 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
60010c22:	7b5a      	ldrb	r2, [r3, #13]
60010c24:	06d2      	lsls	r2, r2, #27
60010c26:	d104      	bne.n	60010c32 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
60010c28:	69a2      	ldr	r2, [r4, #24]
60010c2a:	b912      	cbnz	r2, 60010c32 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
60010c2c:	89da      	ldrh	r2, [r3, #14]
60010c2e:	2a7f      	cmp	r2, #127	; 0x7f
60010c30:	d805      	bhi.n	60010c3e <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
60010c32:	429c      	cmp	r4, r3
60010c34:	d002      	beq.n	60010c3c <update_cache+0x4c>
			z_reset_time_slice(thread);
60010c36:	4620      	mov	r0, r4
60010c38:	f7ff ffc6 	bl	60010bc8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
60010c3c:	4623      	mov	r3, r4
60010c3e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
60010c40:	bd38      	pop	{r3, r4, r5, pc}
60010c42:	bf00      	nop
60010c44:	20204d8c 	.word	0x20204d8c
60010c48:	6001ec59 	.word	0x6001ec59
60010c4c:	6001ec37 	.word	0x6001ec37
60010c50:	6001c3d7 	.word	0x6001c3d7
60010c54:	6001e923 	.word	0x6001e923

60010c58 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
60010c58:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
60010c5a:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
60010c5e:	7b42      	ldrb	r2, [r0, #13]
60010c60:	2b00      	cmp	r3, #0
60010c62:	db38      	blt.n	60010cd6 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
60010c64:	06d3      	lsls	r3, r2, #27
60010c66:	d136      	bne.n	60010cd6 <ready_thread+0x7e>
	return node->next != NULL;
60010c68:	6983      	ldr	r3, [r0, #24]
60010c6a:	2b00      	cmp	r3, #0
60010c6c:	d133      	bne.n	60010cd6 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
60010c6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
60010c72:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
60010c74:	4a18      	ldr	r2, [pc, #96]	; (60010cd8 <ready_thread+0x80>)
60010c76:	4290      	cmp	r0, r2
60010c78:	d109      	bne.n	60010c8e <ready_thread+0x36>
60010c7a:	4918      	ldr	r1, [pc, #96]	; (60010cdc <ready_thread+0x84>)
60010c7c:	23bb      	movs	r3, #187	; 0xbb
60010c7e:	4818      	ldr	r0, [pc, #96]	; (60010ce0 <ready_thread+0x88>)
60010c80:	4a18      	ldr	r2, [pc, #96]	; (60010ce4 <ready_thread+0x8c>)
60010c82:	f007 f93e 	bl	60017f02 <assert_print>
60010c86:	21bb      	movs	r1, #187	; 0xbb
60010c88:	4816      	ldr	r0, [pc, #88]	; (60010ce4 <ready_thread+0x8c>)
60010c8a:	f007 f933 	bl	60017ef4 <assert_post_action>
	return list->head == list;
60010c8e:	4916      	ldr	r1, [pc, #88]	; (60010ce8 <ready_thread+0x90>)
60010c90:	460a      	mov	r2, r1
60010c92:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
60010c96:	4294      	cmp	r4, r2
60010c98:	bf18      	it	ne
60010c9a:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
60010c9c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
60010c9e:	b923      	cbnz	r3, 60010caa <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
60010ca0:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
60010ca4:	6020      	str	r0, [r4, #0]
	list->tail = node;
60010ca6:	6208      	str	r0, [r1, #32]
}
60010ca8:	e00c      	b.n	60010cc4 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
60010caa:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
60010cae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
60010cb2:	42b5      	cmp	r5, r6
60010cb4:	d00b      	beq.n	60010cce <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
60010cb6:	42ae      	cmp	r6, r5
60010cb8:	dd09      	ble.n	60010cce <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
60010cba:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
60010cbc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
60010cc0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
60010cc2:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
60010cc4:	2000      	movs	r0, #0
		flag_ipi();
	}
}
60010cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
60010cca:	f7ff bf91 	b.w	60010bf0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
60010cce:	42a3      	cmp	r3, r4
60010cd0:	d0e6      	beq.n	60010ca0 <ready_thread+0x48>
60010cd2:	681b      	ldr	r3, [r3, #0]
60010cd4:	e7e3      	b.n	60010c9e <ready_thread+0x46>
}
60010cd6:	bd70      	pop	{r4, r5, r6, pc}
60010cd8:	20204500 	.word	0x20204500
60010cdc:	6001ec80 	.word	0x6001ec80
60010ce0:	6001c3d7 	.word	0x6001c3d7
60010ce4:	6001ec37 	.word	0x6001ec37
60010ce8:	20204d8c 	.word	0x20204d8c

60010cec <k_sched_time_slice_set>:
{
60010cec:	b570      	push	{r4, r5, r6, lr}
60010cee:	4604      	mov	r4, r0
60010cf0:	460d      	mov	r5, r1
	__asm__ volatile(
60010cf2:	f04f 0310 	mov.w	r3, #16
60010cf6:	f3ef 8611 	mrs	r6, BASEPRI
60010cfa:	f383 8812 	msr	BASEPRI_MAX, r3
60010cfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010d02:	481e      	ldr	r0, [pc, #120]	; (60010d7c <k_sched_time_slice_set+0x90>)
60010d04:	f7ff f862 	bl	6000fdcc <z_spin_lock_valid>
60010d08:	b968      	cbnz	r0, 60010d26 <k_sched_time_slice_set+0x3a>
60010d0a:	2394      	movs	r3, #148	; 0x94
60010d0c:	4a1c      	ldr	r2, [pc, #112]	; (60010d80 <k_sched_time_slice_set+0x94>)
60010d0e:	491d      	ldr	r1, [pc, #116]	; (60010d84 <k_sched_time_slice_set+0x98>)
60010d10:	481d      	ldr	r0, [pc, #116]	; (60010d88 <k_sched_time_slice_set+0x9c>)
60010d12:	f007 f8f6 	bl	60017f02 <assert_print>
60010d16:	4919      	ldr	r1, [pc, #100]	; (60010d7c <k_sched_time_slice_set+0x90>)
60010d18:	481c      	ldr	r0, [pc, #112]	; (60010d8c <k_sched_time_slice_set+0xa0>)
60010d1a:	f007 f8f2 	bl	60017f02 <assert_print>
60010d1e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010d20:	4817      	ldr	r0, [pc, #92]	; (60010d80 <k_sched_time_slice_set+0x94>)
60010d22:	f007 f8e7 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
60010d26:	4815      	ldr	r0, [pc, #84]	; (60010d7c <k_sched_time_slice_set+0x90>)
60010d28:	f7ff f86c 	bl	6000fe04 <z_spin_lock_set_owner>
			return ((uint32_t)t) * (to_hz / from_hz);
60010d2c:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
60010d2e:	2c00      	cmp	r4, #0
60010d30:	fb04 f303 	mul.w	r3, r4, r3
60010d34:	dd02      	ble.n	60010d3c <k_sched_time_slice_set+0x50>
			slice_ticks = MAX(2, slice_ticks);
60010d36:	2b02      	cmp	r3, #2
60010d38:	bfb8      	it	lt
60010d3a:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
60010d3c:	4a14      	ldr	r2, [pc, #80]	; (60010d90 <k_sched_time_slice_set+0xa4>)
60010d3e:	2100      	movs	r1, #0
60010d40:	6111      	str	r1, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
60010d42:	4914      	ldr	r1, [pc, #80]	; (60010d94 <k_sched_time_slice_set+0xa8>)
		z_reset_time_slice(_current);
60010d44:	6890      	ldr	r0, [r2, #8]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
60010d46:	600b      	str	r3, [r1, #0]
		slice_max_prio = prio;
60010d48:	4b13      	ldr	r3, [pc, #76]	; (60010d98 <k_sched_time_slice_set+0xac>)
60010d4a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
60010d4c:	f7ff ff3c 	bl	60010bc8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010d50:	480a      	ldr	r0, [pc, #40]	; (60010d7c <k_sched_time_slice_set+0x90>)
60010d52:	f7ff f849 	bl	6000fde8 <z_spin_unlock_valid>
60010d56:	b958      	cbnz	r0, 60010d70 <k_sched_time_slice_set+0x84>
60010d58:	23c2      	movs	r3, #194	; 0xc2
60010d5a:	4a09      	ldr	r2, [pc, #36]	; (60010d80 <k_sched_time_slice_set+0x94>)
60010d5c:	490f      	ldr	r1, [pc, #60]	; (60010d9c <k_sched_time_slice_set+0xb0>)
60010d5e:	480a      	ldr	r0, [pc, #40]	; (60010d88 <k_sched_time_slice_set+0x9c>)
60010d60:	f007 f8cf 	bl	60017f02 <assert_print>
60010d64:	4905      	ldr	r1, [pc, #20]	; (60010d7c <k_sched_time_slice_set+0x90>)
60010d66:	480e      	ldr	r0, [pc, #56]	; (60010da0 <k_sched_time_slice_set+0xb4>)
60010d68:	f007 f8cb 	bl	60017f02 <assert_print>
60010d6c:	21c2      	movs	r1, #194	; 0xc2
60010d6e:	e7d7      	b.n	60010d20 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
60010d70:	f386 8811 	msr	BASEPRI, r6
60010d74:	f3bf 8f6f 	isb	sy
}
60010d78:	bd70      	pop	{r4, r5, r6, pc}
60010d7a:	bf00      	nop
60010d7c:	20204dd0 	.word	0x20204dd0
60010d80:	6001c758 	.word	0x6001c758
60010d84:	6001c785 	.word	0x6001c785
60010d88:	6001c3d7 	.word	0x6001c3d7
60010d8c:	6001c79a 	.word	0x6001c79a
60010d90:	20204d8c 	.word	0x20204d8c
60010d94:	20204dcc 	.word	0x20204dcc
60010d98:	20204dc8 	.word	0x20204dc8
60010d9c:	6001c7b2 	.word	0x6001c7b2
60010da0:	6001c7c9 	.word	0x6001c7c9

60010da4 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
60010da4:	b538      	push	{r3, r4, r5, lr}
60010da6:	4604      	mov	r4, r0
	__asm__ volatile(
60010da8:	f04f 0310 	mov.w	r3, #16
60010dac:	f3ef 8511 	mrs	r5, BASEPRI
60010db0:	f383 8812 	msr	BASEPRI_MAX, r3
60010db4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010db8:	4816      	ldr	r0, [pc, #88]	; (60010e14 <z_ready_thread+0x70>)
60010dba:	f7ff f807 	bl	6000fdcc <z_spin_lock_valid>
60010dbe:	b968      	cbnz	r0, 60010ddc <z_ready_thread+0x38>
60010dc0:	2394      	movs	r3, #148	; 0x94
60010dc2:	4a15      	ldr	r2, [pc, #84]	; (60010e18 <z_ready_thread+0x74>)
60010dc4:	4915      	ldr	r1, [pc, #84]	; (60010e1c <z_ready_thread+0x78>)
60010dc6:	4816      	ldr	r0, [pc, #88]	; (60010e20 <z_ready_thread+0x7c>)
60010dc8:	f007 f89b 	bl	60017f02 <assert_print>
60010dcc:	4911      	ldr	r1, [pc, #68]	; (60010e14 <z_ready_thread+0x70>)
60010dce:	4815      	ldr	r0, [pc, #84]	; (60010e24 <z_ready_thread+0x80>)
60010dd0:	f007 f897 	bl	60017f02 <assert_print>
60010dd4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010dd6:	4810      	ldr	r0, [pc, #64]	; (60010e18 <z_ready_thread+0x74>)
60010dd8:	f007 f88c 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
60010ddc:	480d      	ldr	r0, [pc, #52]	; (60010e14 <z_ready_thread+0x70>)
60010dde:	f7ff f811 	bl	6000fe04 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
60010de2:	4620      	mov	r0, r4
60010de4:	f7ff ff38 	bl	60010c58 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010de8:	480a      	ldr	r0, [pc, #40]	; (60010e14 <z_ready_thread+0x70>)
60010dea:	f7fe fffd 	bl	6000fde8 <z_spin_unlock_valid>
60010dee:	b958      	cbnz	r0, 60010e08 <z_ready_thread+0x64>
60010df0:	23c2      	movs	r3, #194	; 0xc2
60010df2:	4a09      	ldr	r2, [pc, #36]	; (60010e18 <z_ready_thread+0x74>)
60010df4:	490c      	ldr	r1, [pc, #48]	; (60010e28 <z_ready_thread+0x84>)
60010df6:	480a      	ldr	r0, [pc, #40]	; (60010e20 <z_ready_thread+0x7c>)
60010df8:	f007 f883 	bl	60017f02 <assert_print>
60010dfc:	4905      	ldr	r1, [pc, #20]	; (60010e14 <z_ready_thread+0x70>)
60010dfe:	480b      	ldr	r0, [pc, #44]	; (60010e2c <z_ready_thread+0x88>)
60010e00:	f007 f87f 	bl	60017f02 <assert_print>
60010e04:	21c2      	movs	r1, #194	; 0xc2
60010e06:	e7e6      	b.n	60010dd6 <z_ready_thread+0x32>
	__asm__ volatile(
60010e08:	f385 8811 	msr	BASEPRI, r5
60010e0c:	f3bf 8f6f 	isb	sy
		}
	}
}
60010e10:	bd38      	pop	{r3, r4, r5, pc}
60010e12:	bf00      	nop
60010e14:	20204dd0 	.word	0x20204dd0
60010e18:	6001c758 	.word	0x6001c758
60010e1c:	6001c785 	.word	0x6001c785
60010e20:	6001c3d7 	.word	0x6001c3d7
60010e24:	6001c79a 	.word	0x6001c79a
60010e28:	6001c7b2 	.word	0x6001c7b2
60010e2c:	6001c7c9 	.word	0x6001c7c9

60010e30 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
60010e30:	b538      	push	{r3, r4, r5, lr}
60010e32:	4604      	mov	r4, r0
	__asm__ volatile(
60010e34:	f04f 0310 	mov.w	r3, #16
60010e38:	f3ef 8511 	mrs	r5, BASEPRI
60010e3c:	f383 8812 	msr	BASEPRI_MAX, r3
60010e40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010e44:	4817      	ldr	r0, [pc, #92]	; (60010ea4 <z_unpend_thread_no_timeout+0x74>)
60010e46:	f7fe ffc1 	bl	6000fdcc <z_spin_lock_valid>
60010e4a:	b968      	cbnz	r0, 60010e68 <z_unpend_thread_no_timeout+0x38>
60010e4c:	2394      	movs	r3, #148	; 0x94
60010e4e:	4a16      	ldr	r2, [pc, #88]	; (60010ea8 <z_unpend_thread_no_timeout+0x78>)
60010e50:	4916      	ldr	r1, [pc, #88]	; (60010eac <z_unpend_thread_no_timeout+0x7c>)
60010e52:	4817      	ldr	r0, [pc, #92]	; (60010eb0 <z_unpend_thread_no_timeout+0x80>)
60010e54:	f007 f855 	bl	60017f02 <assert_print>
60010e58:	4912      	ldr	r1, [pc, #72]	; (60010ea4 <z_unpend_thread_no_timeout+0x74>)
60010e5a:	4816      	ldr	r0, [pc, #88]	; (60010eb4 <z_unpend_thread_no_timeout+0x84>)
60010e5c:	f007 f851 	bl	60017f02 <assert_print>
60010e60:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010e62:	4811      	ldr	r0, [pc, #68]	; (60010ea8 <z_unpend_thread_no_timeout+0x78>)
60010e64:	f007 f846 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
60010e68:	480e      	ldr	r0, [pc, #56]	; (60010ea4 <z_unpend_thread_no_timeout+0x74>)
60010e6a:	f7fe ffcb 	bl	6000fe04 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
60010e6e:	68a3      	ldr	r3, [r4, #8]
60010e70:	b113      	cbz	r3, 60010e78 <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
60010e72:	4620      	mov	r0, r4
60010e74:	f000 fc62 	bl	6001173c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010e78:	480a      	ldr	r0, [pc, #40]	; (60010ea4 <z_unpend_thread_no_timeout+0x74>)
60010e7a:	f7fe ffb5 	bl	6000fde8 <z_spin_unlock_valid>
60010e7e:	b958      	cbnz	r0, 60010e98 <z_unpend_thread_no_timeout+0x68>
60010e80:	23c2      	movs	r3, #194	; 0xc2
60010e82:	4a09      	ldr	r2, [pc, #36]	; (60010ea8 <z_unpend_thread_no_timeout+0x78>)
60010e84:	490c      	ldr	r1, [pc, #48]	; (60010eb8 <z_unpend_thread_no_timeout+0x88>)
60010e86:	480a      	ldr	r0, [pc, #40]	; (60010eb0 <z_unpend_thread_no_timeout+0x80>)
60010e88:	f007 f83b 	bl	60017f02 <assert_print>
60010e8c:	4905      	ldr	r1, [pc, #20]	; (60010ea4 <z_unpend_thread_no_timeout+0x74>)
60010e8e:	480b      	ldr	r0, [pc, #44]	; (60010ebc <z_unpend_thread_no_timeout+0x8c>)
60010e90:	f007 f837 	bl	60017f02 <assert_print>
60010e94:	21c2      	movs	r1, #194	; 0xc2
60010e96:	e7e4      	b.n	60010e62 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
60010e98:	f385 8811 	msr	BASEPRI, r5
60010e9c:	f3bf 8f6f 	isb	sy
		}
	}
}
60010ea0:	bd38      	pop	{r3, r4, r5, pc}
60010ea2:	bf00      	nop
60010ea4:	20204dd0 	.word	0x20204dd0
60010ea8:	6001c758 	.word	0x6001c758
60010eac:	6001c785 	.word	0x6001c785
60010eb0:	6001c3d7 	.word	0x6001c3d7
60010eb4:	6001c79a 	.word	0x6001c79a
60010eb8:	6001c7b2 	.word	0x6001c7b2
60010ebc:	6001c7c9 	.word	0x6001c7c9

60010ec0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
60010ec0:	b570      	push	{r4, r5, r6, lr}
60010ec2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
60010ec4:	460d      	mov	r5, r1
60010ec6:	b9e9      	cbnz	r1, 60010f04 <z_reschedule+0x44>
60010ec8:	f3ef 8605 	mrs	r6, IPSR
60010ecc:	b9d6      	cbnz	r6, 60010f04 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
60010ece:	4b18      	ldr	r3, [pc, #96]	; (60010f30 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
60010ed0:	699a      	ldr	r2, [r3, #24]
60010ed2:	689b      	ldr	r3, [r3, #8]
60010ed4:	429a      	cmp	r2, r3
60010ed6:	d015      	beq.n	60010f04 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010ed8:	f7fe ff86 	bl	6000fde8 <z_spin_unlock_valid>
60010edc:	b968      	cbnz	r0, 60010efa <z_reschedule+0x3a>
60010ede:	23e1      	movs	r3, #225	; 0xe1
60010ee0:	4a14      	ldr	r2, [pc, #80]	; (60010f34 <z_reschedule+0x74>)
60010ee2:	4915      	ldr	r1, [pc, #84]	; (60010f38 <z_reschedule+0x78>)
60010ee4:	4815      	ldr	r0, [pc, #84]	; (60010f3c <z_reschedule+0x7c>)
60010ee6:	f007 f80c 	bl	60017f02 <assert_print>
60010eea:	4621      	mov	r1, r4
60010eec:	4814      	ldr	r0, [pc, #80]	; (60010f40 <z_reschedule+0x80>)
60010eee:	f007 f808 	bl	60017f02 <assert_print>
60010ef2:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010ef4:	480f      	ldr	r0, [pc, #60]	; (60010f34 <z_reschedule+0x74>)
60010ef6:	f006 fffd 	bl	60017ef4 <assert_post_action>
	ret = arch_swap(key);
60010efa:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
60010efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
60010f00:	f7f9 bd52 	b.w	6000a9a8 <arch_swap>
60010f04:	4620      	mov	r0, r4
60010f06:	f7fe ff6f 	bl	6000fde8 <z_spin_unlock_valid>
60010f0a:	b958      	cbnz	r0, 60010f24 <z_reschedule+0x64>
60010f0c:	23c2      	movs	r3, #194	; 0xc2
60010f0e:	4a09      	ldr	r2, [pc, #36]	; (60010f34 <z_reschedule+0x74>)
60010f10:	4909      	ldr	r1, [pc, #36]	; (60010f38 <z_reschedule+0x78>)
60010f12:	480a      	ldr	r0, [pc, #40]	; (60010f3c <z_reschedule+0x7c>)
60010f14:	f006 fff5 	bl	60017f02 <assert_print>
60010f18:	4621      	mov	r1, r4
60010f1a:	4809      	ldr	r0, [pc, #36]	; (60010f40 <z_reschedule+0x80>)
60010f1c:	f006 fff1 	bl	60017f02 <assert_print>
60010f20:	21c2      	movs	r1, #194	; 0xc2
60010f22:	e7e7      	b.n	60010ef4 <z_reschedule+0x34>
60010f24:	f385 8811 	msr	BASEPRI, r5
60010f28:	f3bf 8f6f 	isb	sy
60010f2c:	bd70      	pop	{r4, r5, r6, pc}
60010f2e:	bf00      	nop
60010f30:	20204d8c 	.word	0x20204d8c
60010f34:	6001c758 	.word	0x6001c758
60010f38:	6001c7b2 	.word	0x6001c7b2
60010f3c:	6001c3d7 	.word	0x6001c3d7
60010f40:	6001c7c9 	.word	0x6001c7c9

60010f44 <z_sched_start>:
{
60010f44:	b538      	push	{r3, r4, r5, lr}
60010f46:	4604      	mov	r4, r0
	__asm__ volatile(
60010f48:	f04f 0310 	mov.w	r3, #16
60010f4c:	f3ef 8511 	mrs	r5, BASEPRI
60010f50:	f383 8812 	msr	BASEPRI_MAX, r3
60010f54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010f58:	481c      	ldr	r0, [pc, #112]	; (60010fcc <z_sched_start+0x88>)
60010f5a:	f7fe ff37 	bl	6000fdcc <z_spin_lock_valid>
60010f5e:	b968      	cbnz	r0, 60010f7c <z_sched_start+0x38>
60010f60:	2394      	movs	r3, #148	; 0x94
60010f62:	4a1b      	ldr	r2, [pc, #108]	; (60010fd0 <z_sched_start+0x8c>)
60010f64:	491b      	ldr	r1, [pc, #108]	; (60010fd4 <z_sched_start+0x90>)
60010f66:	481c      	ldr	r0, [pc, #112]	; (60010fd8 <z_sched_start+0x94>)
60010f68:	f006 ffcb 	bl	60017f02 <assert_print>
60010f6c:	4917      	ldr	r1, [pc, #92]	; (60010fcc <z_sched_start+0x88>)
60010f6e:	481b      	ldr	r0, [pc, #108]	; (60010fdc <z_sched_start+0x98>)
60010f70:	f006 ffc7 	bl	60017f02 <assert_print>
60010f74:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010f76:	4816      	ldr	r0, [pc, #88]	; (60010fd0 <z_sched_start+0x8c>)
60010f78:	f006 ffbc 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
60010f7c:	4813      	ldr	r0, [pc, #76]	; (60010fcc <z_sched_start+0x88>)
60010f7e:	f7fe ff41 	bl	6000fe04 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
60010f82:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
60010f84:	075a      	lsls	r2, r3, #29
60010f86:	d414      	bmi.n	60010fb2 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60010f88:	4810      	ldr	r0, [pc, #64]	; (60010fcc <z_sched_start+0x88>)
60010f8a:	f7fe ff2d 	bl	6000fde8 <z_spin_unlock_valid>
60010f8e:	b958      	cbnz	r0, 60010fa8 <z_sched_start+0x64>
60010f90:	23c2      	movs	r3, #194	; 0xc2
60010f92:	4a0f      	ldr	r2, [pc, #60]	; (60010fd0 <z_sched_start+0x8c>)
60010f94:	4912      	ldr	r1, [pc, #72]	; (60010fe0 <z_sched_start+0x9c>)
60010f96:	4810      	ldr	r0, [pc, #64]	; (60010fd8 <z_sched_start+0x94>)
60010f98:	f006 ffb3 	bl	60017f02 <assert_print>
60010f9c:	490b      	ldr	r1, [pc, #44]	; (60010fcc <z_sched_start+0x88>)
60010f9e:	4811      	ldr	r0, [pc, #68]	; (60010fe4 <z_sched_start+0xa0>)
60010fa0:	f006 ffaf 	bl	60017f02 <assert_print>
60010fa4:	21c2      	movs	r1, #194	; 0xc2
60010fa6:	e7e6      	b.n	60010f76 <z_sched_start+0x32>
	__asm__ volatile(
60010fa8:	f385 8811 	msr	BASEPRI, r5
60010fac:	f3bf 8f6f 	isb	sy
}
60010fb0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
60010fb2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
60010fb6:	4620      	mov	r0, r4
60010fb8:	7363      	strb	r3, [r4, #13]
60010fba:	f7ff fe4d 	bl	60010c58 <ready_thread>
	z_reschedule(&sched_spinlock, key);
60010fbe:	4629      	mov	r1, r5
60010fc0:	4802      	ldr	r0, [pc, #8]	; (60010fcc <z_sched_start+0x88>)
}
60010fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
60010fc6:	f7ff bf7b 	b.w	60010ec0 <z_reschedule>
60010fca:	bf00      	nop
60010fcc:	20204dd0 	.word	0x20204dd0
60010fd0:	6001c758 	.word	0x6001c758
60010fd4:	6001c785 	.word	0x6001c785
60010fd8:	6001c3d7 	.word	0x6001c3d7
60010fdc:	6001c79a 	.word	0x6001c79a
60010fe0:	6001c7b2 	.word	0x6001c7b2
60010fe4:	6001c7c9 	.word	0x6001c7c9

60010fe8 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
60010fe8:	b510      	push	{r4, lr}
	__asm__ volatile(
60010fea:	f04f 0310 	mov.w	r3, #16
60010fee:	f3ef 8411 	mrs	r4, BASEPRI
60010ff2:	f383 8812 	msr	BASEPRI_MAX, r3
60010ff6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60010ffa:	4825      	ldr	r0, [pc, #148]	; (60011090 <k_sched_lock+0xa8>)
60010ffc:	f7fe fee6 	bl	6000fdcc <z_spin_lock_valid>
60011000:	b960      	cbnz	r0, 6001101c <k_sched_lock+0x34>
60011002:	2394      	movs	r3, #148	; 0x94
60011004:	4a23      	ldr	r2, [pc, #140]	; (60011094 <k_sched_lock+0xac>)
60011006:	4924      	ldr	r1, [pc, #144]	; (60011098 <k_sched_lock+0xb0>)
60011008:	4824      	ldr	r0, [pc, #144]	; (6001109c <k_sched_lock+0xb4>)
6001100a:	f006 ff7a 	bl	60017f02 <assert_print>
6001100e:	4920      	ldr	r1, [pc, #128]	; (60011090 <k_sched_lock+0xa8>)
60011010:	4823      	ldr	r0, [pc, #140]	; (600110a0 <k_sched_lock+0xb8>)
60011012:	f006 ff76 	bl	60017f02 <assert_print>
60011016:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011018:	481e      	ldr	r0, [pc, #120]	; (60011094 <k_sched_lock+0xac>)
6001101a:	e010      	b.n	6001103e <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
6001101c:	481c      	ldr	r0, [pc, #112]	; (60011090 <k_sched_lock+0xa8>)
6001101e:	f7fe fef1 	bl	6000fe04 <z_spin_lock_set_owner>
60011022:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
60011026:	b163      	cbz	r3, 60011042 <k_sched_lock+0x5a>
60011028:	491e      	ldr	r1, [pc, #120]	; (600110a4 <k_sched_lock+0xbc>)
6001102a:	23fd      	movs	r3, #253	; 0xfd
6001102c:	4a1e      	ldr	r2, [pc, #120]	; (600110a8 <k_sched_lock+0xc0>)
6001102e:	481b      	ldr	r0, [pc, #108]	; (6001109c <k_sched_lock+0xb4>)
60011030:	f006 ff67 	bl	60017f02 <assert_print>
60011034:	481d      	ldr	r0, [pc, #116]	; (600110ac <k_sched_lock+0xc4>)
60011036:	f006 ff64 	bl	60017f02 <assert_print>
6001103a:	21fd      	movs	r1, #253	; 0xfd
6001103c:	481a      	ldr	r0, [pc, #104]	; (600110a8 <k_sched_lock+0xc0>)
6001103e:	f006 ff59 	bl	60017ef4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
60011042:	4b1b      	ldr	r3, [pc, #108]	; (600110b0 <k_sched_lock+0xc8>)
60011044:	689a      	ldr	r2, [r3, #8]
60011046:	7bd3      	ldrb	r3, [r2, #15]
60011048:	2b01      	cmp	r3, #1
6001104a:	d10a      	bne.n	60011062 <k_sched_lock+0x7a>
6001104c:	4919      	ldr	r1, [pc, #100]	; (600110b4 <k_sched_lock+0xcc>)
6001104e:	23fe      	movs	r3, #254	; 0xfe
60011050:	4a15      	ldr	r2, [pc, #84]	; (600110a8 <k_sched_lock+0xc0>)
60011052:	4812      	ldr	r0, [pc, #72]	; (6001109c <k_sched_lock+0xb4>)
60011054:	f006 ff55 	bl	60017f02 <assert_print>
60011058:	4814      	ldr	r0, [pc, #80]	; (600110ac <k_sched_lock+0xc4>)
6001105a:	f006 ff52 	bl	60017f02 <assert_print>
6001105e:	21fe      	movs	r1, #254	; 0xfe
60011060:	e7ec      	b.n	6001103c <k_sched_lock+0x54>
	--_current->base.sched_locked;
60011062:	3b01      	subs	r3, #1
60011064:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011066:	480a      	ldr	r0, [pc, #40]	; (60011090 <k_sched_lock+0xa8>)
60011068:	f7fe febe 	bl	6000fde8 <z_spin_unlock_valid>
6001106c:	b958      	cbnz	r0, 60011086 <k_sched_lock+0x9e>
6001106e:	23c2      	movs	r3, #194	; 0xc2
60011070:	4a08      	ldr	r2, [pc, #32]	; (60011094 <k_sched_lock+0xac>)
60011072:	4911      	ldr	r1, [pc, #68]	; (600110b8 <k_sched_lock+0xd0>)
60011074:	4809      	ldr	r0, [pc, #36]	; (6001109c <k_sched_lock+0xb4>)
60011076:	f006 ff44 	bl	60017f02 <assert_print>
6001107a:	4905      	ldr	r1, [pc, #20]	; (60011090 <k_sched_lock+0xa8>)
6001107c:	480f      	ldr	r0, [pc, #60]	; (600110bc <k_sched_lock+0xd4>)
6001107e:	f006 ff40 	bl	60017f02 <assert_print>
60011082:	21c2      	movs	r1, #194	; 0xc2
60011084:	e7c8      	b.n	60011018 <k_sched_lock+0x30>
	__asm__ volatile(
60011086:	f384 8811 	msr	BASEPRI, r4
6001108a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
6001108e:	bd10      	pop	{r4, pc}
60011090:	20204dd0 	.word	0x20204dd0
60011094:	6001c758 	.word	0x6001c758
60011098:	6001c785 	.word	0x6001c785
6001109c:	6001c3d7 	.word	0x6001c3d7
600110a0:	6001c79a 	.word	0x6001c79a
600110a4:	6001e9fa 	.word	0x6001e9fa
600110a8:	6001eca1 	.word	0x6001eca1
600110ac:	6001e923 	.word	0x6001e923
600110b0:	20204d8c 	.word	0x20204d8c
600110b4:	6001eccc 	.word	0x6001eccc
600110b8:	6001c7b2 	.word	0x6001c7b2
600110bc:	6001c7c9 	.word	0x6001c7c9

600110c0 <k_sched_unlock>:

void k_sched_unlock(void)
{
600110c0:	b510      	push	{r4, lr}
	__asm__ volatile(
600110c2:	f04f 0310 	mov.w	r3, #16
600110c6:	f3ef 8411 	mrs	r4, BASEPRI
600110ca:	f383 8812 	msr	BASEPRI_MAX, r3
600110ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600110d2:	4829      	ldr	r0, [pc, #164]	; (60011178 <k_sched_unlock+0xb8>)
600110d4:	f7fe fe7a 	bl	6000fdcc <z_spin_lock_valid>
600110d8:	b960      	cbnz	r0, 600110f4 <k_sched_unlock+0x34>
600110da:	2394      	movs	r3, #148	; 0x94
600110dc:	4a27      	ldr	r2, [pc, #156]	; (6001117c <k_sched_unlock+0xbc>)
600110de:	4928      	ldr	r1, [pc, #160]	; (60011180 <k_sched_unlock+0xc0>)
600110e0:	4828      	ldr	r0, [pc, #160]	; (60011184 <k_sched_unlock+0xc4>)
600110e2:	f006 ff0e 	bl	60017f02 <assert_print>
600110e6:	4924      	ldr	r1, [pc, #144]	; (60011178 <k_sched_unlock+0xb8>)
600110e8:	4827      	ldr	r0, [pc, #156]	; (60011188 <k_sched_unlock+0xc8>)
600110ea:	f006 ff0a 	bl	60017f02 <assert_print>
600110ee:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600110f0:	4822      	ldr	r0, [pc, #136]	; (6001117c <k_sched_unlock+0xbc>)
600110f2:	e013      	b.n	6001111c <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
600110f4:	4820      	ldr	r0, [pc, #128]	; (60011178 <k_sched_unlock+0xb8>)
600110f6:	f7fe fe85 	bl	6000fe04 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
600110fa:	4b24      	ldr	r3, [pc, #144]	; (6001118c <k_sched_unlock+0xcc>)
600110fc:	689a      	ldr	r2, [r3, #8]
600110fe:	7bd3      	ldrb	r3, [r2, #15]
60011100:	b973      	cbnz	r3, 60011120 <k_sched_unlock+0x60>
60011102:	4923      	ldr	r1, [pc, #140]	; (60011190 <k_sched_unlock+0xd0>)
60011104:	f240 33eb 	movw	r3, #1003	; 0x3eb
60011108:	4a22      	ldr	r2, [pc, #136]	; (60011194 <k_sched_unlock+0xd4>)
6001110a:	481e      	ldr	r0, [pc, #120]	; (60011184 <k_sched_unlock+0xc4>)
6001110c:	f006 fef9 	bl	60017f02 <assert_print>
60011110:	4821      	ldr	r0, [pc, #132]	; (60011198 <k_sched_unlock+0xd8>)
60011112:	f006 fef6 	bl	60017f02 <assert_print>
60011116:	f240 31eb 	movw	r1, #1003	; 0x3eb
6001111a:	481e      	ldr	r0, [pc, #120]	; (60011194 <k_sched_unlock+0xd4>)
6001111c:	f006 feea 	bl	60017ef4 <assert_post_action>
60011120:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
60011124:	b160      	cbz	r0, 60011140 <k_sched_unlock+0x80>
60011126:	491d      	ldr	r1, [pc, #116]	; (6001119c <k_sched_unlock+0xdc>)
60011128:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
6001112c:	4a19      	ldr	r2, [pc, #100]	; (60011194 <k_sched_unlock+0xd4>)
6001112e:	4815      	ldr	r0, [pc, #84]	; (60011184 <k_sched_unlock+0xc4>)
60011130:	f006 fee7 	bl	60017f02 <assert_print>
60011134:	4818      	ldr	r0, [pc, #96]	; (60011198 <k_sched_unlock+0xd8>)
60011136:	f006 fee4 	bl	60017f02 <assert_print>
6001113a:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
6001113e:	e7ec      	b.n	6001111a <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
60011140:	3301      	adds	r3, #1
60011142:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
60011144:	f7ff fd54 	bl	60010bf0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011148:	480b      	ldr	r0, [pc, #44]	; (60011178 <k_sched_unlock+0xb8>)
6001114a:	f7fe fe4d 	bl	6000fde8 <z_spin_unlock_valid>
6001114e:	b958      	cbnz	r0, 60011168 <k_sched_unlock+0xa8>
60011150:	23c2      	movs	r3, #194	; 0xc2
60011152:	4a0a      	ldr	r2, [pc, #40]	; (6001117c <k_sched_unlock+0xbc>)
60011154:	4912      	ldr	r1, [pc, #72]	; (600111a0 <k_sched_unlock+0xe0>)
60011156:	480b      	ldr	r0, [pc, #44]	; (60011184 <k_sched_unlock+0xc4>)
60011158:	f006 fed3 	bl	60017f02 <assert_print>
6001115c:	4906      	ldr	r1, [pc, #24]	; (60011178 <k_sched_unlock+0xb8>)
6001115e:	4811      	ldr	r0, [pc, #68]	; (600111a4 <k_sched_unlock+0xe4>)
60011160:	f006 fecf 	bl	60017f02 <assert_print>
60011164:	21c2      	movs	r1, #194	; 0xc2
60011166:	e7c3      	b.n	600110f0 <k_sched_unlock+0x30>
	__asm__ volatile(
60011168:	f384 8811 	msr	BASEPRI, r4
6001116c:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
60011170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
60011174:	f008 bbfe 	b.w	60019974 <z_reschedule_unlocked>
60011178:	20204dd0 	.word	0x20204dd0
6001117c:	6001c758 	.word	0x6001c758
60011180:	6001c785 	.word	0x6001c785
60011184:	6001c3d7 	.word	0x6001c3d7
60011188:	6001c79a 	.word	0x6001c79a
6001118c:	20204d8c 	.word	0x20204d8c
60011190:	6001ecfd 	.word	0x6001ecfd
60011194:	6001ec37 	.word	0x6001ec37
60011198:	6001e923 	.word	0x6001e923
6001119c:	6001e9fa 	.word	0x6001e9fa
600111a0:	6001c7b2 	.word	0x6001c7b2
600111a4:	6001c7c9 	.word	0x6001c7c9

600111a8 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
600111a8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
600111aa:	4b0b      	ldr	r3, [pc, #44]	; (600111d8 <z_priq_dumb_remove+0x30>)
600111ac:	4299      	cmp	r1, r3
600111ae:	d10b      	bne.n	600111c8 <z_priq_dumb_remove+0x20>
600111b0:	490a      	ldr	r1, [pc, #40]	; (600111dc <z_priq_dumb_remove+0x34>)
600111b2:	f240 4377 	movw	r3, #1143	; 0x477
600111b6:	480a      	ldr	r0, [pc, #40]	; (600111e0 <z_priq_dumb_remove+0x38>)
600111b8:	4a0a      	ldr	r2, [pc, #40]	; (600111e4 <z_priq_dumb_remove+0x3c>)
600111ba:	f006 fea2 	bl	60017f02 <assert_print>
600111be:	f240 4177 	movw	r1, #1143	; 0x477
600111c2:	4808      	ldr	r0, [pc, #32]	; (600111e4 <z_priq_dumb_remove+0x3c>)
600111c4:	f006 fe96 	bl	60017ef4 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
600111c8:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
600111cc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
600111ce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
600111d0:	2300      	movs	r3, #0
	node->prev = NULL;
600111d2:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
600111d6:	bd08      	pop	{r3, pc}
600111d8:	20204500 	.word	0x20204500
600111dc:	6001ec80 	.word	0x6001ec80
600111e0:	6001c3d7 	.word	0x6001c3d7
600111e4:	6001ec37 	.word	0x6001ec37

600111e8 <move_thread_to_end_of_prio_q>:
{
600111e8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
600111ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
600111ee:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
600111f0:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
600111f2:	2a00      	cmp	r2, #0
600111f4:	da06      	bge.n	60011204 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
600111f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
600111fa:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
600111fc:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
600111fe:	481d      	ldr	r0, [pc, #116]	; (60011274 <move_thread_to_end_of_prio_q+0x8c>)
60011200:	f7ff ffd2 	bl	600111a8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
60011204:	7b63      	ldrb	r3, [r4, #13]
60011206:	f063 037f 	orn	r3, r3, #127	; 0x7f
6001120a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
6001120c:	4b1a      	ldr	r3, [pc, #104]	; (60011278 <move_thread_to_end_of_prio_q+0x90>)
6001120e:	429c      	cmp	r4, r3
60011210:	d109      	bne.n	60011226 <move_thread_to_end_of_prio_q+0x3e>
60011212:	491a      	ldr	r1, [pc, #104]	; (6001127c <move_thread_to_end_of_prio_q+0x94>)
60011214:	23bb      	movs	r3, #187	; 0xbb
60011216:	481a      	ldr	r0, [pc, #104]	; (60011280 <move_thread_to_end_of_prio_q+0x98>)
60011218:	4a1a      	ldr	r2, [pc, #104]	; (60011284 <move_thread_to_end_of_prio_q+0x9c>)
6001121a:	f006 fe72 	bl	60017f02 <assert_print>
6001121e:	21bb      	movs	r1, #187	; 0xbb
60011220:	4818      	ldr	r0, [pc, #96]	; (60011284 <move_thread_to_end_of_prio_q+0x9c>)
60011222:	f006 fe67 	bl	60017ef4 <assert_post_action>
	return list->head == list;
60011226:	4a18      	ldr	r2, [pc, #96]	; (60011288 <move_thread_to_end_of_prio_q+0xa0>)
60011228:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
6001122a:	6a10      	ldr	r0, [r2, #32]
	return list->head == list;
6001122c:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
60011230:	428b      	cmp	r3, r1
60011232:	bf08      	it	eq
60011234:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
60011236:	b923      	cbnz	r3, 60011242 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
60011238:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
6001123c:	6004      	str	r4, [r0, #0]
	list->tail = node;
6001123e:	6214      	str	r4, [r2, #32]
}
60011240:	e00c      	b.n	6001125c <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
60011242:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
60011246:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
6001124a:	42b5      	cmp	r5, r6
6001124c:	d00e      	beq.n	6001126c <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
6001124e:	42ae      	cmp	r6, r5
60011250:	dd0c      	ble.n	6001126c <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
60011252:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
60011254:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
60011258:	600c      	str	r4, [r1, #0]
	successor->prev = node;
6001125a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
6001125c:	6890      	ldr	r0, [r2, #8]
6001125e:	1b03      	subs	r3, r0, r4
60011260:	4258      	negs	r0, r3
}
60011262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
60011266:	4158      	adcs	r0, r3
60011268:	f7ff bcc2 	b.w	60010bf0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
6001126c:	4298      	cmp	r0, r3
6001126e:	d0e3      	beq.n	60011238 <move_thread_to_end_of_prio_q+0x50>
60011270:	681b      	ldr	r3, [r3, #0]
60011272:	e7e0      	b.n	60011236 <move_thread_to_end_of_prio_q+0x4e>
60011274:	20204da8 	.word	0x20204da8
60011278:	20204500 	.word	0x20204500
6001127c:	6001ec80 	.word	0x6001ec80
60011280:	6001c3d7 	.word	0x6001c3d7
60011284:	6001ec37 	.word	0x6001ec37
60011288:	20204d8c 	.word	0x20204d8c

6001128c <z_time_slice>:
{
6001128c:	b570      	push	{r4, r5, r6, lr}
6001128e:	4605      	mov	r5, r0
	__asm__ volatile(
60011290:	f04f 0310 	mov.w	r3, #16
60011294:	f3ef 8611 	mrs	r6, BASEPRI
60011298:	f383 8812 	msr	BASEPRI_MAX, r3
6001129c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600112a0:	4829      	ldr	r0, [pc, #164]	; (60011348 <z_time_slice+0xbc>)
600112a2:	f7fe fd93 	bl	6000fdcc <z_spin_lock_valid>
600112a6:	b968      	cbnz	r0, 600112c4 <z_time_slice+0x38>
600112a8:	2394      	movs	r3, #148	; 0x94
600112aa:	4a28      	ldr	r2, [pc, #160]	; (6001134c <z_time_slice+0xc0>)
600112ac:	4928      	ldr	r1, [pc, #160]	; (60011350 <z_time_slice+0xc4>)
600112ae:	4829      	ldr	r0, [pc, #164]	; (60011354 <z_time_slice+0xc8>)
600112b0:	f006 fe27 	bl	60017f02 <assert_print>
600112b4:	4924      	ldr	r1, [pc, #144]	; (60011348 <z_time_slice+0xbc>)
600112b6:	4828      	ldr	r0, [pc, #160]	; (60011358 <z_time_slice+0xcc>)
600112b8:	f006 fe23 	bl	60017f02 <assert_print>
600112bc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600112be:	4823      	ldr	r0, [pc, #140]	; (6001134c <z_time_slice+0xc0>)
600112c0:	f006 fe18 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
600112c4:	4820      	ldr	r0, [pc, #128]	; (60011348 <z_time_slice+0xbc>)
600112c6:	f7fe fd9d 	bl	6000fe04 <z_spin_lock_set_owner>
	if (pending_current == _current) {
600112ca:	4b24      	ldr	r3, [pc, #144]	; (6001135c <z_time_slice+0xd0>)
600112cc:	4a24      	ldr	r2, [pc, #144]	; (60011360 <z_time_slice+0xd4>)
600112ce:	689c      	ldr	r4, [r3, #8]
600112d0:	6811      	ldr	r1, [r2, #0]
600112d2:	428c      	cmp	r4, r1
600112d4:	d112      	bne.n	600112fc <z_time_slice+0x70>
		z_reset_time_slice(_current);
600112d6:	4620      	mov	r0, r4
600112d8:	f7ff fc76 	bl	60010bc8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600112dc:	481a      	ldr	r0, [pc, #104]	; (60011348 <z_time_slice+0xbc>)
600112de:	f7fe fd83 	bl	6000fde8 <z_spin_unlock_valid>
600112e2:	bb58      	cbnz	r0, 6001133c <z_time_slice+0xb0>
600112e4:	23c2      	movs	r3, #194	; 0xc2
600112e6:	4a19      	ldr	r2, [pc, #100]	; (6001134c <z_time_slice+0xc0>)
600112e8:	491e      	ldr	r1, [pc, #120]	; (60011364 <z_time_slice+0xd8>)
600112ea:	481a      	ldr	r0, [pc, #104]	; (60011354 <z_time_slice+0xc8>)
600112ec:	f006 fe09 	bl	60017f02 <assert_print>
600112f0:	4915      	ldr	r1, [pc, #84]	; (60011348 <z_time_slice+0xbc>)
600112f2:	481d      	ldr	r0, [pc, #116]	; (60011368 <z_time_slice+0xdc>)
600112f4:	f006 fe05 	bl	60017f02 <assert_print>
600112f8:	21c2      	movs	r1, #194	; 0xc2
600112fa:	e7e0      	b.n	600112be <z_time_slice+0x32>
	pending_current = NULL;
600112fc:	2100      	movs	r1, #0
600112fe:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
60011300:	4a1a      	ldr	r2, [pc, #104]	; (6001136c <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
60011302:	6812      	ldr	r2, [r2, #0]
60011304:	b1c2      	cbz	r2, 60011338 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
60011306:	89e2      	ldrh	r2, [r4, #14]
60011308:	2a7f      	cmp	r2, #127	; 0x7f
6001130a:	d815      	bhi.n	60011338 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
6001130c:	7b62      	ldrb	r2, [r4, #13]
6001130e:	06d2      	lsls	r2, r2, #27
60011310:	d112      	bne.n	60011338 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
60011312:	4a17      	ldr	r2, [pc, #92]	; (60011370 <z_time_slice+0xe4>)
60011314:	f994 100e 	ldrsb.w	r1, [r4, #14]
60011318:	6812      	ldr	r2, [r2, #0]
6001131a:	4291      	cmp	r1, r2
6001131c:	db0c      	blt.n	60011338 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
6001131e:	4a15      	ldr	r2, [pc, #84]	; (60011374 <z_time_slice+0xe8>)
60011320:	4294      	cmp	r4, r2
60011322:	d009      	beq.n	60011338 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
60011324:	691a      	ldr	r2, [r3, #16]
60011326:	42aa      	cmp	r2, r5
60011328:	dc03      	bgt.n	60011332 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
6001132a:	4620      	mov	r0, r4
6001132c:	f7ff ff5c 	bl	600111e8 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
60011330:	e7d1      	b.n	600112d6 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
60011332:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
60011334:	611a      	str	r2, [r3, #16]
60011336:	e7d1      	b.n	600112dc <z_time_slice+0x50>
60011338:	2200      	movs	r2, #0
6001133a:	e7fb      	b.n	60011334 <z_time_slice+0xa8>
	__asm__ volatile(
6001133c:	f386 8811 	msr	BASEPRI, r6
60011340:	f3bf 8f6f 	isb	sy
}
60011344:	bd70      	pop	{r4, r5, r6, pc}
60011346:	bf00      	nop
60011348:	20204dd0 	.word	0x20204dd0
6001134c:	6001c758 	.word	0x6001c758
60011350:	6001c785 	.word	0x6001c785
60011354:	6001c3d7 	.word	0x6001c3d7
60011358:	6001c79a 	.word	0x6001c79a
6001135c:	20204d8c 	.word	0x20204d8c
60011360:	20204dc4 	.word	0x20204dc4
60011364:	6001c7b2 	.word	0x6001c7b2
60011368:	6001c7c9 	.word	0x6001c7c9
6001136c:	20204dcc 	.word	0x20204dcc
60011370:	20204dc8 	.word	0x20204dc8
60011374:	20204500 	.word	0x20204500

60011378 <unready_thread>:
{
60011378:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
6001137a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
6001137e:	4604      	mov	r4, r0
60011380:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
60011382:	2a00      	cmp	r2, #0
60011384:	da06      	bge.n	60011394 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
60011386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
6001138a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
6001138c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
6001138e:	4806      	ldr	r0, [pc, #24]	; (600113a8 <unready_thread+0x30>)
60011390:	f7ff ff0a 	bl	600111a8 <z_priq_dumb_remove>
	update_cache(thread == _current);
60011394:	4b05      	ldr	r3, [pc, #20]	; (600113ac <unready_thread+0x34>)
60011396:	6898      	ldr	r0, [r3, #8]
60011398:	1b03      	subs	r3, r0, r4
6001139a:	4258      	negs	r0, r3
}
6001139c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
600113a0:	4158      	adcs	r0, r3
600113a2:	f7ff bc25 	b.w	60010bf0 <update_cache>
600113a6:	bf00      	nop
600113a8:	20204da8 	.word	0x20204da8
600113ac:	20204d8c 	.word	0x20204d8c

600113b0 <add_to_waitq_locked>:
{
600113b0:	b538      	push	{r3, r4, r5, lr}
600113b2:	4604      	mov	r4, r0
600113b4:	460d      	mov	r5, r1
	unready_thread(thread);
600113b6:	f7ff ffdf 	bl	60011378 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
600113ba:	7b63      	ldrb	r3, [r4, #13]
600113bc:	f043 0302 	orr.w	r3, r3, #2
600113c0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
600113c2:	b34d      	cbz	r5, 60011418 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
600113c4:	4b15      	ldr	r3, [pc, #84]	; (6001141c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
600113c6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
600113c8:	429c      	cmp	r4, r3
600113ca:	d109      	bne.n	600113e0 <add_to_waitq_locked+0x30>
600113cc:	4914      	ldr	r1, [pc, #80]	; (60011420 <add_to_waitq_locked+0x70>)
600113ce:	23bb      	movs	r3, #187	; 0xbb
600113d0:	4814      	ldr	r0, [pc, #80]	; (60011424 <add_to_waitq_locked+0x74>)
600113d2:	4a15      	ldr	r2, [pc, #84]	; (60011428 <add_to_waitq_locked+0x78>)
600113d4:	f006 fd95 	bl	60017f02 <assert_print>
600113d8:	21bb      	movs	r1, #187	; 0xbb
600113da:	4813      	ldr	r0, [pc, #76]	; (60011428 <add_to_waitq_locked+0x78>)
600113dc:	f006 fd8a 	bl	60017ef4 <assert_post_action>
	return list->head == list;
600113e0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
600113e2:	429d      	cmp	r5, r3
600113e4:	d109      	bne.n	600113fa <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
600113e6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
600113e8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
600113ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
600113ee:	606c      	str	r4, [r5, #4]
}
600113f0:	e012      	b.n	60011418 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
600113f2:	686a      	ldr	r2, [r5, #4]
600113f4:	4293      	cmp	r3, r2
600113f6:	d0f6      	beq.n	600113e6 <add_to_waitq_locked+0x36>
600113f8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
600113fa:	2b00      	cmp	r3, #0
600113fc:	d0f3      	beq.n	600113e6 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
600113fe:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
60011402:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
60011406:	428a      	cmp	r2, r1
60011408:	d0f3      	beq.n	600113f2 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
6001140a:	4291      	cmp	r1, r2
6001140c:	ddf1      	ble.n	600113f2 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
6001140e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
60011410:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
60011414:	6014      	str	r4, [r2, #0]
	successor->prev = node;
60011416:	605c      	str	r4, [r3, #4]
}
60011418:	bd38      	pop	{r3, r4, r5, pc}
6001141a:	bf00      	nop
6001141c:	20204500 	.word	0x20204500
60011420:	6001ec80 	.word	0x6001ec80
60011424:	6001c3d7 	.word	0x6001c3d7
60011428:	6001ec37 	.word	0x6001ec37

6001142c <pend_locked>:
{
6001142c:	b570      	push	{r4, r5, r6, lr}
6001142e:	4615      	mov	r5, r2
60011430:	461c      	mov	r4, r3
60011432:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
60011434:	f7ff ffbc 	bl	600113b0 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
60011438:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
6001143c:	bf08      	it	eq
6001143e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
60011442:	d008      	beq.n	60011456 <pend_locked+0x2a>
60011444:	462a      	mov	r2, r5
60011446:	4623      	mov	r3, r4
60011448:	f106 0018 	add.w	r0, r6, #24
6001144c:	4902      	ldr	r1, [pc, #8]	; (60011458 <pend_locked+0x2c>)
}
6001144e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
60011452:	f000 be09 	b.w	60012068 <z_add_timeout>
60011456:	bd70      	pop	{r4, r5, r6, pc}
60011458:	60011815 	.word	0x60011815

6001145c <z_pend_curr>:
{
6001145c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
60011460:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 6001151c <z_pend_curr+0xc0>
{
60011464:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
60011466:	4c2e      	ldr	r4, [pc, #184]	; (60011520 <z_pend_curr+0xc4>)
{
60011468:	4605      	mov	r5, r0
	pending_current = _current;
6001146a:	f8da 2008 	ldr.w	r2, [sl, #8]
{
6001146e:	460e      	mov	r6, r1
	pending_current = _current;
60011470:	4b2c      	ldr	r3, [pc, #176]	; (60011524 <z_pend_curr+0xc8>)
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
60011472:	42a0      	cmp	r0, r4
{
60011474:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
60011478:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
6001147a:	d10b      	bne.n	60011494 <z_pend_curr+0x38>
6001147c:	492a      	ldr	r1, [pc, #168]	; (60011528 <z_pend_curr+0xcc>)
6001147e:	f240 3352 	movw	r3, #850	; 0x352
60011482:	482a      	ldr	r0, [pc, #168]	; (6001152c <z_pend_curr+0xd0>)
60011484:	4a2a      	ldr	r2, [pc, #168]	; (60011530 <z_pend_curr+0xd4>)
60011486:	f006 fd3c 	bl	60017f02 <assert_print>
6001148a:	f240 3152 	movw	r1, #850	; 0x352
6001148e:	4828      	ldr	r0, [pc, #160]	; (60011530 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011490:	f006 fd30 	bl	60017ef4 <assert_post_action>
	__asm__ volatile(
60011494:	f04f 0210 	mov.w	r2, #16
60011498:	f3ef 8311 	mrs	r3, BASEPRI
6001149c:	f382 8812 	msr	BASEPRI_MAX, r2
600114a0:	f3bf 8f6f 	isb	sy
600114a4:	4620      	mov	r0, r4
600114a6:	f7fe fc91 	bl	6000fdcc <z_spin_lock_valid>
600114aa:	b960      	cbnz	r0, 600114c6 <z_pend_curr+0x6a>
600114ac:	2394      	movs	r3, #148	; 0x94
600114ae:	4a21      	ldr	r2, [pc, #132]	; (60011534 <z_pend_curr+0xd8>)
600114b0:	4921      	ldr	r1, [pc, #132]	; (60011538 <z_pend_curr+0xdc>)
600114b2:	481e      	ldr	r0, [pc, #120]	; (6001152c <z_pend_curr+0xd0>)
600114b4:	f006 fd25 	bl	60017f02 <assert_print>
600114b8:	4621      	mov	r1, r4
600114ba:	4820      	ldr	r0, [pc, #128]	; (6001153c <z_pend_curr+0xe0>)
600114bc:	f006 fd21 	bl	60017f02 <assert_print>
600114c0:	2194      	movs	r1, #148	; 0x94
600114c2:	481c      	ldr	r0, [pc, #112]	; (60011534 <z_pend_curr+0xd8>)
600114c4:	e7e4      	b.n	60011490 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
600114c6:	4620      	mov	r0, r4
600114c8:	f7fe fc9c 	bl	6000fe04 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
600114cc:	f8da 0008 	ldr.w	r0, [sl, #8]
600114d0:	4642      	mov	r2, r8
600114d2:	464b      	mov	r3, r9
600114d4:	4639      	mov	r1, r7
600114d6:	f7ff ffa9 	bl	6001142c <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600114da:	4628      	mov	r0, r5
600114dc:	f7fe fc84 	bl	6000fde8 <z_spin_unlock_valid>
600114e0:	b958      	cbnz	r0, 600114fa <z_pend_curr+0x9e>
600114e2:	4917      	ldr	r1, [pc, #92]	; (60011540 <z_pend_curr+0xe4>)
600114e4:	23e1      	movs	r3, #225	; 0xe1
600114e6:	4a13      	ldr	r2, [pc, #76]	; (60011534 <z_pend_curr+0xd8>)
600114e8:	4810      	ldr	r0, [pc, #64]	; (6001152c <z_pend_curr+0xd0>)
600114ea:	f006 fd0a 	bl	60017f02 <assert_print>
600114ee:	4629      	mov	r1, r5
600114f0:	4814      	ldr	r0, [pc, #80]	; (60011544 <z_pend_curr+0xe8>)
600114f2:	f006 fd06 	bl	60017f02 <assert_print>
600114f6:	21e1      	movs	r1, #225	; 0xe1
600114f8:	e7e3      	b.n	600114c2 <z_pend_curr+0x66>
600114fa:	4620      	mov	r0, r4
600114fc:	f7fe fc74 	bl	6000fde8 <z_spin_unlock_valid>
60011500:	b938      	cbnz	r0, 60011512 <z_pend_curr+0xb6>
60011502:	490f      	ldr	r1, [pc, #60]	; (60011540 <z_pend_curr+0xe4>)
60011504:	23e1      	movs	r3, #225	; 0xe1
60011506:	4a0b      	ldr	r2, [pc, #44]	; (60011534 <z_pend_curr+0xd8>)
60011508:	4808      	ldr	r0, [pc, #32]	; (6001152c <z_pend_curr+0xd0>)
6001150a:	f006 fcfa 	bl	60017f02 <assert_print>
6001150e:	4621      	mov	r1, r4
60011510:	e7ee      	b.n	600114f0 <z_pend_curr+0x94>
60011512:	4630      	mov	r0, r6
}
60011514:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60011518:	f7f9 ba46 	b.w	6000a9a8 <arch_swap>
6001151c:	20204d8c 	.word	0x20204d8c
60011520:	20204dd0 	.word	0x20204dd0
60011524:	20204dc4 	.word	0x20204dc4
60011528:	6001ed2e 	.word	0x6001ed2e
6001152c:	6001c3d7 	.word	0x6001c3d7
60011530:	6001ec37 	.word	0x6001ec37
60011534:	6001c758 	.word	0x6001c758
60011538:	6001c785 	.word	0x6001c785
6001153c:	6001c79a 	.word	0x6001c79a
60011540:	6001c7b2 	.word	0x6001c7b2
60011544:	6001c7c9 	.word	0x6001c7c9

60011548 <z_set_prio>:
{
60011548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
6001154c:	4604      	mov	r4, r0
6001154e:	460e      	mov	r6, r1
60011550:	f04f 0310 	mov.w	r3, #16
60011554:	f3ef 8911 	mrs	r9, BASEPRI
60011558:	f383 8812 	msr	BASEPRI_MAX, r3
6001155c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011560:	4837      	ldr	r0, [pc, #220]	; (60011640 <z_set_prio+0xf8>)
60011562:	f7fe fc33 	bl	6000fdcc <z_spin_lock_valid>
60011566:	4607      	mov	r7, r0
60011568:	b960      	cbnz	r0, 60011584 <z_set_prio+0x3c>
6001156a:	2394      	movs	r3, #148	; 0x94
6001156c:	4a35      	ldr	r2, [pc, #212]	; (60011644 <z_set_prio+0xfc>)
6001156e:	4936      	ldr	r1, [pc, #216]	; (60011648 <z_set_prio+0x100>)
60011570:	4836      	ldr	r0, [pc, #216]	; (6001164c <z_set_prio+0x104>)
60011572:	f006 fcc6 	bl	60017f02 <assert_print>
60011576:	4932      	ldr	r1, [pc, #200]	; (60011640 <z_set_prio+0xf8>)
60011578:	4835      	ldr	r0, [pc, #212]	; (60011650 <z_set_prio+0x108>)
6001157a:	f006 fcc2 	bl	60017f02 <assert_print>
6001157e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011580:	4830      	ldr	r0, [pc, #192]	; (60011644 <z_set_prio+0xfc>)
60011582:	e021      	b.n	600115c8 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
60011584:	482e      	ldr	r0, [pc, #184]	; (60011640 <z_set_prio+0xf8>)
				thread->base.prio = prio;
60011586:	b276      	sxtb	r6, r6
60011588:	f7fe fc3c 	bl	6000fe04 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
6001158c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
6001158e:	06da      	lsls	r2, r3, #27
60011590:	d11c      	bne.n	600115cc <z_set_prio+0x84>
	return node->next != NULL;
60011592:	69a5      	ldr	r5, [r4, #24]
60011594:	b9d5      	cbnz	r5, 600115cc <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
60011596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
6001159a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 60011654 <z_set_prio+0x10c>
6001159e:	4621      	mov	r1, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
600115a0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
600115a2:	4640      	mov	r0, r8
600115a4:	f7ff fe00 	bl	600111a8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
600115a8:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
600115aa:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
600115ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
600115b0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
600115b2:	4b29      	ldr	r3, [pc, #164]	; (60011658 <z_set_prio+0x110>)
600115b4:	429c      	cmp	r4, r3
600115b6:	d11b      	bne.n	600115f0 <z_set_prio+0xa8>
600115b8:	4928      	ldr	r1, [pc, #160]	; (6001165c <z_set_prio+0x114>)
600115ba:	23bb      	movs	r3, #187	; 0xbb
600115bc:	4823      	ldr	r0, [pc, #140]	; (6001164c <z_set_prio+0x104>)
600115be:	4a28      	ldr	r2, [pc, #160]	; (60011660 <z_set_prio+0x118>)
600115c0:	f006 fc9f 	bl	60017f02 <assert_print>
600115c4:	21bb      	movs	r1, #187	; 0xbb
600115c6:	4826      	ldr	r0, [pc, #152]	; (60011660 <z_set_prio+0x118>)
600115c8:	f006 fc94 	bl	60017ef4 <assert_post_action>
600115cc:	2700      	movs	r7, #0
			thread->base.prio = prio;
600115ce:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600115d0:	481b      	ldr	r0, [pc, #108]	; (60011640 <z_set_prio+0xf8>)
600115d2:	f7fe fc09 	bl	6000fde8 <z_spin_unlock_valid>
600115d6:	bb58      	cbnz	r0, 60011630 <z_set_prio+0xe8>
600115d8:	23c2      	movs	r3, #194	; 0xc2
600115da:	4a1a      	ldr	r2, [pc, #104]	; (60011644 <z_set_prio+0xfc>)
600115dc:	4921      	ldr	r1, [pc, #132]	; (60011664 <z_set_prio+0x11c>)
600115de:	481b      	ldr	r0, [pc, #108]	; (6001164c <z_set_prio+0x104>)
600115e0:	f006 fc8f 	bl	60017f02 <assert_print>
600115e4:	4916      	ldr	r1, [pc, #88]	; (60011640 <z_set_prio+0xf8>)
600115e6:	4820      	ldr	r0, [pc, #128]	; (60011668 <z_set_prio+0x120>)
600115e8:	f006 fc8b 	bl	60017f02 <assert_print>
600115ec:	21c2      	movs	r1, #194	; 0xc2
600115ee:	e7c7      	b.n	60011580 <z_set_prio+0x38>
	return list->head == list;
600115f0:	4643      	mov	r3, r8
600115f2:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
600115f6:	4542      	cmp	r2, r8
600115f8:	bf18      	it	ne
600115fa:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
600115fc:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
600115fe:	b925      	cbnz	r5, 6001160a <z_set_prio+0xc2>
	node->prev = tail;
60011600:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
60011604:	6014      	str	r4, [r2, #0]
	list->tail = node;
60011606:	621c      	str	r4, [r3, #32]
}
60011608:	e00a      	b.n	60011620 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
6001160a:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
6001160e:	428e      	cmp	r6, r1
60011610:	d00a      	beq.n	60011628 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
60011612:	42b1      	cmp	r1, r6
60011614:	dd08      	ble.n	60011628 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
60011616:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
60011618:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
6001161c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
6001161e:	606c      	str	r4, [r5, #4]
			update_cache(1);
60011620:	2001      	movs	r0, #1
60011622:	f7ff fae5 	bl	60010bf0 <update_cache>
60011626:	e7d3      	b.n	600115d0 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
60011628:	42aa      	cmp	r2, r5
6001162a:	d0e9      	beq.n	60011600 <z_set_prio+0xb8>
6001162c:	682d      	ldr	r5, [r5, #0]
6001162e:	e7e6      	b.n	600115fe <z_set_prio+0xb6>
	__asm__ volatile(
60011630:	f389 8811 	msr	BASEPRI, r9
60011634:	f3bf 8f6f 	isb	sy
}
60011638:	4638      	mov	r0, r7
6001163a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
6001163e:	bf00      	nop
60011640:	20204dd0 	.word	0x20204dd0
60011644:	6001c758 	.word	0x6001c758
60011648:	6001c785 	.word	0x6001c785
6001164c:	6001c3d7 	.word	0x6001c3d7
60011650:	6001c79a 	.word	0x6001c79a
60011654:	20204da8 	.word	0x20204da8
60011658:	20204500 	.word	0x20204500
6001165c:	6001ec80 	.word	0x6001ec80
60011660:	6001ec37 	.word	0x6001ec37
60011664:	6001c7b2 	.word	0x6001c7b2
60011668:	6001c7c9 	.word	0x6001c7c9

6001166c <z_impl_k_thread_suspend>:
{
6001166c:	b570      	push	{r4, r5, r6, lr}
6001166e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
60011670:	3018      	adds	r0, #24
60011672:	f000 fdbf 	bl	600121f4 <z_abort_timeout>
	__asm__ volatile(
60011676:	f04f 0310 	mov.w	r3, #16
6001167a:	f3ef 8611 	mrs	r6, BASEPRI
6001167e:	f383 8812 	msr	BASEPRI_MAX, r3
60011682:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011686:	4824      	ldr	r0, [pc, #144]	; (60011718 <z_impl_k_thread_suspend+0xac>)
60011688:	f7fe fba0 	bl	6000fdcc <z_spin_lock_valid>
6001168c:	b968      	cbnz	r0, 600116aa <z_impl_k_thread_suspend+0x3e>
6001168e:	2394      	movs	r3, #148	; 0x94
60011690:	4a22      	ldr	r2, [pc, #136]	; (6001171c <z_impl_k_thread_suspend+0xb0>)
60011692:	4923      	ldr	r1, [pc, #140]	; (60011720 <z_impl_k_thread_suspend+0xb4>)
60011694:	4823      	ldr	r0, [pc, #140]	; (60011724 <z_impl_k_thread_suspend+0xb8>)
60011696:	f006 fc34 	bl	60017f02 <assert_print>
6001169a:	491f      	ldr	r1, [pc, #124]	; (60011718 <z_impl_k_thread_suspend+0xac>)
6001169c:	4822      	ldr	r0, [pc, #136]	; (60011728 <z_impl_k_thread_suspend+0xbc>)
6001169e:	f006 fc30 	bl	60017f02 <assert_print>
600116a2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600116a4:	481d      	ldr	r0, [pc, #116]	; (6001171c <z_impl_k_thread_suspend+0xb0>)
600116a6:	f006 fc25 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
600116aa:	481b      	ldr	r0, [pc, #108]	; (60011718 <z_impl_k_thread_suspend+0xac>)
600116ac:	f7fe fbaa 	bl	6000fe04 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
600116b0:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
600116b4:	7b63      	ldrb	r3, [r4, #13]
600116b6:	2a00      	cmp	r2, #0
600116b8:	da06      	bge.n	600116c8 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
600116ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
600116be:	4621      	mov	r1, r4
600116c0:	481a      	ldr	r0, [pc, #104]	; (6001172c <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
600116c2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
600116c4:	f7ff fd70 	bl	600111a8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
600116c8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
600116ca:	4d19      	ldr	r5, [pc, #100]	; (60011730 <z_impl_k_thread_suspend+0xc4>)
600116cc:	f043 0310 	orr.w	r3, r3, #16
600116d0:	68a8      	ldr	r0, [r5, #8]
600116d2:	7363      	strb	r3, [r4, #13]
600116d4:	1b03      	subs	r3, r0, r4
600116d6:	4258      	negs	r0, r3
600116d8:	4158      	adcs	r0, r3
600116da:	f7ff fa89 	bl	60010bf0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600116de:	480e      	ldr	r0, [pc, #56]	; (60011718 <z_impl_k_thread_suspend+0xac>)
600116e0:	f7fe fb82 	bl	6000fde8 <z_spin_unlock_valid>
600116e4:	b958      	cbnz	r0, 600116fe <z_impl_k_thread_suspend+0x92>
600116e6:	23c2      	movs	r3, #194	; 0xc2
600116e8:	4a0c      	ldr	r2, [pc, #48]	; (6001171c <z_impl_k_thread_suspend+0xb0>)
600116ea:	4912      	ldr	r1, [pc, #72]	; (60011734 <z_impl_k_thread_suspend+0xc8>)
600116ec:	480d      	ldr	r0, [pc, #52]	; (60011724 <z_impl_k_thread_suspend+0xb8>)
600116ee:	f006 fc08 	bl	60017f02 <assert_print>
600116f2:	4909      	ldr	r1, [pc, #36]	; (60011718 <z_impl_k_thread_suspend+0xac>)
600116f4:	4810      	ldr	r0, [pc, #64]	; (60011738 <z_impl_k_thread_suspend+0xcc>)
600116f6:	f006 fc04 	bl	60017f02 <assert_print>
600116fa:	21c2      	movs	r1, #194	; 0xc2
600116fc:	e7d2      	b.n	600116a4 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
600116fe:	f386 8811 	msr	BASEPRI, r6
60011702:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
60011706:	68ab      	ldr	r3, [r5, #8]
60011708:	42a3      	cmp	r3, r4
6001170a:	d103      	bne.n	60011714 <z_impl_k_thread_suspend+0xa8>
}
6001170c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
60011710:	f008 b930 	b.w	60019974 <z_reschedule_unlocked>
}
60011714:	bd70      	pop	{r4, r5, r6, pc}
60011716:	bf00      	nop
60011718:	20204dd0 	.word	0x20204dd0
6001171c:	6001c758 	.word	0x6001c758
60011720:	6001c785 	.word	0x6001c785
60011724:	6001c3d7 	.word	0x6001c3d7
60011728:	6001c79a 	.word	0x6001c79a
6001172c:	20204da8 	.word	0x20204da8
60011730:	20204d8c 	.word	0x20204d8c
60011734:	6001c7b2 	.word	0x6001c7b2
60011738:	6001c7c9 	.word	0x6001c7c9

6001173c <unpend_thread_no_timeout>:
{
6001173c:	b510      	push	{r4, lr}
6001173e:	4604      	mov	r4, r0
60011740:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
60011742:	b958      	cbnz	r0, 6001175c <unpend_thread_no_timeout+0x20>
60011744:	490a      	ldr	r1, [pc, #40]	; (60011770 <unpend_thread_no_timeout+0x34>)
60011746:	f44f 7336 	mov.w	r3, #728	; 0x2d8
6001174a:	480a      	ldr	r0, [pc, #40]	; (60011774 <unpend_thread_no_timeout+0x38>)
6001174c:	4a0a      	ldr	r2, [pc, #40]	; (60011778 <unpend_thread_no_timeout+0x3c>)
6001174e:	f006 fbd8 	bl	60017f02 <assert_print>
60011752:	f44f 7136 	mov.w	r1, #728	; 0x2d8
60011756:	4808      	ldr	r0, [pc, #32]	; (60011778 <unpend_thread_no_timeout+0x3c>)
60011758:	f006 fbcc 	bl	60017ef4 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
6001175c:	4621      	mov	r1, r4
6001175e:	f7ff fd23 	bl	600111a8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
60011762:	7b63      	ldrb	r3, [r4, #13]
60011764:	f023 0302 	bic.w	r3, r3, #2
60011768:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
6001176a:	2300      	movs	r3, #0
6001176c:	60a3      	str	r3, [r4, #8]
}
6001176e:	bd10      	pop	{r4, pc}
60011770:	6001ed65 	.word	0x6001ed65
60011774:	6001c3d7 	.word	0x6001c3d7
60011778:	6001ec37 	.word	0x6001ec37

6001177c <z_unpend_thread>:
{
6001177c:	b538      	push	{r3, r4, r5, lr}
6001177e:	4604      	mov	r4, r0
	__asm__ volatile(
60011780:	f04f 0310 	mov.w	r3, #16
60011784:	f3ef 8511 	mrs	r5, BASEPRI
60011788:	f383 8812 	msr	BASEPRI_MAX, r3
6001178c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011790:	4819      	ldr	r0, [pc, #100]	; (600117f8 <z_unpend_thread+0x7c>)
60011792:	f7fe fb1b 	bl	6000fdcc <z_spin_lock_valid>
60011796:	b968      	cbnz	r0, 600117b4 <z_unpend_thread+0x38>
60011798:	2394      	movs	r3, #148	; 0x94
6001179a:	4a18      	ldr	r2, [pc, #96]	; (600117fc <z_unpend_thread+0x80>)
6001179c:	4918      	ldr	r1, [pc, #96]	; (60011800 <z_unpend_thread+0x84>)
6001179e:	4819      	ldr	r0, [pc, #100]	; (60011804 <z_unpend_thread+0x88>)
600117a0:	f006 fbaf 	bl	60017f02 <assert_print>
600117a4:	4914      	ldr	r1, [pc, #80]	; (600117f8 <z_unpend_thread+0x7c>)
600117a6:	4818      	ldr	r0, [pc, #96]	; (60011808 <z_unpend_thread+0x8c>)
600117a8:	f006 fbab 	bl	60017f02 <assert_print>
600117ac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600117ae:	4813      	ldr	r0, [pc, #76]	; (600117fc <z_unpend_thread+0x80>)
600117b0:	f006 fba0 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
600117b4:	4810      	ldr	r0, [pc, #64]	; (600117f8 <z_unpend_thread+0x7c>)
600117b6:	f7fe fb25 	bl	6000fe04 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
600117ba:	68a3      	ldr	r3, [r4, #8]
600117bc:	b113      	cbz	r3, 600117c4 <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
600117be:	4620      	mov	r0, r4
600117c0:	f7ff ffbc 	bl	6001173c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600117c4:	480c      	ldr	r0, [pc, #48]	; (600117f8 <z_unpend_thread+0x7c>)
600117c6:	f7fe fb0f 	bl	6000fde8 <z_spin_unlock_valid>
600117ca:	b958      	cbnz	r0, 600117e4 <z_unpend_thread+0x68>
600117cc:	23c2      	movs	r3, #194	; 0xc2
600117ce:	4a0b      	ldr	r2, [pc, #44]	; (600117fc <z_unpend_thread+0x80>)
600117d0:	490e      	ldr	r1, [pc, #56]	; (6001180c <z_unpend_thread+0x90>)
600117d2:	480c      	ldr	r0, [pc, #48]	; (60011804 <z_unpend_thread+0x88>)
600117d4:	f006 fb95 	bl	60017f02 <assert_print>
600117d8:	4907      	ldr	r1, [pc, #28]	; (600117f8 <z_unpend_thread+0x7c>)
600117da:	480d      	ldr	r0, [pc, #52]	; (60011810 <z_unpend_thread+0x94>)
600117dc:	f006 fb91 	bl	60017f02 <assert_print>
600117e0:	21c2      	movs	r1, #194	; 0xc2
600117e2:	e7e4      	b.n	600117ae <z_unpend_thread+0x32>
	__asm__ volatile(
600117e4:	f385 8811 	msr	BASEPRI, r5
600117e8:	f3bf 8f6f 	isb	sy
600117ec:	f104 0018 	add.w	r0, r4, #24
}
600117f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
600117f4:	f000 bcfe 	b.w	600121f4 <z_abort_timeout>
600117f8:	20204dd0 	.word	0x20204dd0
600117fc:	6001c758 	.word	0x6001c758
60011800:	6001c785 	.word	0x6001c785
60011804:	6001c3d7 	.word	0x6001c3d7
60011808:	6001c79a 	.word	0x6001c79a
6001180c:	6001c7b2 	.word	0x6001c7b2
60011810:	6001c7c9 	.word	0x6001c7c9

60011814 <z_thread_timeout>:
{
60011814:	b570      	push	{r4, r5, r6, lr}
60011816:	4604      	mov	r4, r0
	__asm__ volatile(
60011818:	f04f 0310 	mov.w	r3, #16
6001181c:	f3ef 8611 	mrs	r6, BASEPRI
60011820:	f383 8812 	msr	BASEPRI_MAX, r3
60011824:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011828:	481f      	ldr	r0, [pc, #124]	; (600118a8 <z_thread_timeout+0x94>)
6001182a:	f7fe facf 	bl	6000fdcc <z_spin_lock_valid>
6001182e:	b968      	cbnz	r0, 6001184c <z_thread_timeout+0x38>
60011830:	2394      	movs	r3, #148	; 0x94
60011832:	4a1e      	ldr	r2, [pc, #120]	; (600118ac <z_thread_timeout+0x98>)
60011834:	491e      	ldr	r1, [pc, #120]	; (600118b0 <z_thread_timeout+0x9c>)
60011836:	481f      	ldr	r0, [pc, #124]	; (600118b4 <z_thread_timeout+0xa0>)
60011838:	f006 fb63 	bl	60017f02 <assert_print>
6001183c:	491a      	ldr	r1, [pc, #104]	; (600118a8 <z_thread_timeout+0x94>)
6001183e:	481e      	ldr	r0, [pc, #120]	; (600118b8 <z_thread_timeout+0xa4>)
60011840:	f006 fb5f 	bl	60017f02 <assert_print>
60011844:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011846:	4819      	ldr	r0, [pc, #100]	; (600118ac <z_thread_timeout+0x98>)
60011848:	f006 fb54 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
6001184c:	4816      	ldr	r0, [pc, #88]	; (600118a8 <z_thread_timeout+0x94>)
6001184e:	f7fe fad9 	bl	6000fe04 <z_spin_lock_set_owner>
		if (!killed) {
60011852:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
60011856:	f013 0f28 	tst.w	r3, #40	; 0x28
6001185a:	d110      	bne.n	6001187e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
6001185c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
60011860:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
60011864:	b113      	cbz	r3, 6001186c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
60011866:	4628      	mov	r0, r5
60011868:	f7ff ff68 	bl	6001173c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
6001186c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
60011870:	4628      	mov	r0, r5
60011872:	f023 0314 	bic.w	r3, r3, #20
60011876:	f804 3c0b 	strb.w	r3, [r4, #-11]
6001187a:	f7ff f9ed 	bl	60010c58 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6001187e:	480a      	ldr	r0, [pc, #40]	; (600118a8 <z_thread_timeout+0x94>)
60011880:	f7fe fab2 	bl	6000fde8 <z_spin_unlock_valid>
60011884:	b958      	cbnz	r0, 6001189e <z_thread_timeout+0x8a>
60011886:	23c2      	movs	r3, #194	; 0xc2
60011888:	4a08      	ldr	r2, [pc, #32]	; (600118ac <z_thread_timeout+0x98>)
6001188a:	490c      	ldr	r1, [pc, #48]	; (600118bc <z_thread_timeout+0xa8>)
6001188c:	4809      	ldr	r0, [pc, #36]	; (600118b4 <z_thread_timeout+0xa0>)
6001188e:	f006 fb38 	bl	60017f02 <assert_print>
60011892:	4905      	ldr	r1, [pc, #20]	; (600118a8 <z_thread_timeout+0x94>)
60011894:	480a      	ldr	r0, [pc, #40]	; (600118c0 <z_thread_timeout+0xac>)
60011896:	f006 fb34 	bl	60017f02 <assert_print>
6001189a:	21c2      	movs	r1, #194	; 0xc2
6001189c:	e7d3      	b.n	60011846 <z_thread_timeout+0x32>
	__asm__ volatile(
6001189e:	f386 8811 	msr	BASEPRI, r6
600118a2:	f3bf 8f6f 	isb	sy
}
600118a6:	bd70      	pop	{r4, r5, r6, pc}
600118a8:	20204dd0 	.word	0x20204dd0
600118ac:	6001c758 	.word	0x6001c758
600118b0:	6001c785 	.word	0x6001c785
600118b4:	6001c3d7 	.word	0x6001c3d7
600118b8:	6001c79a 	.word	0x6001c79a
600118bc:	6001c7b2 	.word	0x6001c7b2
600118c0:	6001c7c9 	.word	0x6001c7c9

600118c4 <z_unpend1_no_timeout>:
{
600118c4:	b570      	push	{r4, r5, r6, lr}
600118c6:	4605      	mov	r5, r0
	__asm__ volatile(
600118c8:	f04f 0310 	mov.w	r3, #16
600118cc:	f3ef 8611 	mrs	r6, BASEPRI
600118d0:	f383 8812 	msr	BASEPRI_MAX, r3
600118d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600118d8:	4819      	ldr	r0, [pc, #100]	; (60011940 <z_unpend1_no_timeout+0x7c>)
600118da:	f7fe fa77 	bl	6000fdcc <z_spin_lock_valid>
600118de:	b968      	cbnz	r0, 600118fc <z_unpend1_no_timeout+0x38>
600118e0:	2394      	movs	r3, #148	; 0x94
600118e2:	4a18      	ldr	r2, [pc, #96]	; (60011944 <z_unpend1_no_timeout+0x80>)
600118e4:	4918      	ldr	r1, [pc, #96]	; (60011948 <z_unpend1_no_timeout+0x84>)
600118e6:	4819      	ldr	r0, [pc, #100]	; (6001194c <z_unpend1_no_timeout+0x88>)
600118e8:	f006 fb0b 	bl	60017f02 <assert_print>
600118ec:	4914      	ldr	r1, [pc, #80]	; (60011940 <z_unpend1_no_timeout+0x7c>)
600118ee:	4818      	ldr	r0, [pc, #96]	; (60011950 <z_unpend1_no_timeout+0x8c>)
600118f0:	f006 fb07 	bl	60017f02 <assert_print>
600118f4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600118f6:	4813      	ldr	r0, [pc, #76]	; (60011944 <z_unpend1_no_timeout+0x80>)
600118f8:	f006 fafc 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
600118fc:	4810      	ldr	r0, [pc, #64]	; (60011940 <z_unpend1_no_timeout+0x7c>)
600118fe:	f7fe fa81 	bl	6000fe04 <z_spin_lock_set_owner>
	return list->head == list;
60011902:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60011904:	42a5      	cmp	r5, r4
60011906:	d013      	beq.n	60011930 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
60011908:	b114      	cbz	r4, 60011910 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
6001190a:	4620      	mov	r0, r4
6001190c:	f7ff ff16 	bl	6001173c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011910:	480b      	ldr	r0, [pc, #44]	; (60011940 <z_unpend1_no_timeout+0x7c>)
60011912:	f7fe fa69 	bl	6000fde8 <z_spin_unlock_valid>
60011916:	b968      	cbnz	r0, 60011934 <z_unpend1_no_timeout+0x70>
60011918:	23c2      	movs	r3, #194	; 0xc2
6001191a:	4a0a      	ldr	r2, [pc, #40]	; (60011944 <z_unpend1_no_timeout+0x80>)
6001191c:	490d      	ldr	r1, [pc, #52]	; (60011954 <z_unpend1_no_timeout+0x90>)
6001191e:	480b      	ldr	r0, [pc, #44]	; (6001194c <z_unpend1_no_timeout+0x88>)
60011920:	f006 faef 	bl	60017f02 <assert_print>
60011924:	4906      	ldr	r1, [pc, #24]	; (60011940 <z_unpend1_no_timeout+0x7c>)
60011926:	480c      	ldr	r0, [pc, #48]	; (60011958 <z_unpend1_no_timeout+0x94>)
60011928:	f006 faeb 	bl	60017f02 <assert_print>
6001192c:	21c2      	movs	r1, #194	; 0xc2
6001192e:	e7e2      	b.n	600118f6 <z_unpend1_no_timeout+0x32>
60011930:	2400      	movs	r4, #0
60011932:	e7ed      	b.n	60011910 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
60011934:	f386 8811 	msr	BASEPRI, r6
60011938:	f3bf 8f6f 	isb	sy
}
6001193c:	4620      	mov	r0, r4
6001193e:	bd70      	pop	{r4, r5, r6, pc}
60011940:	20204dd0 	.word	0x20204dd0
60011944:	6001c758 	.word	0x6001c758
60011948:	6001c785 	.word	0x6001c785
6001194c:	6001c3d7 	.word	0x6001c3d7
60011950:	6001c79a 	.word	0x6001c79a
60011954:	6001c7b2 	.word	0x6001c7b2
60011958:	6001c7c9 	.word	0x6001c7c9

6001195c <z_unpend_first_thread>:
{
6001195c:	b570      	push	{r4, r5, r6, lr}
6001195e:	4605      	mov	r5, r0
	__asm__ volatile(
60011960:	f04f 0310 	mov.w	r3, #16
60011964:	f3ef 8611 	mrs	r6, BASEPRI
60011968:	f383 8812 	msr	BASEPRI_MAX, r3
6001196c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011970:	481b      	ldr	r0, [pc, #108]	; (600119e0 <z_unpend_first_thread+0x84>)
60011972:	f7fe fa2b 	bl	6000fdcc <z_spin_lock_valid>
60011976:	b968      	cbnz	r0, 60011994 <z_unpend_first_thread+0x38>
60011978:	2394      	movs	r3, #148	; 0x94
6001197a:	4a1a      	ldr	r2, [pc, #104]	; (600119e4 <z_unpend_first_thread+0x88>)
6001197c:	491a      	ldr	r1, [pc, #104]	; (600119e8 <z_unpend_first_thread+0x8c>)
6001197e:	481b      	ldr	r0, [pc, #108]	; (600119ec <z_unpend_first_thread+0x90>)
60011980:	f006 fabf 	bl	60017f02 <assert_print>
60011984:	4916      	ldr	r1, [pc, #88]	; (600119e0 <z_unpend_first_thread+0x84>)
60011986:	481a      	ldr	r0, [pc, #104]	; (600119f0 <z_unpend_first_thread+0x94>)
60011988:	f006 fabb 	bl	60017f02 <assert_print>
6001198c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6001198e:	4815      	ldr	r0, [pc, #84]	; (600119e4 <z_unpend_first_thread+0x88>)
60011990:	f006 fab0 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
60011994:	4812      	ldr	r0, [pc, #72]	; (600119e0 <z_unpend_first_thread+0x84>)
60011996:	f7fe fa35 	bl	6000fe04 <z_spin_lock_set_owner>
	return list->head == list;
6001199a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6001199c:	42a5      	cmp	r5, r4
6001199e:	d017      	beq.n	600119d0 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
600119a0:	b134      	cbz	r4, 600119b0 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
600119a2:	4620      	mov	r0, r4
600119a4:	f7ff feca 	bl	6001173c <unpend_thread_no_timeout>
600119a8:	f104 0018 	add.w	r0, r4, #24
600119ac:	f000 fc22 	bl	600121f4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600119b0:	480b      	ldr	r0, [pc, #44]	; (600119e0 <z_unpend_first_thread+0x84>)
600119b2:	f7fe fa19 	bl	6000fde8 <z_spin_unlock_valid>
600119b6:	b968      	cbnz	r0, 600119d4 <z_unpend_first_thread+0x78>
600119b8:	23c2      	movs	r3, #194	; 0xc2
600119ba:	4a0a      	ldr	r2, [pc, #40]	; (600119e4 <z_unpend_first_thread+0x88>)
600119bc:	490d      	ldr	r1, [pc, #52]	; (600119f4 <z_unpend_first_thread+0x98>)
600119be:	480b      	ldr	r0, [pc, #44]	; (600119ec <z_unpend_first_thread+0x90>)
600119c0:	f006 fa9f 	bl	60017f02 <assert_print>
600119c4:	4906      	ldr	r1, [pc, #24]	; (600119e0 <z_unpend_first_thread+0x84>)
600119c6:	480c      	ldr	r0, [pc, #48]	; (600119f8 <z_unpend_first_thread+0x9c>)
600119c8:	f006 fa9b 	bl	60017f02 <assert_print>
600119cc:	21c2      	movs	r1, #194	; 0xc2
600119ce:	e7de      	b.n	6001198e <z_unpend_first_thread+0x32>
600119d0:	2400      	movs	r4, #0
600119d2:	e7ed      	b.n	600119b0 <z_unpend_first_thread+0x54>
	__asm__ volatile(
600119d4:	f386 8811 	msr	BASEPRI, r6
600119d8:	f3bf 8f6f 	isb	sy
}
600119dc:	4620      	mov	r0, r4
600119de:	bd70      	pop	{r4, r5, r6, pc}
600119e0:	20204dd0 	.word	0x20204dd0
600119e4:	6001c758 	.word	0x6001c758
600119e8:	6001c785 	.word	0x6001c785
600119ec:	6001c3d7 	.word	0x6001c3d7
600119f0:	6001c79a 	.word	0x6001c79a
600119f4:	6001c7b2 	.word	0x6001c7b2
600119f8:	6001c7c9 	.word	0x6001c7c9

600119fc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
600119fc:	4b04      	ldr	r3, [pc, #16]	; (60011a10 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
600119fe:	2100      	movs	r1, #0
60011a00:	f103 021c 	add.w	r2, r3, #28
60011a04:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
60011a06:	e9c3 2207 	strd	r2, r2, [r3, #28]
60011a0a:	f7ff b96f 	b.w	60010cec <k_sched_time_slice_set>
60011a0e:	bf00      	nop
60011a10:	20204d8c 	.word	0x20204d8c

60011a14 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
60011a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60011a16:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
60011a1a:	b16b      	cbz	r3, 60011a38 <z_impl_k_yield+0x24>
60011a1c:	493c      	ldr	r1, [pc, #240]	; (60011b10 <z_impl_k_yield+0xfc>)
60011a1e:	f240 5374 	movw	r3, #1396	; 0x574
60011a22:	4a3c      	ldr	r2, [pc, #240]	; (60011b14 <z_impl_k_yield+0x100>)
60011a24:	483c      	ldr	r0, [pc, #240]	; (60011b18 <z_impl_k_yield+0x104>)
60011a26:	f006 fa6c 	bl	60017f02 <assert_print>
60011a2a:	483c      	ldr	r0, [pc, #240]	; (60011b1c <z_impl_k_yield+0x108>)
60011a2c:	f006 fa69 	bl	60017f02 <assert_print>
60011a30:	f240 5174 	movw	r1, #1396	; 0x574
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
60011a34:	4837      	ldr	r0, [pc, #220]	; (60011b14 <z_impl_k_yield+0x100>)
60011a36:	e017      	b.n	60011a68 <z_impl_k_yield+0x54>
	__asm__ volatile(
60011a38:	f04f 0310 	mov.w	r3, #16
60011a3c:	f3ef 8611 	mrs	r6, BASEPRI
60011a40:	f383 8812 	msr	BASEPRI_MAX, r3
60011a44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011a48:	4835      	ldr	r0, [pc, #212]	; (60011b20 <z_impl_k_yield+0x10c>)
60011a4a:	f7fe f9bf 	bl	6000fdcc <z_spin_lock_valid>
60011a4e:	b968      	cbnz	r0, 60011a6c <z_impl_k_yield+0x58>
60011a50:	2394      	movs	r3, #148	; 0x94
60011a52:	4a34      	ldr	r2, [pc, #208]	; (60011b24 <z_impl_k_yield+0x110>)
60011a54:	4934      	ldr	r1, [pc, #208]	; (60011b28 <z_impl_k_yield+0x114>)
60011a56:	4830      	ldr	r0, [pc, #192]	; (60011b18 <z_impl_k_yield+0x104>)
60011a58:	f006 fa53 	bl	60017f02 <assert_print>
60011a5c:	4930      	ldr	r1, [pc, #192]	; (60011b20 <z_impl_k_yield+0x10c>)
60011a5e:	4833      	ldr	r0, [pc, #204]	; (60011b2c <z_impl_k_yield+0x118>)
60011a60:	f006 fa4f 	bl	60017f02 <assert_print>
60011a64:	2194      	movs	r1, #148	; 0x94
60011a66:	482f      	ldr	r0, [pc, #188]	; (60011b24 <z_impl_k_yield+0x110>)
60011a68:	f006 fa44 	bl	60017ef4 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
60011a6c:	4c30      	ldr	r4, [pc, #192]	; (60011b30 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
60011a6e:	482c      	ldr	r0, [pc, #176]	; (60011b20 <z_impl_k_yield+0x10c>)
60011a70:	f7fe f9c8 	bl	6000fe04 <z_spin_lock_set_owner>
60011a74:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
60011a76:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
60011a7a:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
60011a7c:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
60011a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
60011a82:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
60011a84:	f7ff fb90 	bl	600111a8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
60011a88:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
60011a8a:	7b5a      	ldrb	r2, [r3, #13]
60011a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
60011a90:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
60011a92:	4a28      	ldr	r2, [pc, #160]	; (60011b34 <z_impl_k_yield+0x120>)
60011a94:	4293      	cmp	r3, r2
60011a96:	d107      	bne.n	60011aa8 <z_impl_k_yield+0x94>
60011a98:	4927      	ldr	r1, [pc, #156]	; (60011b38 <z_impl_k_yield+0x124>)
60011a9a:	23bb      	movs	r3, #187	; 0xbb
60011a9c:	4a1d      	ldr	r2, [pc, #116]	; (60011b14 <z_impl_k_yield+0x100>)
60011a9e:	481e      	ldr	r0, [pc, #120]	; (60011b18 <z_impl_k_yield+0x104>)
60011aa0:	f006 fa2f 	bl	60017f02 <assert_print>
60011aa4:	21bb      	movs	r1, #187	; 0xbb
60011aa6:	e7c5      	b.n	60011a34 <z_impl_k_yield+0x20>
	return list->head == list;
60011aa8:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
60011aaa:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60011aac:	42aa      	cmp	r2, r5
60011aae:	bf08      	it	eq
60011ab0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
60011ab2:	b922      	cbnz	r2, 60011abe <z_impl_k_yield+0xaa>
	node->prev = tail;
60011ab4:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
60011ab8:	600b      	str	r3, [r1, #0]
	list->tail = node;
60011aba:	6223      	str	r3, [r4, #32]
}
60011abc:	e00c      	b.n	60011ad8 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
60011abe:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
60011ac2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
60011ac6:	42b8      	cmp	r0, r7
60011ac8:	d019      	beq.n	60011afe <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
60011aca:	4287      	cmp	r7, r0
60011acc:	dd17      	ble.n	60011afe <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
60011ace:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
60011ad0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
60011ad4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
60011ad6:	6053      	str	r3, [r2, #4]
	update_cache(1);
60011ad8:	2001      	movs	r0, #1
60011ada:	f7ff f889 	bl	60010bf0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011ade:	4810      	ldr	r0, [pc, #64]	; (60011b20 <z_impl_k_yield+0x10c>)
60011ae0:	f7fe f982 	bl	6000fde8 <z_spin_unlock_valid>
60011ae4:	b978      	cbnz	r0, 60011b06 <z_impl_k_yield+0xf2>
60011ae6:	23e1      	movs	r3, #225	; 0xe1
60011ae8:	4a0e      	ldr	r2, [pc, #56]	; (60011b24 <z_impl_k_yield+0x110>)
60011aea:	4914      	ldr	r1, [pc, #80]	; (60011b3c <z_impl_k_yield+0x128>)
60011aec:	480a      	ldr	r0, [pc, #40]	; (60011b18 <z_impl_k_yield+0x104>)
60011aee:	f006 fa08 	bl	60017f02 <assert_print>
60011af2:	490b      	ldr	r1, [pc, #44]	; (60011b20 <z_impl_k_yield+0x10c>)
60011af4:	4812      	ldr	r0, [pc, #72]	; (60011b40 <z_impl_k_yield+0x12c>)
60011af6:	f006 fa04 	bl	60017f02 <assert_print>
60011afa:	21e1      	movs	r1, #225	; 0xe1
60011afc:	e7b3      	b.n	60011a66 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
60011afe:	428a      	cmp	r2, r1
60011b00:	d0d8      	beq.n	60011ab4 <z_impl_k_yield+0xa0>
60011b02:	6812      	ldr	r2, [r2, #0]
60011b04:	e7d5      	b.n	60011ab2 <z_impl_k_yield+0x9e>
60011b06:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
60011b08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
60011b0c:	f7f8 bf4c 	b.w	6000a9a8 <arch_swap>
60011b10:	6001e9fa 	.word	0x6001e9fa
60011b14:	6001ec37 	.word	0x6001ec37
60011b18:	6001c3d7 	.word	0x6001c3d7
60011b1c:	6001e923 	.word	0x6001e923
60011b20:	20204dd0 	.word	0x20204dd0
60011b24:	6001c758 	.word	0x6001c758
60011b28:	6001c785 	.word	0x6001c785
60011b2c:	6001c79a 	.word	0x6001c79a
60011b30:	20204d8c 	.word	0x20204d8c
60011b34:	20204500 	.word	0x20204500
60011b38:	6001ec80 	.word	0x6001ec80
60011b3c:	6001c7b2 	.word	0x6001c7b2
60011b40:	6001c7c9 	.word	0x6001c7c9

60011b44 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
60011b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60011b48:	4605      	mov	r5, r0
60011b4a:	460e      	mov	r6, r1
60011b4c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
60011b50:	b16b      	cbz	r3, 60011b6e <z_tick_sleep+0x2a>
60011b52:	493f      	ldr	r1, [pc, #252]	; (60011c50 <z_tick_sleep+0x10c>)
60011b54:	f44f 63b2 	mov.w	r3, #1424	; 0x590
60011b58:	4a3e      	ldr	r2, [pc, #248]	; (60011c54 <z_tick_sleep+0x110>)
60011b5a:	483f      	ldr	r0, [pc, #252]	; (60011c58 <z_tick_sleep+0x114>)
60011b5c:	f006 f9d1 	bl	60017f02 <assert_print>
60011b60:	483e      	ldr	r0, [pc, #248]	; (60011c5c <z_tick_sleep+0x118>)
60011b62:	f006 f9ce 	bl	60017f02 <assert_print>
60011b66:	f44f 61b2 	mov.w	r1, #1424	; 0x590
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
60011b6a:	483a      	ldr	r0, [pc, #232]	; (60011c54 <z_tick_sleep+0x110>)
60011b6c:	e025      	b.n	60011bba <z_tick_sleep+0x76>
	if (ticks == 0) {
60011b6e:	ea50 0301 	orrs.w	r3, r0, r1
60011b72:	d103      	bne.n	60011b7c <z_tick_sleep+0x38>
	z_impl_k_yield();
60011b74:	f7ff ff4e 	bl	60011a14 <z_impl_k_yield>
		return 0;
60011b78:	2000      	movs	r0, #0
60011b7a:	e066      	b.n	60011c4a <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
60011b7c:	1c82      	adds	r2, r0, #2
60011b7e:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
60011b82:	db1c      	blt.n	60011bbe <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
60011b84:	f007 ff20 	bl	600199c8 <sys_clock_tick_get_32>
60011b88:	182c      	adds	r4, r5, r0
60011b8a:	f04f 0310 	mov.w	r3, #16
60011b8e:	f3ef 8811 	mrs	r8, BASEPRI
60011b92:	f383 8812 	msr	BASEPRI_MAX, r3
60011b96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011b9a:	4831      	ldr	r0, [pc, #196]	; (60011c60 <z_tick_sleep+0x11c>)
60011b9c:	f7fe f916 	bl	6000fdcc <z_spin_lock_valid>
60011ba0:	b988      	cbnz	r0, 60011bc6 <z_tick_sleep+0x82>
60011ba2:	2394      	movs	r3, #148	; 0x94
60011ba4:	4a2f      	ldr	r2, [pc, #188]	; (60011c64 <z_tick_sleep+0x120>)
60011ba6:	4930      	ldr	r1, [pc, #192]	; (60011c68 <z_tick_sleep+0x124>)
60011ba8:	482b      	ldr	r0, [pc, #172]	; (60011c58 <z_tick_sleep+0x114>)
60011baa:	f006 f9aa 	bl	60017f02 <assert_print>
60011bae:	492c      	ldr	r1, [pc, #176]	; (60011c60 <z_tick_sleep+0x11c>)
60011bb0:	482e      	ldr	r0, [pc, #184]	; (60011c6c <z_tick_sleep+0x128>)
60011bb2:	f006 f9a6 	bl	60017f02 <assert_print>
60011bb6:	2194      	movs	r1, #148	; 0x94
60011bb8:	482a      	ldr	r0, [pc, #168]	; (60011c64 <z_tick_sleep+0x120>)
60011bba:	f006 f99b 	bl	60017ef4 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
60011bbe:	f06f 0401 	mvn.w	r4, #1
60011bc2:	1a24      	subs	r4, r4, r0
60011bc4:	e7e1      	b.n	60011b8a <z_tick_sleep+0x46>
	pending_current = _current;
60011bc6:	4f2a      	ldr	r7, [pc, #168]	; (60011c70 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
60011bc8:	4825      	ldr	r0, [pc, #148]	; (60011c60 <z_tick_sleep+0x11c>)
60011bca:	f7fe f91b 	bl	6000fe04 <z_spin_lock_set_owner>
60011bce:	68b8      	ldr	r0, [r7, #8]
60011bd0:	4b28      	ldr	r3, [pc, #160]	; (60011c74 <z_tick_sleep+0x130>)
60011bd2:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
60011bd4:	f7ff fbd0 	bl	60011378 <unready_thread>
	z_add_thread_timeout(_current, timeout);
60011bd8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
60011bda:	462a      	mov	r2, r5
60011bdc:	4633      	mov	r3, r6
60011bde:	4926      	ldr	r1, [pc, #152]	; (60011c78 <z_tick_sleep+0x134>)
60011be0:	3018      	adds	r0, #24
60011be2:	f000 fa41 	bl	60012068 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
60011be6:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011be8:	481d      	ldr	r0, [pc, #116]	; (60011c60 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
60011bea:	7b53      	ldrb	r3, [r2, #13]
60011bec:	f043 0310 	orr.w	r3, r3, #16
60011bf0:	7353      	strb	r3, [r2, #13]
60011bf2:	f7fe f8f9 	bl	6000fde8 <z_spin_unlock_valid>
60011bf6:	b958      	cbnz	r0, 60011c10 <z_tick_sleep+0xcc>
60011bf8:	23e1      	movs	r3, #225	; 0xe1
60011bfa:	4a1a      	ldr	r2, [pc, #104]	; (60011c64 <z_tick_sleep+0x120>)
60011bfc:	491f      	ldr	r1, [pc, #124]	; (60011c7c <z_tick_sleep+0x138>)
60011bfe:	4816      	ldr	r0, [pc, #88]	; (60011c58 <z_tick_sleep+0x114>)
60011c00:	f006 f97f 	bl	60017f02 <assert_print>
60011c04:	4916      	ldr	r1, [pc, #88]	; (60011c60 <z_tick_sleep+0x11c>)
60011c06:	481e      	ldr	r0, [pc, #120]	; (60011c80 <z_tick_sleep+0x13c>)
60011c08:	f006 f97b 	bl	60017f02 <assert_print>
60011c0c:	21e1      	movs	r1, #225	; 0xe1
60011c0e:	e7d3      	b.n	60011bb8 <z_tick_sleep+0x74>
60011c10:	4640      	mov	r0, r8
60011c12:	f7f8 fec9 	bl	6000a9a8 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
60011c16:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
60011c18:	7b5b      	ldrb	r3, [r3, #13]
60011c1a:	06db      	lsls	r3, r3, #27
60011c1c:	d50c      	bpl.n	60011c38 <z_tick_sleep+0xf4>
60011c1e:	4919      	ldr	r1, [pc, #100]	; (60011c84 <z_tick_sleep+0x140>)
60011c20:	f240 53ac 	movw	r3, #1452	; 0x5ac
60011c24:	4a0b      	ldr	r2, [pc, #44]	; (60011c54 <z_tick_sleep+0x110>)
60011c26:	480c      	ldr	r0, [pc, #48]	; (60011c58 <z_tick_sleep+0x114>)
60011c28:	f006 f96b 	bl	60017f02 <assert_print>
60011c2c:	480b      	ldr	r0, [pc, #44]	; (60011c5c <z_tick_sleep+0x118>)
60011c2e:	f006 f968 	bl	60017f02 <assert_print>
60011c32:	f240 51ac 	movw	r1, #1452	; 0x5ac
60011c36:	e798      	b.n	60011b6a <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
60011c38:	f007 fec6 	bl	600199c8 <sys_clock_tick_get_32>
60011c3c:	1a20      	subs	r0, r4, r0
60011c3e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
60011c42:	2801      	cmp	r0, #1
60011c44:	f173 0300 	sbcs.w	r3, r3, #0
60011c48:	db96      	blt.n	60011b78 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
60011c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60011c4e:	bf00      	nop
60011c50:	6001e9fa 	.word	0x6001e9fa
60011c54:	6001ec37 	.word	0x6001ec37
60011c58:	6001c3d7 	.word	0x6001c3d7
60011c5c:	6001e923 	.word	0x6001e923
60011c60:	20204dd0 	.word	0x20204dd0
60011c64:	6001c758 	.word	0x6001c758
60011c68:	6001c785 	.word	0x6001c785
60011c6c:	6001c79a 	.word	0x6001c79a
60011c70:	20204d8c 	.word	0x20204d8c
60011c74:	20204dc4 	.word	0x20204dc4
60011c78:	60011815 	.word	0x60011815
60011c7c:	6001c7b2 	.word	0x6001c7b2
60011c80:	6001c7c9 	.word	0x6001c7c9
60011c84:	6001ed7c 	.word	0x6001ed7c

60011c88 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
60011c88:	b508      	push	{r3, lr}
60011c8a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
60011c8e:	b173      	cbz	r3, 60011cae <z_impl_k_sleep+0x26>
60011c90:	4911      	ldr	r1, [pc, #68]	; (60011cd8 <z_impl_k_sleep+0x50>)
60011c92:	f240 53bb 	movw	r3, #1467	; 0x5bb
60011c96:	4a11      	ldr	r2, [pc, #68]	; (60011cdc <z_impl_k_sleep+0x54>)
60011c98:	4811      	ldr	r0, [pc, #68]	; (60011ce0 <z_impl_k_sleep+0x58>)
60011c9a:	f006 f932 	bl	60017f02 <assert_print>
60011c9e:	4811      	ldr	r0, [pc, #68]	; (60011ce4 <z_impl_k_sleep+0x5c>)
60011ca0:	f006 f92f 	bl	60017f02 <assert_print>
60011ca4:	f240 51bb 	movw	r1, #1467	; 0x5bb
60011ca8:	480c      	ldr	r0, [pc, #48]	; (60011cdc <z_impl_k_sleep+0x54>)
60011caa:	f006 f923 	bl	60017ef4 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
60011cae:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
60011cb2:	bf08      	it	eq
60011cb4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
60011cb8:	d106      	bne.n	60011cc8 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
60011cba:	4b0b      	ldr	r3, [pc, #44]	; (60011ce8 <z_impl_k_sleep+0x60>)
60011cbc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
60011cbe:	f7ff fcd5 	bl	6001166c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
60011cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
60011cc6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
60011cc8:	f7ff ff3c 	bl	60011b44 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
60011ccc:	220a      	movs	r2, #10
60011cce:	2300      	movs	r3, #0
60011cd0:	17c1      	asrs	r1, r0, #31
60011cd2:	f7f1 fd17 	bl	60003704 <__aeabi_uldivmod>
	return ret;
60011cd6:	e7f6      	b.n	60011cc6 <z_impl_k_sleep+0x3e>
60011cd8:	6001e9fa 	.word	0x6001e9fa
60011cdc:	6001ec37 	.word	0x6001ec37
60011ce0:	6001c3d7 	.word	0x6001c3d7
60011ce4:	6001e923 	.word	0x6001e923
60011ce8:	20204d8c 	.word	0x20204d8c

60011cec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
60011cec:	4b01      	ldr	r3, [pc, #4]	; (60011cf4 <z_impl_z_current_get+0x8>)
60011cee:	6898      	ldr	r0, [r3, #8]
60011cf0:	4770      	bx	lr
60011cf2:	bf00      	nop
60011cf4:	20204d8c 	.word	0x20204d8c

60011cf8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
60011cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60011cfc:	4604      	mov	r4, r0
60011cfe:	f04f 0310 	mov.w	r3, #16
60011d02:	f3ef 8611 	mrs	r6, BASEPRI
60011d06:	f383 8812 	msr	BASEPRI_MAX, r3
60011d0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011d0e:	4851      	ldr	r0, [pc, #324]	; (60011e54 <z_thread_abort+0x15c>)
60011d10:	f7fe f85c 	bl	6000fdcc <z_spin_lock_valid>
60011d14:	b968      	cbnz	r0, 60011d32 <z_thread_abort+0x3a>
60011d16:	2394      	movs	r3, #148	; 0x94
60011d18:	4a4f      	ldr	r2, [pc, #316]	; (60011e58 <z_thread_abort+0x160>)
60011d1a:	4950      	ldr	r1, [pc, #320]	; (60011e5c <z_thread_abort+0x164>)
60011d1c:	4850      	ldr	r0, [pc, #320]	; (60011e60 <z_thread_abort+0x168>)
60011d1e:	f006 f8f0 	bl	60017f02 <assert_print>
60011d22:	494c      	ldr	r1, [pc, #304]	; (60011e54 <z_thread_abort+0x15c>)
60011d24:	484f      	ldr	r0, [pc, #316]	; (60011e64 <z_thread_abort+0x16c>)
60011d26:	f006 f8ec 	bl	60017f02 <assert_print>
60011d2a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011d2c:	484a      	ldr	r0, [pc, #296]	; (60011e58 <z_thread_abort+0x160>)
60011d2e:	f006 f8e1 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
60011d32:	4848      	ldr	r0, [pc, #288]	; (60011e54 <z_thread_abort+0x15c>)
60011d34:	f7fe f866 	bl	6000fe04 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
60011d38:	7b23      	ldrb	r3, [r4, #12]
60011d3a:	07d9      	lsls	r1, r3, #31
60011d3c:	d522      	bpl.n	60011d84 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011d3e:	4845      	ldr	r0, [pc, #276]	; (60011e54 <z_thread_abort+0x15c>)
60011d40:	f7fe f852 	bl	6000fde8 <z_spin_unlock_valid>
60011d44:	b958      	cbnz	r0, 60011d5e <z_thread_abort+0x66>
60011d46:	23c2      	movs	r3, #194	; 0xc2
60011d48:	4a43      	ldr	r2, [pc, #268]	; (60011e58 <z_thread_abort+0x160>)
60011d4a:	4947      	ldr	r1, [pc, #284]	; (60011e68 <z_thread_abort+0x170>)
60011d4c:	4844      	ldr	r0, [pc, #272]	; (60011e60 <z_thread_abort+0x168>)
60011d4e:	f006 f8d8 	bl	60017f02 <assert_print>
60011d52:	4940      	ldr	r1, [pc, #256]	; (60011e54 <z_thread_abort+0x15c>)
60011d54:	4845      	ldr	r0, [pc, #276]	; (60011e6c <z_thread_abort+0x174>)
60011d56:	f006 f8d4 	bl	60017f02 <assert_print>
60011d5a:	21c2      	movs	r1, #194	; 0xc2
60011d5c:	e7e6      	b.n	60011d2c <z_thread_abort+0x34>
	__asm__ volatile(
60011d5e:	f386 8811 	msr	BASEPRI, r6
60011d62:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
60011d66:	f240 63c7 	movw	r3, #1735	; 0x6c7
60011d6a:	4a41      	ldr	r2, [pc, #260]	; (60011e70 <z_thread_abort+0x178>)
60011d6c:	4941      	ldr	r1, [pc, #260]	; (60011e74 <z_thread_abort+0x17c>)
60011d6e:	483c      	ldr	r0, [pc, #240]	; (60011e60 <z_thread_abort+0x168>)
60011d70:	f006 f8c7 	bl	60017f02 <assert_print>
60011d74:	4621      	mov	r1, r4
60011d76:	4840      	ldr	r0, [pc, #256]	; (60011e78 <z_thread_abort+0x180>)
60011d78:	f006 f8c3 	bl	60017f02 <assert_print>
60011d7c:	f240 61c7 	movw	r1, #1735	; 0x6c7
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
60011d80:	483b      	ldr	r0, [pc, #236]	; (60011e70 <z_thread_abort+0x178>)
60011d82:	e7d4      	b.n	60011d2e <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
60011d84:	7b63      	ldrb	r3, [r4, #13]
60011d86:	071a      	lsls	r2, r3, #28
60011d88:	d50a      	bpl.n	60011da0 <z_thread_abort+0xa8>
60011d8a:	4832      	ldr	r0, [pc, #200]	; (60011e54 <z_thread_abort+0x15c>)
60011d8c:	f7fe f82c 	bl	6000fde8 <z_spin_unlock_valid>
60011d90:	2800      	cmp	r0, #0
60011d92:	d0d8      	beq.n	60011d46 <z_thread_abort+0x4e>
60011d94:	f386 8811 	msr	BASEPRI, r6
60011d98:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
60011d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
60011da0:	f023 0220 	bic.w	r2, r3, #32
60011da4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
60011da8:	09d2      	lsrs	r2, r2, #7
60011daa:	d12c      	bne.n	60011e06 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
60011dac:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
60011dae:	68a3      	ldr	r3, [r4, #8]
60011db0:	b113      	cbz	r3, 60011db8 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
60011db2:	4620      	mov	r0, r4
60011db4:	f7ff fcc2 	bl	6001173c <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
60011db8:	f104 0758 	add.w	r7, r4, #88	; 0x58
60011dbc:	f04f 0800 	mov.w	r8, #0
	return z_abort_timeout(&thread->base.timeout);
60011dc0:	f104 0018 	add.w	r0, r4, #24
60011dc4:	f000 fa16 	bl	600121f4 <z_abort_timeout>
	return list->head == list;
60011dc8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
60011dca:	42bd      	cmp	r5, r7
60011dcc:	d000      	beq.n	60011dd0 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
60011dce:	bb25      	cbnz	r5, 60011e1a <z_thread_abort+0x122>
		update_cache(1);
60011dd0:	2001      	movs	r0, #1
60011dd2:	f7fe ff0d 	bl	60010bf0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
60011dd6:	4b29      	ldr	r3, [pc, #164]	; (60011e7c <z_thread_abort+0x184>)
60011dd8:	689b      	ldr	r3, [r3, #8]
60011dda:	42a3      	cmp	r3, r4
60011ddc:	d1d5      	bne.n	60011d8a <z_thread_abort+0x92>
60011dde:	f3ef 8305 	mrs	r3, IPSR
60011de2:	2b00      	cmp	r3, #0
60011de4:	d1d1      	bne.n	60011d8a <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011de6:	481b      	ldr	r0, [pc, #108]	; (60011e54 <z_thread_abort+0x15c>)
60011de8:	f7fd fffe 	bl	6000fde8 <z_spin_unlock_valid>
60011dec:	bb10      	cbnz	r0, 60011e34 <z_thread_abort+0x13c>
60011dee:	23e1      	movs	r3, #225	; 0xe1
60011df0:	4a19      	ldr	r2, [pc, #100]	; (60011e58 <z_thread_abort+0x160>)
60011df2:	491d      	ldr	r1, [pc, #116]	; (60011e68 <z_thread_abort+0x170>)
60011df4:	481a      	ldr	r0, [pc, #104]	; (60011e60 <z_thread_abort+0x168>)
60011df6:	f006 f884 	bl	60017f02 <assert_print>
60011dfa:	4916      	ldr	r1, [pc, #88]	; (60011e54 <z_thread_abort+0x15c>)
60011dfc:	481b      	ldr	r0, [pc, #108]	; (60011e6c <z_thread_abort+0x174>)
60011dfe:	f006 f880 	bl	60017f02 <assert_print>
60011e02:	21e1      	movs	r1, #225	; 0xe1
60011e04:	e792      	b.n	60011d2c <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
60011e06:	f003 035f 	and.w	r3, r3, #95	; 0x5f
	_priq_run_remove(thread_runq(thread), thread);
60011e0a:	4621      	mov	r1, r4
60011e0c:	481c      	ldr	r0, [pc, #112]	; (60011e80 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
60011e0e:	f043 0308 	orr.w	r3, r3, #8
60011e12:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
60011e14:	f7ff f9c8 	bl	600111a8 <z_priq_dumb_remove>
}
60011e18:	e7c9      	b.n	60011dae <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
60011e1a:	4628      	mov	r0, r5
60011e1c:	f7ff fc8e 	bl	6001173c <unpend_thread_no_timeout>
60011e20:	f105 0018 	add.w	r0, r5, #24
60011e24:	f000 f9e6 	bl	600121f4 <z_abort_timeout>
		ready_thread(thread);
60011e28:	4628      	mov	r0, r5
60011e2a:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
60011e2e:	f7fe ff13 	bl	60010c58 <ready_thread>
60011e32:	e7c9      	b.n	60011dc8 <z_thread_abort+0xd0>
60011e34:	4630      	mov	r0, r6
60011e36:	f7f8 fdb7 	bl	6000a9a8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
60011e3a:	490e      	ldr	r1, [pc, #56]	; (60011e74 <z_thread_abort+0x17c>)
60011e3c:	f240 63f6 	movw	r3, #1782	; 0x6f6
60011e40:	4a0b      	ldr	r2, [pc, #44]	; (60011e70 <z_thread_abort+0x178>)
60011e42:	4807      	ldr	r0, [pc, #28]	; (60011e60 <z_thread_abort+0x168>)
60011e44:	f006 f85d 	bl	60017f02 <assert_print>
60011e48:	480e      	ldr	r0, [pc, #56]	; (60011e84 <z_thread_abort+0x18c>)
60011e4a:	f006 f85a 	bl	60017f02 <assert_print>
60011e4e:	f240 61f6 	movw	r1, #1782	; 0x6f6
60011e52:	e795      	b.n	60011d80 <z_thread_abort+0x88>
60011e54:	20204dd0 	.word	0x20204dd0
60011e58:	6001c758 	.word	0x6001c758
60011e5c:	6001c785 	.word	0x6001c785
60011e60:	6001c3d7 	.word	0x6001c3d7
60011e64:	6001c79a 	.word	0x6001c79a
60011e68:	6001c7b2 	.word	0x6001c7b2
60011e6c:	6001c7c9 	.word	0x6001c7c9
60011e70:	6001ec37 	.word	0x6001ec37
60011e74:	6001c64e 	.word	0x6001c64e
60011e78:	6001edbc 	.word	0x6001edbc
60011e7c:	20204d8c 	.word	0x20204d8c
60011e80:	20204da8 	.word	0x20204da8
60011e84:	6001eddb 	.word	0x6001eddb

60011e88 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
60011e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
60011e8c:	4606      	mov	r6, r0
60011e8e:	4688      	mov	r8, r1
60011e90:	4617      	mov	r7, r2
	__asm__ volatile(
60011e92:	f04f 0310 	mov.w	r3, #16
60011e96:	f3ef 8911 	mrs	r9, BASEPRI
60011e9a:	f383 8812 	msr	BASEPRI_MAX, r3
60011e9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60011ea2:	4821      	ldr	r0, [pc, #132]	; (60011f28 <z_sched_wake+0xa0>)
60011ea4:	f7fd ff92 	bl	6000fdcc <z_spin_lock_valid>
60011ea8:	4605      	mov	r5, r0
60011eaa:	b968      	cbnz	r0, 60011ec8 <z_sched_wake+0x40>
60011eac:	2394      	movs	r3, #148	; 0x94
60011eae:	4a1f      	ldr	r2, [pc, #124]	; (60011f2c <z_sched_wake+0xa4>)
60011eb0:	491f      	ldr	r1, [pc, #124]	; (60011f30 <z_sched_wake+0xa8>)
60011eb2:	4820      	ldr	r0, [pc, #128]	; (60011f34 <z_sched_wake+0xac>)
60011eb4:	f006 f825 	bl	60017f02 <assert_print>
60011eb8:	491b      	ldr	r1, [pc, #108]	; (60011f28 <z_sched_wake+0xa0>)
60011eba:	481f      	ldr	r0, [pc, #124]	; (60011f38 <z_sched_wake+0xb0>)
60011ebc:	f006 f821 	bl	60017f02 <assert_print>
60011ec0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011ec2:	481a      	ldr	r0, [pc, #104]	; (60011f2c <z_sched_wake+0xa4>)
60011ec4:	f006 f816 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
60011ec8:	4817      	ldr	r0, [pc, #92]	; (60011f28 <z_sched_wake+0xa0>)
60011eca:	f7fd ff9b 	bl	6000fe04 <z_spin_lock_set_owner>
	return list->head == list;
60011ece:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60011ed0:	42a6      	cmp	r6, r4
60011ed2:	d01d      	beq.n	60011f10 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
60011ed4:	b1f4      	cbz	r4, 60011f14 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
60011ed6:	4620      	mov	r0, r4
60011ed8:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
60011edc:	6167      	str	r7, [r4, #20]
60011ede:	f7ff fc2d 	bl	6001173c <unpend_thread_no_timeout>
60011ee2:	f104 0018 	add.w	r0, r4, #24
60011ee6:	f000 f985 	bl	600121f4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
60011eea:	4620      	mov	r0, r4
60011eec:	f7fe feb4 	bl	60010c58 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60011ef0:	480d      	ldr	r0, [pc, #52]	; (60011f28 <z_sched_wake+0xa0>)
60011ef2:	f7fd ff79 	bl	6000fde8 <z_spin_unlock_valid>
60011ef6:	b978      	cbnz	r0, 60011f18 <z_sched_wake+0x90>
60011ef8:	23c2      	movs	r3, #194	; 0xc2
60011efa:	4a0c      	ldr	r2, [pc, #48]	; (60011f2c <z_sched_wake+0xa4>)
60011efc:	490f      	ldr	r1, [pc, #60]	; (60011f3c <z_sched_wake+0xb4>)
60011efe:	480d      	ldr	r0, [pc, #52]	; (60011f34 <z_sched_wake+0xac>)
60011f00:	f005 ffff 	bl	60017f02 <assert_print>
60011f04:	4908      	ldr	r1, [pc, #32]	; (60011f28 <z_sched_wake+0xa0>)
60011f06:	480e      	ldr	r0, [pc, #56]	; (60011f40 <z_sched_wake+0xb8>)
60011f08:	f005 fffb 	bl	60017f02 <assert_print>
60011f0c:	21c2      	movs	r1, #194	; 0xc2
60011f0e:	e7d8      	b.n	60011ec2 <z_sched_wake+0x3a>
	bool ret = false;
60011f10:	2500      	movs	r5, #0
60011f12:	e7ed      	b.n	60011ef0 <z_sched_wake+0x68>
60011f14:	4625      	mov	r5, r4
60011f16:	e7eb      	b.n	60011ef0 <z_sched_wake+0x68>
	__asm__ volatile(
60011f18:	f389 8811 	msr	BASEPRI, r9
60011f1c:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
60011f20:	4628      	mov	r0, r5
60011f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
60011f26:	bf00      	nop
60011f28:	20204dd0 	.word	0x20204dd0
60011f2c:	6001c758 	.word	0x6001c758
60011f30:	6001c785 	.word	0x6001c785
60011f34:	6001c3d7 	.word	0x6001c3d7
60011f38:	6001c79a 	.word	0x6001c79a
60011f3c:	6001c7b2 	.word	0x6001c7b2
60011f40:	6001c7c9 	.word	0x6001c7c9

60011f44 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
60011f44:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
60011f46:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
60011f4a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
60011f4c:	e9cd 6700 	strd	r6, r7, [sp]
60011f50:	f7ff fa84 	bl	6001145c <z_pend_curr>

	if (data != NULL) {
60011f54:	b11c      	cbz	r4, 60011f5e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
60011f56:	4b03      	ldr	r3, [pc, #12]	; (60011f64 <z_sched_wait+0x20>)
60011f58:	689b      	ldr	r3, [r3, #8]
60011f5a:	695b      	ldr	r3, [r3, #20]
60011f5c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
60011f5e:	b002      	add	sp, #8
60011f60:	bdd0      	pop	{r4, r6, r7, pc}
60011f62:	bf00      	nop
60011f64:	20204d8c 	.word	0x20204d8c

60011f68 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
60011f68:	480c      	ldr	r0, [pc, #48]	; (60011f9c <z_data_copy+0x34>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
60011f6a:	4a0d      	ldr	r2, [pc, #52]	; (60011fa0 <z_data_copy+0x38>)
60011f6c:	490d      	ldr	r1, [pc, #52]	; (60011fa4 <z_data_copy+0x3c>)
60011f6e:	1a12      	subs	r2, r2, r0
{
60011f70:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
60011f72:	f007 fc94 	bl	6001989e <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
60011f76:	4a0c      	ldr	r2, [pc, #48]	; (60011fa8 <z_data_copy+0x40>)
60011f78:	490c      	ldr	r1, [pc, #48]	; (60011fac <z_data_copy+0x44>)
60011f7a:	480d      	ldr	r0, [pc, #52]	; (60011fb0 <z_data_copy+0x48>)
60011f7c:	f007 fc8f 	bl	6001989e <z_early_memcpy>
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)
	z_early_memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		       __ccm_data_end - __ccm_data_start);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_itcm), okay)
	z_early_memcpy(&__itcm_start, &__itcm_load_start,
60011f80:	4a0c      	ldr	r2, [pc, #48]	; (60011fb4 <z_data_copy+0x4c>)
60011f82:	490d      	ldr	r1, [pc, #52]	; (60011fb8 <z_data_copy+0x50>)
60011f84:	480d      	ldr	r0, [pc, #52]	; (60011fbc <z_data_copy+0x54>)
60011f86:	f007 fc8a 	bl	6001989e <z_early_memcpy>
		       (uintptr_t) &__itcm_size);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
		       __dtcm_data_end - __dtcm_data_start);
60011f8a:	480d      	ldr	r0, [pc, #52]	; (60011fc0 <z_data_copy+0x58>)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
60011f8c:	4a0d      	ldr	r2, [pc, #52]	; (60011fc4 <z_data_copy+0x5c>)
60011f8e:	490e      	ldr	r1, [pc, #56]	; (60011fc8 <z_data_copy+0x60>)
60011f90:	1a12      	subs	r2, r2, r0
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
60011f92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
60011f96:	f007 bc82 	b.w	6001989e <z_early_memcpy>
60011f9a:	bf00      	nop
60011f9c:	20202000 	.word	0x20202000
60011fa0:	20203630 	.word	0x20203630
60011fa4:	6001ee9c 	.word	0x6001ee9c
60011fa8:	00000000 	.word	0x00000000
60011fac:	6001ee9c 	.word	0x6001ee9c
60011fb0:	20202000 	.word	0x20202000
60011fb4:	00000000 	.word	0x00000000
60011fb8:	600204cc 	.word	0x600204cc
60011fbc:	00000000 	.word	0x00000000
60011fc0:	20000000 	.word	0x20000000
60011fc4:	20000000 	.word	0x20000000
60011fc8:	600204cc 	.word	0x600204cc

60011fcc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
60011fcc:	4b03      	ldr	r3, [pc, #12]	; (60011fdc <elapsed+0x10>)
60011fce:	681b      	ldr	r3, [r3, #0]
60011fd0:	b90b      	cbnz	r3, 60011fd6 <elapsed+0xa>
60011fd2:	f7fb bae1 	b.w	6000d598 <sys_clock_elapsed>
}
60011fd6:	2000      	movs	r0, #0
60011fd8:	4770      	bx	lr
60011fda:	bf00      	nop
60011fdc:	20204dd4 	.word	0x20204dd4

60011fe0 <next_timeout>:
	return list->head == list;
60011fe0:	4b11      	ldr	r3, [pc, #68]	; (60012028 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
60011fe2:	b510      	push	{r4, lr}
60011fe4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60011fe6:	429c      	cmp	r4, r3
60011fe8:	d10a      	bne.n	60012000 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
60011fea:	f7ff ffef 	bl	60011fcc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
60011fee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
60011ff2:	4b0e      	ldr	r3, [pc, #56]	; (6001202c <next_timeout+0x4c>)
60011ff4:	691b      	ldr	r3, [r3, #16]
60011ff6:	b113      	cbz	r3, 60011ffe <next_timeout+0x1e>
60011ff8:	4298      	cmp	r0, r3
60011ffa:	bfa8      	it	ge
60011ffc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
60011ffe:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
60012000:	f7ff ffe4 	bl	60011fcc <elapsed>
	if ((to == NULL) ||
60012004:	2c00      	cmp	r4, #0
60012006:	d0f2      	beq.n	60011fee <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
60012008:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
6001200c:	1a1b      	subs	r3, r3, r0
6001200e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
60012012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
60012016:	f172 0100 	sbcs.w	r1, r2, #0
6001201a:	dae8      	bge.n	60011fee <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
6001201c:	2a00      	cmp	r2, #0
6001201e:	bfac      	ite	ge
60012020:	4618      	movge	r0, r3
60012022:	2000      	movlt	r0, #0
60012024:	e7e5      	b.n	60011ff2 <next_timeout+0x12>
60012026:	bf00      	nop
60012028:	20203138 	.word	0x20203138
6001202c:	20204d8c 	.word	0x20204d8c

60012030 <remove_timeout>:
{
60012030:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
60012032:	b170      	cbz	r0, 60012052 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
60012034:	4b0b      	ldr	r3, [pc, #44]	; (60012064 <remove_timeout+0x34>)
60012036:	685b      	ldr	r3, [r3, #4]
60012038:	4298      	cmp	r0, r3
6001203a:	d00a      	beq.n	60012052 <remove_timeout+0x22>
6001203c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
6001203e:	b143      	cbz	r3, 60012052 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
60012040:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
60012044:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
60012048:	1912      	adds	r2, r2, r4
6001204a:	eb41 0105 	adc.w	r1, r1, r5
6001204e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
60012052:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
60012056:	6013      	str	r3, [r2, #0]
	next->prev = prev;
60012058:	605a      	str	r2, [r3, #4]
	node->next = NULL;
6001205a:	2300      	movs	r3, #0
	node->prev = NULL;
6001205c:	e9c0 3300 	strd	r3, r3, [r0]
}
60012060:	bd30      	pop	{r4, r5, pc}
60012062:	bf00      	nop
60012064:	20203138 	.word	0x20203138

60012068 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
60012068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
6001206c:	bf08      	it	eq
6001206e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
60012072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60012076:	4604      	mov	r4, r0
60012078:	4692      	mov	sl, r2
6001207a:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
6001207c:	f000 809e 	beq.w	600121bc <z_add_timeout+0x154>
	return node->next != NULL;
60012080:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
60012082:	b166      	cbz	r6, 6001209e <z_add_timeout+0x36>
60012084:	494e      	ldr	r1, [pc, #312]	; (600121c0 <z_add_timeout+0x158>)
60012086:	2363      	movs	r3, #99	; 0x63
60012088:	4a4e      	ldr	r2, [pc, #312]	; (600121c4 <z_add_timeout+0x15c>)
6001208a:	484f      	ldr	r0, [pc, #316]	; (600121c8 <z_add_timeout+0x160>)
6001208c:	f005 ff39 	bl	60017f02 <assert_print>
60012090:	484e      	ldr	r0, [pc, #312]	; (600121cc <z_add_timeout+0x164>)
60012092:	f005 ff36 	bl	60017f02 <assert_print>
60012096:	2163      	movs	r1, #99	; 0x63
60012098:	484a      	ldr	r0, [pc, #296]	; (600121c4 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6001209a:	f005 ff2b 	bl	60017ef4 <assert_post_action>
	to->fn = fn;
6001209e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
600120a0:	f04f 0310 	mov.w	r3, #16
600120a4:	f3ef 8711 	mrs	r7, BASEPRI
600120a8:	f383 8812 	msr	BASEPRI_MAX, r3
600120ac:	f3bf 8f6f 	isb	sy
600120b0:	4847      	ldr	r0, [pc, #284]	; (600121d0 <z_add_timeout+0x168>)
600120b2:	f7fd fe8b 	bl	6000fdcc <z_spin_lock_valid>
600120b6:	b960      	cbnz	r0, 600120d2 <z_add_timeout+0x6a>
600120b8:	2394      	movs	r3, #148	; 0x94
600120ba:	4a46      	ldr	r2, [pc, #280]	; (600121d4 <z_add_timeout+0x16c>)
600120bc:	4946      	ldr	r1, [pc, #280]	; (600121d8 <z_add_timeout+0x170>)
600120be:	4842      	ldr	r0, [pc, #264]	; (600121c8 <z_add_timeout+0x160>)
600120c0:	f005 ff1f 	bl	60017f02 <assert_print>
600120c4:	4942      	ldr	r1, [pc, #264]	; (600121d0 <z_add_timeout+0x168>)
600120c6:	4845      	ldr	r0, [pc, #276]	; (600121dc <z_add_timeout+0x174>)
600120c8:	f005 ff1b 	bl	60017f02 <assert_print>
600120cc:	2194      	movs	r1, #148	; 0x94
600120ce:	4841      	ldr	r0, [pc, #260]	; (600121d4 <z_add_timeout+0x16c>)
600120d0:	e7e3      	b.n	6001209a <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
600120d2:	483f      	ldr	r0, [pc, #252]	; (600121d0 <z_add_timeout+0x168>)
600120d4:	f7fd fe96 	bl	6000fe04 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
600120d8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
600120dc:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
600120e0:	da23      	bge.n	6001212a <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
600120e2:	493f      	ldr	r1, [pc, #252]	; (600121e0 <z_add_timeout+0x178>)
600120e4:	f06f 0301 	mvn.w	r3, #1
600120e8:	e9d1 2000 	ldrd	r2, r0, [r1]
600120ec:	1a9b      	subs	r3, r3, r2
600120ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600120f2:	eb62 0000 	sbc.w	r0, r2, r0
600120f6:	ebb3 030a 	subs.w	r3, r3, sl
600120fa:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
600120fe:	2b01      	cmp	r3, #1
60012100:	f170 0200 	sbcs.w	r2, r0, #0
60012104:	da01      	bge.n	6001210a <z_add_timeout+0xa2>
60012106:	2301      	movs	r3, #1
60012108:	4630      	mov	r0, r6
6001210a:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
6001210e:	4b35      	ldr	r3, [pc, #212]	; (600121e4 <z_add_timeout+0x17c>)
60012110:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
60012112:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60012116:	429a      	cmp	r2, r3
60012118:	bf18      	it	ne
6001211a:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
6001211c:	b986      	cbnz	r6, 60012140 <z_add_timeout+0xd8>
	node->prev = tail;
6001211e:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
60012122:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
60012126:	605c      	str	r4, [r3, #4]
}
60012128:	e01c      	b.n	60012164 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
6001212a:	f7ff ff4f 	bl	60011fcc <elapsed>
6001212e:	f11a 0801 	adds.w	r8, sl, #1
60012132:	f145 0500 	adc.w	r5, r5, #0
60012136:	eb18 0300 	adds.w	r3, r8, r0
6001213a:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
6001213e:	e7e4      	b.n	6001210a <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
60012140:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
60012144:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
60012148:	428a      	cmp	r2, r1
6001214a:	eb70 0e05 	sbcs.w	lr, r0, r5
6001214e:	da28      	bge.n	600121a2 <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
60012150:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
60012152:	6872      	ldr	r2, [r6, #4]
60012154:	eb65 0500 	sbc.w	r5, r5, r0
60012158:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
6001215c:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
60012160:	6014      	str	r4, [r2, #0]
	successor->prev = node;
60012162:	6074      	str	r4, [r6, #4]
	return list->head == list;
60012164:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60012166:	429a      	cmp	r2, r3
60012168:	d00b      	beq.n	60012182 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
6001216a:	4294      	cmp	r4, r2
6001216c:	d109      	bne.n	60012182 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
6001216e:	f7ff ff37 	bl	60011fe0 <next_timeout>

			if (next_time == 0 ||
60012172:	b118      	cbz	r0, 6001217c <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
60012174:	4b1c      	ldr	r3, [pc, #112]	; (600121e8 <z_add_timeout+0x180>)
			if (next_time == 0 ||
60012176:	691b      	ldr	r3, [r3, #16]
60012178:	4283      	cmp	r3, r0
6001217a:	d002      	beq.n	60012182 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
6001217c:	2100      	movs	r1, #0
6001217e:	f7fb f967 	bl	6000d450 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60012182:	4813      	ldr	r0, [pc, #76]	; (600121d0 <z_add_timeout+0x168>)
60012184:	f7fd fe30 	bl	6000fde8 <z_spin_unlock_valid>
60012188:	b9a0      	cbnz	r0, 600121b4 <z_add_timeout+0x14c>
6001218a:	23c2      	movs	r3, #194	; 0xc2
6001218c:	4a11      	ldr	r2, [pc, #68]	; (600121d4 <z_add_timeout+0x16c>)
6001218e:	4917      	ldr	r1, [pc, #92]	; (600121ec <z_add_timeout+0x184>)
60012190:	480d      	ldr	r0, [pc, #52]	; (600121c8 <z_add_timeout+0x160>)
60012192:	f005 feb6 	bl	60017f02 <assert_print>
60012196:	490e      	ldr	r1, [pc, #56]	; (600121d0 <z_add_timeout+0x168>)
60012198:	4815      	ldr	r0, [pc, #84]	; (600121f0 <z_add_timeout+0x188>)
6001219a:	f005 feb2 	bl	60017f02 <assert_print>
6001219e:	21c2      	movs	r1, #194	; 0xc2
600121a0:	e795      	b.n	600120ce <z_add_timeout+0x66>
			to->dticks -= t->dticks;
600121a2:	1a52      	subs	r2, r2, r1
600121a4:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
600121a8:	4566      	cmp	r6, ip
600121aa:	e9c4 2004 	strd	r2, r0, [r4, #16]
600121ae:	d0b6      	beq.n	6001211e <z_add_timeout+0xb6>
600121b0:	6836      	ldr	r6, [r6, #0]
600121b2:	e7b3      	b.n	6001211c <z_add_timeout+0xb4>
	__asm__ volatile(
600121b4:	f387 8811 	msr	BASEPRI, r7
600121b8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
600121bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
600121c0:	6001ee21 	.word	0x6001ee21
600121c4:	6001edfd 	.word	0x6001edfd
600121c8:	6001c3d7 	.word	0x6001c3d7
600121cc:	6001e923 	.word	0x6001e923
600121d0:	20204dd8 	.word	0x20204dd8
600121d4:	6001c758 	.word	0x6001c758
600121d8:	6001c785 	.word	0x6001c785
600121dc:	6001c79a 	.word	0x6001c79a
600121e0:	20204600 	.word	0x20204600
600121e4:	20203138 	.word	0x20203138
600121e8:	20204d8c 	.word	0x20204d8c
600121ec:	6001c7b2 	.word	0x6001c7b2
600121f0:	6001c7c9 	.word	0x6001c7c9

600121f4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
600121f4:	b538      	push	{r3, r4, r5, lr}
600121f6:	4604      	mov	r4, r0
	__asm__ volatile(
600121f8:	f04f 0310 	mov.w	r3, #16
600121fc:	f3ef 8511 	mrs	r5, BASEPRI
60012200:	f383 8812 	msr	BASEPRI_MAX, r3
60012204:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60012208:	4819      	ldr	r0, [pc, #100]	; (60012270 <z_abort_timeout+0x7c>)
6001220a:	f7fd fddf 	bl	6000fdcc <z_spin_lock_valid>
6001220e:	b968      	cbnz	r0, 6001222c <z_abort_timeout+0x38>
60012210:	2394      	movs	r3, #148	; 0x94
60012212:	4a18      	ldr	r2, [pc, #96]	; (60012274 <z_abort_timeout+0x80>)
60012214:	4918      	ldr	r1, [pc, #96]	; (60012278 <z_abort_timeout+0x84>)
60012216:	4819      	ldr	r0, [pc, #100]	; (6001227c <z_abort_timeout+0x88>)
60012218:	f005 fe73 	bl	60017f02 <assert_print>
6001221c:	4914      	ldr	r1, [pc, #80]	; (60012270 <z_abort_timeout+0x7c>)
6001221e:	4818      	ldr	r0, [pc, #96]	; (60012280 <z_abort_timeout+0x8c>)
60012220:	f005 fe6f 	bl	60017f02 <assert_print>
60012224:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60012226:	4813      	ldr	r0, [pc, #76]	; (60012274 <z_abort_timeout+0x80>)
60012228:	f005 fe64 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
6001222c:	4810      	ldr	r0, [pc, #64]	; (60012270 <z_abort_timeout+0x7c>)
6001222e:	f7fd fde9 	bl	6000fe04 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
60012232:	6823      	ldr	r3, [r4, #0]
60012234:	b19b      	cbz	r3, 6001225e <z_abort_timeout+0x6a>
			remove_timeout(to);
60012236:	4620      	mov	r0, r4
			ret = 0;
60012238:	2400      	movs	r4, #0
			remove_timeout(to);
6001223a:	f7ff fef9 	bl	60012030 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6001223e:	480c      	ldr	r0, [pc, #48]	; (60012270 <z_abort_timeout+0x7c>)
60012240:	f7fd fdd2 	bl	6000fde8 <z_spin_unlock_valid>
60012244:	b970      	cbnz	r0, 60012264 <z_abort_timeout+0x70>
60012246:	23c2      	movs	r3, #194	; 0xc2
60012248:	4a0a      	ldr	r2, [pc, #40]	; (60012274 <z_abort_timeout+0x80>)
6001224a:	490e      	ldr	r1, [pc, #56]	; (60012284 <z_abort_timeout+0x90>)
6001224c:	480b      	ldr	r0, [pc, #44]	; (6001227c <z_abort_timeout+0x88>)
6001224e:	f005 fe58 	bl	60017f02 <assert_print>
60012252:	4907      	ldr	r1, [pc, #28]	; (60012270 <z_abort_timeout+0x7c>)
60012254:	480c      	ldr	r0, [pc, #48]	; (60012288 <z_abort_timeout+0x94>)
60012256:	f005 fe54 	bl	60017f02 <assert_print>
6001225a:	21c2      	movs	r1, #194	; 0xc2
6001225c:	e7e3      	b.n	60012226 <z_abort_timeout+0x32>
	int ret = -EINVAL;
6001225e:	f06f 0415 	mvn.w	r4, #21
60012262:	e7ec      	b.n	6001223e <z_abort_timeout+0x4a>
	__asm__ volatile(
60012264:	f385 8811 	msr	BASEPRI, r5
60012268:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
6001226c:	4620      	mov	r0, r4
6001226e:	bd38      	pop	{r3, r4, r5, pc}
60012270:	20204dd8 	.word	0x20204dd8
60012274:	6001c758 	.word	0x6001c758
60012278:	6001c785 	.word	0x6001c785
6001227c:	6001c3d7 	.word	0x6001c3d7
60012280:	6001c79a 	.word	0x6001c79a
60012284:	6001c7b2 	.word	0x6001c7b2
60012288:	6001c7c9 	.word	0x6001c7c9

6001228c <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
6001228c:	b570      	push	{r4, r5, r6, lr}
6001228e:	4604      	mov	r4, r0
60012290:	460d      	mov	r5, r1
	__asm__ volatile(
60012292:	f04f 0310 	mov.w	r3, #16
60012296:	f3ef 8611 	mrs	r6, BASEPRI
6001229a:	f383 8812 	msr	BASEPRI_MAX, r3
6001229e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600122a2:	481b      	ldr	r0, [pc, #108]	; (60012310 <z_set_timeout_expiry+0x84>)
600122a4:	f7fd fd92 	bl	6000fdcc <z_spin_lock_valid>
600122a8:	b968      	cbnz	r0, 600122c6 <z_set_timeout_expiry+0x3a>
600122aa:	2394      	movs	r3, #148	; 0x94
600122ac:	4a19      	ldr	r2, [pc, #100]	; (60012314 <z_set_timeout_expiry+0x88>)
600122ae:	491a      	ldr	r1, [pc, #104]	; (60012318 <z_set_timeout_expiry+0x8c>)
600122b0:	481a      	ldr	r0, [pc, #104]	; (6001231c <z_set_timeout_expiry+0x90>)
600122b2:	f005 fe26 	bl	60017f02 <assert_print>
600122b6:	4916      	ldr	r1, [pc, #88]	; (60012310 <z_set_timeout_expiry+0x84>)
600122b8:	4819      	ldr	r0, [pc, #100]	; (60012320 <z_set_timeout_expiry+0x94>)
600122ba:	f005 fe22 	bl	60017f02 <assert_print>
600122be:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600122c0:	4814      	ldr	r0, [pc, #80]	; (60012314 <z_set_timeout_expiry+0x88>)
600122c2:	f005 fe17 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
600122c6:	4812      	ldr	r0, [pc, #72]	; (60012310 <z_set_timeout_expiry+0x84>)
600122c8:	f7fd fd9c 	bl	6000fe04 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
600122cc:	f7ff fe88 	bl	60011fe0 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
600122d0:	2801      	cmp	r0, #1
600122d2:	dd07      	ble.n	600122e4 <z_set_timeout_expiry+0x58>
600122d4:	42a0      	cmp	r0, r4
600122d6:	db05      	blt.n	600122e4 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
600122d8:	42a0      	cmp	r0, r4
600122da:	4629      	mov	r1, r5
600122dc:	bfa8      	it	ge
600122de:	4620      	movge	r0, r4
600122e0:	f7fb f8b6 	bl	6000d450 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600122e4:	480a      	ldr	r0, [pc, #40]	; (60012310 <z_set_timeout_expiry+0x84>)
600122e6:	f7fd fd7f 	bl	6000fde8 <z_spin_unlock_valid>
600122ea:	b958      	cbnz	r0, 60012304 <z_set_timeout_expiry+0x78>
600122ec:	23c2      	movs	r3, #194	; 0xc2
600122ee:	4a09      	ldr	r2, [pc, #36]	; (60012314 <z_set_timeout_expiry+0x88>)
600122f0:	490c      	ldr	r1, [pc, #48]	; (60012324 <z_set_timeout_expiry+0x98>)
600122f2:	480a      	ldr	r0, [pc, #40]	; (6001231c <z_set_timeout_expiry+0x90>)
600122f4:	f005 fe05 	bl	60017f02 <assert_print>
600122f8:	4905      	ldr	r1, [pc, #20]	; (60012310 <z_set_timeout_expiry+0x84>)
600122fa:	480b      	ldr	r0, [pc, #44]	; (60012328 <z_set_timeout_expiry+0x9c>)
600122fc:	f005 fe01 	bl	60017f02 <assert_print>
60012300:	21c2      	movs	r1, #194	; 0xc2
60012302:	e7dd      	b.n	600122c0 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
60012304:	f386 8811 	msr	BASEPRI, r6
60012308:	f3bf 8f6f 	isb	sy
		}
	}
}
6001230c:	bd70      	pop	{r4, r5, r6, pc}
6001230e:	bf00      	nop
60012310:	20204dd8 	.word	0x20204dd8
60012314:	6001c758 	.word	0x6001c758
60012318:	6001c785 	.word	0x6001c785
6001231c:	6001c3d7 	.word	0x6001c3d7
60012320:	6001c79a 	.word	0x6001c79a
60012324:	6001c7b2 	.word	0x6001c7b2
60012328:	6001c7c9 	.word	0x6001c7c9

6001232c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
6001232c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60012330:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
60012332:	f7fe ffab 	bl	6001128c <z_time_slice>
	__asm__ volatile(
60012336:	f04f 0310 	mov.w	r3, #16
6001233a:	f3ef 8811 	mrs	r8, BASEPRI
6001233e:	f383 8812 	msr	BASEPRI_MAX, r3
60012342:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60012346:	4846      	ldr	r0, [pc, #280]	; (60012460 <sys_clock_announce+0x134>)
60012348:	f7fd fd40 	bl	6000fdcc <z_spin_lock_valid>
6001234c:	b968      	cbnz	r0, 6001236a <sys_clock_announce+0x3e>
6001234e:	2394      	movs	r3, #148	; 0x94
60012350:	4a44      	ldr	r2, [pc, #272]	; (60012464 <sys_clock_announce+0x138>)
60012352:	4945      	ldr	r1, [pc, #276]	; (60012468 <sys_clock_announce+0x13c>)
60012354:	4845      	ldr	r0, [pc, #276]	; (6001246c <sys_clock_announce+0x140>)
60012356:	f005 fdd4 	bl	60017f02 <assert_print>
6001235a:	4941      	ldr	r1, [pc, #260]	; (60012460 <sys_clock_announce+0x134>)
6001235c:	4844      	ldr	r0, [pc, #272]	; (60012470 <sys_clock_announce+0x144>)
6001235e:	f005 fdd0 	bl	60017f02 <assert_print>
60012362:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60012364:	483f      	ldr	r0, [pc, #252]	; (60012464 <sys_clock_announce+0x138>)
60012366:	f005 fdc5 	bl	60017ef4 <assert_post_action>
	return list->head == list;
6001236a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 60012474 <sys_clock_announce+0x148>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
6001236e:	2600      	movs	r6, #0
	announce_remaining = ticks;
60012370:	f8df b104 	ldr.w	fp, [pc, #260]	; 60012478 <sys_clock_announce+0x14c>
		t->dticks = 0;
60012374:	2700      	movs	r7, #0
	z_spin_lock_set_owner(l);
60012376:	483a      	ldr	r0, [pc, #232]	; (60012460 <sys_clock_announce+0x134>)
60012378:	f7fd fd44 	bl	6000fe04 <z_spin_lock_set_owner>
	announce_remaining = ticks;
6001237c:	f8cb 4000 	str.w	r4, [fp]
60012380:	f8d9 4000 	ldr.w	r4, [r9]
		curr_tick += dt;
60012384:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 6001247c <sys_clock_announce+0x150>
	return sys_dlist_is_empty(list) ? NULL : list->head;
60012388:	454c      	cmp	r4, r9
6001238a:	bf08      	it	eq
6001238c:	2400      	moveq	r4, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
6001238e:	f8db 3000 	ldr.w	r3, [fp]
		curr_tick += dt;
60012392:	e9da 2100 	ldrd	r2, r1, [sl]
	     (t != NULL) && (t->dticks <= announce_remaining);
60012396:	2c00      	cmp	r4, #0
60012398:	d049      	beq.n	6001242e <sys_clock_announce+0x102>
6001239a:	ea4f 7ce3 	mov.w	ip, r3, asr #31
6001239e:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
600123a2:	42ab      	cmp	r3, r5
600123a4:	eb7c 0e00 	sbcs.w	lr, ip, r0
600123a8:	da05      	bge.n	600123b6 <sys_clock_announce+0x8a>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
600123aa:	1aed      	subs	r5, r5, r3
600123ac:	eb60 000c 	sbc.w	r0, r0, ip
600123b0:	e9c4 5004 	strd	r5, r0, [r4, #16]
600123b4:	e03b      	b.n	6001242e <sys_clock_announce+0x102>
		curr_tick += dt;
600123b6:	18aa      	adds	r2, r5, r2
		remove_timeout(t);
600123b8:	4620      	mov	r0, r4
		curr_tick += dt;
600123ba:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
		t->dticks = 0;
600123be:	e9c4 6704 	strd	r6, r7, [r4, #16]
		curr_tick += dt;
600123c2:	e9ca 2100 	strd	r2, r1, [sl]
		remove_timeout(t);
600123c6:	f7ff fe33 	bl	60012030 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600123ca:	4825      	ldr	r0, [pc, #148]	; (60012460 <sys_clock_announce+0x134>)
600123cc:	f7fd fd0c 	bl	6000fde8 <z_spin_unlock_valid>
600123d0:	b958      	cbnz	r0, 600123ea <sys_clock_announce+0xbe>
600123d2:	23c2      	movs	r3, #194	; 0xc2
600123d4:	4a23      	ldr	r2, [pc, #140]	; (60012464 <sys_clock_announce+0x138>)
600123d6:	492a      	ldr	r1, [pc, #168]	; (60012480 <sys_clock_announce+0x154>)
600123d8:	4824      	ldr	r0, [pc, #144]	; (6001246c <sys_clock_announce+0x140>)
600123da:	f005 fd92 	bl	60017f02 <assert_print>
600123de:	4920      	ldr	r1, [pc, #128]	; (60012460 <sys_clock_announce+0x134>)
600123e0:	4828      	ldr	r0, [pc, #160]	; (60012484 <sys_clock_announce+0x158>)
600123e2:	f005 fd8e 	bl	60017f02 <assert_print>
600123e6:	21c2      	movs	r1, #194	; 0xc2
600123e8:	e7bc      	b.n	60012364 <sys_clock_announce+0x38>
	__asm__ volatile(
600123ea:	f388 8811 	msr	BASEPRI, r8
600123ee:	f3bf 8f6f 	isb	sy
		t->fn(t);
600123f2:	68a3      	ldr	r3, [r4, #8]
600123f4:	4620      	mov	r0, r4
600123f6:	4798      	blx	r3
	__asm__ volatile(
600123f8:	f04f 0310 	mov.w	r3, #16
600123fc:	f3ef 8811 	mrs	r8, BASEPRI
60012400:	f383 8812 	msr	BASEPRI_MAX, r3
60012404:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60012408:	4815      	ldr	r0, [pc, #84]	; (60012460 <sys_clock_announce+0x134>)
6001240a:	f7fd fcdf 	bl	6000fdcc <z_spin_lock_valid>
6001240e:	2800      	cmp	r0, #0
60012410:	d09d      	beq.n	6001234e <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
60012412:	4813      	ldr	r0, [pc, #76]	; (60012460 <sys_clock_announce+0x134>)
60012414:	f7fd fcf6 	bl	6000fe04 <z_spin_lock_set_owner>
		announce_remaining -= dt;
60012418:	f8db 3000 	ldr.w	r3, [fp]
	return list->head == list;
6001241c:	f8d9 4000 	ldr.w	r4, [r9]
60012420:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
60012422:	454c      	cmp	r4, r9
60012424:	f8cb 3000 	str.w	r3, [fp]
60012428:	d1b1      	bne.n	6001238e <sys_clock_announce+0x62>
		curr_tick += dt;
6001242a:	e9da 2100 	ldrd	r2, r1, [sl]
	}

	curr_tick += announce_remaining;
6001242e:	189a      	adds	r2, r3, r2
	announce_remaining = 0;
60012430:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
60012434:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	announce_remaining = 0;
60012438:	f8cb 4000 	str.w	r4, [fp]
	curr_tick += announce_remaining;
6001243c:	e9ca 2100 	strd	r2, r1, [sl]

	sys_clock_set_timeout(next_timeout(), false);
60012440:	f7ff fdce 	bl	60011fe0 <next_timeout>
60012444:	4621      	mov	r1, r4
60012446:	f7fb f803 	bl	6000d450 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
6001244a:	4805      	ldr	r0, [pc, #20]	; (60012460 <sys_clock_announce+0x134>)
6001244c:	f7fd fccc 	bl	6000fde8 <z_spin_unlock_valid>
60012450:	2800      	cmp	r0, #0
60012452:	d0be      	beq.n	600123d2 <sys_clock_announce+0xa6>
	__asm__ volatile(
60012454:	f388 8811 	msr	BASEPRI, r8
60012458:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
6001245c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
60012460:	20204dd8 	.word	0x20204dd8
60012464:	6001c758 	.word	0x6001c758
60012468:	6001c785 	.word	0x6001c785
6001246c:	6001c3d7 	.word	0x6001c3d7
60012470:	6001c79a 	.word	0x6001c79a
60012474:	20203138 	.word	0x20203138
60012478:	20204dd4 	.word	0x20204dd4
6001247c:	20204600 	.word	0x20204600
60012480:	6001c7b2 	.word	0x6001c7b2
60012484:	6001c7c9 	.word	0x6001c7c9

60012488 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
60012488:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
6001248a:	f04f 0310 	mov.w	r3, #16
6001248e:	f3ef 8611 	mrs	r6, BASEPRI
60012492:	f383 8812 	msr	BASEPRI_MAX, r3
60012496:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
6001249a:	481a      	ldr	r0, [pc, #104]	; (60012504 <sys_clock_tick_get+0x7c>)
6001249c:	f7fd fc96 	bl	6000fdcc <z_spin_lock_valid>
600124a0:	b968      	cbnz	r0, 600124be <sys_clock_tick_get+0x36>
600124a2:	2394      	movs	r3, #148	; 0x94
600124a4:	4a18      	ldr	r2, [pc, #96]	; (60012508 <sys_clock_tick_get+0x80>)
600124a6:	4919      	ldr	r1, [pc, #100]	; (6001250c <sys_clock_tick_get+0x84>)
600124a8:	4819      	ldr	r0, [pc, #100]	; (60012510 <sys_clock_tick_get+0x88>)
600124aa:	f005 fd2a 	bl	60017f02 <assert_print>
600124ae:	4915      	ldr	r1, [pc, #84]	; (60012504 <sys_clock_tick_get+0x7c>)
600124b0:	4818      	ldr	r0, [pc, #96]	; (60012514 <sys_clock_tick_get+0x8c>)
600124b2:	f005 fd26 	bl	60017f02 <assert_print>
600124b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600124b8:	4813      	ldr	r0, [pc, #76]	; (60012508 <sys_clock_tick_get+0x80>)
600124ba:	f005 fd1b 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
600124be:	4811      	ldr	r0, [pc, #68]	; (60012504 <sys_clock_tick_get+0x7c>)
600124c0:	f7fd fca0 	bl	6000fe04 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
600124c4:	f7ff fd82 	bl	60011fcc <elapsed>
600124c8:	4a13      	ldr	r2, [pc, #76]	; (60012518 <sys_clock_tick_get+0x90>)
600124ca:	e9d2 4500 	ldrd	r4, r5, [r2]
600124ce:	1904      	adds	r4, r0, r4
600124d0:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600124d4:	480b      	ldr	r0, [pc, #44]	; (60012504 <sys_clock_tick_get+0x7c>)
600124d6:	f7fd fc87 	bl	6000fde8 <z_spin_unlock_valid>
600124da:	b958      	cbnz	r0, 600124f4 <sys_clock_tick_get+0x6c>
600124dc:	23c2      	movs	r3, #194	; 0xc2
600124de:	4a0a      	ldr	r2, [pc, #40]	; (60012508 <sys_clock_tick_get+0x80>)
600124e0:	490e      	ldr	r1, [pc, #56]	; (6001251c <sys_clock_tick_get+0x94>)
600124e2:	480b      	ldr	r0, [pc, #44]	; (60012510 <sys_clock_tick_get+0x88>)
600124e4:	f005 fd0d 	bl	60017f02 <assert_print>
600124e8:	4906      	ldr	r1, [pc, #24]	; (60012504 <sys_clock_tick_get+0x7c>)
600124ea:	480d      	ldr	r0, [pc, #52]	; (60012520 <sys_clock_tick_get+0x98>)
600124ec:	f005 fd09 	bl	60017f02 <assert_print>
600124f0:	21c2      	movs	r1, #194	; 0xc2
600124f2:	e7e1      	b.n	600124b8 <sys_clock_tick_get+0x30>
	__asm__ volatile(
600124f4:	f386 8811 	msr	BASEPRI, r6
600124f8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
600124fc:	4620      	mov	r0, r4
600124fe:	4629      	mov	r1, r5
60012500:	bd70      	pop	{r4, r5, r6, pc}
60012502:	bf00      	nop
60012504:	20204dd8 	.word	0x20204dd8
60012508:	6001c758 	.word	0x6001c758
6001250c:	6001c785 	.word	0x6001c785
60012510:	6001c3d7 	.word	0x6001c3d7
60012514:	6001c79a 	.word	0x6001c79a
60012518:	20204600 	.word	0x20204600
6001251c:	6001c7b2 	.word	0x6001c7b2
60012520:	6001c7c9 	.word	0x6001c7c9

60012524 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
60012524:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
60012526:	4604      	mov	r4, r0
60012528:	b178      	cbz	r0, 6001254a <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
6001252a:	f7fb f887 	bl	6000d63c <sys_clock_cycle_get_32>
6001252e:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
60012530:	4806      	ldr	r0, [pc, #24]	; (6001254c <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
60012532:	2300      	movs	r3, #0
60012534:	4a06      	ldr	r2, [pc, #24]	; (60012550 <z_impl_k_busy_wait+0x2c>)
60012536:	fba4 0100 	umull	r0, r1, r4, r0
6001253a:	f7f1 f8e3 	bl	60003704 <__aeabi_uldivmod>
6001253e:	4604      	mov	r4, r0
60012540:	f7fb f87c 	bl	6000d63c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
60012544:	1b43      	subs	r3, r0, r5
60012546:	42a3      	cmp	r3, r4
60012548:	d3fa      	bcc.n	60012540 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
6001254a:	bd38      	pop	{r3, r4, r5, pc}
6001254c:	23c34600 	.word	0x23c34600
60012550:	000f4240 	.word	0x000f4240

60012554 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
60012554:	b570      	push	{r4, r5, r6, lr}
60012556:	4604      	mov	r4, r0
	__asm__ volatile(
60012558:	f04f 0310 	mov.w	r3, #16
6001255c:	f3ef 8511 	mrs	r5, BASEPRI
60012560:	f383 8812 	msr	BASEPRI_MAX, r3
60012564:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60012568:	484b      	ldr	r0, [pc, #300]	; (60012698 <z_timer_expiration_handler+0x144>)
6001256a:	f7fd fc2f 	bl	6000fdcc <z_spin_lock_valid>
6001256e:	b968      	cbnz	r0, 6001258c <z_timer_expiration_handler+0x38>
60012570:	2394      	movs	r3, #148	; 0x94
60012572:	4a4a      	ldr	r2, [pc, #296]	; (6001269c <z_timer_expiration_handler+0x148>)
60012574:	494a      	ldr	r1, [pc, #296]	; (600126a0 <z_timer_expiration_handler+0x14c>)
60012576:	484b      	ldr	r0, [pc, #300]	; (600126a4 <z_timer_expiration_handler+0x150>)
60012578:	f005 fcc3 	bl	60017f02 <assert_print>
6001257c:	4946      	ldr	r1, [pc, #280]	; (60012698 <z_timer_expiration_handler+0x144>)
6001257e:	484a      	ldr	r0, [pc, #296]	; (600126a8 <z_timer_expiration_handler+0x154>)
60012580:	f005 fcbf 	bl	60017f02 <assert_print>
60012584:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60012586:	4845      	ldr	r0, [pc, #276]	; (6001269c <z_timer_expiration_handler+0x148>)
60012588:	f005 fcb4 	bl	60017ef4 <assert_post_action>
	z_spin_lock_set_owner(l);
6001258c:	4842      	ldr	r0, [pc, #264]	; (60012698 <z_timer_expiration_handler+0x144>)
6001258e:	f7fd fc39 	bl	6000fe04 <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
60012592:	6823      	ldr	r3, [r4, #0]
60012594:	b183      	cbz	r3, 600125b8 <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60012596:	4840      	ldr	r0, [pc, #256]	; (60012698 <z_timer_expiration_handler+0x144>)
60012598:	f7fd fc26 	bl	6000fde8 <z_spin_unlock_valid>
6001259c:	2800      	cmp	r0, #0
6001259e:	d176      	bne.n	6001268e <z_timer_expiration_handler+0x13a>
600125a0:	23c2      	movs	r3, #194	; 0xc2
600125a2:	4a3e      	ldr	r2, [pc, #248]	; (6001269c <z_timer_expiration_handler+0x148>)
600125a4:	4941      	ldr	r1, [pc, #260]	; (600126ac <z_timer_expiration_handler+0x158>)
600125a6:	483f      	ldr	r0, [pc, #252]	; (600126a4 <z_timer_expiration_handler+0x150>)
600125a8:	f005 fcab 	bl	60017f02 <assert_print>
600125ac:	493a      	ldr	r1, [pc, #232]	; (60012698 <z_timer_expiration_handler+0x144>)
600125ae:	4840      	ldr	r0, [pc, #256]	; (600126b0 <z_timer_expiration_handler+0x15c>)
600125b0:	f005 fca7 	bl	60017f02 <assert_print>
600125b4:	21c2      	movs	r1, #194	; 0xc2
600125b6:	e7e6      	b.n	60012586 <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
600125b8:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
600125bc:	3301      	adds	r3, #1
600125be:	f142 0200 	adc.w	r2, r2, #0
600125c2:	2b02      	cmp	r3, #2
600125c4:	f172 0200 	sbcs.w	r2, r2, #0
600125c8:	d322      	bcc.n	60012610 <z_timer_expiration_handler+0xbc>
	return z_impl_k_uptime_ticks();
600125ca:	f007 fa01 	bl	600199d0 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
600125ce:	3001      	adds	r0, #1
600125d0:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
600125d4:	f141 0100 	adc.w	r1, r1, #0
600125d8:	18c0      	adds	r0, r0, r3
600125da:	eb41 0102 	adc.w	r1, r1, r2
600125de:	2801      	cmp	r0, #1
600125e0:	f171 0100 	sbcs.w	r1, r1, #0
600125e4:	db4e      	blt.n	60012684 <z_timer_expiration_handler+0x130>
600125e6:	f007 f9f3 	bl	600199d0 <z_impl_k_uptime_ticks>
600125ea:	3001      	adds	r0, #1
600125ec:	f141 0300 	adc.w	r3, r1, #0
600125f0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
600125f4:	1880      	adds	r0, r0, r2
600125f6:	f06f 0201 	mvn.w	r2, #1
600125fa:	eb43 0301 	adc.w	r3, r3, r1
600125fe:	1a12      	subs	r2, r2, r0
60012600:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
60012604:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
60012608:	492a      	ldr	r1, [pc, #168]	; (600126b4 <z_timer_expiration_handler+0x160>)
6001260a:	4620      	mov	r0, r4
6001260c:	f7ff fd2c 	bl	60012068 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
60012610:	6b23      	ldr	r3, [r4, #48]	; 0x30
60012612:	3301      	adds	r3, #1
60012614:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
60012616:	6a23      	ldr	r3, [r4, #32]
60012618:	b1db      	cbz	r3, 60012652 <z_timer_expiration_handler+0xfe>
6001261a:	481f      	ldr	r0, [pc, #124]	; (60012698 <z_timer_expiration_handler+0x144>)
6001261c:	f7fd fbe4 	bl	6000fde8 <z_spin_unlock_valid>
60012620:	2800      	cmp	r0, #0
60012622:	d0bd      	beq.n	600125a0 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
60012624:	f385 8811 	msr	BASEPRI, r5
60012628:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
6001262c:	6a23      	ldr	r3, [r4, #32]
6001262e:	4620      	mov	r0, r4
60012630:	4798      	blx	r3
	__asm__ volatile(
60012632:	f04f 0310 	mov.w	r3, #16
60012636:	f3ef 8511 	mrs	r5, BASEPRI
6001263a:	f383 8812 	msr	BASEPRI_MAX, r3
6001263e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60012642:	4815      	ldr	r0, [pc, #84]	; (60012698 <z_timer_expiration_handler+0x144>)
60012644:	f7fd fbc2 	bl	6000fdcc <z_spin_lock_valid>
60012648:	2800      	cmp	r0, #0
6001264a:	d091      	beq.n	60012570 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
6001264c:	4812      	ldr	r0, [pc, #72]	; (60012698 <z_timer_expiration_handler+0x144>)
6001264e:	f7fd fbd9 	bl	6000fe04 <z_spin_lock_set_owner>
	return list->head == list;
60012652:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
60012656:	42a6      	cmp	r6, r4
60012658:	d09d      	beq.n	60012596 <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
6001265a:	2e00      	cmp	r6, #0
6001265c:	d09b      	beq.n	60012596 <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
6001265e:	4630      	mov	r0, r6
60012660:	f7fe fbe6 	bl	60010e30 <z_unpend_thread_no_timeout>
60012664:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
60012666:	480c      	ldr	r0, [pc, #48]	; (60012698 <z_timer_expiration_handler+0x144>)
60012668:	67b3      	str	r3, [r6, #120]	; 0x78
6001266a:	f7fd fbbd 	bl	6000fde8 <z_spin_unlock_valid>
6001266e:	2800      	cmp	r0, #0
60012670:	d096      	beq.n	600125a0 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
60012672:	f385 8811 	msr	BASEPRI, r5
60012676:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
6001267a:	4630      	mov	r0, r6
}
6001267c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
60012680:	f7fe bb90 	b.w	60010da4 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
60012684:	f06f 0201 	mvn.w	r2, #1
60012688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
6001268c:	e7bc      	b.n	60012608 <z_timer_expiration_handler+0xb4>
6001268e:	f385 8811 	msr	BASEPRI, r5
60012692:	f3bf 8f6f 	isb	sy
}
60012696:	bd70      	pop	{r4, r5, r6, pc}
60012698:	20204ddc 	.word	0x20204ddc
6001269c:	6001c758 	.word	0x6001c758
600126a0:	6001c785 	.word	0x6001c785
600126a4:	6001c3d7 	.word	0x6001c3d7
600126a8:	6001c79a 	.word	0x6001c79a
600126ac:	6001c7b2 	.word	0x6001c7b2
600126b0:	6001c7c9 	.word	0x6001c7c9
600126b4:	60012555 	.word	0x60012555

600126b8 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
600126b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
600126bc:	bf08      	it	eq
600126be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
600126c2:	4619      	mov	r1, r3
600126c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600126c8:	4605      	mov	r5, r0
600126ca:	4614      	mov	r4, r2
600126cc:	4691      	mov	r9, r2
600126ce:	4698      	mov	r8, r3
600126d0:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
600126d4:	d037      	beq.n	60012746 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
600126d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
600126da:	bf08      	it	eq
600126dc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
600126e0:	4637      	mov	r7, r6
600126e2:	4682      	mov	sl, r0
600126e4:	d011      	beq.n	6001270a <z_impl_k_timer_start+0x52>
600126e6:	ea50 0306 	orrs.w	r3, r0, r6
600126ea:	d00e      	beq.n	6001270a <z_impl_k_timer_start+0x52>
600126ec:	1c72      	adds	r2, r6, #1
600126ee:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
600126f2:	db0a      	blt.n	6001270a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
600126f4:	2e02      	cmp	r6, #2
600126f6:	4684      	mov	ip, r0
600126f8:	f170 0000 	sbcs.w	r0, r0, #0
600126fc:	bfbc      	itt	lt
600126fe:	2702      	movlt	r7, #2
60012700:	f04f 0c00 	movlt.w	ip, #0
60012704:	3f01      	subs	r7, #1
60012706:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
6001270a:	1c63      	adds	r3, r4, #1
6001270c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
60012710:	db0a      	blt.n	60012728 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
60012712:	2c01      	cmp	r4, #1
60012714:	4622      	mov	r2, r4
60012716:	f171 0300 	sbcs.w	r3, r1, #0
6001271a:	bfbc      	itt	lt
6001271c:	2201      	movlt	r2, #1
6001271e:	2100      	movlt	r1, #0
60012720:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
60012724:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
60012728:	4628      	mov	r0, r5
6001272a:	f7ff fd63 	bl	600121f4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
6001272e:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
60012730:	464a      	mov	r2, r9
60012732:	4628      	mov	r0, r5
	timer->status = 0U;
60012734:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
60012736:	4643      	mov	r3, r8
60012738:	4904      	ldr	r1, [pc, #16]	; (6001274c <z_impl_k_timer_start+0x94>)
	timer->period = period;
6001273a:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
		     duration);
}
6001273e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
60012742:	f7ff bc91 	b.w	60012068 <z_add_timeout>
}
60012746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6001274a:	bf00      	nop
6001274c:	60012555 	.word	0x60012555

60012750 <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
60012750:	b573      	push	{r0, r1, r4, r5, r6, lr}
60012752:	4606      	mov	r6, r0
60012754:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
60012758:	b163      	cbz	r3, 60012774 <z_impl_k_timer_status_sync+0x24>
6001275a:	4931      	ldr	r1, [pc, #196]	; (60012820 <z_impl_k_timer_status_sync+0xd0>)
6001275c:	23e9      	movs	r3, #233	; 0xe9
6001275e:	4a31      	ldr	r2, [pc, #196]	; (60012824 <z_impl_k_timer_status_sync+0xd4>)
60012760:	4831      	ldr	r0, [pc, #196]	; (60012828 <z_impl_k_timer_status_sync+0xd8>)
60012762:	f005 fbce 	bl	60017f02 <assert_print>
60012766:	4831      	ldr	r0, [pc, #196]	; (6001282c <z_impl_k_timer_status_sync+0xdc>)
60012768:	f005 fbcb 	bl	60017f02 <assert_print>
6001276c:	21e9      	movs	r1, #233	; 0xe9
6001276e:	482d      	ldr	r0, [pc, #180]	; (60012824 <z_impl_k_timer_status_sync+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
60012770:	f005 fbc0 	bl	60017ef4 <assert_post_action>
	__asm__ volatile(
60012774:	f04f 0310 	mov.w	r3, #16
60012778:	f3ef 8411 	mrs	r4, BASEPRI
6001277c:	f383 8812 	msr	BASEPRI_MAX, r3
60012780:	f3bf 8f6f 	isb	sy
60012784:	482a      	ldr	r0, [pc, #168]	; (60012830 <z_impl_k_timer_status_sync+0xe0>)
60012786:	f7fd fb21 	bl	6000fdcc <z_spin_lock_valid>
6001278a:	b960      	cbnz	r0, 600127a6 <z_impl_k_timer_status_sync+0x56>
6001278c:	2394      	movs	r3, #148	; 0x94
6001278e:	4a29      	ldr	r2, [pc, #164]	; (60012834 <z_impl_k_timer_status_sync+0xe4>)
60012790:	4929      	ldr	r1, [pc, #164]	; (60012838 <z_impl_k_timer_status_sync+0xe8>)
60012792:	4825      	ldr	r0, [pc, #148]	; (60012828 <z_impl_k_timer_status_sync+0xd8>)
60012794:	f005 fbb5 	bl	60017f02 <assert_print>
60012798:	4925      	ldr	r1, [pc, #148]	; (60012830 <z_impl_k_timer_status_sync+0xe0>)
6001279a:	4828      	ldr	r0, [pc, #160]	; (6001283c <z_impl_k_timer_status_sync+0xec>)
6001279c:	f005 fbb1 	bl	60017f02 <assert_print>
600127a0:	2194      	movs	r1, #148	; 0x94
600127a2:	4824      	ldr	r0, [pc, #144]	; (60012834 <z_impl_k_timer_status_sync+0xe4>)
600127a4:	e7e4      	b.n	60012770 <z_impl_k_timer_status_sync+0x20>
	z_spin_lock_set_owner(l);
600127a6:	4822      	ldr	r0, [pc, #136]	; (60012830 <z_impl_k_timer_status_sync+0xe0>)
600127a8:	f7fd fb2c 	bl	6000fe04 <z_spin_lock_set_owner>

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
600127ac:	6b35      	ldr	r5, [r6, #48]	; 0x30

	if (result == 0U) {
600127ae:	b9f5      	cbnz	r5, 600127ee <z_impl_k_timer_status_sync+0x9e>
		if (!z_is_inactive_timeout(&timer->timeout)) {
600127b0:	6833      	ldr	r3, [r6, #0]
600127b2:	b1e3      	cbz	r3, 600127ee <z_impl_k_timer_status_sync+0x9e>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
600127b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
600127b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600127bc:	4621      	mov	r1, r4
600127be:	481c      	ldr	r0, [pc, #112]	; (60012830 <z_impl_k_timer_status_sync+0xe0>)
600127c0:	e9cd 2300 	strd	r2, r3, [sp]
600127c4:	f106 0218 	add.w	r2, r6, #24
600127c8:	f7fe fe48 	bl	6001145c <z_pend_curr>
600127cc:	f04f 0310 	mov.w	r3, #16
600127d0:	f3ef 8411 	mrs	r4, BASEPRI
600127d4:	f383 8812 	msr	BASEPRI_MAX, r3
600127d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
600127dc:	4814      	ldr	r0, [pc, #80]	; (60012830 <z_impl_k_timer_status_sync+0xe0>)
600127de:	f7fd faf5 	bl	6000fdcc <z_spin_lock_valid>
600127e2:	2800      	cmp	r0, #0
600127e4:	d0d2      	beq.n	6001278c <z_impl_k_timer_status_sync+0x3c>
	z_spin_lock_set_owner(l);
600127e6:	4812      	ldr	r0, [pc, #72]	; (60012830 <z_impl_k_timer_status_sync+0xe0>)
600127e8:	f7fd fb0c 	bl	6000fe04 <z_spin_lock_set_owner>

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
600127ec:	6b35      	ldr	r5, [r6, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
600127ee:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
600127f0:	480f      	ldr	r0, [pc, #60]	; (60012830 <z_impl_k_timer_status_sync+0xe0>)
600127f2:	6333      	str	r3, [r6, #48]	; 0x30
600127f4:	f7fd faf8 	bl	6000fde8 <z_spin_unlock_valid>
600127f8:	b958      	cbnz	r0, 60012812 <z_impl_k_timer_status_sync+0xc2>
600127fa:	23c2      	movs	r3, #194	; 0xc2
600127fc:	4a0d      	ldr	r2, [pc, #52]	; (60012834 <z_impl_k_timer_status_sync+0xe4>)
600127fe:	4910      	ldr	r1, [pc, #64]	; (60012840 <z_impl_k_timer_status_sync+0xf0>)
60012800:	4809      	ldr	r0, [pc, #36]	; (60012828 <z_impl_k_timer_status_sync+0xd8>)
60012802:	f005 fb7e 	bl	60017f02 <assert_print>
60012806:	490a      	ldr	r1, [pc, #40]	; (60012830 <z_impl_k_timer_status_sync+0xe0>)
60012808:	480e      	ldr	r0, [pc, #56]	; (60012844 <z_impl_k_timer_status_sync+0xf4>)
6001280a:	f005 fb7a 	bl	60017f02 <assert_print>
6001280e:	21c2      	movs	r1, #194	; 0xc2
60012810:	e7c7      	b.n	600127a2 <z_impl_k_timer_status_sync+0x52>
	__asm__ volatile(
60012812:	f384 8811 	msr	BASEPRI, r4
60012816:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
6001281a:	4628      	mov	r0, r5
6001281c:	b002      	add	sp, #8
6001281e:	bd70      	pop	{r4, r5, r6, pc}
60012820:	6001e9fa 	.word	0x6001e9fa
60012824:	6001ee41 	.word	0x6001ee41
60012828:	6001c3d7 	.word	0x6001c3d7
6001282c:	6001e923 	.word	0x6001e923
60012830:	20204ddc 	.word	0x20204ddc
60012834:	6001c758 	.word	0x6001c758
60012838:	6001c785 	.word	0x6001c785
6001283c:	6001c79a 	.word	0x6001c79a
60012840:	6001c7b2 	.word	0x6001c7b2
60012844:	6001c7c9 	.word	0x6001c7c9

60012848 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
60012848:	4b01      	ldr	r3, [pc, #4]	; (60012850 <k_thread_system_pool_assign+0x8>)
6001284a:	6703      	str	r3, [r0, #112]	; 0x70
}
6001284c:	4770      	bx	lr
6001284e:	bf00      	nop
60012850:	20203438 	.word	0x20203438

60012854 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
60012854:	4801      	ldr	r0, [pc, #4]	; (6001285c <boot_banner+0x8>)
60012856:	f005 b8a8 	b.w	600179aa <printk>
6001285a:	bf00      	nop
6001285c:	6001ee63 	.word	0x6001ee63

60012860 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
60012860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
60012862:	4b09      	ldr	r3, [pc, #36]	; (60012888 <k_sys_work_q_init+0x28>)
60012864:	2400      	movs	r4, #0
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
60012866:	f44f 6280 	mov.w	r2, #1024	; 0x400
6001286a:	4908      	ldr	r1, [pc, #32]	; (6001288c <k_sys_work_q_init+0x2c>)
	struct k_work_queue_config cfg = {
6001286c:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
6001286e:	ab02      	add	r3, sp, #8
60012870:	4807      	ldr	r0, [pc, #28]	; (60012890 <k_sys_work_q_init+0x30>)
60012872:	9300      	str	r3, [sp, #0]
60012874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct k_work_queue_config cfg = {
60012878:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
6001287c:	f7fe f89a 	bl	600109b4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
60012880:	4620      	mov	r0, r4
60012882:	b004      	add	sp, #16
60012884:	bd10      	pop	{r4, pc}
60012886:	bf00      	nop
60012888:	6001ee92 	.word	0x6001ee92
6001288c:	202084c0 	.word	0x202084c0
60012890:	20204608 	.word	0x20204608

60012894 <pow>:
60012894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
60012898:	461d      	mov	r5, r3
6001289a:	4606      	mov	r6, r0
6001289c:	460f      	mov	r7, r1
6001289e:	4614      	mov	r4, r2
600128a0:	f7f1 fdfa 	bl	60004498 <__ieee754_pow>
600128a4:	4b56      	ldr	r3, [pc, #344]	; (60012a00 <pow+0x16c>)
600128a6:	f993 3000 	ldrsb.w	r3, [r3]
600128aa:	3301      	adds	r3, #1
600128ac:	4680      	mov	r8, r0
600128ae:	4689      	mov	r9, r1
600128b0:	d02a      	beq.n	60012908 <pow+0x74>
600128b2:	4622      	mov	r2, r4
600128b4:	462b      	mov	r3, r5
600128b6:	4620      	mov	r0, r4
600128b8:	4629      	mov	r1, r5
600128ba:	f7f0 ffd7 	bl	6000386c <__aeabi_dcmpun>
600128be:	bb18      	cbnz	r0, 60012908 <pow+0x74>
600128c0:	4632      	mov	r2, r6
600128c2:	463b      	mov	r3, r7
600128c4:	4630      	mov	r0, r6
600128c6:	4639      	mov	r1, r7
600128c8:	f7f0 ffd0 	bl	6000386c <__aeabi_dcmpun>
600128cc:	2800      	cmp	r0, #0
600128ce:	d141      	bne.n	60012954 <pow+0xc0>
600128d0:	2200      	movs	r2, #0
600128d2:	2300      	movs	r3, #0
600128d4:	4630      	mov	r0, r6
600128d6:	4639      	mov	r1, r7
600128d8:	f7f0 fb46 	bl	60002f68 <__aeabi_dcmpeq>
600128dc:	b1c0      	cbz	r0, 60012910 <pow+0x7c>
600128de:	2200      	movs	r2, #0
600128e0:	2300      	movs	r3, #0
600128e2:	4620      	mov	r0, r4
600128e4:	4629      	mov	r1, r5
600128e6:	f7f0 fb3f 	bl	60002f68 <__aeabi_dcmpeq>
600128ea:	2800      	cmp	r0, #0
600128ec:	d13a      	bne.n	60012964 <pow+0xd0>
600128ee:	4620      	mov	r0, r4
600128f0:	4629      	mov	r1, r5
600128f2:	f000 f981 	bl	60012bf8 <finite>
600128f6:	b138      	cbz	r0, 60012908 <pow+0x74>
600128f8:	4620      	mov	r0, r4
600128fa:	4629      	mov	r1, r5
600128fc:	2200      	movs	r2, #0
600128fe:	2300      	movs	r3, #0
60012900:	f7f0 fb3c 	bl	60002f7c <__aeabi_dcmplt>
60012904:	2800      	cmp	r0, #0
60012906:	d159      	bne.n	600129bc <pow+0x128>
60012908:	4640      	mov	r0, r8
6001290a:	4649      	mov	r1, r9
6001290c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
60012910:	4640      	mov	r0, r8
60012912:	4649      	mov	r1, r9
60012914:	f000 f970 	bl	60012bf8 <finite>
60012918:	b360      	cbz	r0, 60012974 <pow+0xe0>
6001291a:	2200      	movs	r2, #0
6001291c:	2300      	movs	r3, #0
6001291e:	4640      	mov	r0, r8
60012920:	4649      	mov	r1, r9
60012922:	f7f0 fb21 	bl	60002f68 <__aeabi_dcmpeq>
60012926:	2800      	cmp	r0, #0
60012928:	d0ee      	beq.n	60012908 <pow+0x74>
6001292a:	4630      	mov	r0, r6
6001292c:	4639      	mov	r1, r7
6001292e:	f000 f963 	bl	60012bf8 <finite>
60012932:	2800      	cmp	r0, #0
60012934:	d0e8      	beq.n	60012908 <pow+0x74>
60012936:	4620      	mov	r0, r4
60012938:	4629      	mov	r1, r5
6001293a:	f000 f95d 	bl	60012bf8 <finite>
6001293e:	2800      	cmp	r0, #0
60012940:	d0e2      	beq.n	60012908 <pow+0x74>
60012942:	f005 fda7 	bl	60018494 <__errno>
60012946:	2322      	movs	r3, #34	; 0x22
60012948:	6003      	str	r3, [r0, #0]
6001294a:	f04f 0800 	mov.w	r8, #0
6001294e:	f04f 0900 	mov.w	r9, #0
60012952:	e7d9      	b.n	60012908 <pow+0x74>
60012954:	4620      	mov	r0, r4
60012956:	4629      	mov	r1, r5
60012958:	2200      	movs	r2, #0
6001295a:	2300      	movs	r3, #0
6001295c:	f7f0 fb04 	bl	60002f68 <__aeabi_dcmpeq>
60012960:	2800      	cmp	r0, #0
60012962:	d0d1      	beq.n	60012908 <pow+0x74>
60012964:	f8df 909c 	ldr.w	r9, [pc, #156]	; 60012a04 <pow+0x170>
60012968:	f04f 0800 	mov.w	r8, #0
6001296c:	4640      	mov	r0, r8
6001296e:	4649      	mov	r1, r9
60012970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
60012974:	4630      	mov	r0, r6
60012976:	4639      	mov	r1, r7
60012978:	f000 f93e 	bl	60012bf8 <finite>
6001297c:	2800      	cmp	r0, #0
6001297e:	d0cc      	beq.n	6001291a <pow+0x86>
60012980:	4620      	mov	r0, r4
60012982:	4629      	mov	r1, r5
60012984:	f000 f938 	bl	60012bf8 <finite>
60012988:	2800      	cmp	r0, #0
6001298a:	d0c6      	beq.n	6001291a <pow+0x86>
6001298c:	4642      	mov	r2, r8
6001298e:	464b      	mov	r3, r9
60012990:	4640      	mov	r0, r8
60012992:	4649      	mov	r1, r9
60012994:	f7f0 ff6a 	bl	6000386c <__aeabi_dcmpun>
60012998:	bb20      	cbnz	r0, 600129e4 <pow+0x150>
6001299a:	f005 fd7b 	bl	60018494 <__errno>
6001299e:	4603      	mov	r3, r0
600129a0:	2222      	movs	r2, #34	; 0x22
600129a2:	601a      	str	r2, [r3, #0]
600129a4:	4630      	mov	r0, r6
600129a6:	4639      	mov	r1, r7
600129a8:	2200      	movs	r2, #0
600129aa:	2300      	movs	r3, #0
600129ac:	f7f0 fae6 	bl	60002f7c <__aeabi_dcmplt>
600129b0:	b968      	cbnz	r0, 600129ce <pow+0x13a>
600129b2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 60012a08 <pow+0x174>
600129b6:	f04f 0800 	mov.w	r8, #0
600129ba:	e7a5      	b.n	60012908 <pow+0x74>
600129bc:	f005 fd6a 	bl	60018494 <__errno>
600129c0:	2321      	movs	r3, #33	; 0x21
600129c2:	6003      	str	r3, [r0, #0]
600129c4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 60012a0c <pow+0x178>
600129c8:	f04f 0800 	mov.w	r8, #0
600129cc:	e79c      	b.n	60012908 <pow+0x74>
600129ce:	4620      	mov	r0, r4
600129d0:	4629      	mov	r1, r5
600129d2:	f000 f91d 	bl	60012c10 <rint>
600129d6:	4622      	mov	r2, r4
600129d8:	462b      	mov	r3, r5
600129da:	f7f0 fac5 	bl	60002f68 <__aeabi_dcmpeq>
600129de:	2800      	cmp	r0, #0
600129e0:	d1e7      	bne.n	600129b2 <pow+0x11e>
600129e2:	e7ef      	b.n	600129c4 <pow+0x130>
600129e4:	f005 fd56 	bl	60018494 <__errno>
600129e8:	2200      	movs	r2, #0
600129ea:	2300      	movs	r3, #0
600129ec:	2121      	movs	r1, #33	; 0x21
600129ee:	6001      	str	r1, [r0, #0]
600129f0:	4610      	mov	r0, r2
600129f2:	4619      	mov	r1, r3
600129f4:	f7f0 f97a 	bl	60002cec <__aeabi_ddiv>
600129f8:	4680      	mov	r8, r0
600129fa:	4689      	mov	r9, r1
600129fc:	e784      	b.n	60012908 <pow+0x74>
600129fe:	bf00      	nop
60012a00:	202032bb 	.word	0x202032bb
60012a04:	3ff00000 	.word	0x3ff00000
60012a08:	7ff00000 	.word	0x7ff00000
60012a0c:	fff00000 	.word	0xfff00000

60012a10 <sqrt>:
60012a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60012a12:	4604      	mov	r4, r0
60012a14:	460d      	mov	r5, r1
60012a16:	f000 f829 	bl	60012a6c <__ieee754_sqrt>
60012a1a:	4b13      	ldr	r3, [pc, #76]	; (60012a68 <sqrt+0x58>)
60012a1c:	f993 3000 	ldrsb.w	r3, [r3]
60012a20:	3301      	adds	r3, #1
60012a22:	4606      	mov	r6, r0
60012a24:	460f      	mov	r7, r1
60012a26:	d00d      	beq.n	60012a44 <sqrt+0x34>
60012a28:	4622      	mov	r2, r4
60012a2a:	462b      	mov	r3, r5
60012a2c:	4620      	mov	r0, r4
60012a2e:	4629      	mov	r1, r5
60012a30:	f7f0 ff1c 	bl	6000386c <__aeabi_dcmpun>
60012a34:	b930      	cbnz	r0, 60012a44 <sqrt+0x34>
60012a36:	4620      	mov	r0, r4
60012a38:	4629      	mov	r1, r5
60012a3a:	2200      	movs	r2, #0
60012a3c:	2300      	movs	r3, #0
60012a3e:	f7f0 fa9d 	bl	60002f7c <__aeabi_dcmplt>
60012a42:	b910      	cbnz	r0, 60012a4a <sqrt+0x3a>
60012a44:	4630      	mov	r0, r6
60012a46:	4639      	mov	r1, r7
60012a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60012a4a:	f005 fd23 	bl	60018494 <__errno>
60012a4e:	2200      	movs	r2, #0
60012a50:	2300      	movs	r3, #0
60012a52:	2121      	movs	r1, #33	; 0x21
60012a54:	6001      	str	r1, [r0, #0]
60012a56:	4610      	mov	r0, r2
60012a58:	4619      	mov	r1, r3
60012a5a:	f7f0 f947 	bl	60002cec <__aeabi_ddiv>
60012a5e:	4606      	mov	r6, r0
60012a60:	460f      	mov	r7, r1
60012a62:	4630      	mov	r0, r6
60012a64:	4639      	mov	r1, r7
60012a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60012a68:	202032bb 	.word	0x202032bb

60012a6c <__ieee754_sqrt>:
60012a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
60012a70:	4f5e      	ldr	r7, [pc, #376]	; (60012bec <__ieee754_sqrt+0x180>)
60012a72:	438f      	bics	r7, r1
60012a74:	4604      	mov	r4, r0
60012a76:	460d      	mov	r5, r1
60012a78:	f000 80a6 	beq.w	60012bc8 <__ieee754_sqrt+0x15c>
60012a7c:	2900      	cmp	r1, #0
60012a7e:	460b      	mov	r3, r1
60012a80:	4606      	mov	r6, r0
60012a82:	4602      	mov	r2, r0
60012a84:	dd56      	ble.n	60012b34 <__ieee754_sqrt+0xc8>
60012a86:	1508      	asrs	r0, r1, #20
60012a88:	f000 808f 	beq.w	60012baa <__ieee754_sqrt+0x13e>
60012a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
60012a90:	f2a0 36ff 	subw	r6, r0, #1023	; 0x3ff
60012a94:	07c0      	lsls	r0, r0, #31
60012a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
60012a9a:	d403      	bmi.n	60012aa4 <__ieee754_sqrt+0x38>
60012a9c:	0fd1      	lsrs	r1, r2, #31
60012a9e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
60012aa2:	0052      	lsls	r2, r2, #1
60012aa4:	005b      	lsls	r3, r3, #1
60012aa6:	2500      	movs	r5, #0
60012aa8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
60012aac:	1076      	asrs	r6, r6, #1
60012aae:	0052      	lsls	r2, r2, #1
60012ab0:	2016      	movs	r0, #22
60012ab2:	46ac      	mov	ip, r5
60012ab4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
60012ab8:	eb0c 0401 	add.w	r4, ip, r1
60012abc:	42a3      	cmp	r3, r4
60012abe:	db03      	blt.n	60012ac8 <__ieee754_sqrt+0x5c>
60012ac0:	1b1b      	subs	r3, r3, r4
60012ac2:	eb01 0c04 	add.w	ip, r1, r4
60012ac6:	440d      	add	r5, r1
60012ac8:	005b      	lsls	r3, r3, #1
60012aca:	3801      	subs	r0, #1
60012acc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
60012ad0:	ea4f 0151 	mov.w	r1, r1, lsr #1
60012ad4:	ea4f 0242 	mov.w	r2, r2, lsl #1
60012ad8:	d1ee      	bne.n	60012ab8 <__ieee754_sqrt+0x4c>
60012ada:	4607      	mov	r7, r0
60012adc:	4680      	mov	r8, r0
60012ade:	2420      	movs	r4, #32
60012ae0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
60012ae4:	e00a      	b.n	60012afc <__ieee754_sqrt+0x90>
60012ae6:	d039      	beq.n	60012b5c <__ieee754_sqrt+0xf0>
60012ae8:	0059      	lsls	r1, r3, #1
60012aea:	eb01 71d2 	add.w	r1, r1, r2, lsr #31
60012aee:	3c01      	subs	r4, #1
60012af0:	460b      	mov	r3, r1
60012af2:	ea4f 0242 	mov.w	r2, r2, lsl #1
60012af6:	ea4f 0050 	mov.w	r0, r0, lsr #1
60012afa:	d03b      	beq.n	60012b74 <__ieee754_sqrt+0x108>
60012afc:	459c      	cmp	ip, r3
60012afe:	eb08 0e00 	add.w	lr, r8, r0
60012b02:	daf0      	bge.n	60012ae6 <__ieee754_sqrt+0x7a>
60012b04:	f1be 0f00 	cmp.w	lr, #0
60012b08:	eb0e 0800 	add.w	r8, lr, r0
60012b0c:	db0c      	blt.n	60012b28 <__ieee754_sqrt+0xbc>
60012b0e:	46e1      	mov	r9, ip
60012b10:	eba3 010c 	sub.w	r1, r3, ip
60012b14:	4596      	cmp	lr, r2
60012b16:	bf88      	it	hi
60012b18:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
60012b1c:	0049      	lsls	r1, r1, #1
60012b1e:	46cc      	mov	ip, r9
60012b20:	eba2 020e 	sub.w	r2, r2, lr
60012b24:	4407      	add	r7, r0
60012b26:	e7e0      	b.n	60012aea <__ieee754_sqrt+0x7e>
60012b28:	f1b8 0f00 	cmp.w	r8, #0
60012b2c:	dbef      	blt.n	60012b0e <__ieee754_sqrt+0xa2>
60012b2e:	f10c 0901 	add.w	r9, ip, #1
60012b32:	e7ed      	b.n	60012b10 <__ieee754_sqrt+0xa4>
60012b34:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
60012b38:	4307      	orrs	r7, r0
60012b3a:	d02a      	beq.n	60012b92 <__ieee754_sqrt+0x126>
60012b3c:	2900      	cmp	r1, #0
60012b3e:	d14d      	bne.n	60012bdc <__ieee754_sqrt+0x170>
60012b40:	0ad1      	lsrs	r1, r2, #11
60012b42:	3b15      	subs	r3, #21
60012b44:	0552      	lsls	r2, r2, #21
60012b46:	2900      	cmp	r1, #0
60012b48:	d0fa      	beq.n	60012b40 <__ieee754_sqrt+0xd4>
60012b4a:	02cd      	lsls	r5, r1, #11
60012b4c:	4618      	mov	r0, r3
60012b4e:	4616      	mov	r6, r2
60012b50:	460b      	mov	r3, r1
60012b52:	d52a      	bpl.n	60012baa <__ieee754_sqrt+0x13e>
60012b54:	2420      	movs	r4, #32
60012b56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
60012b5a:	e031      	b.n	60012bc0 <__ieee754_sqrt+0x154>
60012b5c:	4596      	cmp	lr, r2
60012b5e:	d902      	bls.n	60012b66 <__ieee754_sqrt+0xfa>
60012b60:	ea4f 014c 	mov.w	r1, ip, lsl #1
60012b64:	e7c1      	b.n	60012aea <__ieee754_sqrt+0x7e>
60012b66:	f1be 0f00 	cmp.w	lr, #0
60012b6a:	eb0e 0800 	add.w	r8, lr, r0
60012b6e:	db12      	blt.n	60012b96 <__ieee754_sqrt+0x12a>
60012b70:	2100      	movs	r1, #0
60012b72:	e7d5      	b.n	60012b20 <__ieee754_sqrt+0xb4>
60012b74:	4311      	orrs	r1, r2
60012b76:	d112      	bne.n	60012b9e <__ieee754_sqrt+0x132>
60012b78:	087c      	lsrs	r4, r7, #1
60012b7a:	106b      	asrs	r3, r5, #1
60012b7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
60012b80:	07ea      	lsls	r2, r5, #31
60012b82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
60012b86:	bf48      	it	mi
60012b88:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
60012b8c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
60012b90:	4620      	mov	r0, r4
60012b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
60012b96:	f1b8 0f00 	cmp.w	r8, #0
60012b9a:	dac8      	bge.n	60012b2e <__ieee754_sqrt+0xc2>
60012b9c:	e7e8      	b.n	60012b70 <__ieee754_sqrt+0x104>
60012b9e:	1c79      	adds	r1, r7, #1
60012ba0:	bf16      	itet	ne
60012ba2:	1c78      	addne	r0, r7, #1
60012ba4:	3501      	addeq	r5, #1
60012ba6:	0844      	lsrne	r4, r0, #1
60012ba8:	e7e7      	b.n	60012b7a <__ieee754_sqrt+0x10e>
60012baa:	2200      	movs	r2, #0
60012bac:	005b      	lsls	r3, r3, #1
60012bae:	02dc      	lsls	r4, r3, #11
60012bb0:	4611      	mov	r1, r2
60012bb2:	f102 0201 	add.w	r2, r2, #1
60012bb6:	d5f9      	bpl.n	60012bac <__ieee754_sqrt+0x140>
60012bb8:	f1c2 0420 	rsb	r4, r2, #32
60012bbc:	fa06 f202 	lsl.w	r2, r6, r2
60012bc0:	40e6      	lsrs	r6, r4
60012bc2:	1a40      	subs	r0, r0, r1
60012bc4:	4333      	orrs	r3, r6
60012bc6:	e761      	b.n	60012a8c <__ieee754_sqrt+0x20>
60012bc8:	4602      	mov	r2, r0
60012bca:	460b      	mov	r3, r1
60012bcc:	f7ef ff64 	bl	60002a98 <__aeabi_dmul>
60012bd0:	4622      	mov	r2, r4
60012bd2:	462b      	mov	r3, r5
60012bd4:	f7ef fdaa 	bl	6000272c <__adddf3>
60012bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
60012bdc:	f7ef fda4 	bl	60002728 <__aeabi_dsub>
60012be0:	4602      	mov	r2, r0
60012be2:	460b      	mov	r3, r1
60012be4:	f7f0 f882 	bl	60002cec <__aeabi_ddiv>
60012be8:	e7d3      	b.n	60012b92 <__ieee754_sqrt+0x126>
60012bea:	bf00      	nop
60012bec:	7ff00000 	.word	0x7ff00000

60012bf0 <fabs>:
60012bf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
60012bf4:	4619      	mov	r1, r3
60012bf6:	4770      	bx	lr

60012bf8 <finite>:
60012bf8:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
60012bfc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
60012c00:	0fc0      	lsrs	r0, r0, #31
60012c02:	4770      	bx	lr

60012c04 <nan>:
60012c04:	4901      	ldr	r1, [pc, #4]	; (60012c0c <nan+0x8>)
60012c06:	2000      	movs	r0, #0
60012c08:	4770      	bx	lr
60012c0a:	bf00      	nop
60012c0c:	7ff80000 	.word	0x7ff80000

60012c10 <rint>:
60012c10:	b5f0      	push	{r4, r5, r6, r7, lr}
60012c12:	f3c1 550a 	ubfx	r5, r1, #20, #11
60012c16:	f2a5 3eff 	subw	lr, r5, #1023	; 0x3ff
60012c1a:	f1be 0f13 	cmp.w	lr, #19
60012c1e:	b083      	sub	sp, #12
60012c20:	4602      	mov	r2, r0
60012c22:	460b      	mov	r3, r1
60012c24:	460c      	mov	r4, r1
60012c26:	4684      	mov	ip, r0
60012c28:	ea4f 76d1 	mov.w	r6, r1, lsr #31
60012c2c:	dc63      	bgt.n	60012cf6 <rint+0xe6>
60012c2e:	f1be 0f00 	cmp.w	lr, #0
60012c32:	db31      	blt.n	60012c98 <rint+0x88>
60012c34:	4940      	ldr	r1, [pc, #256]	; (60012d38 <rint+0x128>)
60012c36:	fa41 f10e 	asr.w	r1, r1, lr
60012c3a:	ea01 0003 	and.w	r0, r1, r3
60012c3e:	4310      	orrs	r0, r2
60012c40:	d05f      	beq.n	60012d02 <rint+0xf2>
60012c42:	ea03 0351 	and.w	r3, r3, r1, lsr #1
60012c46:	ea52 0c03 	orrs.w	ip, r2, r3
60012c4a:	ea4f 0151 	mov.w	r1, r1, lsr #1
60012c4e:	d00e      	beq.n	60012c6e <rint+0x5e>
60012c50:	f1ae 0c13 	sub.w	ip, lr, #19
60012c54:	ea24 0101 	bic.w	r1, r4, r1
60012c58:	fabc fc8c 	clz	ip, ip
60012c5c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
60012c60:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
60012c64:	fa44 f40e 	asr.w	r4, r4, lr
60012c68:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
60012c6c:	430c      	orrs	r4, r1
60012c6e:	4933      	ldr	r1, [pc, #204]	; (60012d3c <rint+0x12c>)
60012c70:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
60012c74:	4623      	mov	r3, r4
60012c76:	e9d1 4500 	ldrd	r4, r5, [r1]
60012c7a:	4662      	mov	r2, ip
60012c7c:	4620      	mov	r0, r4
60012c7e:	4629      	mov	r1, r5
60012c80:	f7ef fd54 	bl	6000272c <__adddf3>
60012c84:	e9cd 0100 	strd	r0, r1, [sp]
60012c88:	e9dd 0100 	ldrd	r0, r1, [sp]
60012c8c:	4622      	mov	r2, r4
60012c8e:	462b      	mov	r3, r5
60012c90:	f7ef fd4a 	bl	60002728 <__aeabi_dsub>
60012c94:	b003      	add	sp, #12
60012c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
60012c98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
60012c9c:	4301      	orrs	r1, r0
60012c9e:	4619      	mov	r1, r3
60012ca0:	d0f8      	beq.n	60012c94 <rint+0x84>
60012ca2:	f3c3 0213 	ubfx	r2, r3, #0, #20
60012ca6:	4302      	orrs	r2, r0
60012ca8:	4d24      	ldr	r5, [pc, #144]	; (60012d3c <rint+0x12c>)
60012caa:	4253      	negs	r3, r2
60012cac:	4313      	orrs	r3, r2
60012cae:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
60012cb2:	e9d5 6700 	ldrd	r6, r7, [r5]
60012cb6:	0c62      	lsrs	r2, r4, #17
60012cb8:	0b1b      	lsrs	r3, r3, #12
60012cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
60012cbe:	0452      	lsls	r2, r2, #17
60012cc0:	ea43 0102 	orr.w	r1, r3, r2
60012cc4:	460b      	mov	r3, r1
60012cc6:	4602      	mov	r2, r0
60012cc8:	4639      	mov	r1, r7
60012cca:	4630      	mov	r0, r6
60012ccc:	f7ef fd2e 	bl	6000272c <__adddf3>
60012cd0:	e9cd 0100 	strd	r0, r1, [sp]
60012cd4:	4632      	mov	r2, r6
60012cd6:	463b      	mov	r3, r7
60012cd8:	e9dd 0100 	ldrd	r0, r1, [sp]
60012cdc:	f7ef fd24 	bl	60002728 <__aeabi_dsub>
60012ce0:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
60012ce4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
60012ce8:	4602      	mov	r2, r0
60012cea:	ea44 0301 	orr.w	r3, r4, r1
60012cee:	4610      	mov	r0, r2
60012cf0:	4619      	mov	r1, r3
60012cf2:	b003      	add	sp, #12
60012cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
60012cf6:	f1be 0f33 	cmp.w	lr, #51	; 0x33
60012cfa:	dd06      	ble.n	60012d0a <rint+0xfa>
60012cfc:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
60012d00:	d017      	beq.n	60012d32 <rint+0x122>
60012d02:	4610      	mov	r0, r2
60012d04:	4619      	mov	r1, r3
60012d06:	b003      	add	sp, #12
60012d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
60012d0a:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
60012d0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
60012d12:	40e9      	lsrs	r1, r5
60012d14:	4208      	tst	r0, r1
60012d16:	d0f4      	beq.n	60012d02 <rint+0xf2>
60012d18:	084b      	lsrs	r3, r1, #1
60012d1a:	ea10 0151 	ands.w	r1, r0, r1, lsr #1
60012d1e:	d0a6      	beq.n	60012c6e <rint+0x5e>
60012d20:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
60012d24:	ea20 0303 	bic.w	r3, r0, r3
60012d28:	fa4c fc05 	asr.w	ip, ip, r5
60012d2c:	ea43 0c0c 	orr.w	ip, r3, ip
60012d30:	e79d      	b.n	60012c6e <rint+0x5e>
60012d32:	f7ef fcfb 	bl	6000272c <__adddf3>
60012d36:	e7ad      	b.n	60012c94 <rint+0x84>
60012d38:	000fffff 	.word	0x000fffff
60012d3c:	6001a450 	.word	0x6001a450

60012d40 <__assert_func>:
60012d40:	b500      	push	{lr}
60012d42:	4c0b      	ldr	r4, [pc, #44]	; (60012d70 <__assert_func+0x30>)
60012d44:	6825      	ldr	r5, [r4, #0]
60012d46:	4614      	mov	r4, r2
60012d48:	68ee      	ldr	r6, [r5, #12]
60012d4a:	461a      	mov	r2, r3
60012d4c:	b085      	sub	sp, #20
60012d4e:	4603      	mov	r3, r0
60012d50:	460d      	mov	r5, r1
60012d52:	b14c      	cbz	r4, 60012d68 <__assert_func+0x28>
60012d54:	4907      	ldr	r1, [pc, #28]	; (60012d74 <__assert_func+0x34>)
60012d56:	9500      	str	r5, [sp, #0]
60012d58:	e9cd 1401 	strd	r1, r4, [sp, #4]
60012d5c:	4630      	mov	r0, r6
60012d5e:	4906      	ldr	r1, [pc, #24]	; (60012d78 <__assert_func+0x38>)
60012d60:	f000 f80e 	bl	60012d80 <fiprintf>
60012d64:	f003 f890 	bl	60015e88 <abort>
60012d68:	4904      	ldr	r1, [pc, #16]	; (60012d7c <__assert_func+0x3c>)
60012d6a:	460c      	mov	r4, r1
60012d6c:	e7f3      	b.n	60012d56 <__assert_func+0x16>
60012d6e:	bf00      	nop
60012d70:	20203140 	.word	0x20203140
60012d74:	6001bdf4 	.word	0x6001bdf4
60012d78:	6001be04 	.word	0x6001be04
60012d7c:	6001be00 	.word	0x6001be00

60012d80 <fiprintf>:
60012d80:	b40e      	push	{r1, r2, r3}
60012d82:	b510      	push	{r4, lr}
60012d84:	b083      	sub	sp, #12
60012d86:	ab05      	add	r3, sp, #20
60012d88:	4c06      	ldr	r4, [pc, #24]	; (60012da4 <fiprintf+0x24>)
60012d8a:	f853 2b04 	ldr.w	r2, [r3], #4
60012d8e:	9301      	str	r3, [sp, #4]
60012d90:	4601      	mov	r1, r0
60012d92:	6820      	ldr	r0, [r4, #0]
60012d94:	f000 fb7a 	bl	6001348c <_vfiprintf_r>
60012d98:	b003      	add	sp, #12
60012d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
60012d9e:	b003      	add	sp, #12
60012da0:	4770      	bx	lr
60012da2:	bf00      	nop
60012da4:	20203140 	.word	0x20203140

60012da8 <malloc>:
60012da8:	4b02      	ldr	r3, [pc, #8]	; (60012db4 <malloc+0xc>)
60012daa:	4601      	mov	r1, r0
60012dac:	6818      	ldr	r0, [r3, #0]
60012dae:	f000 b80b 	b.w	60012dc8 <_malloc_r>
60012db2:	bf00      	nop
60012db4:	20203140 	.word	0x20203140

60012db8 <free>:
60012db8:	4b02      	ldr	r3, [pc, #8]	; (60012dc4 <free+0xc>)
60012dba:	4601      	mov	r1, r0
60012dbc:	6818      	ldr	r0, [r3, #0]
60012dbe:	f003 ba91 	b.w	600162e4 <_free_r>
60012dc2:	bf00      	nop
60012dc4:	20203140 	.word	0x20203140

60012dc8 <_malloc_r>:
60012dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60012dcc:	f101 050b 	add.w	r5, r1, #11
60012dd0:	2d16      	cmp	r5, #22
60012dd2:	b083      	sub	sp, #12
60012dd4:	4606      	mov	r6, r0
60012dd6:	d824      	bhi.n	60012e22 <_malloc_r+0x5a>
60012dd8:	2910      	cmp	r1, #16
60012dda:	f200 80b0 	bhi.w	60012f3e <_malloc_r+0x176>
60012dde:	f000 fb01 	bl	600133e4 <__malloc_lock>
60012de2:	2510      	movs	r5, #16
60012de4:	2218      	movs	r2, #24
60012de6:	f04f 0c02 	mov.w	ip, #2
60012dea:	4fbc      	ldr	r7, [pc, #752]	; (600130dc <_malloc_r+0x314>)
60012dec:	443a      	add	r2, r7
60012dee:	f1a2 0308 	sub.w	r3, r2, #8
60012df2:	6854      	ldr	r4, [r2, #4]
60012df4:	429c      	cmp	r4, r3
60012df6:	f000 810b 	beq.w	60013010 <_malloc_r+0x248>
60012dfa:	6863      	ldr	r3, [r4, #4]
60012dfc:	68e2      	ldr	r2, [r4, #12]
60012dfe:	68a1      	ldr	r1, [r4, #8]
60012e00:	f023 0303 	bic.w	r3, r3, #3
60012e04:	4423      	add	r3, r4
60012e06:	60ca      	str	r2, [r1, #12]
60012e08:	6091      	str	r1, [r2, #8]
60012e0a:	685a      	ldr	r2, [r3, #4]
60012e0c:	f042 0201 	orr.w	r2, r2, #1
60012e10:	4630      	mov	r0, r6
60012e12:	605a      	str	r2, [r3, #4]
60012e14:	3408      	adds	r4, #8
60012e16:	f000 faeb 	bl	600133f0 <__malloc_unlock>
60012e1a:	4620      	mov	r0, r4
60012e1c:	b003      	add	sp, #12
60012e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60012e22:	f035 0507 	bics.w	r5, r5, #7
60012e26:	f100 808a 	bmi.w	60012f3e <_malloc_r+0x176>
60012e2a:	42a9      	cmp	r1, r5
60012e2c:	f200 8087 	bhi.w	60012f3e <_malloc_r+0x176>
60012e30:	f000 fad8 	bl	600133e4 <__malloc_lock>
60012e34:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
60012e38:	f0c0 8158 	bcc.w	600130ec <_malloc_r+0x324>
60012e3c:	0a6b      	lsrs	r3, r5, #9
60012e3e:	f000 8082 	beq.w	60012f46 <_malloc_r+0x17e>
60012e42:	2b04      	cmp	r3, #4
60012e44:	f200 810b 	bhi.w	6001305e <_malloc_r+0x296>
60012e48:	09ab      	lsrs	r3, r5, #6
60012e4a:	f103 0c39 	add.w	ip, r3, #57	; 0x39
60012e4e:	f103 0438 	add.w	r4, r3, #56	; 0x38
60012e52:	ea4f 03cc 	mov.w	r3, ip, lsl #3
60012e56:	4fa1      	ldr	r7, [pc, #644]	; (600130dc <_malloc_r+0x314>)
60012e58:	443b      	add	r3, r7
60012e5a:	f1a3 0008 	sub.w	r0, r3, #8
60012e5e:	685b      	ldr	r3, [r3, #4]
60012e60:	4298      	cmp	r0, r3
60012e62:	d106      	bne.n	60012e72 <_malloc_r+0xaa>
60012e64:	e00c      	b.n	60012e80 <_malloc_r+0xb8>
60012e66:	2900      	cmp	r1, #0
60012e68:	f280 80c0 	bge.w	60012fec <_malloc_r+0x224>
60012e6c:	68db      	ldr	r3, [r3, #12]
60012e6e:	4298      	cmp	r0, r3
60012e70:	d006      	beq.n	60012e80 <_malloc_r+0xb8>
60012e72:	685a      	ldr	r2, [r3, #4]
60012e74:	f022 0203 	bic.w	r2, r2, #3
60012e78:	1b51      	subs	r1, r2, r5
60012e7a:	290f      	cmp	r1, #15
60012e7c:	ddf3      	ble.n	60012e66 <_malloc_r+0x9e>
60012e7e:	46a4      	mov	ip, r4
60012e80:	f8df 825c 	ldr.w	r8, [pc, #604]	; 600130e0 <_malloc_r+0x318>
60012e84:	693c      	ldr	r4, [r7, #16]
60012e86:	4544      	cmp	r4, r8
60012e88:	f000 809d 	beq.w	60012fc6 <_malloc_r+0x1fe>
60012e8c:	6863      	ldr	r3, [r4, #4]
60012e8e:	f023 0903 	bic.w	r9, r3, #3
60012e92:	eba9 0305 	sub.w	r3, r9, r5
60012e96:	2b0f      	cmp	r3, #15
60012e98:	f300 812d 	bgt.w	600130f6 <_malloc_r+0x32e>
60012e9c:	2b00      	cmp	r3, #0
60012e9e:	e9c7 8804 	strd	r8, r8, [r7, #16]
60012ea2:	f280 810e 	bge.w	600130c2 <_malloc_r+0x2fa>
60012ea6:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
60012eaa:	f8d7 e004 	ldr.w	lr, [r7, #4]
60012eae:	f080 80b6 	bcs.w	6001301e <_malloc_r+0x256>
60012eb2:	ea4f 01d9 	mov.w	r1, r9, lsr #3
60012eb6:	3101      	adds	r1, #1
60012eb8:	ea4f 1959 	mov.w	r9, r9, lsr #5
60012ebc:	2301      	movs	r3, #1
60012ebe:	fa03 f309 	lsl.w	r3, r3, r9
60012ec2:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
60012ec6:	60a2      	str	r2, [r4, #8]
60012ec8:	ea4e 0e03 	orr.w	lr, lr, r3
60012ecc:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
60012ed0:	3b08      	subs	r3, #8
60012ed2:	60e3      	str	r3, [r4, #12]
60012ed4:	f8c7 e004 	str.w	lr, [r7, #4]
60012ed8:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
60012edc:	60d4      	str	r4, [r2, #12]
60012ede:	ea4f 03ac 	mov.w	r3, ip, asr #2
60012ee2:	2001      	movs	r0, #1
60012ee4:	4098      	lsls	r0, r3
60012ee6:	4570      	cmp	r0, lr
60012ee8:	d833      	bhi.n	60012f52 <_malloc_r+0x18a>
60012eea:	ea10 0f0e 	tst.w	r0, lr
60012eee:	d107      	bne.n	60012f00 <_malloc_r+0x138>
60012ef0:	f02c 0c03 	bic.w	ip, ip, #3
60012ef4:	0040      	lsls	r0, r0, #1
60012ef6:	ea10 0f0e 	tst.w	r0, lr
60012efa:	f10c 0c04 	add.w	ip, ip, #4
60012efe:	d0f9      	beq.n	60012ef4 <_malloc_r+0x12c>
60012f00:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
60012f04:	4653      	mov	r3, sl
60012f06:	46e1      	mov	r9, ip
60012f08:	68d9      	ldr	r1, [r3, #12]
60012f0a:	e00e      	b.n	60012f2a <_malloc_r+0x162>
60012f0c:	684a      	ldr	r2, [r1, #4]
60012f0e:	f022 0203 	bic.w	r2, r2, #3
60012f12:	eba2 0e05 	sub.w	lr, r2, r5
60012f16:	f1be 0f0f 	cmp.w	lr, #15
60012f1a:	460c      	mov	r4, r1
60012f1c:	68c9      	ldr	r1, [r1, #12]
60012f1e:	f300 80ac 	bgt.w	6001307a <_malloc_r+0x2b2>
60012f22:	f1be 0f00 	cmp.w	lr, #0
60012f26:	f280 80bf 	bge.w	600130a8 <_malloc_r+0x2e0>
60012f2a:	428b      	cmp	r3, r1
60012f2c:	d1ee      	bne.n	60012f0c <_malloc_r+0x144>
60012f2e:	f109 0901 	add.w	r9, r9, #1
60012f32:	f019 0f03 	tst.w	r9, #3
60012f36:	f103 0308 	add.w	r3, r3, #8
60012f3a:	d1e5      	bne.n	60012f08 <_malloc_r+0x140>
60012f3c:	e123      	b.n	60013186 <_malloc_r+0x3be>
60012f3e:	230c      	movs	r3, #12
60012f40:	6033      	str	r3, [r6, #0]
60012f42:	2400      	movs	r4, #0
60012f44:	e769      	b.n	60012e1a <_malloc_r+0x52>
60012f46:	f44f 7300 	mov.w	r3, #512	; 0x200
60012f4a:	f04f 0c40 	mov.w	ip, #64	; 0x40
60012f4e:	243f      	movs	r4, #63	; 0x3f
60012f50:	e781      	b.n	60012e56 <_malloc_r+0x8e>
60012f52:	68bc      	ldr	r4, [r7, #8]
60012f54:	6863      	ldr	r3, [r4, #4]
60012f56:	f023 0803 	bic.w	r8, r3, #3
60012f5a:	45a8      	cmp	r8, r5
60012f5c:	d303      	bcc.n	60012f66 <_malloc_r+0x19e>
60012f5e:	eba8 0305 	sub.w	r3, r8, r5
60012f62:	2b0f      	cmp	r3, #15
60012f64:	dc32      	bgt.n	60012fcc <_malloc_r+0x204>
60012f66:	4b5f      	ldr	r3, [pc, #380]	; (600130e4 <_malloc_r+0x31c>)
60012f68:	681a      	ldr	r2, [r3, #0]
60012f6a:	4b5f      	ldr	r3, [pc, #380]	; (600130e8 <_malloc_r+0x320>)
60012f6c:	6819      	ldr	r1, [r3, #0]
60012f6e:	3101      	adds	r1, #1
60012f70:	442a      	add	r2, r5
60012f72:	eb04 0a08 	add.w	sl, r4, r8
60012f76:	f000 816b 	beq.w	60013250 <_malloc_r+0x488>
60012f7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
60012f7e:	320f      	adds	r2, #15
60012f80:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
60012f84:	f022 020f 	bic.w	r2, r2, #15
60012f88:	4611      	mov	r1, r2
60012f8a:	4630      	mov	r0, r6
60012f8c:	9200      	str	r2, [sp, #0]
60012f8e:	f000 fa49 	bl	60013424 <_sbrk_r>
60012f92:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
60012f96:	9a00      	ldr	r2, [sp, #0]
60012f98:	4b53      	ldr	r3, [pc, #332]	; (600130e8 <_malloc_r+0x320>)
60012f9a:	4681      	mov	r9, r0
60012f9c:	d005      	beq.n	60012faa <_malloc_r+0x1e2>
60012f9e:	4582      	cmp	sl, r0
60012fa0:	f240 80c4 	bls.w	6001312c <_malloc_r+0x364>
60012fa4:	42bc      	cmp	r4, r7
60012fa6:	f000 8104 	beq.w	600131b2 <_malloc_r+0x3ea>
60012faa:	68bc      	ldr	r4, [r7, #8]
60012fac:	6862      	ldr	r2, [r4, #4]
60012fae:	f022 0203 	bic.w	r2, r2, #3
60012fb2:	42aa      	cmp	r2, r5
60012fb4:	eba2 0305 	sub.w	r3, r2, r5
60012fb8:	d301      	bcc.n	60012fbe <_malloc_r+0x1f6>
60012fba:	2b0f      	cmp	r3, #15
60012fbc:	dc06      	bgt.n	60012fcc <_malloc_r+0x204>
60012fbe:	4630      	mov	r0, r6
60012fc0:	f000 fa16 	bl	600133f0 <__malloc_unlock>
60012fc4:	e7bd      	b.n	60012f42 <_malloc_r+0x17a>
60012fc6:	f8d7 e004 	ldr.w	lr, [r7, #4]
60012fca:	e788      	b.n	60012ede <_malloc_r+0x116>
60012fcc:	1962      	adds	r2, r4, r5
60012fce:	f043 0301 	orr.w	r3, r3, #1
60012fd2:	f045 0501 	orr.w	r5, r5, #1
60012fd6:	6065      	str	r5, [r4, #4]
60012fd8:	4630      	mov	r0, r6
60012fda:	60ba      	str	r2, [r7, #8]
60012fdc:	6053      	str	r3, [r2, #4]
60012fde:	f000 fa07 	bl	600133f0 <__malloc_unlock>
60012fe2:	3408      	adds	r4, #8
60012fe4:	4620      	mov	r0, r4
60012fe6:	b003      	add	sp, #12
60012fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60012fec:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
60012ff0:	441a      	add	r2, r3
60012ff2:	60e1      	str	r1, [r4, #12]
60012ff4:	608c      	str	r4, [r1, #8]
60012ff6:	6851      	ldr	r1, [r2, #4]
60012ff8:	f041 0101 	orr.w	r1, r1, #1
60012ffc:	4630      	mov	r0, r6
60012ffe:	6051      	str	r1, [r2, #4]
60013000:	f103 0408 	add.w	r4, r3, #8
60013004:	f000 f9f4 	bl	600133f0 <__malloc_unlock>
60013008:	4620      	mov	r0, r4
6001300a:	b003      	add	sp, #12
6001300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60013010:	68d4      	ldr	r4, [r2, #12]
60013012:	42a2      	cmp	r2, r4
60013014:	f47f aef1 	bne.w	60012dfa <_malloc_r+0x32>
60013018:	f10c 0c02 	add.w	ip, ip, #2
6001301c:	e730      	b.n	60012e80 <_malloc_r+0xb8>
6001301e:	f5b9 6f20 	cmp.w	r9, #2560	; 0xa00
60013022:	ea4f 2259 	mov.w	r2, r9, lsr #9
60013026:	d37a      	bcc.n	6001311e <_malloc_r+0x356>
60013028:	2a14      	cmp	r2, #20
6001302a:	f200 812d 	bhi.w	60013288 <_malloc_r+0x4c0>
6001302e:	f102 035c 	add.w	r3, r2, #92	; 0x5c
60013032:	00db      	lsls	r3, r3, #3
60013034:	325b      	adds	r2, #91	; 0x5b
60013036:	18f9      	adds	r1, r7, r3
60013038:	58fb      	ldr	r3, [r7, r3]
6001303a:	3908      	subs	r1, #8
6001303c:	4299      	cmp	r1, r3
6001303e:	d103      	bne.n	60013048 <_malloc_r+0x280>
60013040:	e108      	b.n	60013254 <_malloc_r+0x48c>
60013042:	689b      	ldr	r3, [r3, #8]
60013044:	4299      	cmp	r1, r3
60013046:	d004      	beq.n	60013052 <_malloc_r+0x28a>
60013048:	685a      	ldr	r2, [r3, #4]
6001304a:	f022 0203 	bic.w	r2, r2, #3
6001304e:	454a      	cmp	r2, r9
60013050:	d8f7      	bhi.n	60013042 <_malloc_r+0x27a>
60013052:	68d9      	ldr	r1, [r3, #12]
60013054:	e9c4 3102 	strd	r3, r1, [r4, #8]
60013058:	608c      	str	r4, [r1, #8]
6001305a:	60dc      	str	r4, [r3, #12]
6001305c:	e73f      	b.n	60012ede <_malloc_r+0x116>
6001305e:	2b14      	cmp	r3, #20
60013060:	f240 8085 	bls.w	6001316e <_malloc_r+0x3a6>
60013064:	2b54      	cmp	r3, #84	; 0x54
60013066:	f200 8118 	bhi.w	6001329a <_malloc_r+0x4d2>
6001306a:	0b2b      	lsrs	r3, r5, #12
6001306c:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
60013070:	f103 046e 	add.w	r4, r3, #110	; 0x6e
60013074:	ea4f 03cc 	mov.w	r3, ip, lsl #3
60013078:	e6ed      	b.n	60012e56 <_malloc_r+0x8e>
6001307a:	4630      	mov	r0, r6
6001307c:	68a6      	ldr	r6, [r4, #8]
6001307e:	1963      	adds	r3, r4, r5
60013080:	f045 0501 	orr.w	r5, r5, #1
60013084:	6065      	str	r5, [r4, #4]
60013086:	60f1      	str	r1, [r6, #12]
60013088:	608e      	str	r6, [r1, #8]
6001308a:	f04e 0101 	orr.w	r1, lr, #1
6001308e:	e9c7 3304 	strd	r3, r3, [r7, #16]
60013092:	f8c3 8008 	str.w	r8, [r3, #8]
60013096:	f8c3 800c 	str.w	r8, [r3, #12]
6001309a:	6059      	str	r1, [r3, #4]
6001309c:	f844 e002 	str.w	lr, [r4, r2]
600130a0:	f000 f9a6 	bl	600133f0 <__malloc_unlock>
600130a4:	3408      	adds	r4, #8
600130a6:	e6b8      	b.n	60012e1a <_malloc_r+0x52>
600130a8:	4422      	add	r2, r4
600130aa:	4630      	mov	r0, r6
600130ac:	6853      	ldr	r3, [r2, #4]
600130ae:	f043 0301 	orr.w	r3, r3, #1
600130b2:	6053      	str	r3, [r2, #4]
600130b4:	f854 3f08 	ldr.w	r3, [r4, #8]!
600130b8:	60d9      	str	r1, [r3, #12]
600130ba:	608b      	str	r3, [r1, #8]
600130bc:	f000 f998 	bl	600133f0 <__malloc_unlock>
600130c0:	e6ab      	b.n	60012e1a <_malloc_r+0x52>
600130c2:	44a1      	add	r9, r4
600130c4:	4630      	mov	r0, r6
600130c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
600130ca:	f043 0301 	orr.w	r3, r3, #1
600130ce:	f8c9 3004 	str.w	r3, [r9, #4]
600130d2:	3408      	adds	r4, #8
600130d4:	f000 f98c 	bl	600133f0 <__malloc_unlock>
600130d8:	e69f      	b.n	60012e1a <_malloc_r+0x52>
600130da:	bf00      	nop
600130dc:	202025a8 	.word	0x202025a8
600130e0:	202025b0 	.word	0x202025b0
600130e4:	20204e10 	.word	0x20204e10
600130e8:	20203144 	.word	0x20203144
600130ec:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
600130f0:	f105 0208 	add.w	r2, r5, #8
600130f4:	e679      	b.n	60012dea <_malloc_r+0x22>
600130f6:	1962      	adds	r2, r4, r5
600130f8:	f043 0101 	orr.w	r1, r3, #1
600130fc:	f045 0501 	orr.w	r5, r5, #1
60013100:	6065      	str	r5, [r4, #4]
60013102:	4630      	mov	r0, r6
60013104:	e9c7 2204 	strd	r2, r2, [r7, #16]
60013108:	f8c2 8008 	str.w	r8, [r2, #8]
6001310c:	f8c2 800c 	str.w	r8, [r2, #12]
60013110:	6051      	str	r1, [r2, #4]
60013112:	f844 3009 	str.w	r3, [r4, r9]
60013116:	f000 f96b 	bl	600133f0 <__malloc_unlock>
6001311a:	3408      	adds	r4, #8
6001311c:	e67d      	b.n	60012e1a <_malloc_r+0x52>
6001311e:	ea4f 1299 	mov.w	r2, r9, lsr #6
60013122:	f102 0339 	add.w	r3, r2, #57	; 0x39
60013126:	00db      	lsls	r3, r3, #3
60013128:	3238      	adds	r2, #56	; 0x38
6001312a:	e784      	b.n	60013036 <_malloc_r+0x26e>
6001312c:	f8df b204 	ldr.w	fp, [pc, #516]	; 60013334 <_malloc_r+0x56c>
60013130:	f8db 1000 	ldr.w	r1, [fp]
60013134:	4411      	add	r1, r2
60013136:	f8cb 1000 	str.w	r1, [fp]
6001313a:	4608      	mov	r0, r1
6001313c:	d140      	bne.n	600131c0 <_malloc_r+0x3f8>
6001313e:	f3c9 0c0b 	ubfx	ip, r9, #0, #12
60013142:	f1bc 0f00 	cmp.w	ip, #0
60013146:	d13b      	bne.n	600131c0 <_malloc_r+0x3f8>
60013148:	f8d7 9008 	ldr.w	r9, [r7, #8]
6001314c:	4442      	add	r2, r8
6001314e:	f042 0201 	orr.w	r2, r2, #1
60013152:	f8c9 2004 	str.w	r2, [r9, #4]
60013156:	4b78      	ldr	r3, [pc, #480]	; (60013338 <_malloc_r+0x570>)
60013158:	6818      	ldr	r0, [r3, #0]
6001315a:	4288      	cmp	r0, r1
6001315c:	bf38      	it	cc
6001315e:	6019      	strcc	r1, [r3, #0]
60013160:	4b76      	ldr	r3, [pc, #472]	; (6001333c <_malloc_r+0x574>)
60013162:	6818      	ldr	r0, [r3, #0]
60013164:	4288      	cmp	r0, r1
60013166:	bf38      	it	cc
60013168:	6019      	strcc	r1, [r3, #0]
6001316a:	464c      	mov	r4, r9
6001316c:	e71f      	b.n	60012fae <_malloc_r+0x1e6>
6001316e:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
60013172:	f103 045b 	add.w	r4, r3, #91	; 0x5b
60013176:	ea4f 03cc 	mov.w	r3, ip, lsl #3
6001317a:	e66c      	b.n	60012e56 <_malloc_r+0x8e>
6001317c:	f85a 3908 	ldr.w	r3, [sl], #-8
60013180:	4553      	cmp	r3, sl
60013182:	f040 80d5 	bne.w	60013330 <_malloc_r+0x568>
60013186:	f01c 0f03 	tst.w	ip, #3
6001318a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
6001318e:	d1f5      	bne.n	6001317c <_malloc_r+0x3b4>
60013190:	687b      	ldr	r3, [r7, #4]
60013192:	ea23 0300 	bic.w	r3, r3, r0
60013196:	607b      	str	r3, [r7, #4]
60013198:	0040      	lsls	r0, r0, #1
6001319a:	4298      	cmp	r0, r3
6001319c:	f63f aed9 	bhi.w	60012f52 <_malloc_r+0x18a>
600131a0:	b918      	cbnz	r0, 600131aa <_malloc_r+0x3e2>
600131a2:	e6d6      	b.n	60012f52 <_malloc_r+0x18a>
600131a4:	0040      	lsls	r0, r0, #1
600131a6:	f109 0904 	add.w	r9, r9, #4
600131aa:	4218      	tst	r0, r3
600131ac:	d0fa      	beq.n	600131a4 <_malloc_r+0x3dc>
600131ae:	46cc      	mov	ip, r9
600131b0:	e6a6      	b.n	60012f00 <_malloc_r+0x138>
600131b2:	f8df b180 	ldr.w	fp, [pc, #384]	; 60013334 <_malloc_r+0x56c>
600131b6:	f8db 0000 	ldr.w	r0, [fp]
600131ba:	4410      	add	r0, r2
600131bc:	f8cb 0000 	str.w	r0, [fp]
600131c0:	6819      	ldr	r1, [r3, #0]
600131c2:	3101      	adds	r1, #1
600131c4:	bf1b      	ittet	ne
600131c6:	eba9 030a 	subne.w	r3, r9, sl
600131ca:	181b      	addne	r3, r3, r0
600131cc:	f8c3 9000 	streq.w	r9, [r3]
600131d0:	f8cb 3000 	strne.w	r3, [fp]
600131d4:	f019 0307 	ands.w	r3, r9, #7
600131d8:	d045      	beq.n	60013266 <_malloc_r+0x49e>
600131da:	f1c3 0108 	rsb	r1, r3, #8
600131de:	4489      	add	r9, r1
600131e0:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
600131e4:	444a      	add	r2, r9
600131e6:	3108      	adds	r1, #8
600131e8:	1a89      	subs	r1, r1, r2
600131ea:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
600131ee:	4651      	mov	r1, sl
600131f0:	4630      	mov	r0, r6
600131f2:	9301      	str	r3, [sp, #4]
600131f4:	9200      	str	r2, [sp, #0]
600131f6:	f000 f915 	bl	60013424 <_sbrk_r>
600131fa:	1c42      	adds	r2, r0, #1
600131fc:	e9dd 2300 	ldrd	r2, r3, [sp]
60013200:	d07a      	beq.n	600132f8 <_malloc_r+0x530>
60013202:	eba0 0009 	sub.w	r0, r0, r9
60013206:	eb00 020a 	add.w	r2, r0, sl
6001320a:	f8db 3000 	ldr.w	r3, [fp]
6001320e:	f8c7 9008 	str.w	r9, [r7, #8]
60013212:	f042 0201 	orr.w	r2, r2, #1
60013216:	eb0a 0103 	add.w	r1, sl, r3
6001321a:	42bc      	cmp	r4, r7
6001321c:	f8c9 2004 	str.w	r2, [r9, #4]
60013220:	f8cb 1000 	str.w	r1, [fp]
60013224:	d097      	beq.n	60013156 <_malloc_r+0x38e>
60013226:	f1b8 0f0f 	cmp.w	r8, #15
6001322a:	d941      	bls.n	600132b0 <_malloc_r+0x4e8>
6001322c:	6862      	ldr	r2, [r4, #4]
6001322e:	f1a8 030c 	sub.w	r3, r8, #12
60013232:	f023 0307 	bic.w	r3, r3, #7
60013236:	f002 0201 	and.w	r2, r2, #1
6001323a:	431a      	orrs	r2, r3
6001323c:	6062      	str	r2, [r4, #4]
6001323e:	18e2      	adds	r2, r4, r3
60013240:	2005      	movs	r0, #5
60013242:	2b0f      	cmp	r3, #15
60013244:	6050      	str	r0, [r2, #4]
60013246:	6090      	str	r0, [r2, #8]
60013248:	d84c      	bhi.n	600132e4 <_malloc_r+0x51c>
6001324a:	f8d9 2004 	ldr.w	r2, [r9, #4]
6001324e:	e782      	b.n	60013156 <_malloc_r+0x38e>
60013250:	3210      	adds	r2, #16
60013252:	e699      	b.n	60012f88 <_malloc_r+0x1c0>
60013254:	1092      	asrs	r2, r2, #2
60013256:	2001      	movs	r0, #1
60013258:	fa00 f202 	lsl.w	r2, r0, r2
6001325c:	ea4e 0e02 	orr.w	lr, lr, r2
60013260:	f8c7 e004 	str.w	lr, [r7, #4]
60013264:	e6f6      	b.n	60013054 <_malloc_r+0x28c>
60013266:	eb09 0102 	add.w	r1, r9, r2
6001326a:	4249      	negs	r1, r1
6001326c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
60013270:	4651      	mov	r1, sl
60013272:	4630      	mov	r0, r6
60013274:	9301      	str	r3, [sp, #4]
60013276:	9200      	str	r2, [sp, #0]
60013278:	f000 f8d4 	bl	60013424 <_sbrk_r>
6001327c:	1c43      	adds	r3, r0, #1
6001327e:	e9dd 2300 	ldrd	r2, r3, [sp]
60013282:	d1be      	bne.n	60013202 <_malloc_r+0x43a>
60013284:	469a      	mov	sl, r3
60013286:	e7c0      	b.n	6001320a <_malloc_r+0x442>
60013288:	2a54      	cmp	r2, #84	; 0x54
6001328a:	d815      	bhi.n	600132b8 <_malloc_r+0x4f0>
6001328c:	ea4f 3219 	mov.w	r2, r9, lsr #12
60013290:	f102 036f 	add.w	r3, r2, #111	; 0x6f
60013294:	00db      	lsls	r3, r3, #3
60013296:	326e      	adds	r2, #110	; 0x6e
60013298:	e6cd      	b.n	60013036 <_malloc_r+0x26e>
6001329a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
6001329e:	d815      	bhi.n	600132cc <_malloc_r+0x504>
600132a0:	0beb      	lsrs	r3, r5, #15
600132a2:	f103 0c78 	add.w	ip, r3, #120	; 0x78
600132a6:	f103 0477 	add.w	r4, r3, #119	; 0x77
600132aa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
600132ae:	e5d2      	b.n	60012e56 <_malloc_r+0x8e>
600132b0:	2301      	movs	r3, #1
600132b2:	f8c9 3004 	str.w	r3, [r9, #4]
600132b6:	e682      	b.n	60012fbe <_malloc_r+0x1f6>
600132b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
600132bc:	d823      	bhi.n	60013306 <_malloc_r+0x53e>
600132be:	ea4f 32d9 	mov.w	r2, r9, lsr #15
600132c2:	f102 0378 	add.w	r3, r2, #120	; 0x78
600132c6:	00db      	lsls	r3, r3, #3
600132c8:	3277      	adds	r2, #119	; 0x77
600132ca:	e6b4      	b.n	60013036 <_malloc_r+0x26e>
600132cc:	f240 5254 	movw	r2, #1364	; 0x554
600132d0:	4293      	cmp	r3, r2
600132d2:	d823      	bhi.n	6001331c <_malloc_r+0x554>
600132d4:	0cab      	lsrs	r3, r5, #18
600132d6:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
600132da:	f103 047c 	add.w	r4, r3, #124	; 0x7c
600132de:	ea4f 03cc 	mov.w	r3, ip, lsl #3
600132e2:	e5b8      	b.n	60012e56 <_malloc_r+0x8e>
600132e4:	f104 0108 	add.w	r1, r4, #8
600132e8:	4630      	mov	r0, r6
600132ea:	f002 fffb 	bl	600162e4 <_free_r>
600132ee:	f8d7 9008 	ldr.w	r9, [r7, #8]
600132f2:	f8db 1000 	ldr.w	r1, [fp]
600132f6:	e7a8      	b.n	6001324a <_malloc_r+0x482>
600132f8:	3b08      	subs	r3, #8
600132fa:	441a      	add	r2, r3
600132fc:	eba2 0209 	sub.w	r2, r2, r9
60013300:	f04f 0a00 	mov.w	sl, #0
60013304:	e781      	b.n	6001320a <_malloc_r+0x442>
60013306:	f240 5354 	movw	r3, #1364	; 0x554
6001330a:	429a      	cmp	r2, r3
6001330c:	d80c      	bhi.n	60013328 <_malloc_r+0x560>
6001330e:	ea4f 4299 	mov.w	r2, r9, lsr #18
60013312:	f102 037d 	add.w	r3, r2, #125	; 0x7d
60013316:	00db      	lsls	r3, r3, #3
60013318:	327c      	adds	r2, #124	; 0x7c
6001331a:	e68c      	b.n	60013036 <_malloc_r+0x26e>
6001331c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
60013320:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
60013324:	247e      	movs	r4, #126	; 0x7e
60013326:	e596      	b.n	60012e56 <_malloc_r+0x8e>
60013328:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
6001332c:	227e      	movs	r2, #126	; 0x7e
6001332e:	e682      	b.n	60013036 <_malloc_r+0x26e>
60013330:	687b      	ldr	r3, [r7, #4]
60013332:	e731      	b.n	60013198 <_malloc_r+0x3d0>
60013334:	20204de0 	.word	0x20204de0
60013338:	20204e0c 	.word	0x20204e0c
6001333c:	20204e08 	.word	0x20204e08

60013340 <memset>:
60013340:	0783      	lsls	r3, r0, #30
60013342:	b530      	push	{r4, r5, lr}
60013344:	d047      	beq.n	600133d6 <memset+0x96>
60013346:	1e54      	subs	r4, r2, #1
60013348:	2a00      	cmp	r2, #0
6001334a:	d03e      	beq.n	600133ca <memset+0x8a>
6001334c:	b2ca      	uxtb	r2, r1
6001334e:	4603      	mov	r3, r0
60013350:	e001      	b.n	60013356 <memset+0x16>
60013352:	3c01      	subs	r4, #1
60013354:	d339      	bcc.n	600133ca <memset+0x8a>
60013356:	f803 2b01 	strb.w	r2, [r3], #1
6001335a:	079d      	lsls	r5, r3, #30
6001335c:	d1f9      	bne.n	60013352 <memset+0x12>
6001335e:	2c03      	cmp	r4, #3
60013360:	d92c      	bls.n	600133bc <memset+0x7c>
60013362:	b2cd      	uxtb	r5, r1
60013364:	eb05 2505 	add.w	r5, r5, r5, lsl #8
60013368:	2c0f      	cmp	r4, #15
6001336a:	eb05 4505 	add.w	r5, r5, r5, lsl #16
6001336e:	d935      	bls.n	600133dc <memset+0x9c>
60013370:	f1a4 0210 	sub.w	r2, r4, #16
60013374:	f022 0c0f 	bic.w	ip, r2, #15
60013378:	f103 0e10 	add.w	lr, r3, #16
6001337c:	44e6      	add	lr, ip
6001337e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
60013382:	461a      	mov	r2, r3
60013384:	6015      	str	r5, [r2, #0]
60013386:	6055      	str	r5, [r2, #4]
60013388:	6095      	str	r5, [r2, #8]
6001338a:	60d5      	str	r5, [r2, #12]
6001338c:	3210      	adds	r2, #16
6001338e:	4572      	cmp	r2, lr
60013390:	d1f8      	bne.n	60013384 <memset+0x44>
60013392:	f10c 0201 	add.w	r2, ip, #1
60013396:	f014 0f0c 	tst.w	r4, #12
6001339a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
6001339e:	f004 0c0f 	and.w	ip, r4, #15
600133a2:	d013      	beq.n	600133cc <memset+0x8c>
600133a4:	f1ac 0304 	sub.w	r3, ip, #4
600133a8:	f023 0303 	bic.w	r3, r3, #3
600133ac:	3304      	adds	r3, #4
600133ae:	4413      	add	r3, r2
600133b0:	f842 5b04 	str.w	r5, [r2], #4
600133b4:	429a      	cmp	r2, r3
600133b6:	d1fb      	bne.n	600133b0 <memset+0x70>
600133b8:	f00c 0403 	and.w	r4, ip, #3
600133bc:	b12c      	cbz	r4, 600133ca <memset+0x8a>
600133be:	b2c9      	uxtb	r1, r1
600133c0:	441c      	add	r4, r3
600133c2:	f803 1b01 	strb.w	r1, [r3], #1
600133c6:	429c      	cmp	r4, r3
600133c8:	d1fb      	bne.n	600133c2 <memset+0x82>
600133ca:	bd30      	pop	{r4, r5, pc}
600133cc:	4664      	mov	r4, ip
600133ce:	4613      	mov	r3, r2
600133d0:	2c00      	cmp	r4, #0
600133d2:	d1f4      	bne.n	600133be <memset+0x7e>
600133d4:	e7f9      	b.n	600133ca <memset+0x8a>
600133d6:	4603      	mov	r3, r0
600133d8:	4614      	mov	r4, r2
600133da:	e7c0      	b.n	6001335e <memset+0x1e>
600133dc:	461a      	mov	r2, r3
600133de:	46a4      	mov	ip, r4
600133e0:	e7e0      	b.n	600133a4 <memset+0x64>
600133e2:	bf00      	nop

600133e4 <__malloc_lock>:
600133e4:	4801      	ldr	r0, [pc, #4]	; (600133ec <__malloc_lock+0x8>)
600133e6:	f7f8 b957 	b.w	6000b698 <__retarget_lock_acquire_recursive>
600133ea:	bf00      	nop
600133ec:	20203468 	.word	0x20203468

600133f0 <__malloc_unlock>:
600133f0:	4801      	ldr	r0, [pc, #4]	; (600133f8 <__malloc_unlock+0x8>)
600133f2:	f7f8 b96d 	b.w	6000b6d0 <__retarget_lock_release_recursive>
600133f6:	bf00      	nop
600133f8:	20203468 	.word	0x20203468

600133fc <printf>:
600133fc:	b40f      	push	{r0, r1, r2, r3}
600133fe:	b500      	push	{lr}
60013400:	4907      	ldr	r1, [pc, #28]	; (60013420 <printf+0x24>)
60013402:	b083      	sub	sp, #12
60013404:	ab04      	add	r3, sp, #16
60013406:	6808      	ldr	r0, [r1, #0]
60013408:	f853 2b04 	ldr.w	r2, [r3], #4
6001340c:	6881      	ldr	r1, [r0, #8]
6001340e:	9301      	str	r3, [sp, #4]
60013410:	f000 ff48 	bl	600142a4 <_vfprintf_r>
60013414:	b003      	add	sp, #12
60013416:	f85d eb04 	ldr.w	lr, [sp], #4
6001341a:	b004      	add	sp, #16
6001341c:	4770      	bx	lr
6001341e:	bf00      	nop
60013420:	20203140 	.word	0x20203140

60013424 <_sbrk_r>:
60013424:	b538      	push	{r3, r4, r5, lr}
60013426:	4d07      	ldr	r5, [pc, #28]	; (60013444 <_sbrk_r+0x20>)
60013428:	2200      	movs	r2, #0
6001342a:	4604      	mov	r4, r0
6001342c:	4608      	mov	r0, r1
6001342e:	602a      	str	r2, [r5, #0]
60013430:	f7f8 f8d6 	bl	6000b5e0 <_sbrk>
60013434:	1c43      	adds	r3, r0, #1
60013436:	d000      	beq.n	6001343a <_sbrk_r+0x16>
60013438:	bd38      	pop	{r3, r4, r5, pc}
6001343a:	682b      	ldr	r3, [r5, #0]
6001343c:	2b00      	cmp	r3, #0
6001343e:	d0fb      	beq.n	60013438 <_sbrk_r+0x14>
60013440:	6023      	str	r3, [r4, #0]
60013442:	bd38      	pop	{r3, r4, r5, pc}
60013444:	20204e14 	.word	0x20204e14

60013448 <strnlen>:
60013448:	b171      	cbz	r1, 60013468 <strnlen+0x20>
6001344a:	4603      	mov	r3, r0
6001344c:	eb00 0c01 	add.w	ip, r0, r1
60013450:	e001      	b.n	60013456 <strnlen+0xe>
60013452:	4563      	cmp	r3, ip
60013454:	d006      	beq.n	60013464 <strnlen+0x1c>
60013456:	461a      	mov	r2, r3
60013458:	3301      	adds	r3, #1
6001345a:	7811      	ldrb	r1, [r2, #0]
6001345c:	2900      	cmp	r1, #0
6001345e:	d1f8      	bne.n	60013452 <strnlen+0xa>
60013460:	1a10      	subs	r0, r2, r0
60013462:	4770      	bx	lr
60013464:	1a18      	subs	r0, r3, r0
60013466:	4770      	bx	lr
60013468:	4608      	mov	r0, r1
6001346a:	4770      	bx	lr

6001346c <__sprint_r>:
6001346c:	6893      	ldr	r3, [r2, #8]
6001346e:	b510      	push	{r4, lr}
60013470:	4614      	mov	r4, r2
60013472:	b91b      	cbnz	r3, 6001347c <__sprint_r+0x10>
60013474:	4618      	mov	r0, r3
60013476:	2300      	movs	r3, #0
60013478:	6063      	str	r3, [r4, #4]
6001347a:	bd10      	pop	{r4, pc}
6001347c:	f003 f830 	bl	600164e0 <__sfvwrite_r>
60013480:	2300      	movs	r3, #0
60013482:	60a3      	str	r3, [r4, #8]
60013484:	2300      	movs	r3, #0
60013486:	6063      	str	r3, [r4, #4]
60013488:	bd10      	pop	{r4, pc}
6001348a:	bf00      	nop

6001348c <_vfiprintf_r>:
6001348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60013490:	b0bd      	sub	sp, #244	; 0xf4
60013492:	e9cd 0306 	strd	r0, r3, [sp, #24]
60013496:	461c      	mov	r4, r3
60013498:	9104      	str	r1, [sp, #16]
6001349a:	4691      	mov	r9, r2
6001349c:	b118      	cbz	r0, 600134a6 <_vfiprintf_r+0x1a>
6001349e:	6b83      	ldr	r3, [r0, #56]	; 0x38
600134a0:	2b00      	cmp	r3, #0
600134a2:	f000 8235 	beq.w	60013910 <_vfiprintf_r+0x484>
600134a6:	9a04      	ldr	r2, [sp, #16]
600134a8:	6e53      	ldr	r3, [r2, #100]	; 0x64
600134aa:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
600134ae:	07d8      	lsls	r0, r3, #31
600134b0:	d402      	bmi.n	600134b8 <_vfiprintf_r+0x2c>
600134b2:	0591      	lsls	r1, r2, #22
600134b4:	f140 85b0 	bpl.w	60014018 <_vfiprintf_r+0xb8c>
600134b8:	0713      	lsls	r3, r2, #28
600134ba:	f140 80ee 	bpl.w	6001369a <_vfiprintf_r+0x20e>
600134be:	9b04      	ldr	r3, [sp, #16]
600134c0:	691b      	ldr	r3, [r3, #16]
600134c2:	2b00      	cmp	r3, #0
600134c4:	f000 80e9 	beq.w	6001369a <_vfiprintf_r+0x20e>
600134c8:	f002 031a 	and.w	r3, r2, #26
600134cc:	2b0a      	cmp	r3, #10
600134ce:	f000 80f3 	beq.w	600136b8 <_vfiprintf_r+0x22c>
600134d2:	ab13      	add	r3, sp, #76	; 0x4c
600134d4:	9310      	str	r3, [sp, #64]	; 0x40
600134d6:	2300      	movs	r3, #0
600134d8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
600134dc:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
600134e0:	9309      	str	r3, [sp, #36]	; 0x24
600134e2:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
600134e6:	930a      	str	r3, [sp, #40]	; 0x28
600134e8:	9303      	str	r3, [sp, #12]
600134ea:	f899 3000 	ldrb.w	r3, [r9]
600134ee:	2b00      	cmp	r3, #0
600134f0:	f000 81c3 	beq.w	6001387a <_vfiprintf_r+0x3ee>
600134f4:	464c      	mov	r4, r9
600134f6:	e004      	b.n	60013502 <_vfiprintf_r+0x76>
600134f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
600134fc:	2b00      	cmp	r3, #0
600134fe:	f000 80f9 	beq.w	600136f4 <_vfiprintf_r+0x268>
60013502:	2b25      	cmp	r3, #37	; 0x25
60013504:	d1f8      	bne.n	600134f8 <_vfiprintf_r+0x6c>
60013506:	ebb4 0509 	subs.w	r5, r4, r9
6001350a:	f040 80f7 	bne.w	600136fc <_vfiprintf_r+0x270>
6001350e:	7823      	ldrb	r3, [r4, #0]
60013510:	2b00      	cmp	r3, #0
60013512:	f000 81b2 	beq.w	6001387a <_vfiprintf_r+0x3ee>
60013516:	f04f 0300 	mov.w	r3, #0
6001351a:	f04f 0b00 	mov.w	fp, #0
6001351e:	7862      	ldrb	r2, [r4, #1]
60013520:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
60013524:	f8cd b008 	str.w	fp, [sp, #8]
60013528:	f104 0901 	add.w	r9, r4, #1
6001352c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
60013530:	f109 0901 	add.w	r9, r9, #1
60013534:	f1a2 0320 	sub.w	r3, r2, #32
60013538:	2b5a      	cmp	r3, #90	; 0x5a
6001353a:	f200 810c 	bhi.w	60013756 <_vfiprintf_r+0x2ca>
6001353e:	e8df f013 	tbh	[pc, r3, lsl #1]
60013542:	02ef      	.short	0x02ef
60013544:	010a010a 	.word	0x010a010a
60013548:	010a02ea 	.word	0x010a02ea
6001354c:	010a010a 	.word	0x010a010a
60013550:	010a006a 	.word	0x010a006a
60013554:	02df010a 	.word	0x02df010a
60013558:	010a02d9 	.word	0x010a02d9
6001355c:	02c000d4 	.word	0x02c000d4
60013560:	02bb010a 	.word	0x02bb010a
60013564:	005b005b 	.word	0x005b005b
60013568:	005b005b 	.word	0x005b005b
6001356c:	005b005b 	.word	0x005b005b
60013570:	005b005b 	.word	0x005b005b
60013574:	010a005b 	.word	0x010a005b
60013578:	010a010a 	.word	0x010a010a
6001357c:	010a010a 	.word	0x010a010a
60013580:	010a010a 	.word	0x010a010a
60013584:	010a010a 	.word	0x010a010a
60013588:	008501d9 	.word	0x008501d9
6001358c:	010a010a 	.word	0x010a010a
60013590:	010a010a 	.word	0x010a010a
60013594:	010a010a 	.word	0x010a010a
60013598:	010a010a 	.word	0x010a010a
6001359c:	010a010a 	.word	0x010a010a
600135a0:	010a0247 	.word	0x010a0247
600135a4:	010a010a 	.word	0x010a010a
600135a8:	010a01bc 	.word	0x010a01bc
600135ac:	010a0211 	.word	0x010a0211
600135b0:	0573010a 	.word	0x0573010a
600135b4:	010a010a 	.word	0x010a010a
600135b8:	010a010a 	.word	0x010a010a
600135bc:	010a010a 	.word	0x010a010a
600135c0:	010a010a 	.word	0x010a010a
600135c4:	010a010a 	.word	0x010a010a
600135c8:	008701d9 	.word	0x008701d9
600135cc:	010a010a 	.word	0x010a010a
600135d0:	02ae010a 	.word	0x02ae010a
600135d4:	00800087 	.word	0x00800087
600135d8:	02a1010a 	.word	0x02a1010a
600135dc:	0293010a 	.word	0x0293010a
600135e0:	02fa0569 	.word	0x02fa0569
600135e4:	010a0080 	.word	0x010a0080
600135e8:	007d01bc 	.word	0x007d01bc
600135ec:	010a0567 	.word	0x010a0567
600135f0:	0591010a 	.word	0x0591010a
600135f4:	007d010a 	.word	0x007d010a
600135f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
600135fc:	2100      	movs	r1, #0
600135fe:	f819 2b01 	ldrb.w	r2, [r9], #1
60013602:	eb01 0181 	add.w	r1, r1, r1, lsl #2
60013606:	eb03 0141 	add.w	r1, r3, r1, lsl #1
6001360a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
6001360e:	2b09      	cmp	r3, #9
60013610:	d9f5      	bls.n	600135fe <_vfiprintf_r+0x172>
60013612:	9102      	str	r1, [sp, #8]
60013614:	e78e      	b.n	60013534 <_vfiprintf_r+0xa8>
60013616:	9d06      	ldr	r5, [sp, #24]
60013618:	4628      	mov	r0, r5
6001361a:	f003 f901 	bl	60016820 <_localeconv_r>
6001361e:	6843      	ldr	r3, [r0, #4]
60013620:	930b      	str	r3, [sp, #44]	; 0x2c
60013622:	4618      	mov	r0, r3
60013624:	f7ee fe4c 	bl	600022c0 <strlen>
60013628:	900c      	str	r0, [sp, #48]	; 0x30
6001362a:	4604      	mov	r4, r0
6001362c:	4628      	mov	r0, r5
6001362e:	f003 f8f7 	bl	60016820 <_localeconv_r>
60013632:	6883      	ldr	r3, [r0, #8]
60013634:	930a      	str	r3, [sp, #40]	; 0x28
60013636:	2c00      	cmp	r4, #0
60013638:	f040 84cb 	bne.w	60013fd2 <_vfiprintf_r+0xb46>
6001363c:	f899 2000 	ldrb.w	r2, [r9]
60013640:	e776      	b.n	60013530 <_vfiprintf_r+0xa4>
60013642:	f899 2000 	ldrb.w	r2, [r9]
60013646:	f04b 0b20 	orr.w	fp, fp, #32
6001364a:	e771      	b.n	60013530 <_vfiprintf_r+0xa4>
6001364c:	f04b 0b10 	orr.w	fp, fp, #16
60013650:	f01b 0f20 	tst.w	fp, #32
60013654:	f000 8122 	beq.w	6001389c <_vfiprintf_r+0x410>
60013658:	9b07      	ldr	r3, [sp, #28]
6001365a:	3307      	adds	r3, #7
6001365c:	f023 0307 	bic.w	r3, r3, #7
60013660:	4619      	mov	r1, r3
60013662:	685a      	ldr	r2, [r3, #4]
60013664:	f851 3b08 	ldr.w	r3, [r1], #8
60013668:	9107      	str	r1, [sp, #28]
6001366a:	4611      	mov	r1, r2
6001366c:	2a00      	cmp	r2, #0
6001366e:	f2c0 815b 	blt.w	60013928 <_vfiprintf_r+0x49c>
60013672:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
60013676:	f000 8162 	beq.w	6001393e <_vfiprintf_r+0x4b2>
6001367a:	ea53 0201 	orrs.w	r2, r3, r1
6001367e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
60013682:	f040 815c 	bne.w	6001393e <_vfiprintf_r+0x4b2>
60013686:	f1b8 0f00 	cmp.w	r8, #0
6001368a:	f040 857c 	bne.w	60014186 <_vfiprintf_r+0xcfa>
6001368e:	f8cd 8004 	str.w	r8, [sp, #4]
60013692:	f8cd 8014 	str.w	r8, [sp, #20]
60013696:	ac3c      	add	r4, sp, #240	; 0xf0
60013698:	e191      	b.n	600139be <_vfiprintf_r+0x532>
6001369a:	9d04      	ldr	r5, [sp, #16]
6001369c:	9806      	ldr	r0, [sp, #24]
6001369e:	4629      	mov	r1, r5
600136a0:	f002 fb90 	bl	60015dc4 <__swsetup_r>
600136a4:	2800      	cmp	r0, #0
600136a6:	f040 8593 	bne.w	600141d0 <_vfiprintf_r+0xd44>
600136aa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
600136ae:	f002 031a 	and.w	r3, r2, #26
600136b2:	2b0a      	cmp	r3, #10
600136b4:	f47f af0d 	bne.w	600134d2 <_vfiprintf_r+0x46>
600136b8:	9904      	ldr	r1, [sp, #16]
600136ba:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
600136be:	2b00      	cmp	r3, #0
600136c0:	f6ff af07 	blt.w	600134d2 <_vfiprintf_r+0x46>
600136c4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
600136c6:	07dd      	lsls	r5, r3, #31
600136c8:	d402      	bmi.n	600136d0 <_vfiprintf_r+0x244>
600136ca:	0590      	lsls	r0, r2, #22
600136cc:	f140 855e 	bpl.w	6001418c <_vfiprintf_r+0xd00>
600136d0:	9904      	ldr	r1, [sp, #16]
600136d2:	9806      	ldr	r0, [sp, #24]
600136d4:	4623      	mov	r3, r4
600136d6:	464a      	mov	r2, r9
600136d8:	b03d      	add	sp, #244	; 0xf4
600136da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600136de:	f000 bda1 	b.w	60014224 <__sbprintf>
600136e2:	9a02      	ldr	r2, [sp, #8]
600136e4:	9307      	str	r3, [sp, #28]
600136e6:	4252      	negs	r2, r2
600136e8:	9202      	str	r2, [sp, #8]
600136ea:	f899 2000 	ldrb.w	r2, [r9]
600136ee:	f04b 0b04 	orr.w	fp, fp, #4
600136f2:	e71d      	b.n	60013530 <_vfiprintf_r+0xa4>
600136f4:	ebb4 0509 	subs.w	r5, r4, r9
600136f8:	f000 80bf 	beq.w	6001387a <_vfiprintf_r+0x3ee>
600136fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
600136fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
60013700:	3301      	adds	r3, #1
60013702:	442a      	add	r2, r5
60013704:	2b07      	cmp	r3, #7
60013706:	e9ca 9500 	strd	r9, r5, [sl]
6001370a:	9212      	str	r2, [sp, #72]	; 0x48
6001370c:	9311      	str	r3, [sp, #68]	; 0x44
6001370e:	dc05      	bgt.n	6001371c <_vfiprintf_r+0x290>
60013710:	f10a 0a08 	add.w	sl, sl, #8
60013714:	9b03      	ldr	r3, [sp, #12]
60013716:	442b      	add	r3, r5
60013718:	9303      	str	r3, [sp, #12]
6001371a:	e6f8      	b.n	6001350e <_vfiprintf_r+0x82>
6001371c:	b91a      	cbnz	r2, 60013726 <_vfiprintf_r+0x29a>
6001371e:	9211      	str	r2, [sp, #68]	; 0x44
60013720:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60013724:	e7f6      	b.n	60013714 <_vfiprintf_r+0x288>
60013726:	9904      	ldr	r1, [sp, #16]
60013728:	9806      	ldr	r0, [sp, #24]
6001372a:	aa10      	add	r2, sp, #64	; 0x40
6001372c:	f002 fed8 	bl	600164e0 <__sfvwrite_r>
60013730:	2300      	movs	r3, #0
60013732:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60013736:	2800      	cmp	r0, #0
60013738:	d0f2      	beq.n	60013720 <_vfiprintf_r+0x294>
6001373a:	9b04      	ldr	r3, [sp, #16]
6001373c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
6001373e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
60013742:	07d1      	lsls	r1, r2, #31
60013744:	f140 80a0 	bpl.w	60013888 <_vfiprintf_r+0x3fc>
60013748:	065b      	lsls	r3, r3, #25
6001374a:	f100 854d 	bmi.w	600141e8 <_vfiprintf_r+0xd5c>
6001374e:	9803      	ldr	r0, [sp, #12]
60013750:	b03d      	add	sp, #244	; 0xf4
60013752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60013756:	2a00      	cmp	r2, #0
60013758:	f000 808f 	beq.w	6001387a <_vfiprintf_r+0x3ee>
6001375c:	2300      	movs	r3, #0
6001375e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
60013762:	2301      	movs	r3, #1
60013764:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
60013768:	9301      	str	r3, [sp, #4]
6001376a:	9305      	str	r3, [sp, #20]
6001376c:	ac23      	add	r4, sp, #140	; 0x8c
6001376e:	f04f 0800 	mov.w	r8, #0
60013772:	f01b 0602 	ands.w	r6, fp, #2
60013776:	d002      	beq.n	6001377e <_vfiprintf_r+0x2f2>
60013778:	9b01      	ldr	r3, [sp, #4]
6001377a:	3302      	adds	r3, #2
6001377c:	9301      	str	r3, [sp, #4]
6001377e:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	; 0x44
60013782:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
60013786:	f102 0c01 	add.w	ip, r2, #1
6001378a:	4661      	mov	r1, ip
6001378c:	9308      	str	r3, [sp, #32]
6001378e:	d105      	bne.n	6001379c <_vfiprintf_r+0x310>
60013790:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
60013794:	1b5d      	subs	r5, r3, r5
60013796:	2d00      	cmp	r5, #0
60013798:	f300 8336 	bgt.w	60013e08 <_vfiprintf_r+0x97c>
6001379c:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
600137a0:	2d00      	cmp	r5, #0
600137a2:	f000 81fb 	beq.w	60013b9c <_vfiprintf_r+0x710>
600137a6:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
600137aa:	3001      	adds	r0, #1
600137ac:	f8ca 2000 	str.w	r2, [sl]
600137b0:	2907      	cmp	r1, #7
600137b2:	f04f 0201 	mov.w	r2, #1
600137b6:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
600137ba:	f8ca 2004 	str.w	r2, [sl, #4]
600137be:	f340 81e9 	ble.w	60013b94 <_vfiprintf_r+0x708>
600137c2:	b148      	cbz	r0, 600137d8 <_vfiprintf_r+0x34c>
600137c4:	aa10      	add	r2, sp, #64	; 0x40
600137c6:	9904      	ldr	r1, [sp, #16]
600137c8:	9806      	ldr	r0, [sp, #24]
600137ca:	f002 fe89 	bl	600164e0 <__sfvwrite_r>
600137ce:	2200      	movs	r2, #0
600137d0:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
600137d4:	2800      	cmp	r0, #0
600137d6:	d1b0      	bne.n	6001373a <_vfiprintf_r+0x2ae>
600137d8:	2e00      	cmp	r6, #0
600137da:	f000 81f2 	beq.w	60013bc2 <_vfiprintf_r+0x736>
600137de:	2002      	movs	r0, #2
600137e0:	ab0f      	add	r3, sp, #60	; 0x3c
600137e2:	9014      	str	r0, [sp, #80]	; 0x50
600137e4:	9313      	str	r3, [sp, #76]	; 0x4c
600137e6:	2101      	movs	r1, #1
600137e8:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
600137ec:	460a      	mov	r2, r1
600137ee:	f10a 0a08 	add.w	sl, sl, #8
600137f2:	3101      	adds	r1, #1
600137f4:	9b08      	ldr	r3, [sp, #32]
600137f6:	2b80      	cmp	r3, #128	; 0x80
600137f8:	f000 81ed 	beq.w	60013bd6 <_vfiprintf_r+0x74a>
600137fc:	9b05      	ldr	r3, [sp, #20]
600137fe:	eba8 0703 	sub.w	r7, r8, r3
60013802:	2f00      	cmp	r7, #0
60013804:	f300 8230 	bgt.w	60013c68 <_vfiprintf_r+0x7dc>
60013808:	9b05      	ldr	r3, [sp, #20]
6001380a:	f8ca 4000 	str.w	r4, [sl]
6001380e:	4418      	add	r0, r3
60013810:	2907      	cmp	r1, #7
60013812:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60013816:	f8ca 3004 	str.w	r3, [sl, #4]
6001381a:	f340 8274 	ble.w	60013d06 <_vfiprintf_r+0x87a>
6001381e:	2800      	cmp	r0, #0
60013820:	f040 82cf 	bne.w	60013dc2 <_vfiprintf_r+0x936>
60013824:	9011      	str	r0, [sp, #68]	; 0x44
60013826:	f01b 0f04 	tst.w	fp, #4
6001382a:	f000 82ac 	beq.w	60013d86 <_vfiprintf_r+0x8fa>
6001382e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
60013832:	1a9c      	subs	r4, r3, r2
60013834:	2c00      	cmp	r4, #0
60013836:	9812      	ldr	r0, [sp, #72]	; 0x48
60013838:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
6001383c:	f300 826f 	bgt.w	60013d1e <_vfiprintf_r+0x892>
60013840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
60013844:	9901      	ldr	r1, [sp, #4]
60013846:	428a      	cmp	r2, r1
60013848:	bfac      	ite	ge
6001384a:	189b      	addge	r3, r3, r2
6001384c:	185b      	addlt	r3, r3, r1
6001384e:	9303      	str	r3, [sp, #12]
60013850:	b150      	cbz	r0, 60013868 <_vfiprintf_r+0x3dc>
60013852:	9904      	ldr	r1, [sp, #16]
60013854:	9806      	ldr	r0, [sp, #24]
60013856:	aa10      	add	r2, sp, #64	; 0x40
60013858:	f002 fe42 	bl	600164e0 <__sfvwrite_r>
6001385c:	2300      	movs	r3, #0
6001385e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60013862:	2800      	cmp	r0, #0
60013864:	f47f af69 	bne.w	6001373a <_vfiprintf_r+0x2ae>
60013868:	2300      	movs	r3, #0
6001386a:	9311      	str	r3, [sp, #68]	; 0x44
6001386c:	f899 3000 	ldrb.w	r3, [r9]
60013870:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60013874:	2b00      	cmp	r3, #0
60013876:	f47f ae3d 	bne.w	600134f4 <_vfiprintf_r+0x68>
6001387a:	9b12      	ldr	r3, [sp, #72]	; 0x48
6001387c:	2b00      	cmp	r3, #0
6001387e:	f040 8494 	bne.w	600141aa <_vfiprintf_r+0xd1e>
60013882:	2300      	movs	r3, #0
60013884:	9311      	str	r3, [sp, #68]	; 0x44
60013886:	e758      	b.n	6001373a <_vfiprintf_r+0x2ae>
60013888:	059a      	lsls	r2, r3, #22
6001388a:	f53f af5d 	bmi.w	60013748 <_vfiprintf_r+0x2bc>
6001388e:	9c04      	ldr	r4, [sp, #16]
60013890:	6da0      	ldr	r0, [r4, #88]	; 0x58
60013892:	f7f7 ff1d 	bl	6000b6d0 <__retarget_lock_release_recursive>
60013896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
6001389a:	e755      	b.n	60013748 <_vfiprintf_r+0x2bc>
6001389c:	9a07      	ldr	r2, [sp, #28]
6001389e:	f01b 0f10 	tst.w	fp, #16
600138a2:	f852 3b04 	ldr.w	r3, [r2], #4
600138a6:	9207      	str	r2, [sp, #28]
600138a8:	d139      	bne.n	6001391e <_vfiprintf_r+0x492>
600138aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
600138ae:	d032      	beq.n	60013916 <_vfiprintf_r+0x48a>
600138b0:	f343 31c0 	sbfx	r1, r3, #15, #1
600138b4:	460a      	mov	r2, r1
600138b6:	b21b      	sxth	r3, r3
600138b8:	e6d8      	b.n	6001366c <_vfiprintf_r+0x1e0>
600138ba:	9d07      	ldr	r5, [sp, #28]
600138bc:	f855 4b04 	ldr.w	r4, [r5], #4
600138c0:	2600      	movs	r6, #0
600138c2:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
600138c6:	2c00      	cmp	r4, #0
600138c8:	f000 8435 	beq.w	60014136 <_vfiprintf_r+0xcaa>
600138cc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
600138d0:	f000 83fd 	beq.w	600140ce <_vfiprintf_r+0xc42>
600138d4:	4642      	mov	r2, r8
600138d6:	4631      	mov	r1, r6
600138d8:	4620      	mov	r0, r4
600138da:	f7ee fed1 	bl	60002680 <memchr>
600138de:	2800      	cmp	r0, #0
600138e0:	f000 8459 	beq.w	60014196 <_vfiprintf_r+0xd0a>
600138e4:	1b03      	subs	r3, r0, r4
600138e6:	9305      	str	r3, [sp, #20]
600138e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
600138ec:	9507      	str	r5, [sp, #28]
600138ee:	46b0      	mov	r8, r6
600138f0:	9301      	str	r3, [sp, #4]
600138f2:	e064      	b.n	600139be <_vfiprintf_r+0x532>
600138f4:	9b07      	ldr	r3, [sp, #28]
600138f6:	2200      	movs	r2, #0
600138f8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
600138fc:	f853 2b04 	ldr.w	r2, [r3], #4
60013900:	9307      	str	r3, [sp, #28]
60013902:	2301      	movs	r3, #1
60013904:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
60013908:	9301      	str	r3, [sp, #4]
6001390a:	9305      	str	r3, [sp, #20]
6001390c:	ac23      	add	r4, sp, #140	; 0x8c
6001390e:	e72e      	b.n	6001376e <_vfiprintf_r+0x2e2>
60013910:	f002 fc14 	bl	6001613c <__sinit>
60013914:	e5c7      	b.n	600134a6 <_vfiprintf_r+0x1a>
60013916:	f41b 7f00 	tst.w	fp, #512	; 0x200
6001391a:	f040 8429 	bne.w	60014170 <_vfiprintf_r+0xce4>
6001391e:	17d9      	asrs	r1, r3, #31
60013920:	460a      	mov	r2, r1
60013922:	2a00      	cmp	r2, #0
60013924:	f6bf aea5 	bge.w	60013672 <_vfiprintf_r+0x1e6>
60013928:	425b      	negs	r3, r3
6001392a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
6001392e:	222d      	movs	r2, #45	; 0x2d
60013930:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
60013934:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
60013938:	d001      	beq.n	6001393e <_vfiprintf_r+0x4b2>
6001393a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
6001393e:	2b0a      	cmp	r3, #10
60013940:	f171 0200 	sbcs.w	r2, r1, #0
60013944:	f080 82e3 	bcs.w	60013f0e <_vfiprintf_r+0xa82>
60013948:	3330      	adds	r3, #48	; 0x30
6001394a:	b2db      	uxtb	r3, r3
6001394c:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
60013950:	4643      	mov	r3, r8
60013952:	2b01      	cmp	r3, #1
60013954:	bfb8      	it	lt
60013956:	2301      	movlt	r3, #1
60013958:	9301      	str	r3, [sp, #4]
6001395a:	2301      	movs	r3, #1
6001395c:	9305      	str	r3, [sp, #20]
6001395e:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
60013962:	e02c      	b.n	600139be <_vfiprintf_r+0x532>
60013964:	f04b 0210 	orr.w	r2, fp, #16
60013968:	f012 0120 	ands.w	r1, r2, #32
6001396c:	f000 82c0 	beq.w	60013ef0 <_vfiprintf_r+0xa64>
60013970:	9b07      	ldr	r3, [sp, #28]
60013972:	3307      	adds	r3, #7
60013974:	f023 0307 	bic.w	r3, r3, #7
60013978:	4618      	mov	r0, r3
6001397a:	6859      	ldr	r1, [r3, #4]
6001397c:	f850 3b08 	ldr.w	r3, [r0], #8
60013980:	9007      	str	r0, [sp, #28]
60013982:	2000      	movs	r0, #0
60013984:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
60013988:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
6001398c:	f000 83cc 	beq.w	60014128 <_vfiprintf_r+0xc9c>
60013990:	ea53 0001 	orrs.w	r0, r3, r1
60013994:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
60013998:	d1d1      	bne.n	6001393e <_vfiprintf_r+0x4b2>
6001399a:	2001      	movs	r0, #1
6001399c:	f1b8 0f00 	cmp.w	r8, #0
600139a0:	d138      	bne.n	60013a14 <_vfiprintf_r+0x588>
600139a2:	2800      	cmp	r0, #0
600139a4:	f47f ae73 	bne.w	6001368e <_vfiprintf_r+0x202>
600139a8:	f012 0201 	ands.w	r2, r2, #1
600139ac:	9205      	str	r2, [sp, #20]
600139ae:	f000 82fd 	beq.w	60013fac <_vfiprintf_r+0xb20>
600139b2:	2330      	movs	r3, #48	; 0x30
600139b4:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
600139b8:	9201      	str	r2, [sp, #4]
600139ba:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
600139be:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
600139c2:	2b00      	cmp	r3, #0
600139c4:	f43f aed5 	beq.w	60013772 <_vfiprintf_r+0x2e6>
600139c8:	9b01      	ldr	r3, [sp, #4]
600139ca:	3301      	adds	r3, #1
600139cc:	9301      	str	r3, [sp, #4]
600139ce:	e6d0      	b.n	60013772 <_vfiprintf_r+0x2e6>
600139d0:	f04b 0210 	orr.w	r2, fp, #16
600139d4:	f012 0120 	ands.w	r1, r2, #32
600139d8:	f000 827b 	beq.w	60013ed2 <_vfiprintf_r+0xa46>
600139dc:	9b07      	ldr	r3, [sp, #28]
600139de:	3307      	adds	r3, #7
600139e0:	f023 0307 	bic.w	r3, r3, #7
600139e4:	4618      	mov	r0, r3
600139e6:	6859      	ldr	r1, [r3, #4]
600139e8:	f850 3b08 	ldr.w	r3, [r0], #8
600139ec:	9007      	str	r0, [sp, #28]
600139ee:	2000      	movs	r0, #0
600139f0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
600139f4:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
600139f8:	f422 6b80 	bic.w	fp, r2, #1024	; 0x400
600139fc:	d012      	beq.n	60013a24 <_vfiprintf_r+0x598>
600139fe:	f422 6490 	bic.w	r4, r2, #1152	; 0x480
60013a02:	ea53 0201 	orrs.w	r2, r3, r1
60013a06:	f040 838d 	bne.w	60014124 <_vfiprintf_r+0xc98>
60013a0a:	465a      	mov	r2, fp
60013a0c:	46a3      	mov	fp, r4
60013a0e:	f1b8 0f00 	cmp.w	r8, #0
60013a12:	d0c6      	beq.n	600139a2 <_vfiprintf_r+0x516>
60013a14:	2801      	cmp	r0, #1
60013a16:	f000 83b6 	beq.w	60014186 <_vfiprintf_r+0xcfa>
60013a1a:	2300      	movs	r3, #0
60013a1c:	2802      	cmp	r0, #2
60013a1e:	4619      	mov	r1, r3
60013a20:	f000 81dc 	beq.w	60013ddc <_vfiprintf_r+0x950>
60013a24:	ac3c      	add	r4, sp, #240	; 0xf0
60013a26:	f003 0207 	and.w	r2, r3, #7
60013a2a:	08db      	lsrs	r3, r3, #3
60013a2c:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
60013a30:	08c9      	lsrs	r1, r1, #3
60013a32:	3230      	adds	r2, #48	; 0x30
60013a34:	ea53 0501 	orrs.w	r5, r3, r1
60013a38:	4620      	mov	r0, r4
60013a3a:	f804 2d01 	strb.w	r2, [r4, #-1]!
60013a3e:	d1f2      	bne.n	60013a26 <_vfiprintf_r+0x59a>
60013a40:	f01b 0f01 	tst.w	fp, #1
60013a44:	f000 81d8 	beq.w	60013df8 <_vfiprintf_r+0x96c>
60013a48:	2a30      	cmp	r2, #48	; 0x30
60013a4a:	f000 81d5 	beq.w	60013df8 <_vfiprintf_r+0x96c>
60013a4e:	2330      	movs	r3, #48	; 0x30
60013a50:	3802      	subs	r0, #2
60013a52:	f804 3c01 	strb.w	r3, [r4, #-1]
60013a56:	ab3c      	add	r3, sp, #240	; 0xf0
60013a58:	1a1b      	subs	r3, r3, r0
60013a5a:	4543      	cmp	r3, r8
60013a5c:	9305      	str	r3, [sp, #20]
60013a5e:	bfb8      	it	lt
60013a60:	4643      	movlt	r3, r8
60013a62:	4604      	mov	r4, r0
60013a64:	9301      	str	r3, [sp, #4]
60013a66:	e7aa      	b.n	600139be <_vfiprintf_r+0x532>
60013a68:	f01b 0f20 	tst.w	fp, #32
60013a6c:	f000 82bf 	beq.w	60013fee <_vfiprintf_r+0xb62>
60013a70:	9b07      	ldr	r3, [sp, #28]
60013a72:	9a03      	ldr	r2, [sp, #12]
60013a74:	681b      	ldr	r3, [r3, #0]
60013a76:	601a      	str	r2, [r3, #0]
60013a78:	17d2      	asrs	r2, r2, #31
60013a7a:	605a      	str	r2, [r3, #4]
60013a7c:	9b07      	ldr	r3, [sp, #28]
60013a7e:	3304      	adds	r3, #4
60013a80:	9307      	str	r3, [sp, #28]
60013a82:	e532      	b.n	600134ea <_vfiprintf_r+0x5e>
60013a84:	f899 2000 	ldrb.w	r2, [r9]
60013a88:	2a6c      	cmp	r2, #108	; 0x6c
60013a8a:	bf03      	ittte	eq
60013a8c:	f899 2001 	ldrbeq.w	r2, [r9, #1]
60013a90:	f04b 0b20 	orreq.w	fp, fp, #32
60013a94:	f109 0901 	addeq.w	r9, r9, #1
60013a98:	f04b 0b10 	orrne.w	fp, fp, #16
60013a9c:	e548      	b.n	60013530 <_vfiprintf_r+0xa4>
60013a9e:	f899 2000 	ldrb.w	r2, [r9]
60013aa2:	2a68      	cmp	r2, #104	; 0x68
60013aa4:	bf03      	ittte	eq
60013aa6:	f899 2001 	ldrbeq.w	r2, [r9, #1]
60013aaa:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
60013aae:	f109 0901 	addeq.w	r9, r9, #1
60013ab2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
60013ab6:	e53b      	b.n	60013530 <_vfiprintf_r+0xa4>
60013ab8:	f899 2000 	ldrb.w	r2, [r9]
60013abc:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
60013ac0:	e536      	b.n	60013530 <_vfiprintf_r+0xa4>
60013ac2:	4649      	mov	r1, r9
60013ac4:	f811 2b01 	ldrb.w	r2, [r1], #1
60013ac8:	2a2a      	cmp	r2, #42	; 0x2a
60013aca:	f000 839f 	beq.w	6001420c <_vfiprintf_r+0xd80>
60013ace:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
60013ad2:	2b09      	cmp	r3, #9
60013ad4:	4689      	mov	r9, r1
60013ad6:	f04f 0800 	mov.w	r8, #0
60013ada:	f63f ad2b 	bhi.w	60013534 <_vfiprintf_r+0xa8>
60013ade:	f819 2b01 	ldrb.w	r2, [r9], #1
60013ae2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
60013ae6:	eb03 0848 	add.w	r8, r3, r8, lsl #1
60013aea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
60013aee:	2b09      	cmp	r3, #9
60013af0:	d9f5      	bls.n	60013ade <_vfiprintf_r+0x652>
60013af2:	e51f      	b.n	60013534 <_vfiprintf_r+0xa8>
60013af4:	232b      	movs	r3, #43	; 0x2b
60013af6:	f899 2000 	ldrb.w	r2, [r9]
60013afa:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
60013afe:	e517      	b.n	60013530 <_vfiprintf_r+0xa4>
60013b00:	9b07      	ldr	r3, [sp, #28]
60013b02:	f853 2b04 	ldr.w	r2, [r3], #4
60013b06:	9202      	str	r2, [sp, #8]
60013b08:	2a00      	cmp	r2, #0
60013b0a:	f6ff adea 	blt.w	600136e2 <_vfiprintf_r+0x256>
60013b0e:	f899 2000 	ldrb.w	r2, [r9]
60013b12:	9307      	str	r3, [sp, #28]
60013b14:	e50c      	b.n	60013530 <_vfiprintf_r+0xa4>
60013b16:	f899 2000 	ldrb.w	r2, [r9]
60013b1a:	f04b 0b01 	orr.w	fp, fp, #1
60013b1e:	e507      	b.n	60013530 <_vfiprintf_r+0xa4>
60013b20:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
60013b24:	f899 2000 	ldrb.w	r2, [r9]
60013b28:	2b00      	cmp	r3, #0
60013b2a:	f47f ad01 	bne.w	60013530 <_vfiprintf_r+0xa4>
60013b2e:	2320      	movs	r3, #32
60013b30:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
60013b34:	e4fc      	b.n	60013530 <_vfiprintf_r+0xa4>
60013b36:	9a07      	ldr	r2, [sp, #28]
60013b38:	f852 3b04 	ldr.w	r3, [r2], #4
60013b3c:	9207      	str	r2, [sp, #28]
60013b3e:	f647 0230 	movw	r2, #30768	; 0x7830
60013b42:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
60013b46:	4ab7      	ldr	r2, [pc, #732]	; (60013e24 <_vfiprintf_r+0x998>)
60013b48:	9209      	str	r2, [sp, #36]	; 0x24
60013b4a:	f04b 0b02 	orr.w	fp, fp, #2
60013b4e:	2100      	movs	r1, #0
60013b50:	f04f 0200 	mov.w	r2, #0
60013b54:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
60013b58:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
60013b5c:	f000 813e 	beq.w	60013ddc <_vfiprintf_r+0x950>
60013b60:	ea53 0201 	orrs.w	r2, r3, r1
60013b64:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
60013b68:	f040 8137 	bne.w	60013dda <_vfiprintf_r+0x94e>
60013b6c:	465a      	mov	r2, fp
60013b6e:	4683      	mov	fp, r0
60013b70:	2002      	movs	r0, #2
60013b72:	e713      	b.n	6001399c <_vfiprintf_r+0x510>
60013b74:	2800      	cmp	r0, #0
60013b76:	f040 828b 	bne.w	60014090 <_vfiprintf_r+0xc04>
60013b7a:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
60013b7e:	2101      	movs	r1, #1
60013b80:	2a00      	cmp	r2, #0
60013b82:	f000 8281 	beq.w	60014088 <_vfiprintf_r+0xbfc>
60013b86:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
60013b8a:	9114      	str	r1, [sp, #80]	; 0x50
60013b8c:	9213      	str	r2, [sp, #76]	; 0x4c
60013b8e:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60013b92:	4608      	mov	r0, r1
60013b94:	460a      	mov	r2, r1
60013b96:	f10a 0a08 	add.w	sl, sl, #8
60013b9a:	3101      	adds	r1, #1
60013b9c:	2e00      	cmp	r6, #0
60013b9e:	f43f ae29 	beq.w	600137f4 <_vfiprintf_r+0x368>
60013ba2:	ab0f      	add	r3, sp, #60	; 0x3c
60013ba4:	3002      	adds	r0, #2
60013ba6:	f8ca 3000 	str.w	r3, [sl]
60013baa:	2907      	cmp	r1, #7
60013bac:	f04f 0302 	mov.w	r3, #2
60013bb0:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60013bb4:	f8ca 3004 	str.w	r3, [sl, #4]
60013bb8:	f77f ae18 	ble.w	600137ec <_vfiprintf_r+0x360>
60013bbc:	2800      	cmp	r0, #0
60013bbe:	f040 817c 	bne.w	60013eba <_vfiprintf_r+0xa2e>
60013bc2:	9b08      	ldr	r3, [sp, #32]
60013bc4:	2200      	movs	r2, #0
60013bc6:	2b80      	cmp	r3, #128	; 0x80
60013bc8:	f04f 0101 	mov.w	r1, #1
60013bcc:	4610      	mov	r0, r2
60013bce:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60013bd2:	f47f ae13 	bne.w	600137fc <_vfiprintf_r+0x370>
60013bd6:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
60013bda:	1b5f      	subs	r7, r3, r5
60013bdc:	2f00      	cmp	r7, #0
60013bde:	f77f ae0d 	ble.w	600137fc <_vfiprintf_r+0x370>
60013be2:	2f10      	cmp	r7, #16
60013be4:	f340 82f1 	ble.w	600141ca <_vfiprintf_r+0xd3e>
60013be8:	46d6      	mov	lr, sl
60013bea:	4d8f      	ldr	r5, [pc, #572]	; (60013e28 <_vfiprintf_r+0x99c>)
60013bec:	46ca      	mov	sl, r9
60013bee:	2600      	movs	r6, #0
60013bf0:	46c1      	mov	r9, r8
60013bf2:	46a0      	mov	r8, r4
60013bf4:	9c06      	ldr	r4, [sp, #24]
60013bf6:	e007      	b.n	60013c08 <_vfiprintf_r+0x77c>
60013bf8:	3f10      	subs	r7, #16
60013bfa:	2f10      	cmp	r7, #16
60013bfc:	f102 0c02 	add.w	ip, r2, #2
60013c00:	f10e 0e08 	add.w	lr, lr, #8
60013c04:	460a      	mov	r2, r1
60013c06:	dd17      	ble.n	60013c38 <_vfiprintf_r+0x7ac>
60013c08:	1c51      	adds	r1, r2, #1
60013c0a:	3010      	adds	r0, #16
60013c0c:	2310      	movs	r3, #16
60013c0e:	2907      	cmp	r1, #7
60013c10:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60013c14:	f8ce 5000 	str.w	r5, [lr]
60013c18:	f8ce 3004 	str.w	r3, [lr, #4]
60013c1c:	ddec      	ble.n	60013bf8 <_vfiprintf_r+0x76c>
60013c1e:	aa10      	add	r2, sp, #64	; 0x40
60013c20:	2800      	cmp	r0, #0
60013c22:	f040 80b9 	bne.w	60013d98 <_vfiprintf_r+0x90c>
60013c26:	3f10      	subs	r7, #16
60013c28:	2200      	movs	r2, #0
60013c2a:	2f10      	cmp	r7, #16
60013c2c:	f04f 0c01 	mov.w	ip, #1
60013c30:	4610      	mov	r0, r2
60013c32:	f10d 0e4c 	add.w	lr, sp, #76	; 0x4c
60013c36:	dce7      	bgt.n	60013c08 <_vfiprintf_r+0x77c>
60013c38:	4644      	mov	r4, r8
60013c3a:	46c8      	mov	r8, r9
60013c3c:	46d1      	mov	r9, sl
60013c3e:	46f2      	mov	sl, lr
60013c40:	4438      	add	r0, r7
60013c42:	f1bc 0f07 	cmp.w	ip, #7
60013c46:	e9ca 5700 	strd	r5, r7, [sl]
60013c4a:	e9cd c011 	strd	ip, r0, [sp, #68]	; 0x44
60013c4e:	f300 81b1 	bgt.w	60013fb4 <_vfiprintf_r+0xb28>
60013c52:	9b05      	ldr	r3, [sp, #20]
60013c54:	eba8 0703 	sub.w	r7, r8, r3
60013c58:	2f00      	cmp	r7, #0
60013c5a:	f10a 0a08 	add.w	sl, sl, #8
60013c5e:	f10c 0101 	add.w	r1, ip, #1
60013c62:	4662      	mov	r2, ip
60013c64:	f77f add0 	ble.w	60013808 <_vfiprintf_r+0x37c>
60013c68:	4d6f      	ldr	r5, [pc, #444]	; (60013e28 <_vfiprintf_r+0x99c>)
60013c6a:	2f10      	cmp	r7, #16
60013c6c:	dd2a      	ble.n	60013cc4 <_vfiprintf_r+0x838>
60013c6e:	462b      	mov	r3, r5
60013c70:	46d4      	mov	ip, sl
60013c72:	4625      	mov	r5, r4
60013c74:	9e06      	ldr	r6, [sp, #24]
60013c76:	f8dd a010 	ldr.w	sl, [sp, #16]
60013c7a:	f04f 0810 	mov.w	r8, #16
60013c7e:	461c      	mov	r4, r3
60013c80:	e007      	b.n	60013c92 <_vfiprintf_r+0x806>
60013c82:	3f10      	subs	r7, #16
60013c84:	2f10      	cmp	r7, #16
60013c86:	f102 0102 	add.w	r1, r2, #2
60013c8a:	f10c 0c08 	add.w	ip, ip, #8
60013c8e:	461a      	mov	r2, r3
60013c90:	dd14      	ble.n	60013cbc <_vfiprintf_r+0x830>
60013c92:	1c53      	adds	r3, r2, #1
60013c94:	3010      	adds	r0, #16
60013c96:	2b07      	cmp	r3, #7
60013c98:	e9cc 4800 	strd	r4, r8, [ip]
60013c9c:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
60013ca0:	ddef      	ble.n	60013c82 <_vfiprintf_r+0x7f6>
60013ca2:	aa10      	add	r2, sp, #64	; 0x40
60013ca4:	2800      	cmp	r0, #0
60013ca6:	f040 8081 	bne.w	60013dac <_vfiprintf_r+0x920>
60013caa:	3f10      	subs	r7, #16
60013cac:	2200      	movs	r2, #0
60013cae:	2f10      	cmp	r7, #16
60013cb0:	f04f 0101 	mov.w	r1, #1
60013cb4:	4610      	mov	r0, r2
60013cb6:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
60013cba:	dcea      	bgt.n	60013c92 <_vfiprintf_r+0x806>
60013cbc:	4623      	mov	r3, r4
60013cbe:	46e2      	mov	sl, ip
60013cc0:	462c      	mov	r4, r5
60013cc2:	461d      	mov	r5, r3
60013cc4:	4438      	add	r0, r7
60013cc6:	2907      	cmp	r1, #7
60013cc8:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60013ccc:	f8ca 5000 	str.w	r5, [sl]
60013cd0:	f8ca 7004 	str.w	r7, [sl, #4]
60013cd4:	dc03      	bgt.n	60013cde <_vfiprintf_r+0x852>
60013cd6:	f10a 0a08 	add.w	sl, sl, #8
60013cda:	3101      	adds	r1, #1
60013cdc:	e594      	b.n	60013808 <_vfiprintf_r+0x37c>
60013cde:	b150      	cbz	r0, 60013cf6 <_vfiprintf_r+0x86a>
60013ce0:	9904      	ldr	r1, [sp, #16]
60013ce2:	9806      	ldr	r0, [sp, #24]
60013ce4:	aa10      	add	r2, sp, #64	; 0x40
60013ce6:	f002 fbfb 	bl	600164e0 <__sfvwrite_r>
60013cea:	2300      	movs	r3, #0
60013cec:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60013cf0:	2800      	cmp	r0, #0
60013cf2:	f47f ad22 	bne.w	6001373a <_vfiprintf_r+0x2ae>
60013cf6:	9805      	ldr	r0, [sp, #20]
60013cf8:	9413      	str	r4, [sp, #76]	; 0x4c
60013cfa:	2301      	movs	r3, #1
60013cfc:	9014      	str	r0, [sp, #80]	; 0x50
60013cfe:	9012      	str	r0, [sp, #72]	; 0x48
60013d00:	9311      	str	r3, [sp, #68]	; 0x44
60013d02:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60013d06:	f01b 0f04 	tst.w	fp, #4
60013d0a:	f43f ad99 	beq.w	60013840 <_vfiprintf_r+0x3b4>
60013d0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
60013d12:	1a9c      	subs	r4, r3, r2
60013d14:	2c00      	cmp	r4, #0
60013d16:	f10a 0a08 	add.w	sl, sl, #8
60013d1a:	f77f ad91 	ble.w	60013840 <_vfiprintf_r+0x3b4>
60013d1e:	2c10      	cmp	r4, #16
60013d20:	9a11      	ldr	r2, [sp, #68]	; 0x44
60013d22:	f340 824f 	ble.w	600141c4 <_vfiprintf_r+0xd38>
60013d26:	4f41      	ldr	r7, [pc, #260]	; (60013e2c <_vfiprintf_r+0x9a0>)
60013d28:	9e06      	ldr	r6, [sp, #24]
60013d2a:	f8dd b010 	ldr.w	fp, [sp, #16]
60013d2e:	2510      	movs	r5, #16
60013d30:	f04f 0800 	mov.w	r8, #0
60013d34:	e007      	b.n	60013d46 <_vfiprintf_r+0x8ba>
60013d36:	3c10      	subs	r4, #16
60013d38:	2c10      	cmp	r4, #16
60013d3a:	f102 0102 	add.w	r1, r2, #2
60013d3e:	f10a 0a08 	add.w	sl, sl, #8
60013d42:	461a      	mov	r2, r3
60013d44:	dd14      	ble.n	60013d70 <_vfiprintf_r+0x8e4>
60013d46:	1c53      	adds	r3, r2, #1
60013d48:	3010      	adds	r0, #16
60013d4a:	2b07      	cmp	r3, #7
60013d4c:	e9ca 7500 	strd	r7, r5, [sl]
60013d50:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
60013d54:	ddef      	ble.n	60013d36 <_vfiprintf_r+0x8aa>
60013d56:	aa10      	add	r2, sp, #64	; 0x40
60013d58:	2800      	cmp	r0, #0
60013d5a:	f040 80a4 	bne.w	60013ea6 <_vfiprintf_r+0xa1a>
60013d5e:	3c10      	subs	r4, #16
60013d60:	2200      	movs	r2, #0
60013d62:	2c10      	cmp	r4, #16
60013d64:	f04f 0101 	mov.w	r1, #1
60013d68:	4610      	mov	r0, r2
60013d6a:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60013d6e:	dcea      	bgt.n	60013d46 <_vfiprintf_r+0x8ba>
60013d70:	4420      	add	r0, r4
60013d72:	2907      	cmp	r1, #7
60013d74:	e9ca 7400 	strd	r7, r4, [sl]
60013d78:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60013d7c:	f77f ad60 	ble.w	60013840 <_vfiprintf_r+0x3b4>
60013d80:	2800      	cmp	r0, #0
60013d82:	f040 8197 	bne.w	600140b4 <_vfiprintf_r+0xc28>
60013d86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
60013d8a:	9901      	ldr	r1, [sp, #4]
60013d8c:	428a      	cmp	r2, r1
60013d8e:	bfac      	ite	ge
60013d90:	189b      	addge	r3, r3, r2
60013d92:	185b      	addlt	r3, r3, r1
60013d94:	9303      	str	r3, [sp, #12]
60013d96:	e567      	b.n	60013868 <_vfiprintf_r+0x3dc>
60013d98:	9904      	ldr	r1, [sp, #16]
60013d9a:	4620      	mov	r0, r4
60013d9c:	f002 fba0 	bl	600164e0 <__sfvwrite_r>
60013da0:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
60013da4:	2800      	cmp	r0, #0
60013da6:	f43f af3e 	beq.w	60013c26 <_vfiprintf_r+0x79a>
60013daa:	e4c6      	b.n	6001373a <_vfiprintf_r+0x2ae>
60013dac:	4651      	mov	r1, sl
60013dae:	4630      	mov	r0, r6
60013db0:	f002 fb96 	bl	600164e0 <__sfvwrite_r>
60013db4:	2300      	movs	r3, #0
60013db6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60013dba:	2800      	cmp	r0, #0
60013dbc:	f43f af75 	beq.w	60013caa <_vfiprintf_r+0x81e>
60013dc0:	e4bb      	b.n	6001373a <_vfiprintf_r+0x2ae>
60013dc2:	9904      	ldr	r1, [sp, #16]
60013dc4:	9806      	ldr	r0, [sp, #24]
60013dc6:	aa10      	add	r2, sp, #64	; 0x40
60013dc8:	f002 fb8a 	bl	600164e0 <__sfvwrite_r>
60013dcc:	2300      	movs	r3, #0
60013dce:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60013dd2:	2800      	cmp	r0, #0
60013dd4:	f43f ad27 	beq.w	60013826 <_vfiprintf_r+0x39a>
60013dd8:	e4af      	b.n	6001373a <_vfiprintf_r+0x2ae>
60013dda:	4683      	mov	fp, r0
60013ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
60013dde:	ac3c      	add	r4, sp, #240	; 0xf0
60013de0:	f003 020f 	and.w	r2, r3, #15
60013de4:	091b      	lsrs	r3, r3, #4
60013de6:	5c82      	ldrb	r2, [r0, r2]
60013de8:	f804 2d01 	strb.w	r2, [r4, #-1]!
60013dec:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
60013df0:	0909      	lsrs	r1, r1, #4
60013df2:	ea53 0201 	orrs.w	r2, r3, r1
60013df6:	d1f3      	bne.n	60013de0 <_vfiprintf_r+0x954>
60013df8:	ab3c      	add	r3, sp, #240	; 0xf0
60013dfa:	1b1b      	subs	r3, r3, r4
60013dfc:	4543      	cmp	r3, r8
60013dfe:	9305      	str	r3, [sp, #20]
60013e00:	bfb8      	it	lt
60013e02:	4643      	movlt	r3, r8
60013e04:	9301      	str	r3, [sp, #4]
60013e06:	e5da      	b.n	600139be <_vfiprintf_r+0x532>
60013e08:	2d10      	cmp	r5, #16
60013e0a:	f340 81cb 	ble.w	600141a4 <_vfiprintf_r+0xd18>
60013e0e:	960d      	str	r6, [sp, #52]	; 0x34
60013e10:	46d4      	mov	ip, sl
60013e12:	4f06      	ldr	r7, [pc, #24]	; (60013e2c <_vfiprintf_r+0x9a0>)
60013e14:	9e04      	ldr	r6, [sp, #16]
60013e16:	46ca      	mov	sl, r9
60013e18:	2310      	movs	r3, #16
60013e1a:	46c1      	mov	r9, r8
60013e1c:	46a0      	mov	r8, r4
60013e1e:	9c08      	ldr	r4, [sp, #32]
60013e20:	e00f      	b.n	60013e42 <_vfiprintf_r+0x9b6>
60013e22:	bf00      	nop
60013e24:	6001bf4c 	.word	0x6001bf4c
60013e28:	6001bf68 	.word	0x6001bf68
60013e2c:	6001bf78 	.word	0x6001bf78
60013e30:	3d10      	subs	r5, #16
60013e32:	2d10      	cmp	r5, #16
60013e34:	f102 0e02 	add.w	lr, r2, #2
60013e38:	f10c 0c08 	add.w	ip, ip, #8
60013e3c:	460a      	mov	r2, r1
60013e3e:	dd13      	ble.n	60013e68 <_vfiprintf_r+0x9dc>
60013e40:	1c51      	adds	r1, r2, #1
60013e42:	3010      	adds	r0, #16
60013e44:	2907      	cmp	r1, #7
60013e46:	e9cc 7300 	strd	r7, r3, [ip]
60013e4a:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
60013e4e:	ddef      	ble.n	60013e30 <_vfiprintf_r+0x9a4>
60013e50:	aa10      	add	r2, sp, #64	; 0x40
60013e52:	4631      	mov	r1, r6
60013e54:	b9f0      	cbnz	r0, 60013e94 <_vfiprintf_r+0xa08>
60013e56:	3d10      	subs	r5, #16
60013e58:	2200      	movs	r2, #0
60013e5a:	2d10      	cmp	r5, #16
60013e5c:	f04f 0e01 	mov.w	lr, #1
60013e60:	4610      	mov	r0, r2
60013e62:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
60013e66:	dceb      	bgt.n	60013e40 <_vfiprintf_r+0x9b4>
60013e68:	9e0d      	ldr	r6, [sp, #52]	; 0x34
60013e6a:	4644      	mov	r4, r8
60013e6c:	46c8      	mov	r8, r9
60013e6e:	46d1      	mov	r9, sl
60013e70:	46e2      	mov	sl, ip
60013e72:	4428      	add	r0, r5
60013e74:	f1be 0f07 	cmp.w	lr, #7
60013e78:	e9cd e011 	strd	lr, r0, [sp, #68]	; 0x44
60013e7c:	f8ca 7000 	str.w	r7, [sl]
60013e80:	f8ca 5004 	str.w	r5, [sl, #4]
60013e84:	f73f ae76 	bgt.w	60013b74 <_vfiprintf_r+0x6e8>
60013e88:	f10a 0a08 	add.w	sl, sl, #8
60013e8c:	f10e 0101 	add.w	r1, lr, #1
60013e90:	4672      	mov	r2, lr
60013e92:	e483      	b.n	6001379c <_vfiprintf_r+0x310>
60013e94:	9806      	ldr	r0, [sp, #24]
60013e96:	f002 fb23 	bl	600164e0 <__sfvwrite_r>
60013e9a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
60013e9e:	2310      	movs	r3, #16
60013ea0:	2800      	cmp	r0, #0
60013ea2:	d0d8      	beq.n	60013e56 <_vfiprintf_r+0x9ca>
60013ea4:	e449      	b.n	6001373a <_vfiprintf_r+0x2ae>
60013ea6:	4659      	mov	r1, fp
60013ea8:	4630      	mov	r0, r6
60013eaa:	f002 fb19 	bl	600164e0 <__sfvwrite_r>
60013eae:	e9cd 8811 	strd	r8, r8, [sp, #68]	; 0x44
60013eb2:	2800      	cmp	r0, #0
60013eb4:	f43f af53 	beq.w	60013d5e <_vfiprintf_r+0x8d2>
60013eb8:	e43f      	b.n	6001373a <_vfiprintf_r+0x2ae>
60013eba:	9904      	ldr	r1, [sp, #16]
60013ebc:	9806      	ldr	r0, [sp, #24]
60013ebe:	aa10      	add	r2, sp, #64	; 0x40
60013ec0:	f002 fb0e 	bl	600164e0 <__sfvwrite_r>
60013ec4:	2300      	movs	r3, #0
60013ec6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
60013eca:	2800      	cmp	r0, #0
60013ecc:	f43f ae79 	beq.w	60013bc2 <_vfiprintf_r+0x736>
60013ed0:	e433      	b.n	6001373a <_vfiprintf_r+0x2ae>
60013ed2:	9807      	ldr	r0, [sp, #28]
60013ed4:	f850 3b04 	ldr.w	r3, [r0], #4
60013ed8:	9007      	str	r0, [sp, #28]
60013eda:	f012 0010 	ands.w	r0, r2, #16
60013ede:	f47f ad86 	bne.w	600139ee <_vfiprintf_r+0x562>
60013ee2:	f012 0440 	ands.w	r4, r2, #64	; 0x40
60013ee6:	f000 8136 	beq.w	60014156 <_vfiprintf_r+0xcca>
60013eea:	b29b      	uxth	r3, r3
60013eec:	4601      	mov	r1, r0
60013eee:	e57e      	b.n	600139ee <_vfiprintf_r+0x562>
60013ef0:	9807      	ldr	r0, [sp, #28]
60013ef2:	f850 3b04 	ldr.w	r3, [r0], #4
60013ef6:	9007      	str	r0, [sp, #28]
60013ef8:	f012 0010 	ands.w	r0, r2, #16
60013efc:	f47f ad41 	bne.w	60013982 <_vfiprintf_r+0x4f6>
60013f00:	f012 0440 	ands.w	r4, r2, #64	; 0x40
60013f04:	f000 812d 	beq.w	60014162 <_vfiprintf_r+0xcd6>
60013f08:	b29b      	uxth	r3, r3
60013f0a:	4601      	mov	r1, r0
60013f0c:	e539      	b.n	60013982 <_vfiprintf_r+0x4f6>
60013f0e:	f8cd 8014 	str.w	r8, [sp, #20]
60013f12:	4fb8      	ldr	r7, [pc, #736]	; (600141f4 <_vfiprintf_r+0xd68>)
60013f14:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
60013f18:	f8cd b004 	str.w	fp, [sp, #4]
60013f1c:	f40b 6680 	and.w	r6, fp, #1024	; 0x400
60013f20:	f04f 0c00 	mov.w	ip, #0
60013f24:	ac3c      	add	r4, sp, #240	; 0xf0
60013f26:	e005      	b.n	60013f34 <_vfiprintf_r+0xaa8>
60013f28:	2b0a      	cmp	r3, #10
60013f2a:	f171 0100 	sbcs.w	r1, r1, #0
60013f2e:	d336      	bcc.n	60013f9e <_vfiprintf_r+0xb12>
60013f30:	465b      	mov	r3, fp
60013f32:	4629      	mov	r1, r5
60013f34:	185a      	adds	r2, r3, r1
60013f36:	f142 0200 	adc.w	r2, r2, #0
60013f3a:	fba7 0502 	umull	r0, r5, r7, r2
60013f3e:	f025 0003 	bic.w	r0, r5, #3
60013f42:	eb00 0095 	add.w	r0, r0, r5, lsr #2
60013f46:	1a12      	subs	r2, r2, r0
60013f48:	1a98      	subs	r0, r3, r2
60013f4a:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
60013f4e:	f161 0e00 	sbc.w	lr, r1, #0
60013f52:	fb05 f500 	mul.w	r5, r5, r0
60013f56:	fb07 550e 	mla	r5, r7, lr, r5
60013f5a:	fba0 b007 	umull	fp, r0, r0, r7
60013f5e:	4405      	add	r5, r0
60013f60:	f00b 0e01 	and.w	lr, fp, #1
60013f64:	2005      	movs	r0, #5
60013f66:	fbae 0e00 	umull	r0, lr, lr, r0
60013f6a:	1880      	adds	r0, r0, r2
60013f6c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
60013f70:	3030      	adds	r0, #48	; 0x30
60013f72:	f804 0c01 	strb.w	r0, [r4, #-1]
60013f76:	ea4b 7bc5 	orr.w	fp, fp, r5, lsl #31
60013f7a:	f10c 0c01 	add.w	ip, ip, #1
60013f7e:	3c01      	subs	r4, #1
60013f80:	086d      	lsrs	r5, r5, #1
60013f82:	2e00      	cmp	r6, #0
60013f84:	d0d0      	beq.n	60013f28 <_vfiprintf_r+0xa9c>
60013f86:	f898 2000 	ldrb.w	r2, [r8]
60013f8a:	4562      	cmp	r2, ip
60013f8c:	d1cc      	bne.n	60013f28 <_vfiprintf_r+0xa9c>
60013f8e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
60013f92:	d0c9      	beq.n	60013f28 <_vfiprintf_r+0xa9c>
60013f94:	2b0a      	cmp	r3, #10
60013f96:	f171 0100 	sbcs.w	r1, r1, #0
60013f9a:	f080 80b4 	bcs.w	60014106 <_vfiprintf_r+0xc7a>
60013f9e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
60013fa2:	f8dd b004 	ldr.w	fp, [sp, #4]
60013fa6:	f8dd 8014 	ldr.w	r8, [sp, #20]
60013faa:	e725      	b.n	60013df8 <_vfiprintf_r+0x96c>
60013fac:	f8cd 8004 	str.w	r8, [sp, #4]
60013fb0:	ac3c      	add	r4, sp, #240	; 0xf0
60013fb2:	e504      	b.n	600139be <_vfiprintf_r+0x532>
60013fb4:	2800      	cmp	r0, #0
60013fb6:	f040 8094 	bne.w	600140e2 <_vfiprintf_r+0xc56>
60013fba:	9b05      	ldr	r3, [sp, #20]
60013fbc:	eba8 0703 	sub.w	r7, r8, r3
60013fc0:	2f00      	cmp	r7, #0
60013fc2:	f77f ae98 	ble.w	60013cf6 <_vfiprintf_r+0x86a>
60013fc6:	2000      	movs	r0, #0
60013fc8:	4602      	mov	r2, r0
60013fca:	2101      	movs	r1, #1
60013fcc:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
60013fd0:	e64b      	b.n	60013c6a <_vfiprintf_r+0x7de>
60013fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
60013fd4:	f899 2000 	ldrb.w	r2, [r9]
60013fd8:	2b00      	cmp	r3, #0
60013fda:	f43f aaa9 	beq.w	60013530 <_vfiprintf_r+0xa4>
60013fde:	781b      	ldrb	r3, [r3, #0]
60013fe0:	2b00      	cmp	r3, #0
60013fe2:	f43f aaa5 	beq.w	60013530 <_vfiprintf_r+0xa4>
60013fe6:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
60013fea:	f7ff baa1 	b.w	60013530 <_vfiprintf_r+0xa4>
60013fee:	f01b 0f10 	tst.w	fp, #16
60013ff2:	f040 809b 	bne.w	6001412c <_vfiprintf_r+0xca0>
60013ff6:	f01b 0f40 	tst.w	fp, #64	; 0x40
60013ffa:	f040 80bf 	bne.w	6001417c <_vfiprintf_r+0xcf0>
60013ffe:	f41b 7f00 	tst.w	fp, #512	; 0x200
60014002:	f000 8093 	beq.w	6001412c <_vfiprintf_r+0xca0>
60014006:	9b07      	ldr	r3, [sp, #28]
60014008:	9a03      	ldr	r2, [sp, #12]
6001400a:	681b      	ldr	r3, [r3, #0]
6001400c:	701a      	strb	r2, [r3, #0]
6001400e:	e535      	b.n	60013a7c <_vfiprintf_r+0x5f0>
60014010:	465a      	mov	r2, fp
60014012:	e4a9      	b.n	60013968 <_vfiprintf_r+0x4dc>
60014014:	465a      	mov	r2, fp
60014016:	e4dd      	b.n	600139d4 <_vfiprintf_r+0x548>
60014018:	9d04      	ldr	r5, [sp, #16]
6001401a:	6da8      	ldr	r0, [r5, #88]	; 0x58
6001401c:	f7f7 fb3c 	bl	6000b698 <__retarget_lock_acquire_recursive>
60014020:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
60014024:	f7ff ba48 	b.w	600134b8 <_vfiprintf_r+0x2c>
60014028:	4b73      	ldr	r3, [pc, #460]	; (600141f8 <_vfiprintf_r+0xd6c>)
6001402a:	9309      	str	r3, [sp, #36]	; 0x24
6001402c:	f01b 0120 	ands.w	r1, fp, #32
60014030:	d01d      	beq.n	6001406e <_vfiprintf_r+0xbe2>
60014032:	9b07      	ldr	r3, [sp, #28]
60014034:	3307      	adds	r3, #7
60014036:	f023 0307 	bic.w	r3, r3, #7
6001403a:	4618      	mov	r0, r3
6001403c:	6859      	ldr	r1, [r3, #4]
6001403e:	f850 3b08 	ldr.w	r3, [r0], #8
60014042:	9007      	str	r0, [sp, #28]
60014044:	f01b 0f01 	tst.w	fp, #1
60014048:	d009      	beq.n	6001405e <_vfiprintf_r+0xbd2>
6001404a:	ea53 0001 	orrs.w	r0, r3, r1
6001404e:	d006      	beq.n	6001405e <_vfiprintf_r+0xbd2>
60014050:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
60014054:	2230      	movs	r2, #48	; 0x30
60014056:	f04b 0b02 	orr.w	fp, fp, #2
6001405a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
6001405e:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
60014062:	e575      	b.n	60013b50 <_vfiprintf_r+0x6c4>
60014064:	4b65      	ldr	r3, [pc, #404]	; (600141fc <_vfiprintf_r+0xd70>)
60014066:	9309      	str	r3, [sp, #36]	; 0x24
60014068:	f01b 0120 	ands.w	r1, fp, #32
6001406c:	d1e1      	bne.n	60014032 <_vfiprintf_r+0xba6>
6001406e:	9807      	ldr	r0, [sp, #28]
60014070:	f850 3b04 	ldr.w	r3, [r0], #4
60014074:	9007      	str	r0, [sp, #28]
60014076:	f01b 0010 	ands.w	r0, fp, #16
6001407a:	d1e3      	bne.n	60014044 <_vfiprintf_r+0xbb8>
6001407c:	f01b 0440 	ands.w	r4, fp, #64	; 0x40
60014080:	d063      	beq.n	6001414a <_vfiprintf_r+0xcbe>
60014082:	b29b      	uxth	r3, r3
60014084:	4601      	mov	r1, r0
60014086:	e7dd      	b.n	60014044 <_vfiprintf_r+0xbb8>
60014088:	4610      	mov	r0, r2
6001408a:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
6001408e:	e585      	b.n	60013b9c <_vfiprintf_r+0x710>
60014090:	aa10      	add	r2, sp, #64	; 0x40
60014092:	9904      	ldr	r1, [sp, #16]
60014094:	9806      	ldr	r0, [sp, #24]
60014096:	f002 fa23 	bl	600164e0 <__sfvwrite_r>
6001409a:	2200      	movs	r2, #0
6001409c:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
600140a0:	2800      	cmp	r0, #0
600140a2:	f47f ab4a 	bne.w	6001373a <_vfiprintf_r+0x2ae>
600140a6:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
600140aa:	2101      	movs	r1, #1
600140ac:	2a00      	cmp	r2, #0
600140ae:	f47f ad6a 	bne.w	60013b86 <_vfiprintf_r+0x6fa>
600140b2:	e7e9      	b.n	60014088 <_vfiprintf_r+0xbfc>
600140b4:	9904      	ldr	r1, [sp, #16]
600140b6:	9806      	ldr	r0, [sp, #24]
600140b8:	aa10      	add	r2, sp, #64	; 0x40
600140ba:	f002 fa11 	bl	600164e0 <__sfvwrite_r>
600140be:	2300      	movs	r3, #0
600140c0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
600140c4:	2800      	cmp	r0, #0
600140c6:	f43f ae5e 	beq.w	60013d86 <_vfiprintf_r+0x8fa>
600140ca:	f7ff bb36 	b.w	6001373a <_vfiprintf_r+0x2ae>
600140ce:	4620      	mov	r0, r4
600140d0:	9507      	str	r5, [sp, #28]
600140d2:	f7ee f8f5 	bl	600022c0 <strlen>
600140d6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
600140da:	46b0      	mov	r8, r6
600140dc:	9005      	str	r0, [sp, #20]
600140de:	9301      	str	r3, [sp, #4]
600140e0:	e46d      	b.n	600139be <_vfiprintf_r+0x532>
600140e2:	9904      	ldr	r1, [sp, #16]
600140e4:	9806      	ldr	r0, [sp, #24]
600140e6:	aa10      	add	r2, sp, #64	; 0x40
600140e8:	f002 f9fa 	bl	600164e0 <__sfvwrite_r>
600140ec:	2300      	movs	r3, #0
600140ee:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
600140f2:	2800      	cmp	r0, #0
600140f4:	f47f ab21 	bne.w	6001373a <_vfiprintf_r+0x2ae>
600140f8:	9b05      	ldr	r3, [sp, #20]
600140fa:	eba8 0703 	sub.w	r7, r8, r3
600140fe:	2f00      	cmp	r7, #0
60014100:	f77f adf9 	ble.w	60013cf6 <_vfiprintf_r+0x86a>
60014104:	e75f      	b.n	60013fc6 <_vfiprintf_r+0xb3a>
60014106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
60014108:	990b      	ldr	r1, [sp, #44]	; 0x2c
6001410a:	1ae4      	subs	r4, r4, r3
6001410c:	461a      	mov	r2, r3
6001410e:	4620      	mov	r0, r4
60014110:	f003 fa8a 	bl	60017628 <strncpy>
60014114:	f898 3001 	ldrb.w	r3, [r8, #1]
60014118:	b10b      	cbz	r3, 6001411e <_vfiprintf_r+0xc92>
6001411a:	f108 0801 	add.w	r8, r8, #1
6001411e:	f04f 0c00 	mov.w	ip, #0
60014122:	e705      	b.n	60013f30 <_vfiprintf_r+0xaa4>
60014124:	46a3      	mov	fp, r4
60014126:	e47d      	b.n	60013a24 <_vfiprintf_r+0x598>
60014128:	4693      	mov	fp, r2
6001412a:	e408      	b.n	6001393e <_vfiprintf_r+0x4b2>
6001412c:	9b07      	ldr	r3, [sp, #28]
6001412e:	9a03      	ldr	r2, [sp, #12]
60014130:	681b      	ldr	r3, [r3, #0]
60014132:	601a      	str	r2, [r3, #0]
60014134:	e4a2      	b.n	60013a7c <_vfiprintf_r+0x5f0>
60014136:	4643      	mov	r3, r8
60014138:	2b06      	cmp	r3, #6
6001413a:	bf28      	it	cs
6001413c:	2306      	movcs	r3, #6
6001413e:	4c30      	ldr	r4, [pc, #192]	; (60014200 <_vfiprintf_r+0xd74>)
60014140:	9305      	str	r3, [sp, #20]
60014142:	9507      	str	r5, [sp, #28]
60014144:	9301      	str	r3, [sp, #4]
60014146:	f7ff bb12 	b.w	6001376e <_vfiprintf_r+0x2e2>
6001414a:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
6001414e:	bf1c      	itt	ne
60014150:	b2db      	uxtbne	r3, r3
60014152:	4621      	movne	r1, r4
60014154:	e776      	b.n	60014044 <_vfiprintf_r+0xbb8>
60014156:	f412 7100 	ands.w	r1, r2, #512	; 0x200
6001415a:	bf1c      	itt	ne
6001415c:	b2db      	uxtbne	r3, r3
6001415e:	4621      	movne	r1, r4
60014160:	e445      	b.n	600139ee <_vfiprintf_r+0x562>
60014162:	f412 7100 	ands.w	r1, r2, #512	; 0x200
60014166:	f43f ac0c 	beq.w	60013982 <_vfiprintf_r+0x4f6>
6001416a:	b2db      	uxtb	r3, r3
6001416c:	4621      	mov	r1, r4
6001416e:	e408      	b.n	60013982 <_vfiprintf_r+0x4f6>
60014170:	f343 11c0 	sbfx	r1, r3, #7, #1
60014174:	460a      	mov	r2, r1
60014176:	b25b      	sxtb	r3, r3
60014178:	f7ff ba78 	b.w	6001366c <_vfiprintf_r+0x1e0>
6001417c:	9b07      	ldr	r3, [sp, #28]
6001417e:	9a03      	ldr	r2, [sp, #12]
60014180:	681b      	ldr	r3, [r3, #0]
60014182:	801a      	strh	r2, [r3, #0]
60014184:	e47a      	b.n	60013a7c <_vfiprintf_r+0x5f0>
60014186:	2330      	movs	r3, #48	; 0x30
60014188:	f7ff bbe0 	b.w	6001394c <_vfiprintf_r+0x4c0>
6001418c:	6d88      	ldr	r0, [r1, #88]	; 0x58
6001418e:	f7f7 fa9f 	bl	6000b6d0 <__retarget_lock_release_recursive>
60014192:	f7ff ba9d 	b.w	600136d0 <_vfiprintf_r+0x244>
60014196:	f8cd 8004 	str.w	r8, [sp, #4]
6001419a:	f8cd 8014 	str.w	r8, [sp, #20]
6001419e:	9507      	str	r5, [sp, #28]
600141a0:	4680      	mov	r8, r0
600141a2:	e40c      	b.n	600139be <_vfiprintf_r+0x532>
600141a4:	4f17      	ldr	r7, [pc, #92]	; (60014204 <_vfiprintf_r+0xd78>)
600141a6:	46e6      	mov	lr, ip
600141a8:	e663      	b.n	60013e72 <_vfiprintf_r+0x9e6>
600141aa:	9904      	ldr	r1, [sp, #16]
600141ac:	9806      	ldr	r0, [sp, #24]
600141ae:	aa10      	add	r2, sp, #64	; 0x40
600141b0:	f002 f996 	bl	600164e0 <__sfvwrite_r>
600141b4:	2300      	movs	r3, #0
600141b6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
600141ba:	2800      	cmp	r0, #0
600141bc:	f43f ab61 	beq.w	60013882 <_vfiprintf_r+0x3f6>
600141c0:	f7ff babb 	b.w	6001373a <_vfiprintf_r+0x2ae>
600141c4:	4f0f      	ldr	r7, [pc, #60]	; (60014204 <_vfiprintf_r+0xd78>)
600141c6:	1c51      	adds	r1, r2, #1
600141c8:	e5d2      	b.n	60013d70 <_vfiprintf_r+0x8e4>
600141ca:	4d0f      	ldr	r5, [pc, #60]	; (60014208 <_vfiprintf_r+0xd7c>)
600141cc:	468c      	mov	ip, r1
600141ce:	e537      	b.n	60013c40 <_vfiprintf_r+0x7b4>
600141d0:	9b04      	ldr	r3, [sp, #16]
600141d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
600141d4:	07df      	lsls	r7, r3, #31
600141d6:	d407      	bmi.n	600141e8 <_vfiprintf_r+0xd5c>
600141d8:	9b04      	ldr	r3, [sp, #16]
600141da:	899b      	ldrh	r3, [r3, #12]
600141dc:	059e      	lsls	r6, r3, #22
600141de:	d403      	bmi.n	600141e8 <_vfiprintf_r+0xd5c>
600141e0:	9b04      	ldr	r3, [sp, #16]
600141e2:	6d98      	ldr	r0, [r3, #88]	; 0x58
600141e4:	f7f7 fa74 	bl	6000b6d0 <__retarget_lock_release_recursive>
600141e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
600141ec:	9303      	str	r3, [sp, #12]
600141ee:	f7ff baae 	b.w	6001374e <_vfiprintf_r+0x2c2>
600141f2:	bf00      	nop
600141f4:	cccccccd 	.word	0xcccccccd
600141f8:	6001bf38 	.word	0x6001bf38
600141fc:	6001bf4c 	.word	0x6001bf4c
60014200:	6001bf60 	.word	0x6001bf60
60014204:	6001bf78 	.word	0x6001bf78
60014208:	6001bf68 	.word	0x6001bf68
6001420c:	9b07      	ldr	r3, [sp, #28]
6001420e:	f899 2001 	ldrb.w	r2, [r9, #1]
60014212:	4689      	mov	r9, r1
60014214:	f853 1b04 	ldr.w	r1, [r3], #4
60014218:	9307      	str	r3, [sp, #28]
6001421a:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
6001421e:	f7ff b987 	b.w	60013530 <_vfiprintf_r+0xa4>
60014222:	bf00      	nop

60014224 <__sbprintf>:
60014224:	b5f0      	push	{r4, r5, r6, r7, lr}
60014226:	461f      	mov	r7, r3
60014228:	898b      	ldrh	r3, [r1, #12]
6001422a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
6001422e:	f023 0302 	bic.w	r3, r3, #2
60014232:	f8ad 300c 	strh.w	r3, [sp, #12]
60014236:	6e4b      	ldr	r3, [r1, #100]	; 0x64
60014238:	9319      	str	r3, [sp, #100]	; 0x64
6001423a:	89cb      	ldrh	r3, [r1, #14]
6001423c:	f8ad 300e 	strh.w	r3, [sp, #14]
60014240:	69cb      	ldr	r3, [r1, #28]
60014242:	9307      	str	r3, [sp, #28]
60014244:	6a4b      	ldr	r3, [r1, #36]	; 0x24
60014246:	9309      	str	r3, [sp, #36]	; 0x24
60014248:	ab1a      	add	r3, sp, #104	; 0x68
6001424a:	9300      	str	r3, [sp, #0]
6001424c:	9304      	str	r3, [sp, #16]
6001424e:	f44f 6380 	mov.w	r3, #1024	; 0x400
60014252:	4615      	mov	r5, r2
60014254:	4606      	mov	r6, r0
60014256:	9302      	str	r3, [sp, #8]
60014258:	9305      	str	r3, [sp, #20]
6001425a:	a816      	add	r0, sp, #88	; 0x58
6001425c:	2300      	movs	r3, #0
6001425e:	460c      	mov	r4, r1
60014260:	9306      	str	r3, [sp, #24]
60014262:	f7f7 f9d1 	bl	6000b608 <__retarget_lock_init_recursive>
60014266:	462a      	mov	r2, r5
60014268:	463b      	mov	r3, r7
6001426a:	4669      	mov	r1, sp
6001426c:	4630      	mov	r0, r6
6001426e:	f7ff f90d 	bl	6001348c <_vfiprintf_r>
60014272:	1e05      	subs	r5, r0, #0
60014274:	db07      	blt.n	60014286 <__sbprintf+0x62>
60014276:	4669      	mov	r1, sp
60014278:	4630      	mov	r0, r6
6001427a:	f001 ff2b 	bl	600160d4 <_fflush_r>
6001427e:	2800      	cmp	r0, #0
60014280:	bf18      	it	ne
60014282:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
60014286:	f8bd 300c 	ldrh.w	r3, [sp, #12]
6001428a:	065b      	lsls	r3, r3, #25
6001428c:	d503      	bpl.n	60014296 <__sbprintf+0x72>
6001428e:	89a3      	ldrh	r3, [r4, #12]
60014290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60014294:	81a3      	strh	r3, [r4, #12]
60014296:	9816      	ldr	r0, [sp, #88]	; 0x58
60014298:	f7f7 f9e6 	bl	6000b668 <__retarget_lock_close_recursive>
6001429c:	4628      	mov	r0, r5
6001429e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
600142a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

600142a4 <_vfprintf_r>:
600142a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600142a8:	b0d9      	sub	sp, #356	; 0x164
600142aa:	461c      	mov	r4, r3
600142ac:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
600142b0:	4692      	mov	sl, r2
600142b2:	4605      	mov	r5, r0
600142b4:	f002 fab4 	bl	60016820 <_localeconv_r>
600142b8:	6802      	ldr	r2, [r0, #0]
600142ba:	9217      	str	r2, [sp, #92]	; 0x5c
600142bc:	4610      	mov	r0, r2
600142be:	940f      	str	r4, [sp, #60]	; 0x3c
600142c0:	f7ed fffe 	bl	600022c0 <strlen>
600142c4:	9016      	str	r0, [sp, #88]	; 0x58
600142c6:	b11d      	cbz	r5, 600142d0 <_vfprintf_r+0x2c>
600142c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
600142ca:	2b00      	cmp	r3, #0
600142cc:	f000 8216 	beq.w	600146fc <_vfprintf_r+0x458>
600142d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
600142d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
600142d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
600142d8:	07d0      	lsls	r0, r2, #31
600142da:	d402      	bmi.n	600142e2 <_vfprintf_r+0x3e>
600142dc:	0599      	lsls	r1, r3, #22
600142de:	f140 86b2 	bpl.w	60015046 <_vfprintf_r+0xda2>
600142e2:	071a      	lsls	r2, r3, #28
600142e4:	f140 80ca 	bpl.w	6001447c <_vfprintf_r+0x1d8>
600142e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
600142ea:	6912      	ldr	r2, [r2, #16]
600142ec:	2a00      	cmp	r2, #0
600142ee:	f000 80c5 	beq.w	6001447c <_vfprintf_r+0x1d8>
600142f2:	f003 021a 	and.w	r2, r3, #26
600142f6:	2a0a      	cmp	r2, #10
600142f8:	f000 80cf 	beq.w	6001449a <_vfprintf_r+0x1f6>
600142fc:	2300      	movs	r3, #0
600142fe:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
60014302:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
60014306:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
6001430a:	9312      	str	r3, [sp, #72]	; 0x48
6001430c:	9318      	str	r3, [sp, #96]	; 0x60
6001430e:	930d      	str	r3, [sp, #52]	; 0x34
60014310:	2400      	movs	r4, #0
60014312:	2300      	movs	r3, #0
60014314:	f8cd a020 	str.w	sl, [sp, #32]
60014318:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
6001431c:	9b08      	ldr	r3, [sp, #32]
6001431e:	781b      	ldrb	r3, [r3, #0]
60014320:	aa2f      	add	r2, sp, #188	; 0xbc
60014322:	922c      	str	r2, [sp, #176]	; 0xb0
60014324:	4693      	mov	fp, r2
60014326:	2b00      	cmp	r3, #0
60014328:	f000 8191 	beq.w	6001464e <_vfprintf_r+0x3aa>
6001432c:	f8dd a020 	ldr.w	sl, [sp, #32]
60014330:	e004      	b.n	6001433c <_vfprintf_r+0x98>
60014332:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
60014336:	2b00      	cmp	r3, #0
60014338:	f000 80c4 	beq.w	600144c4 <_vfprintf_r+0x220>
6001433c:	2b25      	cmp	r3, #37	; 0x25
6001433e:	d1f8      	bne.n	60014332 <_vfprintf_r+0x8e>
60014340:	9b08      	ldr	r3, [sp, #32]
60014342:	ebba 0503 	subs.w	r5, sl, r3
60014346:	f040 80c2 	bne.w	600144ce <_vfprintf_r+0x22a>
6001434a:	f89a 3000 	ldrb.w	r3, [sl]
6001434e:	2b00      	cmp	r3, #0
60014350:	f000 817d 	beq.w	6001464e <_vfprintf_r+0x3aa>
60014354:	2300      	movs	r3, #0
60014356:	f89a 5001 	ldrb.w	r5, [sl, #1]
6001435a:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
6001435e:	930c      	str	r3, [sp, #48]	; 0x30
60014360:	f10a 0a01 	add.w	sl, sl, #1
60014364:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
60014368:	9307      	str	r3, [sp, #28]
6001436a:	f10a 0a01 	add.w	sl, sl, #1
6001436e:	f1a5 0320 	sub.w	r3, r5, #32
60014372:	2b5a      	cmp	r3, #90	; 0x5a
60014374:	f200 80e1 	bhi.w	6001453a <_vfprintf_r+0x296>
60014378:	e8df f013 	tbh	[pc, r3, lsl #1]
6001437c:	00df02a7 	.word	0x00df02a7
60014380:	02a000df 	.word	0x02a000df
60014384:	00df00df 	.word	0x00df00df
60014388:	006a00df 	.word	0x006a00df
6001438c:	00df00df 	.word	0x00df00df
60014390:	027a0268 	.word	0x027a0268
60014394:	027300df 	.word	0x027300df
60014398:	00df0287 	.word	0x00df0287
6001439c:	005b0280 	.word	0x005b0280
600143a0:	005b005b 	.word	0x005b005b
600143a4:	005b005b 	.word	0x005b005b
600143a8:	005b005b 	.word	0x005b005b
600143ac:	005b005b 	.word	0x005b005b
600143b0:	00df00df 	.word	0x00df00df
600143b4:	00df00df 	.word	0x00df00df
600143b8:	00df00df 	.word	0x00df00df
600143bc:	017000df 	.word	0x017000df
600143c0:	01f400df 	.word	0x01f400df
600143c4:	017001cb 	.word	0x017001cb
600143c8:	01700170 	.word	0x01700170
600143cc:	00df00df 	.word	0x00df00df
600143d0:	00df00df 	.word	0x00df00df
600143d4:	00df02c4 	.word	0x00df02c4
600143d8:	022600df 	.word	0x022600df
600143dc:	00df00df 	.word	0x00df00df
600143e0:	01fe00df 	.word	0x01fe00df
600143e4:	02b200df 	.word	0x02b200df
600143e8:	00df00df 	.word	0x00df00df
600143ec:	00df0723 	.word	0x00df0723
600143f0:	00df00df 	.word	0x00df00df
600143f4:	00df00df 	.word	0x00df00df
600143f8:	00df00df 	.word	0x00df00df
600143fc:	017000df 	.word	0x017000df
60014400:	01f400df 	.word	0x01f400df
60014404:	017001cf 	.word	0x017001cf
60014408:	01700170 	.word	0x01700170
6001440c:	01cf02fc 	.word	0x01cf02fc
60014410:	00df01c4 	.word	0x00df01c4
60014414:	00df02f2 	.word	0x00df02f2
60014418:	022a02cb 	.word	0x022a02cb
6001441c:	01c402d9 	.word	0x01c402d9
60014420:	01fe00df 	.word	0x01fe00df
60014424:	0746007d 	.word	0x0746007d
60014428:	00df00df 	.word	0x00df00df
6001442c:	00df0749 	.word	0x00df0749
60014430:	007d      	.short	0x007d
60014432:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
60014436:	2200      	movs	r2, #0
60014438:	f81a 5b01 	ldrb.w	r5, [sl], #1
6001443c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
60014440:	eb03 0242 	add.w	r2, r3, r2, lsl #1
60014444:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
60014448:	2b09      	cmp	r3, #9
6001444a:	d9f5      	bls.n	60014438 <_vfprintf_r+0x194>
6001444c:	920c      	str	r2, [sp, #48]	; 0x30
6001444e:	e78e      	b.n	6001436e <_vfprintf_r+0xca>
60014450:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
60014452:	4628      	mov	r0, r5
60014454:	f002 f9e4 	bl	60016820 <_localeconv_r>
60014458:	6843      	ldr	r3, [r0, #4]
6001445a:	931b      	str	r3, [sp, #108]	; 0x6c
6001445c:	4618      	mov	r0, r3
6001445e:	f7ed ff2f 	bl	600022c0 <strlen>
60014462:	901c      	str	r0, [sp, #112]	; 0x70
60014464:	4604      	mov	r4, r0
60014466:	4628      	mov	r0, r5
60014468:	f002 f9da 	bl	60016820 <_localeconv_r>
6001446c:	6883      	ldr	r3, [r0, #8]
6001446e:	9319      	str	r3, [sp, #100]	; 0x64
60014470:	2c00      	cmp	r4, #0
60014472:	f040 8696 	bne.w	600151a2 <_vfprintf_r+0xefe>
60014476:	f89a 5000 	ldrb.w	r5, [sl]
6001447a:	e776      	b.n	6001436a <_vfprintf_r+0xc6>
6001447c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
6001447e:	980b      	ldr	r0, [sp, #44]	; 0x2c
60014480:	4629      	mov	r1, r5
60014482:	f001 fc9f 	bl	60015dc4 <__swsetup_r>
60014486:	2800      	cmp	r0, #0
60014488:	f041 834f 	bne.w	60015b2a <_vfprintf_r+0x1886>
6001448c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
60014490:	f003 021a 	and.w	r2, r3, #26
60014494:	2a0a      	cmp	r2, #10
60014496:	f47f af31 	bne.w	600142fc <_vfprintf_r+0x58>
6001449a:	990a      	ldr	r1, [sp, #40]	; 0x28
6001449c:	f9b1 200e 	ldrsh.w	r2, [r1, #14]
600144a0:	2a00      	cmp	r2, #0
600144a2:	f6ff af2b 	blt.w	600142fc <_vfprintf_r+0x58>
600144a6:	6e4a      	ldr	r2, [r1, #100]	; 0x64
600144a8:	07d6      	lsls	r6, r2, #31
600144aa:	d402      	bmi.n	600144b2 <_vfprintf_r+0x20e>
600144ac:	059d      	lsls	r5, r3, #22
600144ae:	f141 8170 	bpl.w	60015792 <_vfprintf_r+0x14ee>
600144b2:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
600144b6:	4623      	mov	r3, r4
600144b8:	4652      	mov	r2, sl
600144ba:	b059      	add	sp, #356	; 0x164
600144bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600144c0:	f001 bc40 	b.w	60015d44 <__sbprintf>
600144c4:	9b08      	ldr	r3, [sp, #32]
600144c6:	ebba 0503 	subs.w	r5, sl, r3
600144ca:	f000 80c0 	beq.w	6001464e <_vfprintf_r+0x3aa>
600144ce:	9b08      	ldr	r3, [sp, #32]
600144d0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
600144d2:	e9cb 3500 	strd	r3, r5, [fp]
600144d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
600144d8:	3301      	adds	r3, #1
600144da:	442f      	add	r7, r5
600144dc:	2b07      	cmp	r3, #7
600144de:	972e      	str	r7, [sp, #184]	; 0xb8
600144e0:	932d      	str	r3, [sp, #180]	; 0xb4
600144e2:	dc05      	bgt.n	600144f0 <_vfprintf_r+0x24c>
600144e4:	f10b 0b08 	add.w	fp, fp, #8
600144e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
600144ea:	442b      	add	r3, r5
600144ec:	930d      	str	r3, [sp, #52]	; 0x34
600144ee:	e72c      	b.n	6001434a <_vfprintf_r+0xa6>
600144f0:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
600144f4:	aa2c      	add	r2, sp, #176	; 0xb0
600144f6:	f7fe ffb9 	bl	6001346c <__sprint_r>
600144fa:	b980      	cbnz	r0, 6001451e <_vfprintf_r+0x27a>
600144fc:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014500:	e7f2      	b.n	600144e8 <_vfprintf_r+0x244>
60014502:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60014506:	aa2c      	add	r2, sp, #176	; 0xb0
60014508:	f7fe ffb0 	bl	6001346c <__sprint_r>
6001450c:	2800      	cmp	r0, #0
6001450e:	f000 808d 	beq.w	6001462c <_vfprintf_r+0x388>
60014512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60014514:	b11b      	cbz	r3, 6001451e <_vfprintf_r+0x27a>
60014516:	980b      	ldr	r0, [sp, #44]	; 0x2c
60014518:	4619      	mov	r1, r3
6001451a:	f001 fee3 	bl	600162e4 <_free_r>
6001451e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
60014520:	6e5a      	ldr	r2, [r3, #100]	; 0x64
60014522:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
60014526:	07d4      	lsls	r4, r2, #31
60014528:	f140 80de 	bpl.w	600146e8 <_vfprintf_r+0x444>
6001452c:	0659      	lsls	r1, r3, #25
6001452e:	f101 8308 	bmi.w	60015b42 <_vfprintf_r+0x189e>
60014532:	980d      	ldr	r0, [sp, #52]	; 0x34
60014534:	b059      	add	sp, #356	; 0x164
60014536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
6001453a:	2d00      	cmp	r5, #0
6001453c:	f000 8087 	beq.w	6001464e <_vfprintf_r+0x3aa>
60014540:	2200      	movs	r2, #0
60014542:	f88d 50fc 	strb.w	r5, [sp, #252]	; 0xfc
60014546:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
6001454a:	2301      	movs	r3, #1
6001454c:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
60014550:	9309      	str	r3, [sp, #36]	; 0x24
60014552:	461e      	mov	r6, r3
60014554:	ab3f      	add	r3, sp, #252	; 0xfc
60014556:	920e      	str	r2, [sp, #56]	; 0x38
60014558:	4691      	mov	r9, r2
6001455a:	9213      	str	r2, [sp, #76]	; 0x4c
6001455c:	9308      	str	r3, [sp, #32]
6001455e:	9b07      	ldr	r3, [sp, #28]
60014560:	f013 0302 	ands.w	r3, r3, #2
60014564:	d002      	beq.n	6001456c <_vfprintf_r+0x2c8>
60014566:	9909      	ldr	r1, [sp, #36]	; 0x24
60014568:	3102      	adds	r1, #2
6001456a:	9109      	str	r1, [sp, #36]	; 0x24
6001456c:	9907      	ldr	r1, [sp, #28]
6001456e:	f011 0484 	ands.w	r4, r1, #132	; 0x84
60014572:	d105      	bne.n	60014580 <_vfprintf_r+0x2dc>
60014574:	990c      	ldr	r1, [sp, #48]	; 0x30
60014576:	9809      	ldr	r0, [sp, #36]	; 0x24
60014578:	1a0f      	subs	r7, r1, r0
6001457a:	2f00      	cmp	r7, #0
6001457c:	f300 8386 	bgt.w	60014c8c <_vfprintf_r+0x9e8>
60014580:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
60014582:	b18a      	cbz	r2, 600145a8 <_vfprintf_r+0x304>
60014584:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
60014586:	f10d 0193 	add.w	r1, sp, #147	; 0x93
6001458a:	3201      	adds	r2, #1
6001458c:	3701      	adds	r7, #1
6001458e:	f8cb 1000 	str.w	r1, [fp]
60014592:	2a07      	cmp	r2, #7
60014594:	f04f 0101 	mov.w	r1, #1
60014598:	972e      	str	r7, [sp, #184]	; 0xb8
6001459a:	922d      	str	r2, [sp, #180]	; 0xb4
6001459c:	f8cb 1004 	str.w	r1, [fp, #4]
600145a0:	f300 83da 	bgt.w	60014d58 <_vfprintf_r+0xab4>
600145a4:	f10b 0b08 	add.w	fp, fp, #8
600145a8:	b183      	cbz	r3, 600145cc <_vfprintf_r+0x328>
600145aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
600145ac:	aa25      	add	r2, sp, #148	; 0x94
600145ae:	3301      	adds	r3, #1
600145b0:	3702      	adds	r7, #2
600145b2:	f8cb 2000 	str.w	r2, [fp]
600145b6:	2b07      	cmp	r3, #7
600145b8:	f04f 0202 	mov.w	r2, #2
600145bc:	972e      	str	r7, [sp, #184]	; 0xb8
600145be:	932d      	str	r3, [sp, #180]	; 0xb4
600145c0:	f8cb 2004 	str.w	r2, [fp, #4]
600145c4:	f300 83d6 	bgt.w	60014d74 <_vfprintf_r+0xad0>
600145c8:	f10b 0b08 	add.w	fp, fp, #8
600145cc:	2c80      	cmp	r4, #128	; 0x80
600145ce:	f000 8254 	beq.w	60014a7a <_vfprintf_r+0x7d6>
600145d2:	eba9 0806 	sub.w	r8, r9, r6
600145d6:	f1b8 0f00 	cmp.w	r8, #0
600145da:	f300 829a 	bgt.w	60014b12 <_vfprintf_r+0x86e>
600145de:	9b07      	ldr	r3, [sp, #28]
600145e0:	05dc      	lsls	r4, r3, #23
600145e2:	f100 81d1 	bmi.w	60014988 <_vfprintf_r+0x6e4>
600145e6:	9b08      	ldr	r3, [sp, #32]
600145e8:	f8cb 3000 	str.w	r3, [fp]
600145ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
600145ee:	f8cb 6004 	str.w	r6, [fp, #4]
600145f2:	3301      	adds	r3, #1
600145f4:	19f5      	adds	r5, r6, r7
600145f6:	2b07      	cmp	r3, #7
600145f8:	952e      	str	r5, [sp, #184]	; 0xb8
600145fa:	932d      	str	r3, [sp, #180]	; 0xb4
600145fc:	f300 82eb 	bgt.w	60014bd6 <_vfprintf_r+0x932>
60014600:	f10b 0b08 	add.w	fp, fp, #8
60014604:	9b07      	ldr	r3, [sp, #28]
60014606:	075e      	lsls	r6, r3, #29
60014608:	d505      	bpl.n	60014616 <_vfprintf_r+0x372>
6001460a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
6001460c:	9a09      	ldr	r2, [sp, #36]	; 0x24
6001460e:	1a9c      	subs	r4, r3, r2
60014610:	2c00      	cmp	r4, #0
60014612:	f300 83bb 	bgt.w	60014d8c <_vfprintf_r+0xae8>
60014616:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
6001461a:	9909      	ldr	r1, [sp, #36]	; 0x24
6001461c:	428a      	cmp	r2, r1
6001461e:	bfac      	ite	ge
60014620:	189b      	addge	r3, r3, r2
60014622:	185b      	addlt	r3, r3, r1
60014624:	930d      	str	r3, [sp, #52]	; 0x34
60014626:	2d00      	cmp	r5, #0
60014628:	f47f af6b 	bne.w	60014502 <_vfprintf_r+0x25e>
6001462c:	2300      	movs	r3, #0
6001462e:	932d      	str	r3, [sp, #180]	; 0xb4
60014630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
60014632:	b11b      	cbz	r3, 6001463c <_vfprintf_r+0x398>
60014634:	990e      	ldr	r1, [sp, #56]	; 0x38
60014636:	980b      	ldr	r0, [sp, #44]	; 0x2c
60014638:	f001 fe54 	bl	600162e4 <_free_r>
6001463c:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014640:	f8cd a020 	str.w	sl, [sp, #32]
60014644:	9b08      	ldr	r3, [sp, #32]
60014646:	781b      	ldrb	r3, [r3, #0]
60014648:	2b00      	cmp	r3, #0
6001464a:	f47f ae6f 	bne.w	6001432c <_vfprintf_r+0x88>
6001464e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
60014650:	2b00      	cmp	r3, #0
60014652:	f041 8218 	bne.w	60015a86 <_vfprintf_r+0x17e2>
60014656:	2300      	movs	r3, #0
60014658:	932d      	str	r3, [sp, #180]	; 0xb4
6001465a:	e760      	b.n	6001451e <_vfprintf_r+0x27a>
6001465c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
6001465e:	3307      	adds	r3, #7
60014660:	f023 0307 	bic.w	r3, r3, #7
60014664:	e8f3 6702 	ldrd	r6, r7, [r3], #8
60014668:	930f      	str	r3, [sp, #60]	; 0x3c
6001466a:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
6001466e:	931f      	str	r3, [sp, #124]	; 0x7c
60014670:	961e      	str	r6, [sp, #120]	; 0x78
60014672:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
60014676:	4bb6      	ldr	r3, [pc, #728]	; (60014950 <_vfprintf_r+0x6ac>)
60014678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
6001467c:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
60014680:	f7ef f8f4 	bl	6000386c <__aeabi_dcmpun>
60014684:	2800      	cmp	r0, #0
60014686:	f040 8535 	bne.w	600150f4 <_vfprintf_r+0xe50>
6001468a:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
6001468e:	4bb0      	ldr	r3, [pc, #704]	; (60014950 <_vfprintf_r+0x6ac>)
60014690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60014694:	f7ee fc7c 	bl	60002f90 <__aeabi_dcmple>
60014698:	2800      	cmp	r0, #0
6001469a:	f040 852b 	bne.w	600150f4 <_vfprintf_r+0xe50>
6001469e:	2200      	movs	r2, #0
600146a0:	2300      	movs	r3, #0
600146a2:	4630      	mov	r0, r6
600146a4:	4639      	mov	r1, r7
600146a6:	f7ee fc69 	bl	60002f7c <__aeabi_dcmplt>
600146aa:	2800      	cmp	r0, #0
600146ac:	f040 8704 	bne.w	600154b8 <_vfprintf_r+0x1214>
600146b0:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
600146b4:	9b07      	ldr	r3, [sp, #28]
600146b6:	4ca7      	ldr	r4, [pc, #668]	; (60014954 <_vfprintf_r+0x6b0>)
600146b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
600146bc:	9307      	str	r3, [sp, #28]
600146be:	4ba6      	ldr	r3, [pc, #664]	; (60014958 <_vfprintf_r+0x6b4>)
600146c0:	2d47      	cmp	r5, #71	; 0x47
600146c2:	bfc8      	it	gt
600146c4:	461c      	movgt	r4, r3
600146c6:	2300      	movs	r3, #0
600146c8:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
600146cc:	2103      	movs	r1, #3
600146ce:	9408      	str	r4, [sp, #32]
600146d0:	930e      	str	r3, [sp, #56]	; 0x38
600146d2:	9109      	str	r1, [sp, #36]	; 0x24
600146d4:	460e      	mov	r6, r1
600146d6:	4699      	mov	r9, r3
600146d8:	9313      	str	r3, [sp, #76]	; 0x4c
600146da:	2a00      	cmp	r2, #0
600146dc:	f43f af3f 	beq.w	6001455e <_vfprintf_r+0x2ba>
600146e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
600146e2:	3301      	adds	r3, #1
600146e4:	9309      	str	r3, [sp, #36]	; 0x24
600146e6:	e73a      	b.n	6001455e <_vfprintf_r+0x2ba>
600146e8:	0598      	lsls	r0, r3, #22
600146ea:	f53f af1f 	bmi.w	6001452c <_vfprintf_r+0x288>
600146ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
600146f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
600146f2:	f7f6 ffed 	bl	6000b6d0 <__retarget_lock_release_recursive>
600146f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600146fa:	e717      	b.n	6001452c <_vfprintf_r+0x288>
600146fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
600146fe:	f001 fd1d 	bl	6001613c <__sinit>
60014702:	e5e5      	b.n	600142d0 <_vfprintf_r+0x2c>
60014704:	9b07      	ldr	r3, [sp, #28]
60014706:	f89a 5000 	ldrb.w	r5, [sl]
6001470a:	f043 0320 	orr.w	r3, r3, #32
6001470e:	9307      	str	r3, [sp, #28]
60014710:	e62b      	b.n	6001436a <_vfprintf_r+0xc6>
60014712:	9b07      	ldr	r3, [sp, #28]
60014714:	f043 0310 	orr.w	r3, r3, #16
60014718:	9307      	str	r3, [sp, #28]
6001471a:	9b07      	ldr	r3, [sp, #28]
6001471c:	069c      	lsls	r4, r3, #26
6001471e:	f140 8459 	bpl.w	60014fd4 <_vfprintf_r+0xd30>
60014722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60014724:	3307      	adds	r3, #7
60014726:	f023 0307 	bic.w	r3, r3, #7
6001472a:	461a      	mov	r2, r3
6001472c:	6859      	ldr	r1, [r3, #4]
6001472e:	f852 3b08 	ldr.w	r3, [r2], #8
60014732:	920f      	str	r2, [sp, #60]	; 0x3c
60014734:	460a      	mov	r2, r1
60014736:	2900      	cmp	r1, #0
60014738:	f2c0 847d 	blt.w	60015036 <_vfprintf_r+0xd92>
6001473c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
60014740:	f000 82fb 	beq.w	60014d3a <_vfprintf_r+0xa96>
60014744:	9907      	ldr	r1, [sp, #28]
60014746:	f021 0680 	bic.w	r6, r1, #128	; 0x80
6001474a:	ea53 0102 	orrs.w	r1, r3, r2
6001474e:	f040 82f5 	bne.w	60014d3c <_vfprintf_r+0xa98>
60014752:	f1b9 0f00 	cmp.w	r9, #0
60014756:	f040 82f6 	bne.w	60014d46 <_vfprintf_r+0xaa2>
6001475a:	9607      	str	r6, [sp, #28]
6001475c:	ab58      	add	r3, sp, #352	; 0x160
6001475e:	464e      	mov	r6, r9
60014760:	9308      	str	r3, [sp, #32]
60014762:	e065      	b.n	60014830 <_vfprintf_r+0x58c>
60014764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60014766:	2200      	movs	r2, #0
60014768:	f853 1b04 	ldr.w	r1, [r3], #4
6001476c:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
60014770:	f88d 10fc 	strb.w	r1, [sp, #252]	; 0xfc
60014774:	930f      	str	r3, [sp, #60]	; 0x3c
60014776:	e6e8      	b.n	6001454a <_vfprintf_r+0x2a6>
60014778:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
6001477a:	f857 3b04 	ldr.w	r3, [r7], #4
6001477e:	9308      	str	r3, [sp, #32]
60014780:	2600      	movs	r6, #0
60014782:	f88d 6093 	strb.w	r6, [sp, #147]	; 0x93
60014786:	2b00      	cmp	r3, #0
60014788:	f000 8576 	beq.w	60015278 <_vfprintf_r+0xfd4>
6001478c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
60014790:	f000 863b 	beq.w	6001540a <_vfprintf_r+0x1166>
60014794:	9808      	ldr	r0, [sp, #32]
60014796:	464a      	mov	r2, r9
60014798:	4631      	mov	r1, r6
6001479a:	f7ed ff71 	bl	60002680 <memchr>
6001479e:	900e      	str	r0, [sp, #56]	; 0x38
600147a0:	2800      	cmp	r0, #0
600147a2:	f001 8154 	beq.w	60015a4e <_vfprintf_r+0x17aa>
600147a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
600147a8:	9a08      	ldr	r2, [sp, #32]
600147aa:	970f      	str	r7, [sp, #60]	; 0x3c
600147ac:	46b1      	mov	r9, r6
600147ae:	1a9e      	subs	r6, r3, r2
600147b0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
600147b4:	e9cd 9910 	strd	r9, r9, [sp, #64]	; 0x40
600147b8:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
600147bc:	9309      	str	r3, [sp, #36]	; 0x24
600147be:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
600147c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
600147c6:	e788      	b.n	600146da <_vfprintf_r+0x436>
600147c8:	9b07      	ldr	r3, [sp, #28]
600147ca:	f043 0310 	orr.w	r3, r3, #16
600147ce:	9307      	str	r3, [sp, #28]
600147d0:	9b07      	ldr	r3, [sp, #28]
600147d2:	f013 0220 	ands.w	r2, r3, #32
600147d6:	f000 841c 	beq.w	60015012 <_vfprintf_r+0xd6e>
600147da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
600147dc:	3307      	adds	r3, #7
600147de:	f023 0307 	bic.w	r3, r3, #7
600147e2:	4619      	mov	r1, r3
600147e4:	685a      	ldr	r2, [r3, #4]
600147e6:	f851 3b08 	ldr.w	r3, [r1], #8
600147ea:	910f      	str	r1, [sp, #60]	; 0x3c
600147ec:	9907      	ldr	r1, [sp, #28]
600147ee:	f421 6680 	bic.w	r6, r1, #1024	; 0x400
600147f2:	2100      	movs	r1, #0
600147f4:	2000      	movs	r0, #0
600147f6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
600147fa:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
600147fe:	f000 8120 	beq.w	60014a42 <_vfprintf_r+0x79e>
60014802:	f026 0080 	bic.w	r0, r6, #128	; 0x80
60014806:	9007      	str	r0, [sp, #28]
60014808:	ea53 0002 	orrs.w	r0, r3, r2
6001480c:	f040 8118 	bne.w	60014a40 <_vfprintf_r+0x79c>
60014810:	f1b9 0f00 	cmp.w	r9, #0
60014814:	f040 85e1 	bne.w	600153da <_vfprintf_r+0x1136>
60014818:	2900      	cmp	r1, #0
6001481a:	d19f      	bne.n	6001475c <_vfprintf_r+0x4b8>
6001481c:	f016 0601 	ands.w	r6, r6, #1
60014820:	bf1b      	ittet	ne
60014822:	2330      	movne	r3, #48	; 0x30
60014824:	f88d 315f 	strbne.w	r3, [sp, #351]	; 0x15f
60014828:	ab58      	addeq	r3, sp, #352	; 0x160
6001482a:	f20d 135f 	addwne	r3, sp, #351	; 0x15f
6001482e:	9308      	str	r3, [sp, #32]
60014830:	45b1      	cmp	r9, r6
60014832:	f04f 0300 	mov.w	r3, #0
60014836:	4649      	mov	r1, r9
60014838:	bfb8      	it	lt
6001483a:	4631      	movlt	r1, r6
6001483c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
60014840:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
60014844:	930e      	str	r3, [sp, #56]	; 0x38
60014846:	9109      	str	r1, [sp, #36]	; 0x24
60014848:	9313      	str	r3, [sp, #76]	; 0x4c
6001484a:	e746      	b.n	600146da <_vfprintf_r+0x436>
6001484c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
6001484e:	f853 2b04 	ldr.w	r2, [r3], #4
60014852:	920c      	str	r2, [sp, #48]	; 0x30
60014854:	2a00      	cmp	r2, #0
60014856:	f280 83fe 	bge.w	60015056 <_vfprintf_r+0xdb2>
6001485a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
6001485c:	930f      	str	r3, [sp, #60]	; 0x3c
6001485e:	4252      	negs	r2, r2
60014860:	920c      	str	r2, [sp, #48]	; 0x30
60014862:	9b07      	ldr	r3, [sp, #28]
60014864:	f89a 5000 	ldrb.w	r5, [sl]
60014868:	f043 0304 	orr.w	r3, r3, #4
6001486c:	9307      	str	r3, [sp, #28]
6001486e:	e57c      	b.n	6001436a <_vfprintf_r+0xc6>
60014870:	232b      	movs	r3, #43	; 0x2b
60014872:	f89a 5000 	ldrb.w	r5, [sl]
60014876:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
6001487a:	e576      	b.n	6001436a <_vfprintf_r+0xc6>
6001487c:	9b07      	ldr	r3, [sp, #28]
6001487e:	f89a 5000 	ldrb.w	r5, [sl]
60014882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
60014886:	9307      	str	r3, [sp, #28]
60014888:	e56f      	b.n	6001436a <_vfprintf_r+0xc6>
6001488a:	4652      	mov	r2, sl
6001488c:	f812 5b01 	ldrb.w	r5, [r2], #1
60014890:	2d2a      	cmp	r5, #42	; 0x2a
60014892:	f001 8233 	beq.w	60015cfc <_vfprintf_r+0x1a58>
60014896:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
6001489a:	2b09      	cmp	r3, #9
6001489c:	4692      	mov	sl, r2
6001489e:	f04f 0900 	mov.w	r9, #0
600148a2:	f63f ad64 	bhi.w	6001436e <_vfprintf_r+0xca>
600148a6:	f81a 5b01 	ldrb.w	r5, [sl], #1
600148aa:	eb09 0989 	add.w	r9, r9, r9, lsl #2
600148ae:	eb03 0949 	add.w	r9, r3, r9, lsl #1
600148b2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
600148b6:	2b09      	cmp	r3, #9
600148b8:	d9f5      	bls.n	600148a6 <_vfprintf_r+0x602>
600148ba:	e558      	b.n	6001436e <_vfprintf_r+0xca>
600148bc:	9b07      	ldr	r3, [sp, #28]
600148be:	f89a 5000 	ldrb.w	r5, [sl]
600148c2:	f043 0301 	orr.w	r3, r3, #1
600148c6:	9307      	str	r3, [sp, #28]
600148c8:	e54f      	b.n	6001436a <_vfprintf_r+0xc6>
600148ca:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
600148ce:	f89a 5000 	ldrb.w	r5, [sl]
600148d2:	2b00      	cmp	r3, #0
600148d4:	f47f ad49 	bne.w	6001436a <_vfprintf_r+0xc6>
600148d8:	2320      	movs	r3, #32
600148da:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
600148de:	e544      	b.n	6001436a <_vfprintf_r+0xc6>
600148e0:	9b07      	ldr	r3, [sp, #28]
600148e2:	f043 0610 	orr.w	r6, r3, #16
600148e6:	f016 0220 	ands.w	r2, r6, #32
600148ea:	f000 8383 	beq.w	60014ff4 <_vfprintf_r+0xd50>
600148ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
600148f0:	3307      	adds	r3, #7
600148f2:	f023 0307 	bic.w	r3, r3, #7
600148f6:	4619      	mov	r1, r3
600148f8:	685a      	ldr	r2, [r3, #4]
600148fa:	f851 3b08 	ldr.w	r3, [r1], #8
600148fe:	910f      	str	r1, [sp, #60]	; 0x3c
60014900:	2101      	movs	r1, #1
60014902:	e777      	b.n	600147f4 <_vfprintf_r+0x550>
60014904:	9b07      	ldr	r3, [sp, #28]
60014906:	f89a 5000 	ldrb.w	r5, [sl]
6001490a:	f043 0308 	orr.w	r3, r3, #8
6001490e:	9307      	str	r3, [sp, #28]
60014910:	e52b      	b.n	6001436a <_vfprintf_r+0xc6>
60014912:	9b07      	ldr	r3, [sp, #28]
60014914:	069e      	lsls	r6, r3, #26
60014916:	f140 83dc 	bpl.w	600150d2 <_vfprintf_r+0xe2e>
6001491a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
6001491c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
6001491e:	681b      	ldr	r3, [r3, #0]
60014920:	601a      	str	r2, [r3, #0]
60014922:	17d2      	asrs	r2, r2, #31
60014924:	605a      	str	r2, [r3, #4]
60014926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60014928:	3304      	adds	r3, #4
6001492a:	930f      	str	r3, [sp, #60]	; 0x3c
6001492c:	e688      	b.n	60014640 <_vfprintf_r+0x39c>
6001492e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
60014930:	9b07      	ldr	r3, [sp, #28]
60014932:	f043 0602 	orr.w	r6, r3, #2
60014936:	f852 3b04 	ldr.w	r3, [r2], #4
6001493a:	920f      	str	r2, [sp, #60]	; 0x3c
6001493c:	f647 0230 	movw	r2, #30768	; 0x7830
60014940:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
60014944:	4a05      	ldr	r2, [pc, #20]	; (6001495c <_vfprintf_r+0x6b8>)
60014946:	9218      	str	r2, [sp, #96]	; 0x60
60014948:	2102      	movs	r1, #2
6001494a:	2200      	movs	r2, #0
6001494c:	2578      	movs	r5, #120	; 0x78
6001494e:	e751      	b.n	600147f4 <_vfprintf_r+0x550>
60014950:	7fefffff 	.word	0x7fefffff
60014954:	6001bf88 	.word	0x6001bf88
60014958:	6001bf8c 	.word	0x6001bf8c
6001495c:	6001bf4c 	.word	0x6001bf4c
60014960:	f89a 5000 	ldrb.w	r5, [sl]
60014964:	9b07      	ldr	r3, [sp, #28]
60014966:	2d6c      	cmp	r5, #108	; 0x6c
60014968:	f000 8470 	beq.w	6001524c <_vfprintf_r+0xfa8>
6001496c:	f043 0310 	orr.w	r3, r3, #16
60014970:	9307      	str	r3, [sp, #28]
60014972:	e4fa      	b.n	6001436a <_vfprintf_r+0xc6>
60014974:	f89a 5000 	ldrb.w	r5, [sl]
60014978:	9b07      	ldr	r3, [sp, #28]
6001497a:	2d68      	cmp	r5, #104	; 0x68
6001497c:	f000 845d 	beq.w	6001523a <_vfprintf_r+0xf96>
60014980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60014984:	9307      	str	r3, [sp, #28]
60014986:	e4f0      	b.n	6001436a <_vfprintf_r+0xc6>
60014988:	2d65      	cmp	r5, #101	; 0x65
6001498a:	f340 8130 	ble.w	60014bee <_vfprintf_r+0x94a>
6001498e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
60014992:	2200      	movs	r2, #0
60014994:	2300      	movs	r3, #0
60014996:	f7ee fae7 	bl	60002f68 <__aeabi_dcmpeq>
6001499a:	2800      	cmp	r0, #0
6001499c:	f000 8232 	beq.w	60014e04 <_vfprintf_r+0xb60>
600149a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
600149a2:	4ab8      	ldr	r2, [pc, #736]	; (60014c84 <_vfprintf_r+0x9e0>)
600149a4:	f8cb 2000 	str.w	r2, [fp]
600149a8:	3301      	adds	r3, #1
600149aa:	3701      	adds	r7, #1
600149ac:	2201      	movs	r2, #1
600149ae:	2b07      	cmp	r3, #7
600149b0:	972e      	str	r7, [sp, #184]	; 0xb8
600149b2:	932d      	str	r3, [sp, #180]	; 0xb4
600149b4:	f8cb 2004 	str.w	r2, [fp, #4]
600149b8:	f300 8502 	bgt.w	600153c0 <_vfprintf_r+0x111c>
600149bc:	f10b 0b08 	add.w	fp, fp, #8
600149c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
600149c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
600149c4:	4293      	cmp	r3, r2
600149c6:	db04      	blt.n	600149d2 <_vfprintf_r+0x72e>
600149c8:	9b07      	ldr	r3, [sp, #28]
600149ca:	07d8      	lsls	r0, r3, #31
600149cc:	d401      	bmi.n	600149d2 <_vfprintf_r+0x72e>
600149ce:	463d      	mov	r5, r7
600149d0:	e618      	b.n	60014604 <_vfprintf_r+0x360>
600149d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
600149d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
600149d6:	19dd      	adds	r5, r3, r7
600149d8:	e9cb 2300 	strd	r2, r3, [fp]
600149dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
600149de:	952e      	str	r5, [sp, #184]	; 0xb8
600149e0:	3301      	adds	r3, #1
600149e2:	2b07      	cmp	r3, #7
600149e4:	932d      	str	r3, [sp, #180]	; 0xb4
600149e6:	f300 843a 	bgt.w	6001525e <_vfprintf_r+0xfba>
600149ea:	f10b 0b08 	add.w	fp, fp, #8
600149ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
600149f0:	1e5c      	subs	r4, r3, #1
600149f2:	2c00      	cmp	r4, #0
600149f4:	f77f ae06 	ble.w	60014604 <_vfprintf_r+0x360>
600149f8:	2c10      	cmp	r4, #16
600149fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
600149fc:	4fa2      	ldr	r7, [pc, #648]	; (60014c88 <_vfprintf_r+0x9e4>)
600149fe:	f340 84f1 	ble.w	600153e4 <_vfprintf_r+0x1140>
60014a02:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
60014a06:	2610      	movs	r6, #16
60014a08:	e005      	b.n	60014a16 <_vfprintf_r+0x772>
60014a0a:	f10b 0b08 	add.w	fp, fp, #8
60014a0e:	3c10      	subs	r4, #16
60014a10:	2c10      	cmp	r4, #16
60014a12:	f340 84e7 	ble.w	600153e4 <_vfprintf_r+0x1140>
60014a16:	3301      	adds	r3, #1
60014a18:	3510      	adds	r5, #16
60014a1a:	2b07      	cmp	r3, #7
60014a1c:	e9cb 7600 	strd	r7, r6, [fp]
60014a20:	e9cd 352d 	strd	r3, r5, [sp, #180]	; 0xb4
60014a24:	ddf1      	ble.n	60014a0a <_vfprintf_r+0x766>
60014a26:	aa2c      	add	r2, sp, #176	; 0xb0
60014a28:	4649      	mov	r1, r9
60014a2a:	4640      	mov	r0, r8
60014a2c:	f7fe fd1e 	bl	6001346c <__sprint_r>
60014a30:	2800      	cmp	r0, #0
60014a32:	f47f ad6e 	bne.w	60014512 <_vfprintf_r+0x26e>
60014a36:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	; 0xb4
60014a3a:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014a3e:	e7e6      	b.n	60014a0e <_vfprintf_r+0x76a>
60014a40:	9e07      	ldr	r6, [sp, #28]
60014a42:	2901      	cmp	r1, #1
60014a44:	f000 817a 	beq.w	60014d3c <_vfprintf_r+0xa98>
60014a48:	2902      	cmp	r1, #2
60014a4a:	f000 8163 	beq.w	60014d14 <_vfprintf_r+0xa70>
60014a4e:	ac58      	add	r4, sp, #352	; 0x160
60014a50:	f003 0107 	and.w	r1, r3, #7
60014a54:	08db      	lsrs	r3, r3, #3
60014a56:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
60014a5a:	08d2      	lsrs	r2, r2, #3
60014a5c:	3130      	adds	r1, #48	; 0x30
60014a5e:	ea53 0702 	orrs.w	r7, r3, r2
60014a62:	4620      	mov	r0, r4
60014a64:	f804 1d01 	strb.w	r1, [r4, #-1]!
60014a68:	d1f2      	bne.n	60014a50 <_vfprintf_r+0x7ac>
60014a6a:	07f7      	lsls	r7, r6, #31
60014a6c:	9408      	str	r4, [sp, #32]
60014a6e:	f100 824a 	bmi.w	60014f06 <_vfprintf_r+0xc62>
60014a72:	ab58      	add	r3, sp, #352	; 0x160
60014a74:	9607      	str	r6, [sp, #28]
60014a76:	1b1e      	subs	r6, r3, r4
60014a78:	e6da      	b.n	60014830 <_vfprintf_r+0x58c>
60014a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
60014a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
60014a7e:	eba3 0802 	sub.w	r8, r3, r2
60014a82:	f1b8 0f00 	cmp.w	r8, #0
60014a86:	f77f ada4 	ble.w	600145d2 <_vfprintf_r+0x32e>
60014a8a:	f1b8 0f10 	cmp.w	r8, #16
60014a8e:	463a      	mov	r2, r7
60014a90:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014a92:	4f7d      	ldr	r7, [pc, #500]	; (60014c88 <_vfprintf_r+0x9e4>)
60014a94:	dd29      	ble.n	60014aea <_vfprintf_r+0x846>
60014a96:	951d      	str	r5, [sp, #116]	; 0x74
60014a98:	9620      	str	r6, [sp, #128]	; 0x80
60014a9a:	2410      	movs	r4, #16
60014a9c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
60014aa0:	4619      	mov	r1, r3
60014aa2:	e006      	b.n	60014ab2 <_vfprintf_r+0x80e>
60014aa4:	f1a8 0810 	sub.w	r8, r8, #16
60014aa8:	f1b8 0f10 	cmp.w	r8, #16
60014aac:	f10b 0b08 	add.w	fp, fp, #8
60014ab0:	dd18      	ble.n	60014ae4 <_vfprintf_r+0x840>
60014ab2:	3101      	adds	r1, #1
60014ab4:	3210      	adds	r2, #16
60014ab6:	2907      	cmp	r1, #7
60014ab8:	e9cb 7400 	strd	r7, r4, [fp]
60014abc:	e9cd 122d 	strd	r1, r2, [sp, #180]	; 0xb4
60014ac0:	ddf0      	ble.n	60014aa4 <_vfprintf_r+0x800>
60014ac2:	aa2c      	add	r2, sp, #176	; 0xb0
60014ac4:	4629      	mov	r1, r5
60014ac6:	4630      	mov	r0, r6
60014ac8:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014acc:	f7fe fcce 	bl	6001346c <__sprint_r>
60014ad0:	2800      	cmp	r0, #0
60014ad2:	f47f ad1e 	bne.w	60014512 <_vfprintf_r+0x26e>
60014ad6:	f1a8 0810 	sub.w	r8, r8, #16
60014ada:	f1b8 0f10 	cmp.w	r8, #16
60014ade:	e9dd 122d 	ldrd	r1, r2, [sp, #180]	; 0xb4
60014ae2:	dce6      	bgt.n	60014ab2 <_vfprintf_r+0x80e>
60014ae4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
60014ae6:	9e20      	ldr	r6, [sp, #128]	; 0x80
60014ae8:	460b      	mov	r3, r1
60014aea:	3301      	adds	r3, #1
60014aec:	f8cb 7000 	str.w	r7, [fp]
60014af0:	2b07      	cmp	r3, #7
60014af2:	eb08 0702 	add.w	r7, r8, r2
60014af6:	e9cd 372d 	strd	r3, r7, [sp, #180]	; 0xb4
60014afa:	f8cb 8004 	str.w	r8, [fp, #4]
60014afe:	f300 838f 	bgt.w	60015220 <_vfprintf_r+0xf7c>
60014b02:	eba9 0806 	sub.w	r8, r9, r6
60014b06:	f1b8 0f00 	cmp.w	r8, #0
60014b0a:	f10b 0b08 	add.w	fp, fp, #8
60014b0e:	f77f ad66 	ble.w	600145de <_vfprintf_r+0x33a>
60014b12:	f1b8 0f10 	cmp.w	r8, #16
60014b16:	463a      	mov	r2, r7
60014b18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014b1a:	4f5b      	ldr	r7, [pc, #364]	; (60014c88 <_vfprintf_r+0x9e4>)
60014b1c:	dd2e      	ble.n	60014b7c <_vfprintf_r+0x8d8>
60014b1e:	4659      	mov	r1, fp
60014b20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
60014b22:	46c3      	mov	fp, r8
60014b24:	f04f 0910 	mov.w	r9, #16
60014b28:	46b8      	mov	r8, r7
60014b2a:	4637      	mov	r7, r6
60014b2c:	462e      	mov	r6, r5
60014b2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
60014b30:	e006      	b.n	60014b40 <_vfprintf_r+0x89c>
60014b32:	f1ab 0b10 	sub.w	fp, fp, #16
60014b36:	f1bb 0f10 	cmp.w	fp, #16
60014b3a:	f101 0108 	add.w	r1, r1, #8
60014b3e:	dd18      	ble.n	60014b72 <_vfprintf_r+0x8ce>
60014b40:	3301      	adds	r3, #1
60014b42:	4851      	ldr	r0, [pc, #324]	; (60014c88 <_vfprintf_r+0x9e4>)
60014b44:	3210      	adds	r2, #16
60014b46:	2b07      	cmp	r3, #7
60014b48:	e9c1 0900 	strd	r0, r9, [r1]
60014b4c:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
60014b50:	ddef      	ble.n	60014b32 <_vfprintf_r+0x88e>
60014b52:	aa2c      	add	r2, sp, #176	; 0xb0
60014b54:	4629      	mov	r1, r5
60014b56:	4620      	mov	r0, r4
60014b58:	f7fe fc88 	bl	6001346c <__sprint_r>
60014b5c:	2800      	cmp	r0, #0
60014b5e:	f47f acd8 	bne.w	60014512 <_vfprintf_r+0x26e>
60014b62:	f1ab 0b10 	sub.w	fp, fp, #16
60014b66:	f1bb 0f10 	cmp.w	fp, #16
60014b6a:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
60014b6e:	a92f      	add	r1, sp, #188	; 0xbc
60014b70:	dce6      	bgt.n	60014b40 <_vfprintf_r+0x89c>
60014b72:	4635      	mov	r5, r6
60014b74:	463e      	mov	r6, r7
60014b76:	4647      	mov	r7, r8
60014b78:	46d8      	mov	r8, fp
60014b7a:	468b      	mov	fp, r1
60014b7c:	3301      	adds	r3, #1
60014b7e:	f8cb 7000 	str.w	r7, [fp]
60014b82:	2b07      	cmp	r3, #7
60014b84:	eb08 0702 	add.w	r7, r8, r2
60014b88:	e9cd 372d 	strd	r3, r7, [sp, #180]	; 0xb4
60014b8c:	f8cb 8004 	str.w	r8, [fp, #4]
60014b90:	f300 8213 	bgt.w	60014fba <_vfprintf_r+0xd16>
60014b94:	f10b 0b08 	add.w	fp, fp, #8
60014b98:	e521      	b.n	600145de <_vfprintf_r+0x33a>
60014b9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
60014b9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
60014b9e:	1959      	adds	r1, r3, r5
60014ba0:	e9cb 0300 	strd	r0, r3, [fp]
60014ba4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014ba6:	912e      	str	r1, [sp, #184]	; 0xb8
60014ba8:	3301      	adds	r3, #1
60014baa:	2b07      	cmp	r3, #7
60014bac:	932d      	str	r3, [sp, #180]	; 0xb4
60014bae:	f300 85e1 	bgt.w	60015774 <_vfprintf_r+0x14d0>
60014bb2:	f10b 0b08 	add.w	fp, fp, #8
60014bb6:	2a00      	cmp	r2, #0
60014bb8:	f2c0 8795 	blt.w	60015ae6 <_vfprintf_r+0x1842>
60014bbc:	9a08      	ldr	r2, [sp, #32]
60014bbe:	f8cb 2000 	str.w	r2, [fp]
60014bc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
60014bc4:	f8cb 2004 	str.w	r2, [fp, #4]
60014bc8:	3301      	adds	r3, #1
60014bca:	1855      	adds	r5, r2, r1
60014bcc:	2b07      	cmp	r3, #7
60014bce:	e9cd 352d 	strd	r3, r5, [sp, #180]	; 0xb4
60014bd2:	f77f ad15 	ble.w	60014600 <_vfprintf_r+0x35c>
60014bd6:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60014bda:	aa2c      	add	r2, sp, #176	; 0xb0
60014bdc:	f7fe fc46 	bl	6001346c <__sprint_r>
60014be0:	2800      	cmp	r0, #0
60014be2:	f47f ac96 	bne.w	60014512 <_vfprintf_r+0x26e>
60014be6:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
60014be8:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014bec:	e50a      	b.n	60014604 <_vfprintf_r+0x360>
60014bee:	9b12      	ldr	r3, [sp, #72]	; 0x48
60014bf0:	2b01      	cmp	r3, #1
60014bf2:	f10b 0608 	add.w	r6, fp, #8
60014bf6:	f340 8193 	ble.w	60014f20 <_vfprintf_r+0xc7c>
60014bfa:	9b08      	ldr	r3, [sp, #32]
60014bfc:	f8cb 3000 	str.w	r3, [fp]
60014c00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014c02:	3301      	adds	r3, #1
60014c04:	3701      	adds	r7, #1
60014c06:	2201      	movs	r2, #1
60014c08:	2b07      	cmp	r3, #7
60014c0a:	972e      	str	r7, [sp, #184]	; 0xb8
60014c0c:	932d      	str	r3, [sp, #180]	; 0xb4
60014c0e:	f8cb 2004 	str.w	r2, [fp, #4]
60014c12:	f300 8351 	bgt.w	600152b8 <_vfprintf_r+0x1014>
60014c16:	9a16      	ldr	r2, [sp, #88]	; 0x58
60014c18:	f103 0801 	add.w	r8, r3, #1
60014c1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
60014c1e:	19d5      	adds	r5, r2, r7
60014c20:	f1b8 0f07 	cmp.w	r8, #7
60014c24:	e9c6 3200 	strd	r3, r2, [r6]
60014c28:	e9cd 852d 	strd	r8, r5, [sp, #180]	; 0xb4
60014c2c:	f300 8350 	bgt.w	600152d0 <_vfprintf_r+0x102c>
60014c30:	3608      	adds	r6, #8
60014c32:	9b12      	ldr	r3, [sp, #72]	; 0x48
60014c34:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
60014c38:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
60014c3c:	2200      	movs	r2, #0
60014c3e:	2300      	movs	r3, #0
60014c40:	f7ee f992 	bl	60002f68 <__aeabi_dcmpeq>
60014c44:	2800      	cmp	r0, #0
60014c46:	f040 818c 	bne.w	60014f62 <_vfprintf_r+0xcbe>
60014c4a:	9c08      	ldr	r4, [sp, #32]
60014c4c:	f8c6 9004 	str.w	r9, [r6, #4]
60014c50:	f108 0801 	add.w	r8, r8, #1
60014c54:	3401      	adds	r4, #1
60014c56:	444d      	add	r5, r9
60014c58:	f1b8 0f07 	cmp.w	r8, #7
60014c5c:	e9cd 852d 	strd	r8, r5, [sp, #180]	; 0xb4
60014c60:	6034      	str	r4, [r6, #0]
60014c62:	f300 8172 	bgt.w	60014f4a <_vfprintf_r+0xca6>
60014c66:	3608      	adds	r6, #8
60014c68:	9a1a      	ldr	r2, [sp, #104]	; 0x68
60014c6a:	6072      	str	r2, [r6, #4]
60014c6c:	f108 0301 	add.w	r3, r8, #1
60014c70:	4415      	add	r5, r2
60014c72:	2b07      	cmp	r3, #7
60014c74:	aa28      	add	r2, sp, #160	; 0xa0
60014c76:	e9cd 352d 	strd	r3, r5, [sp, #180]	; 0xb4
60014c7a:	6032      	str	r2, [r6, #0]
60014c7c:	dcab      	bgt.n	60014bd6 <_vfprintf_r+0x932>
60014c7e:	f106 0b08 	add.w	fp, r6, #8
60014c82:	e4bf      	b.n	60014604 <_vfprintf_r+0x360>
60014c84:	6001bf98 	.word	0x6001bf98
60014c88:	6001bf9c 	.word	0x6001bf9c
60014c8c:	2f10      	cmp	r7, #16
60014c8e:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
60014c92:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 60014f7c <_vfprintf_r+0xcd8>
60014c96:	dd2d      	ble.n	60014cf4 <_vfprintf_r+0xa50>
60014c98:	931d      	str	r3, [sp, #116]	; 0x74
60014c9a:	4643      	mov	r3, r8
60014c9c:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
60014ca0:	46b0      	mov	r8, r6
60014ca2:	e9dd 540a 	ldrd	r5, r4, [sp, #40]	; 0x28
60014ca6:	461e      	mov	r6, r3
60014ca8:	e004      	b.n	60014cb4 <_vfprintf_r+0xa10>
60014caa:	3f10      	subs	r7, #16
60014cac:	2f10      	cmp	r7, #16
60014cae:	f10b 0b08 	add.w	fp, fp, #8
60014cb2:	dd19      	ble.n	60014ce8 <_vfprintf_r+0xa44>
60014cb4:	3201      	adds	r2, #1
60014cb6:	3110      	adds	r1, #16
60014cb8:	2310      	movs	r3, #16
60014cba:	2a07      	cmp	r2, #7
60014cbc:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
60014cc0:	f8cb 6000 	str.w	r6, [fp]
60014cc4:	f8cb 3004 	str.w	r3, [fp, #4]
60014cc8:	ddef      	ble.n	60014caa <_vfprintf_r+0xa06>
60014cca:	aa2c      	add	r2, sp, #176	; 0xb0
60014ccc:	4629      	mov	r1, r5
60014cce:	4620      	mov	r0, r4
60014cd0:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014cd4:	f7fe fbca 	bl	6001346c <__sprint_r>
60014cd8:	2800      	cmp	r0, #0
60014cda:	f47f ac1a 	bne.w	60014512 <_vfprintf_r+0x26e>
60014cde:	3f10      	subs	r7, #16
60014ce0:	2f10      	cmp	r7, #16
60014ce2:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
60014ce6:	dce5      	bgt.n	60014cb4 <_vfprintf_r+0xa10>
60014ce8:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
60014cec:	4630      	mov	r0, r6
60014cee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
60014cf0:	4646      	mov	r6, r8
60014cf2:	4680      	mov	r8, r0
60014cf4:	3201      	adds	r2, #1
60014cf6:	4439      	add	r1, r7
60014cf8:	2a07      	cmp	r2, #7
60014cfa:	f8cb 8000 	str.w	r8, [fp]
60014cfe:	f8cb 7004 	str.w	r7, [fp, #4]
60014d02:	912e      	str	r1, [sp, #184]	; 0xb8
60014d04:	922d      	str	r2, [sp, #180]	; 0xb4
60014d06:	f300 834b 	bgt.w	600153a0 <_vfprintf_r+0x10fc>
60014d0a:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
60014d0e:	f10b 0b08 	add.w	fp, fp, #8
60014d12:	e435      	b.n	60014580 <_vfprintf_r+0x2dc>
60014d14:	9c18      	ldr	r4, [sp, #96]	; 0x60
60014d16:	a958      	add	r1, sp, #352	; 0x160
60014d18:	f003 000f 	and.w	r0, r3, #15
60014d1c:	091b      	lsrs	r3, r3, #4
60014d1e:	5c20      	ldrb	r0, [r4, r0]
60014d20:	f801 0d01 	strb.w	r0, [r1, #-1]!
60014d24:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
60014d28:	0912      	lsrs	r2, r2, #4
60014d2a:	ea53 0002 	orrs.w	r0, r3, r2
60014d2e:	d1f3      	bne.n	60014d18 <_vfprintf_r+0xa74>
60014d30:	ab58      	add	r3, sp, #352	; 0x160
60014d32:	e9cd 6107 	strd	r6, r1, [sp, #28]
60014d36:	1a5e      	subs	r6, r3, r1
60014d38:	e57a      	b.n	60014830 <_vfprintf_r+0x58c>
60014d3a:	9e07      	ldr	r6, [sp, #28]
60014d3c:	2b0a      	cmp	r3, #10
60014d3e:	f172 0100 	sbcs.w	r1, r2, #0
60014d42:	f080 82d1 	bcs.w	600152e8 <_vfprintf_r+0x1044>
60014d46:	3330      	adds	r3, #48	; 0x30
60014d48:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
60014d4c:	f20d 135f 	addw	r3, sp, #351	; 0x15f
60014d50:	9607      	str	r6, [sp, #28]
60014d52:	9308      	str	r3, [sp, #32]
60014d54:	2601      	movs	r6, #1
60014d56:	e56b      	b.n	60014830 <_vfprintf_r+0x58c>
60014d58:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60014d5c:	aa2c      	add	r2, sp, #176	; 0xb0
60014d5e:	931d      	str	r3, [sp, #116]	; 0x74
60014d60:	f7fe fb84 	bl	6001346c <__sprint_r>
60014d64:	2800      	cmp	r0, #0
60014d66:	f47f abd4 	bne.w	60014512 <_vfprintf_r+0x26e>
60014d6a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
60014d6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
60014d6e:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014d72:	e419      	b.n	600145a8 <_vfprintf_r+0x304>
60014d74:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60014d78:	aa2c      	add	r2, sp, #176	; 0xb0
60014d7a:	f7fe fb77 	bl	6001346c <__sprint_r>
60014d7e:	2800      	cmp	r0, #0
60014d80:	f47f abc7 	bne.w	60014512 <_vfprintf_r+0x26e>
60014d84:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
60014d86:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014d8a:	e41f      	b.n	600145cc <_vfprintf_r+0x328>
60014d8c:	2c10      	cmp	r4, #16
60014d8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014d90:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 60014f7c <_vfprintf_r+0xcd8>
60014d94:	dd23      	ble.n	60014dde <_vfprintf_r+0xb3a>
60014d96:	4647      	mov	r7, r8
60014d98:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
60014d9c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
60014da0:	2610      	movs	r6, #16
60014da2:	e004      	b.n	60014dae <_vfprintf_r+0xb0a>
60014da4:	3c10      	subs	r4, #16
60014da6:	2c10      	cmp	r4, #16
60014da8:	f10b 0b08 	add.w	fp, fp, #8
60014dac:	dd16      	ble.n	60014ddc <_vfprintf_r+0xb38>
60014dae:	3301      	adds	r3, #1
60014db0:	3510      	adds	r5, #16
60014db2:	2b07      	cmp	r3, #7
60014db4:	e9cb 7600 	strd	r7, r6, [fp]
60014db8:	e9cd 352d 	strd	r3, r5, [sp, #180]	; 0xb4
60014dbc:	ddf2      	ble.n	60014da4 <_vfprintf_r+0xb00>
60014dbe:	aa2c      	add	r2, sp, #176	; 0xb0
60014dc0:	4649      	mov	r1, r9
60014dc2:	4640      	mov	r0, r8
60014dc4:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014dc8:	f7fe fb50 	bl	6001346c <__sprint_r>
60014dcc:	2800      	cmp	r0, #0
60014dce:	f47f aba0 	bne.w	60014512 <_vfprintf_r+0x26e>
60014dd2:	3c10      	subs	r4, #16
60014dd4:	2c10      	cmp	r4, #16
60014dd6:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	; 0xb4
60014dda:	dce8      	bgt.n	60014dae <_vfprintf_r+0xb0a>
60014ddc:	46b8      	mov	r8, r7
60014dde:	3301      	adds	r3, #1
60014de0:	4425      	add	r5, r4
60014de2:	2b07      	cmp	r3, #7
60014de4:	e9cb 8400 	strd	r8, r4, [fp]
60014de8:	e9cd 352d 	strd	r3, r5, [sp, #180]	; 0xb4
60014dec:	f77f ac13 	ble.w	60014616 <_vfprintf_r+0x372>
60014df0:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60014df4:	aa2c      	add	r2, sp, #176	; 0xb0
60014df6:	f7fe fb39 	bl	6001346c <__sprint_r>
60014dfa:	2800      	cmp	r0, #0
60014dfc:	f47f ab89 	bne.w	60014512 <_vfprintf_r+0x26e>
60014e00:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
60014e02:	e408      	b.n	60014616 <_vfprintf_r+0x372>
60014e04:	9a26      	ldr	r2, [sp, #152]	; 0x98
60014e06:	2a00      	cmp	r2, #0
60014e08:	f340 812a 	ble.w	60015060 <_vfprintf_r+0xdbc>
60014e0c:	9e10      	ldr	r6, [sp, #64]	; 0x40
60014e0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
60014e10:	9b08      	ldr	r3, [sp, #32]
60014e12:	4296      	cmp	r6, r2
60014e14:	bfa8      	it	ge
60014e16:	4616      	movge	r6, r2
60014e18:	2e00      	cmp	r6, #0
60014e1a:	441a      	add	r2, r3
60014e1c:	921d      	str	r2, [sp, #116]	; 0x74
60014e1e:	dd0b      	ble.n	60014e38 <_vfprintf_r+0xb94>
60014e20:	e9cb 3600 	strd	r3, r6, [fp]
60014e24:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014e26:	3301      	adds	r3, #1
60014e28:	4437      	add	r7, r6
60014e2a:	2b07      	cmp	r3, #7
60014e2c:	972e      	str	r7, [sp, #184]	; 0xb8
60014e2e:	932d      	str	r3, [sp, #180]	; 0xb4
60014e30:	f300 85e0 	bgt.w	600159f4 <_vfprintf_r+0x1750>
60014e34:	f10b 0b08 	add.w	fp, fp, #8
60014e38:	9d10      	ldr	r5, [sp, #64]	; 0x40
60014e3a:	2e00      	cmp	r6, #0
60014e3c:	bfa8      	it	ge
60014e3e:	1bad      	subge	r5, r5, r6
60014e40:	2d00      	cmp	r5, #0
60014e42:	f300 82f8 	bgt.w	60015436 <_vfprintf_r+0x1192>
60014e46:	9b10      	ldr	r3, [sp, #64]	; 0x40
60014e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
60014e4c:	4499      	add	r9, r3
60014e4e:	9b07      	ldr	r3, [sp, #28]
60014e50:	0559      	lsls	r1, r3, #21
60014e52:	f100 84e5 	bmi.w	60015820 <_vfprintf_r+0x157c>
60014e56:	9c26      	ldr	r4, [sp, #152]	; 0x98
60014e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
60014e5a:	429c      	cmp	r4, r3
60014e5c:	db03      	blt.n	60014e66 <_vfprintf_r+0xbc2>
60014e5e:	9a07      	ldr	r2, [sp, #28]
60014e60:	07d2      	lsls	r2, r2, #31
60014e62:	f140 83d4 	bpl.w	6001560e <_vfprintf_r+0x136a>
60014e66:	9b16      	ldr	r3, [sp, #88]	; 0x58
60014e68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
60014e6a:	19dd      	adds	r5, r3, r7
60014e6c:	e9cb 2300 	strd	r2, r3, [fp]
60014e70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014e72:	952e      	str	r5, [sp, #184]	; 0xb8
60014e74:	3301      	adds	r3, #1
60014e76:	2b07      	cmp	r3, #7
60014e78:	932d      	str	r3, [sp, #180]	; 0xb4
60014e7a:	f300 85da 	bgt.w	60015a32 <_vfprintf_r+0x178e>
60014e7e:	f10b 0b08 	add.w	fp, fp, #8
60014e82:	9b12      	ldr	r3, [sp, #72]	; 0x48
60014e84:	1b1c      	subs	r4, r3, r4
60014e86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
60014e88:	eba3 0609 	sub.w	r6, r3, r9
60014e8c:	42a6      	cmp	r6, r4
60014e8e:	bfa8      	it	ge
60014e90:	4626      	movge	r6, r4
60014e92:	2e00      	cmp	r6, #0
60014e94:	dd0d      	ble.n	60014eb2 <_vfprintf_r+0xc0e>
60014e96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014e98:	f8cb 9000 	str.w	r9, [fp]
60014e9c:	3301      	adds	r3, #1
60014e9e:	4435      	add	r5, r6
60014ea0:	2b07      	cmp	r3, #7
60014ea2:	f8cb 6004 	str.w	r6, [fp, #4]
60014ea6:	952e      	str	r5, [sp, #184]	; 0xb8
60014ea8:	932d      	str	r3, [sp, #180]	; 0xb4
60014eaa:	f300 85dc 	bgt.w	60015a66 <_vfprintf_r+0x17c2>
60014eae:	f10b 0b08 	add.w	fp, fp, #8
60014eb2:	2e00      	cmp	r6, #0
60014eb4:	bfa8      	it	ge
60014eb6:	1ba4      	subge	r4, r4, r6
60014eb8:	2c00      	cmp	r4, #0
60014eba:	f77f aba3 	ble.w	60014604 <_vfprintf_r+0x360>
60014ebe:	2c10      	cmp	r4, #16
60014ec0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014ec2:	4f2f      	ldr	r7, [pc, #188]	; (60014f80 <_vfprintf_r+0xcdc>)
60014ec4:	f340 828e 	ble.w	600153e4 <_vfprintf_r+0x1140>
60014ec8:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
60014ecc:	2610      	movs	r6, #16
60014ece:	e005      	b.n	60014edc <_vfprintf_r+0xc38>
60014ed0:	f10b 0b08 	add.w	fp, fp, #8
60014ed4:	3c10      	subs	r4, #16
60014ed6:	2c10      	cmp	r4, #16
60014ed8:	f340 8284 	ble.w	600153e4 <_vfprintf_r+0x1140>
60014edc:	3301      	adds	r3, #1
60014ede:	3510      	adds	r5, #16
60014ee0:	2b07      	cmp	r3, #7
60014ee2:	e9cb 7600 	strd	r7, r6, [fp]
60014ee6:	e9cd 352d 	strd	r3, r5, [sp, #180]	; 0xb4
60014eea:	ddf1      	ble.n	60014ed0 <_vfprintf_r+0xc2c>
60014eec:	aa2c      	add	r2, sp, #176	; 0xb0
60014eee:	4649      	mov	r1, r9
60014ef0:	4640      	mov	r0, r8
60014ef2:	f7fe fabb 	bl	6001346c <__sprint_r>
60014ef6:	2800      	cmp	r0, #0
60014ef8:	f47f ab0b 	bne.w	60014512 <_vfprintf_r+0x26e>
60014efc:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	; 0xb4
60014f00:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014f04:	e7e6      	b.n	60014ed4 <_vfprintf_r+0xc30>
60014f06:	2930      	cmp	r1, #48	; 0x30
60014f08:	f000 8184 	beq.w	60015214 <_vfprintf_r+0xf70>
60014f0c:	9a08      	ldr	r2, [sp, #32]
60014f0e:	9607      	str	r6, [sp, #28]
60014f10:	2330      	movs	r3, #48	; 0x30
60014f12:	3802      	subs	r0, #2
60014f14:	f802 3c01 	strb.w	r3, [r2, #-1]
60014f18:	ab58      	add	r3, sp, #352	; 0x160
60014f1a:	1a1e      	subs	r6, r3, r0
60014f1c:	9008      	str	r0, [sp, #32]
60014f1e:	e487      	b.n	60014830 <_vfprintf_r+0x58c>
60014f20:	9b07      	ldr	r3, [sp, #28]
60014f22:	07db      	lsls	r3, r3, #31
60014f24:	f53f ae69 	bmi.w	60014bfa <_vfprintf_r+0x956>
60014f28:	9b08      	ldr	r3, [sp, #32]
60014f2a:	f8cb 3000 	str.w	r3, [fp]
60014f2e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60014f30:	f103 0801 	add.w	r8, r3, #1
60014f34:	1c7d      	adds	r5, r7, #1
60014f36:	2301      	movs	r3, #1
60014f38:	f1b8 0f07 	cmp.w	r8, #7
60014f3c:	952e      	str	r5, [sp, #184]	; 0xb8
60014f3e:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
60014f42:	f8cb 3004 	str.w	r3, [fp, #4]
60014f46:	f77f ae8f 	ble.w	60014c68 <_vfprintf_r+0x9c4>
60014f4a:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60014f4e:	aa2c      	add	r2, sp, #176	; 0xb0
60014f50:	f7fe fa8c 	bl	6001346c <__sprint_r>
60014f54:	2800      	cmp	r0, #0
60014f56:	f47f aadc 	bne.w	60014512 <_vfprintf_r+0x26e>
60014f5a:	e9dd 852d 	ldrd	r8, r5, [sp, #180]	; 0xb4
60014f5e:	ae2f      	add	r6, sp, #188	; 0xbc
60014f60:	e682      	b.n	60014c68 <_vfprintf_r+0x9c4>
60014f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
60014f64:	2b01      	cmp	r3, #1
60014f66:	f77f ae7f 	ble.w	60014c68 <_vfprintf_r+0x9c4>
60014f6a:	2b11      	cmp	r3, #17
60014f6c:	4f04      	ldr	r7, [pc, #16]	; (60014f80 <_vfprintf_r+0xcdc>)
60014f6e:	f340 8255 	ble.w	6001541c <_vfprintf_r+0x1178>
60014f72:	4643      	mov	r3, r8
60014f74:	2410      	movs	r4, #16
60014f76:	e9dd b80a 	ldrd	fp, r8, [sp, #40]	; 0x28
60014f7a:	e00a      	b.n	60014f92 <_vfprintf_r+0xcee>
60014f7c:	6001bfac 	.word	0x6001bfac
60014f80:	6001bf9c 	.word	0x6001bf9c
60014f84:	3608      	adds	r6, #8
60014f86:	f1a9 0910 	sub.w	r9, r9, #16
60014f8a:	f1b9 0f10 	cmp.w	r9, #16
60014f8e:	f340 8244 	ble.w	6001541a <_vfprintf_r+0x1176>
60014f92:	3301      	adds	r3, #1
60014f94:	3510      	adds	r5, #16
60014f96:	2b07      	cmp	r3, #7
60014f98:	e9c6 7400 	strd	r7, r4, [r6]
60014f9c:	e9cd 352d 	strd	r3, r5, [sp, #180]	; 0xb4
60014fa0:	ddf0      	ble.n	60014f84 <_vfprintf_r+0xce0>
60014fa2:	aa2c      	add	r2, sp, #176	; 0xb0
60014fa4:	4659      	mov	r1, fp
60014fa6:	4640      	mov	r0, r8
60014fa8:	f7fe fa60 	bl	6001346c <__sprint_r>
60014fac:	2800      	cmp	r0, #0
60014fae:	f47f aab0 	bne.w	60014512 <_vfprintf_r+0x26e>
60014fb2:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	; 0xb4
60014fb6:	ae2f      	add	r6, sp, #188	; 0xbc
60014fb8:	e7e5      	b.n	60014f86 <_vfprintf_r+0xce2>
60014fba:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60014fbe:	aa2c      	add	r2, sp, #176	; 0xb0
60014fc0:	f7fe fa54 	bl	6001346c <__sprint_r>
60014fc4:	2800      	cmp	r0, #0
60014fc6:	f47f aaa4 	bne.w	60014512 <_vfprintf_r+0x26e>
60014fca:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
60014fcc:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60014fd0:	f7ff bb05 	b.w	600145de <_vfprintf_r+0x33a>
60014fd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
60014fd6:	f852 3b04 	ldr.w	r3, [r2], #4
60014fda:	920f      	str	r2, [sp, #60]	; 0x3c
60014fdc:	9a07      	ldr	r2, [sp, #28]
60014fde:	06d0      	lsls	r0, r2, #27
60014fe0:	d473      	bmi.n	600150ca <_vfprintf_r+0xe26>
60014fe2:	9a07      	ldr	r2, [sp, #28]
60014fe4:	0651      	lsls	r1, r2, #25
60014fe6:	d56c      	bpl.n	600150c2 <_vfprintf_r+0xe1e>
60014fe8:	f343 32c0 	sbfx	r2, r3, #15, #1
60014fec:	4611      	mov	r1, r2
60014fee:	b21b      	sxth	r3, r3
60014ff0:	f7ff bba1 	b.w	60014736 <_vfprintf_r+0x492>
60014ff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
60014ff6:	f851 3b04 	ldr.w	r3, [r1], #4
60014ffa:	910f      	str	r1, [sp, #60]	; 0x3c
60014ffc:	f016 0110 	ands.w	r1, r6, #16
60015000:	d15c      	bne.n	600150bc <_vfprintf_r+0xe18>
60015002:	f016 0040 	ands.w	r0, r6, #64	; 0x40
60015006:	d054      	beq.n	600150b2 <_vfprintf_r+0xe0e>
60015008:	460a      	mov	r2, r1
6001500a:	b29b      	uxth	r3, r3
6001500c:	2101      	movs	r1, #1
6001500e:	f7ff bbf1 	b.w	600147f4 <_vfprintf_r+0x550>
60015012:	990f      	ldr	r1, [sp, #60]	; 0x3c
60015014:	f851 3b04 	ldr.w	r3, [r1], #4
60015018:	910f      	str	r1, [sp, #60]	; 0x3c
6001501a:	9907      	ldr	r1, [sp, #28]
6001501c:	f011 0110 	ands.w	r1, r1, #16
60015020:	f47f abe4 	bne.w	600147ec <_vfprintf_r+0x548>
60015024:	9a07      	ldr	r2, [sp, #28]
60015026:	f012 0040 	ands.w	r0, r2, #64	; 0x40
6001502a:	f000 822e 	beq.w	6001548a <_vfprintf_r+0x11e6>
6001502e:	b29b      	uxth	r3, r3
60015030:	460a      	mov	r2, r1
60015032:	f7ff bbdb 	b.w	600147ec <_vfprintf_r+0x548>
60015036:	425b      	negs	r3, r3
60015038:	9e07      	ldr	r6, [sp, #28]
6001503a:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
6001503e:	202d      	movs	r0, #45	; 0x2d
60015040:	2101      	movs	r1, #1
60015042:	f7ff bbd8 	b.w	600147f6 <_vfprintf_r+0x552>
60015046:	9d0a      	ldr	r5, [sp, #40]	; 0x28
60015048:	6da8      	ldr	r0, [r5, #88]	; 0x58
6001504a:	f7f6 fb25 	bl	6000b698 <__retarget_lock_acquire_recursive>
6001504e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
60015052:	f7ff b946 	b.w	600142e2 <_vfprintf_r+0x3e>
60015056:	f89a 5000 	ldrb.w	r5, [sl]
6001505a:	930f      	str	r3, [sp, #60]	; 0x3c
6001505c:	f7ff b985 	b.w	6001436a <_vfprintf_r+0xc6>
60015060:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
60015062:	49a7      	ldr	r1, [pc, #668]	; (60015300 <_vfprintf_r+0x105c>)
60015064:	f8cb 1000 	str.w	r1, [fp]
60015068:	3301      	adds	r3, #1
6001506a:	1c7d      	adds	r5, r7, #1
6001506c:	2101      	movs	r1, #1
6001506e:	2b07      	cmp	r3, #7
60015070:	952e      	str	r5, [sp, #184]	; 0xb8
60015072:	932d      	str	r3, [sp, #180]	; 0xb4
60015074:	f8cb 1004 	str.w	r1, [fp, #4]
60015078:	f300 84a2 	bgt.w	600159c0 <_vfprintf_r+0x171c>
6001507c:	f10b 0b08 	add.w	fp, fp, #8
60015080:	2a00      	cmp	r2, #0
60015082:	f47f ad8a 	bne.w	60014b9a <_vfprintf_r+0x8f6>
60015086:	9b07      	ldr	r3, [sp, #28]
60015088:	9a12      	ldr	r2, [sp, #72]	; 0x48
6001508a:	f003 0301 	and.w	r3, r3, #1
6001508e:	4313      	orrs	r3, r2
60015090:	f43f aab8 	beq.w	60014604 <_vfprintf_r+0x360>
60015094:	9b16      	ldr	r3, [sp, #88]	; 0x58
60015096:	9a17      	ldr	r2, [sp, #92]	; 0x5c
60015098:	1959      	adds	r1, r3, r5
6001509a:	e9cb 2300 	strd	r2, r3, [fp]
6001509e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
600150a0:	912e      	str	r1, [sp, #184]	; 0xb8
600150a2:	3301      	adds	r3, #1
600150a4:	2b07      	cmp	r3, #7
600150a6:	932d      	str	r3, [sp, #180]	; 0xb4
600150a8:	f300 8364 	bgt.w	60015774 <_vfprintf_r+0x14d0>
600150ac:	f10b 0b08 	add.w	fp, fp, #8
600150b0:	e584      	b.n	60014bbc <_vfprintf_r+0x918>
600150b2:	f416 7200 	ands.w	r2, r6, #512	; 0x200
600150b6:	bf1c      	itt	ne
600150b8:	b2db      	uxtbne	r3, r3
600150ba:	4602      	movne	r2, r0
600150bc:	2101      	movs	r1, #1
600150be:	f7ff bb99 	b.w	600147f4 <_vfprintf_r+0x550>
600150c2:	9a07      	ldr	r2, [sp, #28]
600150c4:	0592      	lsls	r2, r2, #22
600150c6:	f100 82b1 	bmi.w	6001562c <_vfprintf_r+0x1388>
600150ca:	17da      	asrs	r2, r3, #31
600150cc:	4611      	mov	r1, r2
600150ce:	f7ff bb32 	b.w	60014736 <_vfprintf_r+0x492>
600150d2:	9b07      	ldr	r3, [sp, #28]
600150d4:	06dd      	lsls	r5, r3, #27
600150d6:	f100 8192 	bmi.w	600153fe <_vfprintf_r+0x115a>
600150da:	9b07      	ldr	r3, [sp, #28]
600150dc:	065c      	lsls	r4, r3, #25
600150de:	f100 829f 	bmi.w	60015620 <_vfprintf_r+0x137c>
600150e2:	9b07      	ldr	r3, [sp, #28]
600150e4:	0598      	lsls	r0, r3, #22
600150e6:	f140 818a 	bpl.w	600153fe <_vfprintf_r+0x115a>
600150ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
600150ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
600150ee:	681b      	ldr	r3, [r3, #0]
600150f0:	701a      	strb	r2, [r3, #0]
600150f2:	e418      	b.n	60014926 <_vfprintf_r+0x682>
600150f4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
600150f8:	4602      	mov	r2, r0
600150fa:	460b      	mov	r3, r1
600150fc:	f7ee fbb6 	bl	6000386c <__aeabi_dcmpun>
60015100:	2800      	cmp	r0, #0
60015102:	f040 858c 	bne.w	60015c1e <_vfprintf_r+0x197a>
60015106:	2d61      	cmp	r5, #97	; 0x61
60015108:	f000 8491 	beq.w	60015a2e <_vfprintf_r+0x178a>
6001510c:	2d41      	cmp	r5, #65	; 0x41
6001510e:	f000 8293 	beq.w	60015638 <_vfprintf_r+0x1394>
60015112:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
60015116:	f000 8573 	beq.w	60015c00 <_vfprintf_r+0x195c>
6001511a:	f025 0320 	bic.w	r3, r5, #32
6001511e:	2b47      	cmp	r3, #71	; 0x47
60015120:	d104      	bne.n	6001512c <_vfprintf_r+0xe88>
60015122:	f1b9 0f00 	cmp.w	r9, #0
60015126:	bf08      	it	eq
60015128:	f04f 0901 	moveq.w	r9, #1
6001512c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
60015130:	9c07      	ldr	r4, [sp, #28]
60015132:	2a00      	cmp	r2, #0
60015134:	f444 7080 	orr.w	r0, r4, #256	; 0x100
60015138:	9009      	str	r0, [sp, #36]	; 0x24
6001513a:	f2c0 844f 	blt.w	600159dc <_vfprintf_r+0x1738>
6001513e:	e9cd 1222 	strd	r1, r2, [sp, #136]	; 0x88
60015142:	2300      	movs	r3, #0
60015144:	931d      	str	r3, [sp, #116]	; 0x74
60015146:	930e      	str	r3, [sp, #56]	; 0x38
60015148:	f1a5 0341 	sub.w	r3, r5, #65	; 0x41
6001514c:	2b25      	cmp	r3, #37	; 0x25
6001514e:	f200 81c5 	bhi.w	600154dc <_vfprintf_r+0x1238>
60015152:	e8df f013 	tbh	[pc, r3, lsl #1]
60015156:	0337      	.short	0x0337
60015158:	01c301c3 	.word	0x01c301c3
6001515c:	033001c3 	.word	0x033001c3
60015160:	01c30334 	.word	0x01c30334
60015164:	01c301c3 	.word	0x01c301c3
60015168:	01c301c3 	.word	0x01c301c3
6001516c:	01c301c3 	.word	0x01c301c3
60015170:	01c301c3 	.word	0x01c301c3
60015174:	01c301c3 	.word	0x01c301c3
60015178:	01c301c3 	.word	0x01c301c3
6001517c:	01c301c3 	.word	0x01c301c3
60015180:	01c301c3 	.word	0x01c301c3
60015184:	01c301c3 	.word	0x01c301c3
60015188:	01c301c3 	.word	0x01c301c3
6001518c:	01c301c3 	.word	0x01c301c3
60015190:	01c301c3 	.word	0x01c301c3
60015194:	01c301c3 	.word	0x01c301c3
60015198:	01c301c3 	.word	0x01c301c3
6001519c:	033001c3 	.word	0x033001c3
600151a0:	0334      	.short	0x0334
600151a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
600151a4:	f89a 5000 	ldrb.w	r5, [sl]
600151a8:	2b00      	cmp	r3, #0
600151aa:	f43f a8de 	beq.w	6001436a <_vfprintf_r+0xc6>
600151ae:	781b      	ldrb	r3, [r3, #0]
600151b0:	2b00      	cmp	r3, #0
600151b2:	f43f a8da 	beq.w	6001436a <_vfprintf_r+0xc6>
600151b6:	9b07      	ldr	r3, [sp, #28]
600151b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
600151bc:	9307      	str	r3, [sp, #28]
600151be:	f7ff b8d4 	b.w	6001436a <_vfprintf_r+0xc6>
600151c2:	4b50      	ldr	r3, [pc, #320]	; (60015304 <_vfprintf_r+0x1060>)
600151c4:	9318      	str	r3, [sp, #96]	; 0x60
600151c6:	9b07      	ldr	r3, [sp, #28]
600151c8:	f013 0220 	ands.w	r2, r3, #32
600151cc:	d064      	beq.n	60015298 <_vfprintf_r+0xff4>
600151ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
600151d0:	3307      	adds	r3, #7
600151d2:	f023 0307 	bic.w	r3, r3, #7
600151d6:	4619      	mov	r1, r3
600151d8:	685a      	ldr	r2, [r3, #4]
600151da:	f851 3b08 	ldr.w	r3, [r1], #8
600151de:	910f      	str	r1, [sp, #60]	; 0x3c
600151e0:	9807      	ldr	r0, [sp, #28]
600151e2:	07c1      	lsls	r1, r0, #31
600151e4:	d50a      	bpl.n	600151fc <_vfprintf_r+0xf58>
600151e6:	ea53 0102 	orrs.w	r1, r3, r2
600151ea:	d007      	beq.n	600151fc <_vfprintf_r+0xf58>
600151ec:	f040 0102 	orr.w	r1, r0, #2
600151f0:	9107      	str	r1, [sp, #28]
600151f2:	2130      	movs	r1, #48	; 0x30
600151f4:	f88d 5095 	strb.w	r5, [sp, #149]	; 0x95
600151f8:	f88d 1094 	strb.w	r1, [sp, #148]	; 0x94
600151fc:	9907      	ldr	r1, [sp, #28]
600151fe:	f421 6680 	bic.w	r6, r1, #1024	; 0x400
60015202:	2102      	movs	r1, #2
60015204:	f7ff baf6 	b.w	600147f4 <_vfprintf_r+0x550>
60015208:	9e07      	ldr	r6, [sp, #28]
6001520a:	f7ff bb6c 	b.w	600148e6 <_vfprintf_r+0x642>
6001520e:	4b3e      	ldr	r3, [pc, #248]	; (60015308 <_vfprintf_r+0x1064>)
60015210:	9318      	str	r3, [sp, #96]	; 0x60
60015212:	e7d8      	b.n	600151c6 <_vfprintf_r+0xf22>
60015214:	9a08      	ldr	r2, [sp, #32]
60015216:	9607      	str	r6, [sp, #28]
60015218:	ab58      	add	r3, sp, #352	; 0x160
6001521a:	1a9e      	subs	r6, r3, r2
6001521c:	f7ff bb08 	b.w	60014830 <_vfprintf_r+0x58c>
60015220:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60015224:	aa2c      	add	r2, sp, #176	; 0xb0
60015226:	f7fe f921 	bl	6001346c <__sprint_r>
6001522a:	2800      	cmp	r0, #0
6001522c:	f47f a971 	bne.w	60014512 <_vfprintf_r+0x26e>
60015230:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
60015232:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60015236:	f7ff b9cc 	b.w	600145d2 <_vfprintf_r+0x32e>
6001523a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
6001523e:	f89a 5001 	ldrb.w	r5, [sl, #1]
60015242:	9307      	str	r3, [sp, #28]
60015244:	f10a 0a01 	add.w	sl, sl, #1
60015248:	f7ff b88f 	b.w	6001436a <_vfprintf_r+0xc6>
6001524c:	f043 0320 	orr.w	r3, r3, #32
60015250:	f89a 5001 	ldrb.w	r5, [sl, #1]
60015254:	9307      	str	r3, [sp, #28]
60015256:	f10a 0a01 	add.w	sl, sl, #1
6001525a:	f7ff b886 	b.w	6001436a <_vfprintf_r+0xc6>
6001525e:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60015262:	aa2c      	add	r2, sp, #176	; 0xb0
60015264:	f7fe f902 	bl	6001346c <__sprint_r>
60015268:	2800      	cmp	r0, #0
6001526a:	f47f a952 	bne.w	60014512 <_vfprintf_r+0x26e>
6001526e:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
60015270:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60015274:	f7ff bbbb 	b.w	600149ee <_vfprintf_r+0x74a>
60015278:	464e      	mov	r6, r9
6001527a:	2e06      	cmp	r6, #6
6001527c:	461a      	mov	r2, r3
6001527e:	bf28      	it	cs
60015280:	2606      	movcs	r6, #6
60015282:	4699      	mov	r9, r3
60015284:	930e      	str	r3, [sp, #56]	; 0x38
60015286:	4b21      	ldr	r3, [pc, #132]	; (6001530c <_vfprintf_r+0x1068>)
60015288:	9609      	str	r6, [sp, #36]	; 0x24
6001528a:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
6001528e:	970f      	str	r7, [sp, #60]	; 0x3c
60015290:	9308      	str	r3, [sp, #32]
60015292:	9213      	str	r2, [sp, #76]	; 0x4c
60015294:	f7ff ba21 	b.w	600146da <_vfprintf_r+0x436>
60015298:	990f      	ldr	r1, [sp, #60]	; 0x3c
6001529a:	f851 3b04 	ldr.w	r3, [r1], #4
6001529e:	910f      	str	r1, [sp, #60]	; 0x3c
600152a0:	9907      	ldr	r1, [sp, #28]
600152a2:	f011 0110 	ands.w	r1, r1, #16
600152a6:	d19b      	bne.n	600151e0 <_vfprintf_r+0xf3c>
600152a8:	9a07      	ldr	r2, [sp, #28]
600152aa:	f012 0040 	ands.w	r0, r2, #64	; 0x40
600152ae:	f000 80e5 	beq.w	6001547c <_vfprintf_r+0x11d8>
600152b2:	b29b      	uxth	r3, r3
600152b4:	460a      	mov	r2, r1
600152b6:	e793      	b.n	600151e0 <_vfprintf_r+0xf3c>
600152b8:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
600152bc:	aa2c      	add	r2, sp, #176	; 0xb0
600152be:	f7fe f8d5 	bl	6001346c <__sprint_r>
600152c2:	2800      	cmp	r0, #0
600152c4:	f47f a925 	bne.w	60014512 <_vfprintf_r+0x26e>
600152c8:	e9dd 372d 	ldrd	r3, r7, [sp, #180]	; 0xb4
600152cc:	ae2f      	add	r6, sp, #188	; 0xbc
600152ce:	e4a2      	b.n	60014c16 <_vfprintf_r+0x972>
600152d0:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
600152d4:	aa2c      	add	r2, sp, #176	; 0xb0
600152d6:	f7fe f8c9 	bl	6001346c <__sprint_r>
600152da:	2800      	cmp	r0, #0
600152dc:	f47f a919 	bne.w	60014512 <_vfprintf_r+0x26e>
600152e0:	e9dd 852d 	ldrd	r8, r5, [sp, #180]	; 0xb4
600152e4:	ae2f      	add	r6, sp, #188	; 0xbc
600152e6:	e4a4      	b.n	60014c32 <_vfprintf_r+0x98e>
600152e8:	2100      	movs	r1, #0
600152ea:	f406 6780 	and.w	r7, r6, #1024	; 0x400
600152ee:	9609      	str	r6, [sp, #36]	; 0x24
600152f0:	e9cd a507 	strd	sl, r5, [sp, #28]
600152f4:	f8df 8018 	ldr.w	r8, [pc, #24]	; 60015310 <_vfprintf_r+0x106c>
600152f8:	9e19      	ldr	r6, [sp, #100]	; 0x64
600152fa:	ac58      	add	r4, sp, #352	; 0x160
600152fc:	468c      	mov	ip, r1
600152fe:	e00f      	b.n	60015320 <_vfprintf_r+0x107c>
60015300:	6001bf98 	.word	0x6001bf98
60015304:	6001bf38 	.word	0x6001bf38
60015308:	6001bf4c 	.word	0x6001bf4c
6001530c:	6001bf60 	.word	0x6001bf60
60015310:	cccccccd 	.word	0xcccccccd
60015314:	2b0a      	cmp	r3, #10
60015316:	f172 0200 	sbcs.w	r2, r2, #0
6001531a:	d335      	bcc.n	60015388 <_vfprintf_r+0x10e4>
6001531c:	4653      	mov	r3, sl
6001531e:	462a      	mov	r2, r5
60015320:	1899      	adds	r1, r3, r2
60015322:	f141 0100 	adc.w	r1, r1, #0
60015326:	fba8 0501 	umull	r0, r5, r8, r1
6001532a:	f025 0003 	bic.w	r0, r5, #3
6001532e:	eb00 0095 	add.w	r0, r0, r5, lsr #2
60015332:	1a09      	subs	r1, r1, r0
60015334:	1a58      	subs	r0, r3, r1
60015336:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
6001533a:	f162 0e00 	sbc.w	lr, r2, #0
6001533e:	fb05 f500 	mul.w	r5, r5, r0
60015342:	fb08 550e 	mla	r5, r8, lr, r5
60015346:	fba0 a008 	umull	sl, r0, r0, r8
6001534a:	4405      	add	r5, r0
6001534c:	f00a 0e01 	and.w	lr, sl, #1
60015350:	2005      	movs	r0, #5
60015352:	fbae 0e00 	umull	r0, lr, lr, r0
60015356:	1840      	adds	r0, r0, r1
60015358:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
6001535c:	3030      	adds	r0, #48	; 0x30
6001535e:	f804 0c01 	strb.w	r0, [r4, #-1]
60015362:	ea4a 7ac5 	orr.w	sl, sl, r5, lsl #31
60015366:	f10c 0c01 	add.w	ip, ip, #1
6001536a:	3c01      	subs	r4, #1
6001536c:	086d      	lsrs	r5, r5, #1
6001536e:	2f00      	cmp	r7, #0
60015370:	d0d0      	beq.n	60015314 <_vfprintf_r+0x1070>
60015372:	7831      	ldrb	r1, [r6, #0]
60015374:	458c      	cmp	ip, r1
60015376:	d1cd      	bne.n	60015314 <_vfprintf_r+0x1070>
60015378:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
6001537c:	d0ca      	beq.n	60015314 <_vfprintf_r+0x1070>
6001537e:	2b0a      	cmp	r3, #10
60015380:	f172 0200 	sbcs.w	r2, r2, #0
60015384:	f080 809d 	bcs.w	600154c2 <_vfprintf_r+0x121e>
60015388:	9619      	str	r6, [sp, #100]	; 0x64
6001538a:	9e09      	ldr	r6, [sp, #36]	; 0x24
6001538c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
60015390:	ab58      	add	r3, sp, #352	; 0x160
60015392:	e9dd a507 	ldrd	sl, r5, [sp, #28]
60015396:	e9cd 6407 	strd	r6, r4, [sp, #28]
6001539a:	1b1e      	subs	r6, r3, r4
6001539c:	f7ff ba48 	b.w	60014830 <_vfprintf_r+0x58c>
600153a0:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
600153a4:	aa2c      	add	r2, sp, #176	; 0xb0
600153a6:	931d      	str	r3, [sp, #116]	; 0x74
600153a8:	f7fe f860 	bl	6001346c <__sprint_r>
600153ac:	2800      	cmp	r0, #0
600153ae:	f47f a8b0 	bne.w	60014512 <_vfprintf_r+0x26e>
600153b2:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
600153b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
600153b8:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
600153bc:	f7ff b8e0 	b.w	60014580 <_vfprintf_r+0x2dc>
600153c0:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
600153c4:	aa2c      	add	r2, sp, #176	; 0xb0
600153c6:	f7fe f851 	bl	6001346c <__sprint_r>
600153ca:	2800      	cmp	r0, #0
600153cc:	f47f a8a1 	bne.w	60014512 <_vfprintf_r+0x26e>
600153d0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
600153d2:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
600153d6:	f7ff baf3 	b.w	600149c0 <_vfprintf_r+0x71c>
600153da:	2901      	cmp	r1, #1
600153dc:	9e07      	ldr	r6, [sp, #28]
600153de:	f47f ab33 	bne.w	60014a48 <_vfprintf_r+0x7a4>
600153e2:	e4b0      	b.n	60014d46 <_vfprintf_r+0xaa2>
600153e4:	3301      	adds	r3, #1
600153e6:	4425      	add	r5, r4
600153e8:	2b07      	cmp	r3, #7
600153ea:	f8cb 7000 	str.w	r7, [fp]
600153ee:	f8cb 4004 	str.w	r4, [fp, #4]
600153f2:	e9cd 352d 	strd	r3, r5, [sp, #180]	; 0xb4
600153f6:	f77f a903 	ble.w	60014600 <_vfprintf_r+0x35c>
600153fa:	f7ff bbec 	b.w	60014bd6 <_vfprintf_r+0x932>
600153fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60015400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
60015402:	681b      	ldr	r3, [r3, #0]
60015404:	601a      	str	r2, [r3, #0]
60015406:	f7ff ba8e 	b.w	60014926 <_vfprintf_r+0x682>
6001540a:	9808      	ldr	r0, [sp, #32]
6001540c:	970f      	str	r7, [sp, #60]	; 0x3c
6001540e:	f7ec ff57 	bl	600022c0 <strlen>
60015412:	46b1      	mov	r9, r6
60015414:	4606      	mov	r6, r0
60015416:	f7ff b9cb 	b.w	600147b0 <_vfprintf_r+0x50c>
6001541a:	4698      	mov	r8, r3
6001541c:	f108 0801 	add.w	r8, r8, #1
60015420:	444d      	add	r5, r9
60015422:	f1b8 0f07 	cmp.w	r8, #7
60015426:	e9cd 852d 	strd	r8, r5, [sp, #180]	; 0xb4
6001542a:	6037      	str	r7, [r6, #0]
6001542c:	f8c6 9004 	str.w	r9, [r6, #4]
60015430:	f77f ac19 	ble.w	60014c66 <_vfprintf_r+0x9c2>
60015434:	e589      	b.n	60014f4a <_vfprintf_r+0xca6>
60015436:	2d10      	cmp	r5, #16
60015438:	463a      	mov	r2, r7
6001543a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
6001543c:	4fa0      	ldr	r7, [pc, #640]	; (600156c0 <_vfprintf_r+0x141c>)
6001543e:	dd2c      	ble.n	6001549a <_vfprintf_r+0x11f6>
60015440:	e9dd 840a 	ldrd	r8, r4, [sp, #40]	; 0x28
60015444:	2610      	movs	r6, #16
60015446:	e004      	b.n	60015452 <_vfprintf_r+0x11ae>
60015448:	f10b 0b08 	add.w	fp, fp, #8
6001544c:	3d10      	subs	r5, #16
6001544e:	2d10      	cmp	r5, #16
60015450:	dd23      	ble.n	6001549a <_vfprintf_r+0x11f6>
60015452:	3301      	adds	r3, #1
60015454:	3210      	adds	r2, #16
60015456:	2b07      	cmp	r3, #7
60015458:	e9cb 7600 	strd	r7, r6, [fp]
6001545c:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
60015460:	ddf2      	ble.n	60015448 <_vfprintf_r+0x11a4>
60015462:	aa2c      	add	r2, sp, #176	; 0xb0
60015464:	4641      	mov	r1, r8
60015466:	4620      	mov	r0, r4
60015468:	f7fe f800 	bl	6001346c <__sprint_r>
6001546c:	2800      	cmp	r0, #0
6001546e:	f47f a850 	bne.w	60014512 <_vfprintf_r+0x26e>
60015472:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
60015476:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
6001547a:	e7e7      	b.n	6001544c <_vfprintf_r+0x11a8>
6001547c:	9a07      	ldr	r2, [sp, #28]
6001547e:	f412 7200 	ands.w	r2, r2, #512	; 0x200
60015482:	bf1c      	itt	ne
60015484:	b2db      	uxtbne	r3, r3
60015486:	4602      	movne	r2, r0
60015488:	e6aa      	b.n	600151e0 <_vfprintf_r+0xf3c>
6001548a:	9a07      	ldr	r2, [sp, #28]
6001548c:	f412 7200 	ands.w	r2, r2, #512	; 0x200
60015490:	bf1c      	itt	ne
60015492:	b2db      	uxtbne	r3, r3
60015494:	4602      	movne	r2, r0
60015496:	f7ff b9a9 	b.w	600147ec <_vfprintf_r+0x548>
6001549a:	3301      	adds	r3, #1
6001549c:	f8cb 7000 	str.w	r7, [fp]
600154a0:	2b07      	cmp	r3, #7
600154a2:	eb05 0702 	add.w	r7, r5, r2
600154a6:	e9cd 372d 	strd	r3, r7, [sp, #180]	; 0xb4
600154aa:	f8cb 5004 	str.w	r5, [fp, #4]
600154ae:	f300 8175 	bgt.w	6001579c <_vfprintf_r+0x14f8>
600154b2:	f10b 0b08 	add.w	fp, fp, #8
600154b6:	e4c6      	b.n	60014e46 <_vfprintf_r+0xba2>
600154b8:	222d      	movs	r2, #45	; 0x2d
600154ba:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
600154be:	f7ff b8f9 	b.w	600146b4 <_vfprintf_r+0x410>
600154c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
600154c4:	991b      	ldr	r1, [sp, #108]	; 0x6c
600154c6:	1ae4      	subs	r4, r4, r3
600154c8:	461a      	mov	r2, r3
600154ca:	4620      	mov	r0, r4
600154cc:	f002 f8ac 	bl	60017628 <strncpy>
600154d0:	7873      	ldrb	r3, [r6, #1]
600154d2:	b103      	cbz	r3, 600154d6 <_vfprintf_r+0x1232>
600154d4:	3601      	adds	r6, #1
600154d6:	f04f 0c00 	mov.w	ip, #0
600154da:	e71f      	b.n	6001531c <_vfprintf_r+0x1078>
600154dc:	464f      	mov	r7, r9
600154de:	2302      	movs	r3, #2
600154e0:	e9cd 3700 	strd	r3, r7, [sp]
600154e4:	ab2a      	add	r3, sp, #168	; 0xa8
600154e6:	9304      	str	r3, [sp, #16]
600154e8:	ab27      	add	r3, sp, #156	; 0x9c
600154ea:	9303      	str	r3, [sp, #12]
600154ec:	ab26      	add	r3, sp, #152	; 0x98
600154ee:	9302      	str	r3, [sp, #8]
600154f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
600154f2:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
600154f6:	f7ef fdc7 	bl	60005088 <_dtoa_r>
600154fa:	2d67      	cmp	r5, #103	; 0x67
600154fc:	9008      	str	r0, [sp, #32]
600154fe:	f000 82cc 	beq.w	60015a9a <_vfprintf_r+0x17f6>
60015502:	2d47      	cmp	r5, #71	; 0x47
60015504:	f000 8384 	beq.w	60015c10 <_vfprintf_r+0x196c>
60015508:	9b08      	ldr	r3, [sp, #32]
6001550a:	f025 0820 	bic.w	r8, r5, #32
6001550e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
60015512:	eb03 0607 	add.w	r6, r3, r7
60015516:	d105      	bne.n	60015524 <_vfprintf_r+0x1280>
60015518:	781b      	ldrb	r3, [r3, #0]
6001551a:	2b30      	cmp	r3, #48	; 0x30
6001551c:	f000 83bb 	beq.w	60015c96 <_vfprintf_r+0x19f2>
60015520:	9f26      	ldr	r7, [sp, #152]	; 0x98
60015522:	443e      	add	r6, r7
60015524:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
60015528:	2200      	movs	r2, #0
6001552a:	2300      	movs	r3, #0
6001552c:	f7ed fd1c 	bl	60002f68 <__aeabi_dcmpeq>
60015530:	2800      	cmp	r0, #0
60015532:	f000 8219 	beq.w	60015968 <_vfprintf_r+0x16c4>
60015536:	4633      	mov	r3, r6
60015538:	9a08      	ldr	r2, [sp, #32]
6001553a:	1a9b      	subs	r3, r3, r2
6001553c:	9312      	str	r3, [sp, #72]	; 0x48
6001553e:	9a26      	ldr	r2, [sp, #152]	; 0x98
60015540:	9210      	str	r2, [sp, #64]	; 0x40
60015542:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
60015546:	f000 8158 	beq.w	600157fa <_vfprintf_r+0x1556>
6001554a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
6001554e:	f000 82bc 	beq.w	60015aca <_vfprintf_r+0x1826>
60015552:	1e53      	subs	r3, r2, #1
60015554:	2d61      	cmp	r5, #97	; 0x61
60015556:	9326      	str	r3, [sp, #152]	; 0x98
60015558:	f000 83c4 	beq.w	60015ce4 <_vfprintf_r+0x1a40>
6001555c:	2d41      	cmp	r5, #65	; 0x41
6001555e:	f040 8155 	bne.w	6001580c <_vfprintf_r+0x1568>
60015562:	2150      	movs	r1, #80	; 0x50
60015564:	2001      	movs	r0, #1
60015566:	2b00      	cmp	r3, #0
60015568:	bfb6      	itet	lt
6001556a:	f1c2 0301 	rsblt	r3, r2, #1
6001556e:	222b      	movge	r2, #43	; 0x2b
60015570:	222d      	movlt	r2, #45	; 0x2d
60015572:	2b09      	cmp	r3, #9
60015574:	f88d 10a0 	strb.w	r1, [sp, #160]	; 0xa0
60015578:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
6001557c:	f340 830b 	ble.w	60015b96 <_vfprintf_r+0x18f2>
60015580:	f10d 06af 	add.w	r6, sp, #175	; 0xaf
60015584:	4f4f      	ldr	r7, [pc, #316]	; (600156c4 <_vfprintf_r+0x1420>)
60015586:	4632      	mov	r2, r6
60015588:	4610      	mov	r0, r2
6001558a:	fba7 1203 	umull	r1, r2, r7, r3
6001558e:	08d2      	lsrs	r2, r2, #3
60015590:	eb02 0182 	add.w	r1, r2, r2, lsl #2
60015594:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
60015598:	3130      	adds	r1, #48	; 0x30
6001559a:	f800 1c01 	strb.w	r1, [r0, #-1]
6001559e:	4619      	mov	r1, r3
600155a0:	2963      	cmp	r1, #99	; 0x63
600155a2:	4613      	mov	r3, r2
600155a4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
600155a8:	dcee      	bgt.n	60015588 <_vfprintf_r+0x12e4>
600155aa:	3330      	adds	r3, #48	; 0x30
600155ac:	f802 3c01 	strb.w	r3, [r2, #-1]
600155b0:	1e83      	subs	r3, r0, #2
600155b2:	42b3      	cmp	r3, r6
600155b4:	f080 83ad 	bcs.w	60015d12 <_vfprintf_r+0x1a6e>
600155b8:	f10d 02a1 	add.w	r2, sp, #161	; 0xa1
600155bc:	f813 1b01 	ldrb.w	r1, [r3], #1
600155c0:	f802 1f01 	strb.w	r1, [r2, #1]!
600155c4:	42b3      	cmp	r3, r6
600155c6:	d1f9      	bne.n	600155bc <_vfprintf_r+0x1318>
600155c8:	ab58      	add	r3, sp, #352	; 0x160
600155ca:	1a18      	subs	r0, r3, r0
600155cc:	f1a0 03ad 	sub.w	r3, r0, #173	; 0xad
600155d0:	931a      	str	r3, [sp, #104]	; 0x68
600155d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
600155d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
600155d6:	2b01      	cmp	r3, #1
600155d8:	eb03 0602 	add.w	r6, r3, r2
600155dc:	f340 8314 	ble.w	60015c08 <_vfprintf_r+0x1964>
600155e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
600155e2:	441e      	add	r6, r3
600155e4:	f424 6380 	bic.w	r3, r4, #1024	; 0x400
600155e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
600155ec:	9307      	str	r3, [sp, #28]
600155ee:	2300      	movs	r3, #0
600155f0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
600155f4:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
600155f8:	9313      	str	r3, [sp, #76]	; 0x4c
600155fa:	9209      	str	r2, [sp, #36]	; 0x24
600155fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
600155fe:	2b00      	cmp	r3, #0
60015600:	f040 8107 	bne.w	60015812 <_vfprintf_r+0x156e>
60015604:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
60015608:	4699      	mov	r9, r3
6001560a:	f7ff b866 	b.w	600146da <_vfprintf_r+0x436>
6001560e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
60015610:	1b1c      	subs	r4, r3, r4
60015612:	eba2 0609 	sub.w	r6, r2, r9
60015616:	42a6      	cmp	r6, r4
60015618:	463d      	mov	r5, r7
6001561a:	bfa8      	it	ge
6001561c:	4626      	movge	r6, r4
6001561e:	e448      	b.n	60014eb2 <_vfprintf_r+0xc0e>
60015620:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60015622:	9a0d      	ldr	r2, [sp, #52]	; 0x34
60015624:	681b      	ldr	r3, [r3, #0]
60015626:	801a      	strh	r2, [r3, #0]
60015628:	f7ff b97d 	b.w	60014926 <_vfprintf_r+0x682>
6001562c:	f343 12c0 	sbfx	r2, r3, #7, #1
60015630:	4611      	mov	r1, r2
60015632:	b25b      	sxtb	r3, r3
60015634:	f7ff b87f 	b.w	60014736 <_vfprintf_r+0x492>
60015638:	2358      	movs	r3, #88	; 0x58
6001563a:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
6001563e:	2330      	movs	r3, #48	; 0x30
60015640:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
60015644:	9b07      	ldr	r3, [sp, #28]
60015646:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
6001564a:	f043 0402 	orr.w	r4, r3, #2
6001564e:	f300 827d 	bgt.w	60015b4c <_vfprintf_r+0x18a8>
60015652:	2300      	movs	r3, #0
60015654:	930e      	str	r3, [sp, #56]	; 0x38
60015656:	ab3f      	add	r3, sp, #252	; 0xfc
60015658:	9308      	str	r3, [sp, #32]
6001565a:	9b07      	ldr	r3, [sp, #28]
6001565c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
60015660:	9309      	str	r3, [sp, #36]	; 0x24
60015662:	9b15      	ldr	r3, [sp, #84]	; 0x54
60015664:	2b00      	cmp	r3, #0
60015666:	f2c0 81bc 	blt.w	600159e2 <_vfprintf_r+0x173e>
6001566a:	2300      	movs	r3, #0
6001566c:	931d      	str	r3, [sp, #116]	; 0x74
6001566e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
60015672:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
60015676:	2d61      	cmp	r5, #97	; 0x61
60015678:	f47f ad66 	bne.w	60015148 <_vfprintf_r+0xea4>
6001567c:	aa26      	add	r2, sp, #152	; 0x98
6001567e:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
60015682:	f001 ff0d 	bl	600174a0 <frexp>
60015686:	2200      	movs	r2, #0
60015688:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
6001568c:	f7ed fa04 	bl	60002a98 <__aeabi_dmul>
60015690:	2200      	movs	r2, #0
60015692:	2300      	movs	r3, #0
60015694:	4606      	mov	r6, r0
60015696:	460f      	mov	r7, r1
60015698:	f7ed fc66 	bl	60002f68 <__aeabi_dcmpeq>
6001569c:	2800      	cmp	r0, #0
6001569e:	f040 82a6 	bne.w	60015bee <_vfprintf_r+0x194a>
600156a2:	4b09      	ldr	r3, [pc, #36]	; (600156c8 <_vfprintf_r+0x1424>)
600156a4:	9307      	str	r3, [sp, #28]
600156a6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
600156aa:	e9cd 9b20 	strd	r9, fp, [sp, #128]	; 0x80
600156ae:	9511      	str	r5, [sp, #68]	; 0x44
600156b0:	e9cd 4a12 	strd	r4, sl, [sp, #72]	; 0x48
600156b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
600156b8:	f8dd b01c 	ldr.w	fp, [sp, #28]
600156bc:	461d      	mov	r5, r3
600156be:	e00b      	b.n	600156d8 <_vfprintf_r+0x1434>
600156c0:	6001bf9c 	.word	0x6001bf9c
600156c4:	cccccccd 	.word	0xcccccccd
600156c8:	6001bf4c 	.word	0x6001bf4c
600156cc:	2200      	movs	r2, #0
600156ce:	2300      	movs	r3, #0
600156d0:	f7ed fc4a 	bl	60002f68 <__aeabi_dcmpeq>
600156d4:	b9f0      	cbnz	r0, 60015714 <_vfprintf_r+0x1470>
600156d6:	464d      	mov	r5, r9
600156d8:	4ba9      	ldr	r3, [pc, #676]	; (60015980 <_vfprintf_r+0x16dc>)
600156da:	2200      	movs	r2, #0
600156dc:	4630      	mov	r0, r6
600156de:	4639      	mov	r1, r7
600156e0:	f7ed f9da 	bl	60002a98 <__aeabi_dmul>
600156e4:	460f      	mov	r7, r1
600156e6:	4606      	mov	r6, r0
600156e8:	f7ed fc70 	bl	60002fcc <__aeabi_d2iz>
600156ec:	4604      	mov	r4, r0
600156ee:	f7ed f969 	bl	600029c4 <__aeabi_i2d>
600156f2:	460b      	mov	r3, r1
600156f4:	4602      	mov	r2, r0
600156f6:	4639      	mov	r1, r7
600156f8:	4630      	mov	r0, r6
600156fa:	f7ed f815 	bl	60002728 <__aeabi_dsub>
600156fe:	f81b 3004 	ldrb.w	r3, [fp, r4]
60015702:	46c2      	mov	sl, r8
60015704:	f808 3b01 	strb.w	r3, [r8], #1
60015708:	1c6b      	adds	r3, r5, #1
6001570a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
6001570e:	4606      	mov	r6, r0
60015710:	460f      	mov	r7, r1
60015712:	d1db      	bne.n	600156cc <_vfprintf_r+0x1428>
60015714:	4b9b      	ldr	r3, [pc, #620]	; (60015984 <_vfprintf_r+0x16e0>)
60015716:	9510      	str	r5, [sp, #64]	; 0x40
60015718:	2200      	movs	r2, #0
6001571a:	4630      	mov	r0, r6
6001571c:	4639      	mov	r1, r7
6001571e:	9d11      	ldr	r5, [sp, #68]	; 0x44
60015720:	9411      	str	r4, [sp, #68]	; 0x44
60015722:	e9dd 9b20 	ldrd	r9, fp, [sp, #128]	; 0x80
60015726:	9c12      	ldr	r4, [sp, #72]	; 0x48
60015728:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
6001572c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
60015730:	f7ed fc42 	bl	60002fb8 <__aeabi_dcmpgt>
60015734:	2800      	cmp	r0, #0
60015736:	f040 823d 	bne.w	60015bb4 <_vfprintf_r+0x1910>
6001573a:	4b92      	ldr	r3, [pc, #584]	; (60015984 <_vfprintf_r+0x16e0>)
6001573c:	4630      	mov	r0, r6
6001573e:	4639      	mov	r1, r7
60015740:	2200      	movs	r2, #0
60015742:	f7ed fc11 	bl	60002f68 <__aeabi_dcmpeq>
60015746:	b118      	cbz	r0, 60015750 <_vfprintf_r+0x14ac>
60015748:	9b11      	ldr	r3, [sp, #68]	; 0x44
6001574a:	07df      	lsls	r7, r3, #31
6001574c:	f100 8232 	bmi.w	60015bb4 <_vfprintf_r+0x1910>
60015750:	9b10      	ldr	r3, [sp, #64]	; 0x40
60015752:	2b00      	cmp	r3, #0
60015754:	f2c0 8249 	blt.w	60015bea <_vfprintf_r+0x1946>
60015758:	9b10      	ldr	r3, [sp, #64]	; 0x40
6001575a:	3301      	adds	r3, #1
6001575c:	4443      	add	r3, r8
6001575e:	2230      	movs	r2, #48	; 0x30
60015760:	f808 2b01 	strb.w	r2, [r8], #1
60015764:	4543      	cmp	r3, r8
60015766:	d1fb      	bne.n	60015760 <_vfprintf_r+0x14bc>
60015768:	9a08      	ldr	r2, [sp, #32]
6001576a:	1a9b      	subs	r3, r3, r2
6001576c:	9312      	str	r3, [sp, #72]	; 0x48
6001576e:	f025 0820 	bic.w	r8, r5, #32
60015772:	e6e4      	b.n	6001553e <_vfprintf_r+0x129a>
60015774:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60015778:	aa2c      	add	r2, sp, #176	; 0xb0
6001577a:	f7fd fe77 	bl	6001346c <__sprint_r>
6001577e:	2800      	cmp	r0, #0
60015780:	f47e aec7 	bne.w	60014512 <_vfprintf_r+0x26e>
60015784:	e9dd 312d 	ldrd	r3, r1, [sp, #180]	; 0xb4
60015788:	9a26      	ldr	r2, [sp, #152]	; 0x98
6001578a:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
6001578e:	f7ff ba12 	b.w	60014bb6 <_vfprintf_r+0x912>
60015792:	6d88      	ldr	r0, [r1, #88]	; 0x58
60015794:	f7f5 ff9c 	bl	6000b6d0 <__retarget_lock_release_recursive>
60015798:	f7fe be8b 	b.w	600144b2 <_vfprintf_r+0x20e>
6001579c:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
600157a0:	aa2c      	add	r2, sp, #176	; 0xb0
600157a2:	f7fd fe63 	bl	6001346c <__sprint_r>
600157a6:	2800      	cmp	r0, #0
600157a8:	f47e aeb3 	bne.w	60014512 <_vfprintf_r+0x26e>
600157ac:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
600157ae:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
600157b2:	f7ff bb48 	b.w	60014e46 <_vfprintf_r+0xba2>
600157b6:	f109 0701 	add.w	r7, r9, #1
600157ba:	2302      	movs	r3, #2
600157bc:	e690      	b.n	600154e0 <_vfprintf_r+0x123c>
600157be:	464f      	mov	r7, r9
600157c0:	2303      	movs	r3, #3
600157c2:	e68d      	b.n	600154e0 <_vfprintf_r+0x123c>
600157c4:	aa26      	add	r2, sp, #152	; 0x98
600157c6:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
600157ca:	f001 fe69 	bl	600174a0 <frexp>
600157ce:	2200      	movs	r2, #0
600157d0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
600157d4:	f7ed f960 	bl	60002a98 <__aeabi_dmul>
600157d8:	2200      	movs	r2, #0
600157da:	2300      	movs	r3, #0
600157dc:	4606      	mov	r6, r0
600157de:	460f      	mov	r7, r1
600157e0:	f7ed fbc2 	bl	60002f68 <__aeabi_dcmpeq>
600157e4:	2800      	cmp	r0, #0
600157e6:	f040 8202 	bne.w	60015bee <_vfprintf_r+0x194a>
600157ea:	4b67      	ldr	r3, [pc, #412]	; (60015988 <_vfprintf_r+0x16e4>)
600157ec:	9307      	str	r3, [sp, #28]
600157ee:	e75a      	b.n	600156a6 <_vfprintf_r+0x1402>
600157f0:	9a08      	ldr	r2, [sp, #32]
600157f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
600157f4:	1a9b      	subs	r3, r3, r2
600157f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
600157f8:	9312      	str	r3, [sp, #72]	; 0x48
600157fa:	1cd3      	adds	r3, r2, #3
600157fc:	9210      	str	r2, [sp, #64]	; 0x40
600157fe:	db02      	blt.n	60015806 <_vfprintf_r+0x1562>
60015800:	4591      	cmp	r9, r2
60015802:	f280 80c5 	bge.w	60015990 <_vfprintf_r+0x16ec>
60015806:	1e53      	subs	r3, r2, #1
60015808:	3d02      	subs	r5, #2
6001580a:	9326      	str	r3, [sp, #152]	; 0x98
6001580c:	b2e9      	uxtb	r1, r5
6001580e:	2000      	movs	r0, #0
60015810:	e6a9      	b.n	60015566 <_vfprintf_r+0x12c2>
60015812:	222d      	movs	r2, #45	; 0x2d
60015814:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
60015818:	f04f 0900 	mov.w	r9, #0
6001581c:	f7fe bf60 	b.w	600146e0 <_vfprintf_r+0x43c>
60015820:	9911      	ldr	r1, [sp, #68]	; 0x44
60015822:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
60015826:	465a      	mov	r2, fp
60015828:	4638      	mov	r0, r7
6001582a:	4e58      	ldr	r6, [pc, #352]	; (6001598c <_vfprintf_r+0x16e8>)
6001582c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
60015830:	9b1c      	ldr	r3, [sp, #112]	; 0x70
60015832:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
60015836:	464f      	mov	r7, r9
60015838:	f04f 0810 	mov.w	r8, #16
6001583c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
60015840:	b371      	cbz	r1, 600158a0 <_vfprintf_r+0x15fc>
60015842:	f1b9 0f00 	cmp.w	r9, #0
60015846:	d07a      	beq.n	6001593e <_vfprintf_r+0x169a>
60015848:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
6001584c:	991b      	ldr	r1, [sp, #108]	; 0x6c
6001584e:	e9c2 1300 	strd	r1, r3, [r2]
60015852:	992d      	ldr	r1, [sp, #180]	; 0xb4
60015854:	3101      	adds	r1, #1
60015856:	4418      	add	r0, r3
60015858:	2907      	cmp	r1, #7
6001585a:	902e      	str	r0, [sp, #184]	; 0xb8
6001585c:	912d      	str	r1, [sp, #180]	; 0xb4
6001585e:	dc61      	bgt.n	60015924 <_vfprintf_r+0x1680>
60015860:	3208      	adds	r2, #8
60015862:	9c1d      	ldr	r4, [sp, #116]	; 0x74
60015864:	f89a 1000 	ldrb.w	r1, [sl]
60015868:	1be5      	subs	r5, r4, r7
6001586a:	428d      	cmp	r5, r1
6001586c:	bfa8      	it	ge
6001586e:	460d      	movge	r5, r1
60015870:	2d00      	cmp	r5, #0
60015872:	dd0b      	ble.n	6001588c <_vfprintf_r+0x15e8>
60015874:	992d      	ldr	r1, [sp, #180]	; 0xb4
60015876:	3101      	adds	r1, #1
60015878:	4428      	add	r0, r5
6001587a:	2907      	cmp	r1, #7
6001587c:	e9c2 7500 	strd	r7, r5, [r2]
60015880:	902e      	str	r0, [sp, #184]	; 0xb8
60015882:	912d      	str	r1, [sp, #180]	; 0xb4
60015884:	dc61      	bgt.n	6001594a <_vfprintf_r+0x16a6>
60015886:	f89a 1000 	ldrb.w	r1, [sl]
6001588a:	3208      	adds	r2, #8
6001588c:	2d00      	cmp	r5, #0
6001588e:	bfac      	ite	ge
60015890:	1b4c      	subge	r4, r1, r5
60015892:	460c      	movlt	r4, r1
60015894:	2c00      	cmp	r4, #0
60015896:	dc13      	bgt.n	600158c0 <_vfprintf_r+0x161c>
60015898:	440f      	add	r7, r1
6001589a:	9911      	ldr	r1, [sp, #68]	; 0x44
6001589c:	2900      	cmp	r1, #0
6001589e:	d1d0      	bne.n	60015842 <_vfprintf_r+0x159e>
600158a0:	f1b9 0f00 	cmp.w	r9, #0
600158a4:	d1d0      	bne.n	60015848 <_vfprintf_r+0x15a4>
600158a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
600158a8:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
600158ac:	46b9      	mov	r9, r7
600158ae:	4599      	cmp	r9, r3
600158b0:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
600158b4:	4693      	mov	fp, r2
600158b6:	4607      	mov	r7, r0
600158b8:	bf28      	it	cs
600158ba:	4699      	movcs	r9, r3
600158bc:	f7ff bacb 	b.w	60014e56 <_vfprintf_r+0xbb2>
600158c0:	2c10      	cmp	r4, #16
600158c2:	992d      	ldr	r1, [sp, #180]	; 0xb4
600158c4:	f340 81e5 	ble.w	60015c92 <_vfprintf_r+0x19ee>
600158c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
600158ca:	9308      	str	r3, [sp, #32]
600158cc:	9610      	str	r6, [sp, #64]	; 0x40
600158ce:	e004      	b.n	600158da <_vfprintf_r+0x1636>
600158d0:	3c10      	subs	r4, #16
600158d2:	2c10      	cmp	r4, #16
600158d4:	f102 0208 	add.w	r2, r2, #8
600158d8:	dd15      	ble.n	60015906 <_vfprintf_r+0x1662>
600158da:	3101      	adds	r1, #1
600158dc:	3010      	adds	r0, #16
600158de:	2907      	cmp	r1, #7
600158e0:	e9c2 6800 	strd	r6, r8, [r2]
600158e4:	e9cd 102d 	strd	r1, r0, [sp, #180]	; 0xb4
600158e8:	ddf2      	ble.n	600158d0 <_vfprintf_r+0x162c>
600158ea:	aa2c      	add	r2, sp, #176	; 0xb0
600158ec:	4659      	mov	r1, fp
600158ee:	4628      	mov	r0, r5
600158f0:	f7fd fdbc 	bl	6001346c <__sprint_r>
600158f4:	2800      	cmp	r0, #0
600158f6:	f47e ae0c 	bne.w	60014512 <_vfprintf_r+0x26e>
600158fa:	3c10      	subs	r4, #16
600158fc:	2c10      	cmp	r4, #16
600158fe:	e9dd 102d 	ldrd	r1, r0, [sp, #180]	; 0xb4
60015902:	aa2f      	add	r2, sp, #188	; 0xbc
60015904:	dce9      	bgt.n	600158da <_vfprintf_r+0x1636>
60015906:	9b08      	ldr	r3, [sp, #32]
60015908:	9d10      	ldr	r5, [sp, #64]	; 0x40
6001590a:	6015      	str	r5, [r2, #0]
6001590c:	3101      	adds	r1, #1
6001590e:	4420      	add	r0, r4
60015910:	2907      	cmp	r1, #7
60015912:	e9cd 102d 	strd	r1, r0, [sp, #180]	; 0xb4
60015916:	6054      	str	r4, [r2, #4]
60015918:	dc79      	bgt.n	60015a0e <_vfprintf_r+0x176a>
6001591a:	f89a 1000 	ldrb.w	r1, [sl]
6001591e:	3208      	adds	r2, #8
60015920:	440f      	add	r7, r1
60015922:	e7ba      	b.n	6001589a <_vfprintf_r+0x15f6>
60015924:	980b      	ldr	r0, [sp, #44]	; 0x2c
60015926:	9308      	str	r3, [sp, #32]
60015928:	aa2c      	add	r2, sp, #176	; 0xb0
6001592a:	4659      	mov	r1, fp
6001592c:	f7fd fd9e 	bl	6001346c <__sprint_r>
60015930:	2800      	cmp	r0, #0
60015932:	f47e adee 	bne.w	60014512 <_vfprintf_r+0x26e>
60015936:	982e      	ldr	r0, [sp, #184]	; 0xb8
60015938:	9b08      	ldr	r3, [sp, #32]
6001593a:	aa2f      	add	r2, sp, #188	; 0xbc
6001593c:	e791      	b.n	60015862 <_vfprintf_r+0x15be>
6001593e:	9911      	ldr	r1, [sp, #68]	; 0x44
60015940:	3901      	subs	r1, #1
60015942:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
60015946:	9111      	str	r1, [sp, #68]	; 0x44
60015948:	e780      	b.n	6001584c <_vfprintf_r+0x15a8>
6001594a:	980b      	ldr	r0, [sp, #44]	; 0x2c
6001594c:	9308      	str	r3, [sp, #32]
6001594e:	aa2c      	add	r2, sp, #176	; 0xb0
60015950:	4659      	mov	r1, fp
60015952:	f7fd fd8b 	bl	6001346c <__sprint_r>
60015956:	2800      	cmp	r0, #0
60015958:	f47e addb 	bne.w	60014512 <_vfprintf_r+0x26e>
6001595c:	f89a 1000 	ldrb.w	r1, [sl]
60015960:	982e      	ldr	r0, [sp, #184]	; 0xb8
60015962:	9b08      	ldr	r3, [sp, #32]
60015964:	aa2f      	add	r2, sp, #188	; 0xbc
60015966:	e791      	b.n	6001588c <_vfprintf_r+0x15e8>
60015968:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
6001596a:	42b3      	cmp	r3, r6
6001596c:	f4bf ade4 	bcs.w	60015538 <_vfprintf_r+0x1294>
60015970:	2130      	movs	r1, #48	; 0x30
60015972:	1c5a      	adds	r2, r3, #1
60015974:	922a      	str	r2, [sp, #168]	; 0xa8
60015976:	7019      	strb	r1, [r3, #0]
60015978:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
6001597a:	429e      	cmp	r6, r3
6001597c:	d8f9      	bhi.n	60015972 <_vfprintf_r+0x16ce>
6001597e:	e5db      	b.n	60015538 <_vfprintf_r+0x1294>
60015980:	40300000 	.word	0x40300000
60015984:	3fe00000 	.word	0x3fe00000
60015988:	6001bf38 	.word	0x6001bf38
6001598c:	6001bf9c 	.word	0x6001bf9c
60015990:	9b12      	ldr	r3, [sp, #72]	; 0x48
60015992:	4293      	cmp	r3, r2
60015994:	f300 8088 	bgt.w	60015aa8 <_vfprintf_r+0x1804>
60015998:	07e3      	lsls	r3, r4, #31
6001599a:	f140 8152 	bpl.w	60015c42 <_vfprintf_r+0x199e>
6001599e:	9b16      	ldr	r3, [sp, #88]	; 0x58
600159a0:	18d6      	adds	r6, r2, r3
600159a2:	0567      	lsls	r7, r4, #21
600159a4:	d502      	bpl.n	600159ac <_vfprintf_r+0x1708>
600159a6:	2a00      	cmp	r2, #0
600159a8:	f300 814d 	bgt.w	60015c46 <_vfprintf_r+0x19a2>
600159ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
600159ae:	9307      	str	r3, [sp, #28]
600159b0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
600159b4:	9309      	str	r3, [sp, #36]	; 0x24
600159b6:	2567      	movs	r5, #103	; 0x67
600159b8:	2300      	movs	r3, #0
600159ba:	9313      	str	r3, [sp, #76]	; 0x4c
600159bc:	9311      	str	r3, [sp, #68]	; 0x44
600159be:	e61d      	b.n	600155fc <_vfprintf_r+0x1358>
600159c0:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
600159c4:	aa2c      	add	r2, sp, #176	; 0xb0
600159c6:	f7fd fd51 	bl	6001346c <__sprint_r>
600159ca:	2800      	cmp	r0, #0
600159cc:	f47e ada1 	bne.w	60014512 <_vfprintf_r+0x26e>
600159d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
600159d2:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
600159d4:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
600159d8:	f7ff bb52 	b.w	60015080 <_vfprintf_r+0xddc>
600159dc:	2300      	movs	r3, #0
600159de:	9c07      	ldr	r4, [sp, #28]
600159e0:	930e      	str	r3, [sp, #56]	; 0x38
600159e2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
600159e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
600159ea:	9323      	str	r3, [sp, #140]	; 0x8c
600159ec:	232d      	movs	r3, #45	; 0x2d
600159ee:	9222      	str	r2, [sp, #136]	; 0x88
600159f0:	931d      	str	r3, [sp, #116]	; 0x74
600159f2:	e640      	b.n	60015676 <_vfprintf_r+0x13d2>
600159f4:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
600159f8:	aa2c      	add	r2, sp, #176	; 0xb0
600159fa:	f7fd fd37 	bl	6001346c <__sprint_r>
600159fe:	2800      	cmp	r0, #0
60015a00:	f47e ad87 	bne.w	60014512 <_vfprintf_r+0x26e>
60015a04:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
60015a06:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60015a0a:	f7ff ba15 	b.w	60014e38 <_vfprintf_r+0xb94>
60015a0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
60015a10:	9308      	str	r3, [sp, #32]
60015a12:	aa2c      	add	r2, sp, #176	; 0xb0
60015a14:	4659      	mov	r1, fp
60015a16:	f7fd fd29 	bl	6001346c <__sprint_r>
60015a1a:	2800      	cmp	r0, #0
60015a1c:	f47e ad79 	bne.w	60014512 <_vfprintf_r+0x26e>
60015a20:	f89a 1000 	ldrb.w	r1, [sl]
60015a24:	982e      	ldr	r0, [sp, #184]	; 0xb8
60015a26:	9b08      	ldr	r3, [sp, #32]
60015a28:	aa2f      	add	r2, sp, #188	; 0xbc
60015a2a:	440f      	add	r7, r1
60015a2c:	e735      	b.n	6001589a <_vfprintf_r+0x15f6>
60015a2e:	2378      	movs	r3, #120	; 0x78
60015a30:	e603      	b.n	6001563a <_vfprintf_r+0x1396>
60015a32:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60015a36:	aa2c      	add	r2, sp, #176	; 0xb0
60015a38:	f7fd fd18 	bl	6001346c <__sprint_r>
60015a3c:	2800      	cmp	r0, #0
60015a3e:	f47e ad68 	bne.w	60014512 <_vfprintf_r+0x26e>
60015a42:	9c26      	ldr	r4, [sp, #152]	; 0x98
60015a44:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
60015a46:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60015a4a:	f7ff ba1a 	b.w	60014e82 <_vfprintf_r+0xbde>
60015a4e:	464e      	mov	r6, r9
60015a50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
60015a54:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
60015a58:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
60015a5c:	970f      	str	r7, [sp, #60]	; 0x3c
60015a5e:	4681      	mov	r9, r0
60015a60:	9013      	str	r0, [sp, #76]	; 0x4c
60015a62:	f7fe be3a 	b.w	600146da <_vfprintf_r+0x436>
60015a66:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60015a6a:	aa2c      	add	r2, sp, #176	; 0xb0
60015a6c:	f7fd fcfe 	bl	6001346c <__sprint_r>
60015a70:	2800      	cmp	r0, #0
60015a72:	f47e ad4e 	bne.w	60014512 <_vfprintf_r+0x26e>
60015a76:	9c26      	ldr	r4, [sp, #152]	; 0x98
60015a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
60015a7a:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
60015a7c:	1b1c      	subs	r4, r3, r4
60015a7e:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60015a82:	f7ff ba16 	b.w	60014eb2 <_vfprintf_r+0xc0e>
60015a86:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60015a8a:	aa2c      	add	r2, sp, #176	; 0xb0
60015a8c:	f7fd fcee 	bl	6001346c <__sprint_r>
60015a90:	2800      	cmp	r0, #0
60015a92:	f43e ade0 	beq.w	60014656 <_vfprintf_r+0x3b2>
60015a96:	f7fe bd42 	b.w	6001451e <_vfprintf_r+0x27a>
60015a9a:	07e6      	lsls	r6, r4, #31
60015a9c:	f57f aea8 	bpl.w	600157f0 <_vfprintf_r+0x154c>
60015aa0:	19c6      	adds	r6, r0, r7
60015aa2:	f04f 0847 	mov.w	r8, #71	; 0x47
60015aa6:	e53d      	b.n	60015524 <_vfprintf_r+0x1280>
60015aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
60015aaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
60015aac:	189e      	adds	r6, r3, r2
60015aae:	9b10      	ldr	r3, [sp, #64]	; 0x40
60015ab0:	2b00      	cmp	r3, #0
60015ab2:	f340 8100 	ble.w	60015cb6 <_vfprintf_r+0x1a12>
60015ab6:	2567      	movs	r5, #103	; 0x67
60015ab8:	0562      	lsls	r2, r4, #21
60015aba:	f100 80c5 	bmi.w	60015c48 <_vfprintf_r+0x19a4>
60015abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
60015ac0:	9307      	str	r3, [sp, #28]
60015ac2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
60015ac6:	9309      	str	r3, [sp, #36]	; 0x24
60015ac8:	e776      	b.n	600159b8 <_vfprintf_r+0x1714>
60015aca:	9a10      	ldr	r2, [sp, #64]	; 0x40
60015acc:	f004 0301 	and.w	r3, r4, #1
60015ad0:	2a00      	cmp	r2, #0
60015ad2:	ea43 0309 	orr.w	r3, r3, r9
60015ad6:	f340 80fd 	ble.w	60015cd4 <_vfprintf_r+0x1a30>
60015ada:	2b00      	cmp	r3, #0
60015adc:	f040 80f5 	bne.w	60015cca <_vfprintf_r+0x1a26>
60015ae0:	9e10      	ldr	r6, [sp, #64]	; 0x40
60015ae2:	2566      	movs	r5, #102	; 0x66
60015ae4:	e7e8      	b.n	60015ab8 <_vfprintf_r+0x1814>
60015ae6:	4256      	negs	r6, r2
60015ae8:	3210      	adds	r2, #16
60015aea:	4f91      	ldr	r7, [pc, #580]	; (60015d30 <_vfprintf_r+0x1a8c>)
60015aec:	da3a      	bge.n	60015b64 <_vfprintf_r+0x18c0>
60015aee:	e9dd 840a 	ldrd	r8, r4, [sp, #40]	; 0x28
60015af2:	2510      	movs	r5, #16
60015af4:	e004      	b.n	60015b00 <_vfprintf_r+0x185c>
60015af6:	f10b 0b08 	add.w	fp, fp, #8
60015afa:	3e10      	subs	r6, #16
60015afc:	2e10      	cmp	r6, #16
60015afe:	dd31      	ble.n	60015b64 <_vfprintf_r+0x18c0>
60015b00:	3301      	adds	r3, #1
60015b02:	3110      	adds	r1, #16
60015b04:	2b07      	cmp	r3, #7
60015b06:	e9cb 7500 	strd	r7, r5, [fp]
60015b0a:	e9cd 312d 	strd	r3, r1, [sp, #180]	; 0xb4
60015b0e:	ddf2      	ble.n	60015af6 <_vfprintf_r+0x1852>
60015b10:	aa2c      	add	r2, sp, #176	; 0xb0
60015b12:	4641      	mov	r1, r8
60015b14:	4620      	mov	r0, r4
60015b16:	f7fd fca9 	bl	6001346c <__sprint_r>
60015b1a:	2800      	cmp	r0, #0
60015b1c:	f47e acf9 	bne.w	60014512 <_vfprintf_r+0x26e>
60015b20:	e9dd 312d 	ldrd	r3, r1, [sp, #180]	; 0xb4
60015b24:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60015b28:	e7e7      	b.n	60015afa <_vfprintf_r+0x1856>
60015b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
60015b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
60015b2e:	07db      	lsls	r3, r3, #31
60015b30:	d407      	bmi.n	60015b42 <_vfprintf_r+0x189e>
60015b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
60015b34:	899b      	ldrh	r3, [r3, #12]
60015b36:	059f      	lsls	r7, r3, #22
60015b38:	d403      	bmi.n	60015b42 <_vfprintf_r+0x189e>
60015b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
60015b3c:	6d98      	ldr	r0, [r3, #88]	; 0x58
60015b3e:	f7f5 fdc7 	bl	6000b6d0 <__retarget_lock_release_recursive>
60015b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60015b46:	930d      	str	r3, [sp, #52]	; 0x34
60015b48:	f7fe bcf3 	b.w	60014532 <_vfprintf_r+0x28e>
60015b4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
60015b4e:	f109 0101 	add.w	r1, r9, #1
60015b52:	f7fd f939 	bl	60012dc8 <_malloc_r>
60015b56:	9008      	str	r0, [sp, #32]
60015b58:	2800      	cmp	r0, #0
60015b5a:	f000 80e1 	beq.w	60015d20 <_vfprintf_r+0x1a7c>
60015b5e:	9b08      	ldr	r3, [sp, #32]
60015b60:	930e      	str	r3, [sp, #56]	; 0x38
60015b62:	e57a      	b.n	6001565a <_vfprintf_r+0x13b6>
60015b64:	3301      	adds	r3, #1
60015b66:	4431      	add	r1, r6
60015b68:	2b07      	cmp	r3, #7
60015b6a:	e9cd 312d 	strd	r3, r1, [sp, #180]	; 0xb4
60015b6e:	f8cb 7000 	str.w	r7, [fp]
60015b72:	f8cb 6004 	str.w	r6, [fp, #4]
60015b76:	f77f aa99 	ble.w	600150ac <_vfprintf_r+0xe08>
60015b7a:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
60015b7e:	aa2c      	add	r2, sp, #176	; 0xb0
60015b80:	f7fd fc74 	bl	6001346c <__sprint_r>
60015b84:	2800      	cmp	r0, #0
60015b86:	f47e acc4 	bne.w	60014512 <_vfprintf_r+0x26e>
60015b8a:	e9dd 312d 	ldrd	r3, r1, [sp, #180]	; 0xb4
60015b8e:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
60015b92:	f7ff b813 	b.w	60014bbc <_vfprintf_r+0x918>
60015b96:	2800      	cmp	r0, #0
60015b98:	f040 808a 	bne.w	60015cb0 <_vfprintf_r+0x1a0c>
60015b9c:	2230      	movs	r2, #48	; 0x30
60015b9e:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
60015ba2:	f10d 02a3 	add.w	r2, sp, #163	; 0xa3
60015ba6:	3330      	adds	r3, #48	; 0x30
60015ba8:	f802 3b01 	strb.w	r3, [r2], #1
60015bac:	ab28      	add	r3, sp, #160	; 0xa0
60015bae:	1ad3      	subs	r3, r2, r3
60015bb0:	931a      	str	r3, [sp, #104]	; 0x68
60015bb2:	e50e      	b.n	600155d2 <_vfprintf_r+0x132e>
60015bb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
60015bb6:	9a07      	ldr	r2, [sp, #28]
60015bb8:	932a      	str	r3, [sp, #168]	; 0xa8
60015bba:	7bd1      	ldrb	r1, [r2, #15]
60015bbc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
60015bc0:	4299      	cmp	r1, r3
60015bc2:	4642      	mov	r2, r8
60015bc4:	d109      	bne.n	60015bda <_vfprintf_r+0x1936>
60015bc6:	2030      	movs	r0, #48	; 0x30
60015bc8:	f802 0c01 	strb.w	r0, [r2, #-1]
60015bcc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
60015bce:	1e53      	subs	r3, r2, #1
60015bd0:	932a      	str	r3, [sp, #168]	; 0xa8
60015bd2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
60015bd6:	4299      	cmp	r1, r3
60015bd8:	d0f6      	beq.n	60015bc8 <_vfprintf_r+0x1924>
60015bda:	2b39      	cmp	r3, #57	; 0x39
60015bdc:	bf0b      	itete	eq
60015bde:	9b07      	ldreq	r3, [sp, #28]
60015be0:	3301      	addne	r3, #1
60015be2:	7a9b      	ldrbeq	r3, [r3, #10]
60015be4:	b2db      	uxtbne	r3, r3
60015be6:	f802 3c01 	strb.w	r3, [r2, #-1]
60015bea:	4643      	mov	r3, r8
60015bec:	e5bc      	b.n	60015768 <_vfprintf_r+0x14c4>
60015bee:	4b51      	ldr	r3, [pc, #324]	; (60015d34 <_vfprintf_r+0x1a90>)
60015bf0:	4a51      	ldr	r2, [pc, #324]	; (60015d38 <_vfprintf_r+0x1a94>)
60015bf2:	2d61      	cmp	r5, #97	; 0x61
60015bf4:	bf18      	it	ne
60015bf6:	461a      	movne	r2, r3
60015bf8:	2301      	movs	r3, #1
60015bfa:	9207      	str	r2, [sp, #28]
60015bfc:	9326      	str	r3, [sp, #152]	; 0x98
60015bfe:	e552      	b.n	600156a6 <_vfprintf_r+0x1402>
60015c00:	f04f 0906 	mov.w	r9, #6
60015c04:	f7ff ba92 	b.w	6001512c <_vfprintf_r+0xe88>
60015c08:	07e2      	lsls	r2, r4, #31
60015c0a:	f57f aceb 	bpl.w	600155e4 <_vfprintf_r+0x1340>
60015c0e:	e4e7      	b.n	600155e0 <_vfprintf_r+0x133c>
60015c10:	07e1      	lsls	r1, r4, #31
60015c12:	f57f aded 	bpl.w	600157f0 <_vfprintf_r+0x154c>
60015c16:	9b08      	ldr	r3, [sp, #32]
60015c18:	46a8      	mov	r8, r5
60015c1a:	19de      	adds	r6, r3, r7
60015c1c:	e482      	b.n	60015524 <_vfprintf_r+0x1280>
60015c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
60015c20:	4c46      	ldr	r4, [pc, #280]	; (60015d3c <_vfprintf_r+0x1a98>)
60015c22:	2b00      	cmp	r3, #0
60015c24:	9b07      	ldr	r3, [sp, #28]
60015c26:	bfa8      	it	ge
60015c28:	f89d 2093 	ldrbge.w	r2, [sp, #147]	; 0x93
60015c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
60015c30:	bfb8      	it	lt
60015c32:	222d      	movlt	r2, #45	; 0x2d
60015c34:	9307      	str	r3, [sp, #28]
60015c36:	bfb8      	it	lt
60015c38:	f88d 2093 	strblt.w	r2, [sp, #147]	; 0x93
60015c3c:	4b40      	ldr	r3, [pc, #256]	; (60015d40 <_vfprintf_r+0x1a9c>)
60015c3e:	f7fe bd3f 	b.w	600146c0 <_vfprintf_r+0x41c>
60015c42:	4616      	mov	r6, r2
60015c44:	e6ad      	b.n	600159a2 <_vfprintf_r+0x16fe>
60015c46:	2567      	movs	r5, #103	; 0x67
60015c48:	9919      	ldr	r1, [sp, #100]	; 0x64
60015c4a:	780b      	ldrb	r3, [r1, #0]
60015c4c:	2bff      	cmp	r3, #255	; 0xff
60015c4e:	d063      	beq.n	60015d18 <_vfprintf_r+0x1a74>
60015c50:	2400      	movs	r4, #0
60015c52:	9a10      	ldr	r2, [sp, #64]	; 0x40
60015c54:	4620      	mov	r0, r4
60015c56:	e003      	b.n	60015c60 <_vfprintf_r+0x19bc>
60015c58:	3001      	adds	r0, #1
60015c5a:	3101      	adds	r1, #1
60015c5c:	2bff      	cmp	r3, #255	; 0xff
60015c5e:	d008      	beq.n	60015c72 <_vfprintf_r+0x19ce>
60015c60:	4293      	cmp	r3, r2
60015c62:	da06      	bge.n	60015c72 <_vfprintf_r+0x19ce>
60015c64:	1ad2      	subs	r2, r2, r3
60015c66:	784b      	ldrb	r3, [r1, #1]
60015c68:	2b00      	cmp	r3, #0
60015c6a:	d1f5      	bne.n	60015c58 <_vfprintf_r+0x19b4>
60015c6c:	780b      	ldrb	r3, [r1, #0]
60015c6e:	3401      	adds	r4, #1
60015c70:	e7f4      	b.n	60015c5c <_vfprintf_r+0x19b8>
60015c72:	9210      	str	r2, [sp, #64]	; 0x40
60015c74:	9119      	str	r1, [sp, #100]	; 0x64
60015c76:	9011      	str	r0, [sp, #68]	; 0x44
60015c78:	9413      	str	r4, [sp, #76]	; 0x4c
60015c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
60015c7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
60015c7e:	9307      	str	r3, [sp, #28]
60015c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
60015c82:	4413      	add	r3, r2
60015c84:	9a1c      	ldr	r2, [sp, #112]	; 0x70
60015c86:	fb02 6603 	mla	r6, r2, r3, r6
60015c8a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
60015c8e:	9309      	str	r3, [sp, #36]	; 0x24
60015c90:	e4b4      	b.n	600155fc <_vfprintf_r+0x1358>
60015c92:	4d27      	ldr	r5, [pc, #156]	; (60015d30 <_vfprintf_r+0x1a8c>)
60015c94:	e639      	b.n	6001590a <_vfprintf_r+0x1666>
60015c96:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
60015c9a:	2200      	movs	r2, #0
60015c9c:	2300      	movs	r3, #0
60015c9e:	f7ed f963 	bl	60002f68 <__aeabi_dcmpeq>
60015ca2:	2800      	cmp	r0, #0
60015ca4:	f47f ac3c 	bne.w	60015520 <_vfprintf_r+0x127c>
60015ca8:	f1c7 0701 	rsb	r7, r7, #1
60015cac:	9726      	str	r7, [sp, #152]	; 0x98
60015cae:	e438      	b.n	60015522 <_vfprintf_r+0x127e>
60015cb0:	f10d 02a2 	add.w	r2, sp, #162	; 0xa2
60015cb4:	e777      	b.n	60015ba6 <_vfprintf_r+0x1902>
60015cb6:	f1c3 0301 	rsb	r3, r3, #1
60015cba:	441e      	add	r6, r3
60015cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
60015cbe:	9207      	str	r2, [sp, #28]
60015cc0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
60015cc4:	9309      	str	r3, [sp, #36]	; 0x24
60015cc6:	2567      	movs	r5, #103	; 0x67
60015cc8:	e676      	b.n	600159b8 <_vfprintf_r+0x1714>
60015cca:	9b16      	ldr	r3, [sp, #88]	; 0x58
60015ccc:	18d6      	adds	r6, r2, r3
60015cce:	444e      	add	r6, r9
60015cd0:	2566      	movs	r5, #102	; 0x66
60015cd2:	e6f1      	b.n	60015ab8 <_vfprintf_r+0x1814>
60015cd4:	b943      	cbnz	r3, 60015ce8 <_vfprintf_r+0x1a44>
60015cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
60015cd8:	9307      	str	r3, [sp, #28]
60015cda:	2301      	movs	r3, #1
60015cdc:	9309      	str	r3, [sp, #36]	; 0x24
60015cde:	2566      	movs	r5, #102	; 0x66
60015ce0:	461e      	mov	r6, r3
60015ce2:	e669      	b.n	600159b8 <_vfprintf_r+0x1714>
60015ce4:	2170      	movs	r1, #112	; 0x70
60015ce6:	e43d      	b.n	60015564 <_vfprintf_r+0x12c0>
60015ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
60015cea:	9307      	str	r3, [sp, #28]
60015cec:	9b16      	ldr	r3, [sp, #88]	; 0x58
60015cee:	1c5e      	adds	r6, r3, #1
60015cf0:	444e      	add	r6, r9
60015cf2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
60015cf6:	9309      	str	r3, [sp, #36]	; 0x24
60015cf8:	2566      	movs	r5, #102	; 0x66
60015cfa:	e65d      	b.n	600159b8 <_vfprintf_r+0x1714>
60015cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
60015cfe:	f89a 5001 	ldrb.w	r5, [sl, #1]
60015d02:	4692      	mov	sl, r2
60015d04:	f853 2b04 	ldr.w	r2, [r3], #4
60015d08:	930f      	str	r3, [sp, #60]	; 0x3c
60015d0a:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
60015d0e:	f7fe bb2c 	b.w	6001436a <_vfprintf_r+0xc6>
60015d12:	2302      	movs	r3, #2
60015d14:	931a      	str	r3, [sp, #104]	; 0x68
60015d16:	e45c      	b.n	600155d2 <_vfprintf_r+0x132e>
60015d18:	2300      	movs	r3, #0
60015d1a:	9313      	str	r3, [sp, #76]	; 0x4c
60015d1c:	9311      	str	r3, [sp, #68]	; 0x44
60015d1e:	e7ac      	b.n	60015c7a <_vfprintf_r+0x19d6>
60015d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
60015d22:	8993      	ldrh	r3, [r2, #12]
60015d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60015d28:	8193      	strh	r3, [r2, #12]
60015d2a:	f7fe bbf8 	b.w	6001451e <_vfprintf_r+0x27a>
60015d2e:	bf00      	nop
60015d30:	6001bf9c 	.word	0x6001bf9c
60015d34:	6001bf38 	.word	0x6001bf38
60015d38:	6001bf4c 	.word	0x6001bf4c
60015d3c:	6001bf90 	.word	0x6001bf90
60015d40:	6001bf94 	.word	0x6001bf94

60015d44 <__sbprintf>:
60015d44:	b5f0      	push	{r4, r5, r6, r7, lr}
60015d46:	461f      	mov	r7, r3
60015d48:	898b      	ldrh	r3, [r1, #12]
60015d4a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
60015d4e:	f023 0302 	bic.w	r3, r3, #2
60015d52:	f8ad 300c 	strh.w	r3, [sp, #12]
60015d56:	6e4b      	ldr	r3, [r1, #100]	; 0x64
60015d58:	9319      	str	r3, [sp, #100]	; 0x64
60015d5a:	89cb      	ldrh	r3, [r1, #14]
60015d5c:	f8ad 300e 	strh.w	r3, [sp, #14]
60015d60:	69cb      	ldr	r3, [r1, #28]
60015d62:	9307      	str	r3, [sp, #28]
60015d64:	6a4b      	ldr	r3, [r1, #36]	; 0x24
60015d66:	9309      	str	r3, [sp, #36]	; 0x24
60015d68:	ab1a      	add	r3, sp, #104	; 0x68
60015d6a:	9300      	str	r3, [sp, #0]
60015d6c:	9304      	str	r3, [sp, #16]
60015d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
60015d72:	4615      	mov	r5, r2
60015d74:	4606      	mov	r6, r0
60015d76:	9302      	str	r3, [sp, #8]
60015d78:	9305      	str	r3, [sp, #20]
60015d7a:	a816      	add	r0, sp, #88	; 0x58
60015d7c:	2300      	movs	r3, #0
60015d7e:	460c      	mov	r4, r1
60015d80:	9306      	str	r3, [sp, #24]
60015d82:	f7f5 fc41 	bl	6000b608 <__retarget_lock_init_recursive>
60015d86:	462a      	mov	r2, r5
60015d88:	463b      	mov	r3, r7
60015d8a:	4669      	mov	r1, sp
60015d8c:	4630      	mov	r0, r6
60015d8e:	f7fe fa89 	bl	600142a4 <_vfprintf_r>
60015d92:	1e05      	subs	r5, r0, #0
60015d94:	db07      	blt.n	60015da6 <__sbprintf+0x62>
60015d96:	4669      	mov	r1, sp
60015d98:	4630      	mov	r0, r6
60015d9a:	f000 f99b 	bl	600160d4 <_fflush_r>
60015d9e:	2800      	cmp	r0, #0
60015da0:	bf18      	it	ne
60015da2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
60015da6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
60015daa:	065b      	lsls	r3, r3, #25
60015dac:	d503      	bpl.n	60015db6 <__sbprintf+0x72>
60015dae:	89a3      	ldrh	r3, [r4, #12]
60015db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60015db4:	81a3      	strh	r3, [r4, #12]
60015db6:	9816      	ldr	r0, [sp, #88]	; 0x58
60015db8:	f7f5 fc56 	bl	6000b668 <__retarget_lock_close_recursive>
60015dbc:	4628      	mov	r0, r5
60015dbe:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
60015dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

60015dc4 <__swsetup_r>:
60015dc4:	b538      	push	{r3, r4, r5, lr}
60015dc6:	4b2f      	ldr	r3, [pc, #188]	; (60015e84 <__swsetup_r+0xc0>)
60015dc8:	681b      	ldr	r3, [r3, #0]
60015dca:	4605      	mov	r5, r0
60015dcc:	460c      	mov	r4, r1
60015dce:	b10b      	cbz	r3, 60015dd4 <__swsetup_r+0x10>
60015dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
60015dd2:	b302      	cbz	r2, 60015e16 <__swsetup_r+0x52>
60015dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60015dd8:	0718      	lsls	r0, r3, #28
60015dda:	d523      	bpl.n	60015e24 <__swsetup_r+0x60>
60015ddc:	6922      	ldr	r2, [r4, #16]
60015dde:	b35a      	cbz	r2, 60015e38 <__swsetup_r+0x74>
60015de0:	f013 0101 	ands.w	r1, r3, #1
60015de4:	d007      	beq.n	60015df6 <__swsetup_r+0x32>
60015de6:	6961      	ldr	r1, [r4, #20]
60015de8:	2000      	movs	r0, #0
60015dea:	4249      	negs	r1, r1
60015dec:	60a0      	str	r0, [r4, #8]
60015dee:	61a1      	str	r1, [r4, #24]
60015df0:	b13a      	cbz	r2, 60015e02 <__swsetup_r+0x3e>
60015df2:	2000      	movs	r0, #0
60015df4:	bd38      	pop	{r3, r4, r5, pc}
60015df6:	0798      	lsls	r0, r3, #30
60015df8:	bf58      	it	pl
60015dfa:	6961      	ldrpl	r1, [r4, #20]
60015dfc:	60a1      	str	r1, [r4, #8]
60015dfe:	2a00      	cmp	r2, #0
60015e00:	d1f7      	bne.n	60015df2 <__swsetup_r+0x2e>
60015e02:	0619      	lsls	r1, r3, #24
60015e04:	bf58      	it	pl
60015e06:	4610      	movpl	r0, r2
60015e08:	d5f4      	bpl.n	60015df4 <__swsetup_r+0x30>
60015e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60015e0e:	81a3      	strh	r3, [r4, #12]
60015e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60015e14:	bd38      	pop	{r3, r4, r5, pc}
60015e16:	4618      	mov	r0, r3
60015e18:	f000 f990 	bl	6001613c <__sinit>
60015e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60015e20:	0718      	lsls	r0, r3, #28
60015e22:	d4db      	bmi.n	60015ddc <__swsetup_r+0x18>
60015e24:	06d9      	lsls	r1, r3, #27
60015e26:	d528      	bpl.n	60015e7a <__swsetup_r+0xb6>
60015e28:	075a      	lsls	r2, r3, #29
60015e2a:	d412      	bmi.n	60015e52 <__swsetup_r+0x8e>
60015e2c:	6922      	ldr	r2, [r4, #16]
60015e2e:	f043 0308 	orr.w	r3, r3, #8
60015e32:	81a3      	strh	r3, [r4, #12]
60015e34:	2a00      	cmp	r2, #0
60015e36:	d1d3      	bne.n	60015de0 <__swsetup_r+0x1c>
60015e38:	f403 7120 	and.w	r1, r3, #640	; 0x280
60015e3c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
60015e40:	d0ce      	beq.n	60015de0 <__swsetup_r+0x1c>
60015e42:	4621      	mov	r1, r4
60015e44:	4628      	mov	r0, r5
60015e46:	f000 fcef 	bl	60016828 <__smakebuf_r>
60015e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60015e4e:	6922      	ldr	r2, [r4, #16]
60015e50:	e7c6      	b.n	60015de0 <__swsetup_r+0x1c>
60015e52:	6b21      	ldr	r1, [r4, #48]	; 0x30
60015e54:	b151      	cbz	r1, 60015e6c <__swsetup_r+0xa8>
60015e56:	f104 0240 	add.w	r2, r4, #64	; 0x40
60015e5a:	4291      	cmp	r1, r2
60015e5c:	d004      	beq.n	60015e68 <__swsetup_r+0xa4>
60015e5e:	4628      	mov	r0, r5
60015e60:	f000 fa40 	bl	600162e4 <_free_r>
60015e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60015e68:	2200      	movs	r2, #0
60015e6a:	6322      	str	r2, [r4, #48]	; 0x30
60015e6c:	6922      	ldr	r2, [r4, #16]
60015e6e:	2100      	movs	r1, #0
60015e70:	e9c4 2100 	strd	r2, r1, [r4]
60015e74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
60015e78:	e7d9      	b.n	60015e2e <__swsetup_r+0x6a>
60015e7a:	2209      	movs	r2, #9
60015e7c:	602a      	str	r2, [r5, #0]
60015e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60015e82:	e7c4      	b.n	60015e0e <__swsetup_r+0x4a>
60015e84:	20203140 	.word	0x20203140

60015e88 <abort>:
60015e88:	b508      	push	{r3, lr}
60015e8a:	2006      	movs	r0, #6
60015e8c:	f001 fb40 	bl	60017510 <raise>
60015e90:	2001      	movs	r0, #1
60015e92:	f7f5 fb9d 	bl	6000b5d0 <_exit>
60015e96:	bf00      	nop

60015e98 <quorem>:
60015e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60015e9c:	6903      	ldr	r3, [r0, #16]
60015e9e:	690c      	ldr	r4, [r1, #16]
60015ea0:	42a3      	cmp	r3, r4
60015ea2:	b083      	sub	sp, #12
60015ea4:	f2c0 808a 	blt.w	60015fbc <quorem+0x124>
60015ea8:	3c01      	subs	r4, #1
60015eaa:	f101 0514 	add.w	r5, r1, #20
60015eae:	f100 0814 	add.w	r8, r0, #20
60015eb2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
60015eb6:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
60015eba:	3301      	adds	r3, #1
60015ebc:	429a      	cmp	r2, r3
60015ebe:	468e      	mov	lr, r1
60015ec0:	4681      	mov	r9, r0
60015ec2:	ea4f 0184 	mov.w	r1, r4, lsl #2
60015ec6:	eb05 0784 	add.w	r7, r5, r4, lsl #2
60015eca:	eb08 0a84 	add.w	sl, r8, r4, lsl #2
60015ece:	fbb2 f6f3 	udiv	r6, r2, r3
60015ed2:	d33a      	bcc.n	60015f4a <quorem+0xb2>
60015ed4:	e9cd 1500 	strd	r1, r5, [sp]
60015ed8:	2200      	movs	r2, #0
60015eda:	46ac      	mov	ip, r5
60015edc:	4640      	mov	r0, r8
60015ede:	4613      	mov	r3, r2
60015ee0:	f85c 1b04 	ldr.w	r1, [ip], #4
60015ee4:	6805      	ldr	r5, [r0, #0]
60015ee6:	fa1f fb81 	uxth.w	fp, r1
60015eea:	fb06 220b 	mla	r2, r6, fp, r2
60015eee:	0c09      	lsrs	r1, r1, #16
60015ef0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
60015ef4:	fb06 bb01 	mla	fp, r6, r1, fp
60015ef8:	b292      	uxth	r2, r2
60015efa:	b2a9      	uxth	r1, r5
60015efc:	1a89      	subs	r1, r1, r2
60015efe:	4419      	add	r1, r3
60015f00:	fa1f f38b 	uxth.w	r3, fp
60015f04:	ebc3 4321 	rsb	r3, r3, r1, asr #16
60015f08:	eb03 4315 	add.w	r3, r3, r5, lsr #16
60015f0c:	b289      	uxth	r1, r1
60015f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
60015f12:	4567      	cmp	r7, ip
60015f14:	f840 1b04 	str.w	r1, [r0], #4
60015f18:	ea4f 421b 	mov.w	r2, fp, lsr #16
60015f1c:	ea4f 4323 	mov.w	r3, r3, asr #16
60015f20:	d2de      	bcs.n	60015ee0 <quorem+0x48>
60015f22:	e9dd 1500 	ldrd	r1, r5, [sp]
60015f26:	f858 3001 	ldr.w	r3, [r8, r1]
60015f2a:	b973      	cbnz	r3, 60015f4a <quorem+0xb2>
60015f2c:	f1aa 0a04 	sub.w	sl, sl, #4
60015f30:	45d0      	cmp	r8, sl
60015f32:	d304      	bcc.n	60015f3e <quorem+0xa6>
60015f34:	e007      	b.n	60015f46 <quorem+0xae>
60015f36:	45d0      	cmp	r8, sl
60015f38:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
60015f3c:	d203      	bcs.n	60015f46 <quorem+0xae>
60015f3e:	f85a 3904 	ldr.w	r3, [sl], #-4
60015f42:	2b00      	cmp	r3, #0
60015f44:	d0f7      	beq.n	60015f36 <quorem+0x9e>
60015f46:	f8c9 4010 	str.w	r4, [r9, #16]
60015f4a:	4671      	mov	r1, lr
60015f4c:	4648      	mov	r0, r9
60015f4e:	f000 ffd5 	bl	60016efc <__mcmp>
60015f52:	2800      	cmp	r0, #0
60015f54:	db2e      	blt.n	60015fb4 <quorem+0x11c>
60015f56:	4641      	mov	r1, r8
60015f58:	2200      	movs	r2, #0
60015f5a:	f855 0b04 	ldr.w	r0, [r5], #4
60015f5e:	f8d1 c000 	ldr.w	ip, [r1]
60015f62:	fa1f fe80 	uxth.w	lr, r0
60015f66:	fa1f f38c 	uxth.w	r3, ip
60015f6a:	eba3 030e 	sub.w	r3, r3, lr
60015f6e:	4413      	add	r3, r2
60015f70:	0c02      	lsrs	r2, r0, #16
60015f72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
60015f76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
60015f7a:	b29b      	uxth	r3, r3
60015f7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
60015f80:	42af      	cmp	r7, r5
60015f82:	f841 3b04 	str.w	r3, [r1], #4
60015f86:	ea4f 4222 	mov.w	r2, r2, asr #16
60015f8a:	d2e6      	bcs.n	60015f5a <quorem+0xc2>
60015f8c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
60015f90:	eb08 0384 	add.w	r3, r8, r4, lsl #2
60015f94:	b96a      	cbnz	r2, 60015fb2 <quorem+0x11a>
60015f96:	3b04      	subs	r3, #4
60015f98:	4598      	cmp	r8, r3
60015f9a:	d304      	bcc.n	60015fa6 <quorem+0x10e>
60015f9c:	e007      	b.n	60015fae <quorem+0x116>
60015f9e:	4598      	cmp	r8, r3
60015fa0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
60015fa4:	d203      	bcs.n	60015fae <quorem+0x116>
60015fa6:	f853 2904 	ldr.w	r2, [r3], #-4
60015faa:	2a00      	cmp	r2, #0
60015fac:	d0f7      	beq.n	60015f9e <quorem+0x106>
60015fae:	f8c9 4010 	str.w	r4, [r9, #16]
60015fb2:	3601      	adds	r6, #1
60015fb4:	4630      	mov	r0, r6
60015fb6:	b003      	add	sp, #12
60015fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60015fbc:	2000      	movs	r0, #0
60015fbe:	b003      	add	sp, #12
60015fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

60015fc4 <__sflush_r>:
60015fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60015fc6:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
60015fca:	4607      	mov	r7, r0
60015fcc:	0718      	lsls	r0, r3, #28
60015fce:	460c      	mov	r4, r1
60015fd0:	d439      	bmi.n	60016046 <__sflush_r+0x82>
60015fd2:	684a      	ldr	r2, [r1, #4]
60015fd4:	2a00      	cmp	r2, #0
60015fd6:	dd53      	ble.n	60016080 <__sflush_r+0xbc>
60015fd8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
60015fda:	2d00      	cmp	r5, #0
60015fdc:	d031      	beq.n	60016042 <__sflush_r+0x7e>
60015fde:	2200      	movs	r2, #0
60015fe0:	683e      	ldr	r6, [r7, #0]
60015fe2:	603a      	str	r2, [r7, #0]
60015fe4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
60015fe8:	69e1      	ldr	r1, [r4, #28]
60015fea:	d155      	bne.n	60016098 <__sflush_r+0xd4>
60015fec:	2301      	movs	r3, #1
60015fee:	4638      	mov	r0, r7
60015ff0:	47a8      	blx	r5
60015ff2:	1c41      	adds	r1, r0, #1
60015ff4:	4602      	mov	r2, r0
60015ff6:	d05e      	beq.n	600160b6 <__sflush_r+0xf2>
60015ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
60015ffc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
60015ffe:	69e1      	ldr	r1, [r4, #28]
60016000:	075b      	lsls	r3, r3, #29
60016002:	d505      	bpl.n	60016010 <__sflush_r+0x4c>
60016004:	6863      	ldr	r3, [r4, #4]
60016006:	1ad2      	subs	r2, r2, r3
60016008:	6b23      	ldr	r3, [r4, #48]	; 0x30
6001600a:	b10b      	cbz	r3, 60016010 <__sflush_r+0x4c>
6001600c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
6001600e:	1ad2      	subs	r2, r2, r3
60016010:	2300      	movs	r3, #0
60016012:	4638      	mov	r0, r7
60016014:	47a8      	blx	r5
60016016:	1c45      	adds	r5, r0, #1
60016018:	d040      	beq.n	6001609c <__sflush_r+0xd8>
6001601a:	2300      	movs	r3, #0
6001601c:	6063      	str	r3, [r4, #4]
6001601e:	6923      	ldr	r3, [r4, #16]
60016020:	6023      	str	r3, [r4, #0]
60016022:	89a3      	ldrh	r3, [r4, #12]
60016024:	04d9      	lsls	r1, r3, #19
60016026:	d500      	bpl.n	6001602a <__sflush_r+0x66>
60016028:	6520      	str	r0, [r4, #80]	; 0x50
6001602a:	6b21      	ldr	r1, [r4, #48]	; 0x30
6001602c:	603e      	str	r6, [r7, #0]
6001602e:	b141      	cbz	r1, 60016042 <__sflush_r+0x7e>
60016030:	f104 0340 	add.w	r3, r4, #64	; 0x40
60016034:	4299      	cmp	r1, r3
60016036:	d002      	beq.n	6001603e <__sflush_r+0x7a>
60016038:	4638      	mov	r0, r7
6001603a:	f000 f953 	bl	600162e4 <_free_r>
6001603e:	2300      	movs	r3, #0
60016040:	6323      	str	r3, [r4, #48]	; 0x30
60016042:	2000      	movs	r0, #0
60016044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60016046:	690e      	ldr	r6, [r1, #16]
60016048:	2e00      	cmp	r6, #0
6001604a:	d0fa      	beq.n	60016042 <__sflush_r+0x7e>
6001604c:	079b      	lsls	r3, r3, #30
6001604e:	680d      	ldr	r5, [r1, #0]
60016050:	bf08      	it	eq
60016052:	694b      	ldreq	r3, [r1, #20]
60016054:	600e      	str	r6, [r1, #0]
60016056:	bf18      	it	ne
60016058:	2300      	movne	r3, #0
6001605a:	1bad      	subs	r5, r5, r6
6001605c:	608b      	str	r3, [r1, #8]
6001605e:	e00c      	b.n	6001607a <__sflush_r+0xb6>
60016060:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
60016064:	69e1      	ldr	r1, [r4, #28]
60016066:	462b      	mov	r3, r5
60016068:	4632      	mov	r2, r6
6001606a:	4638      	mov	r0, r7
6001606c:	47e0      	blx	ip
6001606e:	f1b0 0c00 	subs.w	ip, r0, #0
60016072:	eba5 050c 	sub.w	r5, r5, ip
60016076:	4466      	add	r6, ip
60016078:	dd06      	ble.n	60016088 <__sflush_r+0xc4>
6001607a:	2d00      	cmp	r5, #0
6001607c:	dcf0      	bgt.n	60016060 <__sflush_r+0x9c>
6001607e:	e7e0      	b.n	60016042 <__sflush_r+0x7e>
60016080:	6bca      	ldr	r2, [r1, #60]	; 0x3c
60016082:	2a00      	cmp	r2, #0
60016084:	dca8      	bgt.n	60015fd8 <__sflush_r+0x14>
60016086:	e7dc      	b.n	60016042 <__sflush_r+0x7e>
60016088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
6001608c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60016090:	81a3      	strh	r3, [r4, #12]
60016092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60016096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60016098:	6d22      	ldr	r2, [r4, #80]	; 0x50
6001609a:	e7b1      	b.n	60016000 <__sflush_r+0x3c>
6001609c:	683a      	ldr	r2, [r7, #0]
6001609e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600160a2:	b18a      	cbz	r2, 600160c8 <__sflush_r+0x104>
600160a4:	2a1d      	cmp	r2, #29
600160a6:	d001      	beq.n	600160ac <__sflush_r+0xe8>
600160a8:	2a16      	cmp	r2, #22
600160aa:	d1ef      	bne.n	6001608c <__sflush_r+0xc8>
600160ac:	6923      	ldr	r3, [r4, #16]
600160ae:	2200      	movs	r2, #0
600160b0:	e9c4 3200 	strd	r3, r2, [r4]
600160b4:	e7b9      	b.n	6001602a <__sflush_r+0x66>
600160b6:	683b      	ldr	r3, [r7, #0]
600160b8:	2b00      	cmp	r3, #0
600160ba:	d09d      	beq.n	60015ff8 <__sflush_r+0x34>
600160bc:	2b1d      	cmp	r3, #29
600160be:	d001      	beq.n	600160c4 <__sflush_r+0x100>
600160c0:	2b16      	cmp	r3, #22
600160c2:	d1e1      	bne.n	60016088 <__sflush_r+0xc4>
600160c4:	603e      	str	r6, [r7, #0]
600160c6:	e7bc      	b.n	60016042 <__sflush_r+0x7e>
600160c8:	6062      	str	r2, [r4, #4]
600160ca:	6922      	ldr	r2, [r4, #16]
600160cc:	6022      	str	r2, [r4, #0]
600160ce:	04da      	lsls	r2, r3, #19
600160d0:	d4aa      	bmi.n	60016028 <__sflush_r+0x64>
600160d2:	e7aa      	b.n	6001602a <__sflush_r+0x66>

600160d4 <_fflush_r>:
600160d4:	b538      	push	{r3, r4, r5, lr}
600160d6:	460c      	mov	r4, r1
600160d8:	4605      	mov	r5, r0
600160da:	b108      	cbz	r0, 600160e0 <_fflush_r+0xc>
600160dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
600160de:	b1a3      	cbz	r3, 6001610a <_fflush_r+0x36>
600160e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
600160e4:	b1b8      	cbz	r0, 60016116 <_fflush_r+0x42>
600160e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
600160e8:	07db      	lsls	r3, r3, #31
600160ea:	d401      	bmi.n	600160f0 <_fflush_r+0x1c>
600160ec:	0581      	lsls	r1, r0, #22
600160ee:	d515      	bpl.n	6001611c <_fflush_r+0x48>
600160f0:	4628      	mov	r0, r5
600160f2:	4621      	mov	r1, r4
600160f4:	f7ff ff66 	bl	60015fc4 <__sflush_r>
600160f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
600160fa:	07da      	lsls	r2, r3, #31
600160fc:	4605      	mov	r5, r0
600160fe:	d402      	bmi.n	60016106 <_fflush_r+0x32>
60016100:	89a3      	ldrh	r3, [r4, #12]
60016102:	059b      	lsls	r3, r3, #22
60016104:	d50e      	bpl.n	60016124 <_fflush_r+0x50>
60016106:	4628      	mov	r0, r5
60016108:	bd38      	pop	{r3, r4, r5, pc}
6001610a:	f000 f817 	bl	6001613c <__sinit>
6001610e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
60016112:	2800      	cmp	r0, #0
60016114:	d1e7      	bne.n	600160e6 <_fflush_r+0x12>
60016116:	4605      	mov	r5, r0
60016118:	4628      	mov	r0, r5
6001611a:	bd38      	pop	{r3, r4, r5, pc}
6001611c:	6da0      	ldr	r0, [r4, #88]	; 0x58
6001611e:	f7f5 fabb 	bl	6000b698 <__retarget_lock_acquire_recursive>
60016122:	e7e5      	b.n	600160f0 <_fflush_r+0x1c>
60016124:	6da0      	ldr	r0, [r4, #88]	; 0x58
60016126:	f7f5 fad3 	bl	6000b6d0 <__retarget_lock_release_recursive>
6001612a:	4628      	mov	r0, r5
6001612c:	bd38      	pop	{r3, r4, r5, pc}
6001612e:	bf00      	nop

60016130 <_cleanup_r>:
60016130:	4901      	ldr	r1, [pc, #4]	; (60016138 <_cleanup_r+0x8>)
60016132:	f000 bb51 	b.w	600167d8 <_fwalk_reent>
60016136:	bf00      	nop
60016138:	600160d5 	.word	0x600160d5

6001613c <__sinit>:
6001613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60016140:	4682      	mov	sl, r0
60016142:	4839      	ldr	r0, [pc, #228]	; (60016228 <__sinit+0xec>)
60016144:	f7f5 faa8 	bl	6000b698 <__retarget_lock_acquire_recursive>
60016148:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
6001614c:	2c00      	cmp	r4, #0
6001614e:	d166      	bne.n	6001621e <__sinit+0xe2>
60016150:	f8da 5004 	ldr.w	r5, [sl, #4]
60016154:	4a35      	ldr	r2, [pc, #212]	; (6001622c <__sinit+0xf0>)
60016156:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
6001615a:	2303      	movs	r3, #3
6001615c:	e9ca 4353 	strd	r4, r3, [sl, #332]	; 0x14c
60016160:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 60016230 <__sinit+0xf4>
60016164:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 60016234 <__sinit+0xf8>
60016168:	4f33      	ldr	r7, [pc, #204]	; (60016238 <__sinit+0xfc>)
6001616a:	4e34      	ldr	r6, [pc, #208]	; (6001623c <__sinit+0x100>)
6001616c:	2304      	movs	r3, #4
6001616e:	f50a 72ac 	add.w	r2, sl, #344	; 0x158
60016172:	f8ca 2154 	str.w	r2, [sl, #340]	; 0x154
60016176:	4621      	mov	r1, r4
60016178:	60eb      	str	r3, [r5, #12]
6001617a:	e9c5 4400 	strd	r4, r4, [r5]
6001617e:	e9c5 4404 	strd	r4, r4, [r5, #16]
60016182:	60ac      	str	r4, [r5, #8]
60016184:	666c      	str	r4, [r5, #100]	; 0x64
60016186:	2208      	movs	r2, #8
60016188:	61ac      	str	r4, [r5, #24]
6001618a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
6001618e:	f7fd f8d7 	bl	60013340 <memset>
60016192:	e9c5 5907 	strd	r5, r9, [r5, #28]
60016196:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
6001619a:	62ee      	str	r6, [r5, #44]	; 0x2c
6001619c:	f105 0058 	add.w	r0, r5, #88	; 0x58
600161a0:	f7f5 fa32 	bl	6000b608 <__retarget_lock_init_recursive>
600161a4:	f8da 5008 	ldr.w	r5, [sl, #8]
600161a8:	4b25      	ldr	r3, [pc, #148]	; (60016240 <__sinit+0x104>)
600161aa:	60eb      	str	r3, [r5, #12]
600161ac:	4621      	mov	r1, r4
600161ae:	e9c5 4400 	strd	r4, r4, [r5]
600161b2:	e9c5 4404 	strd	r4, r4, [r5, #16]
600161b6:	60ac      	str	r4, [r5, #8]
600161b8:	666c      	str	r4, [r5, #100]	; 0x64
600161ba:	61ac      	str	r4, [r5, #24]
600161bc:	2208      	movs	r2, #8
600161be:	f105 005c 	add.w	r0, r5, #92	; 0x5c
600161c2:	f7fd f8bd 	bl	60013340 <memset>
600161c6:	e9c5 5907 	strd	r5, r9, [r5, #28]
600161ca:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
600161ce:	62ee      	str	r6, [r5, #44]	; 0x2c
600161d0:	f105 0058 	add.w	r0, r5, #88	; 0x58
600161d4:	f7f5 fa18 	bl	6000b608 <__retarget_lock_init_recursive>
600161d8:	f8da 500c 	ldr.w	r5, [sl, #12]
600161dc:	4b19      	ldr	r3, [pc, #100]	; (60016244 <__sinit+0x108>)
600161de:	60eb      	str	r3, [r5, #12]
600161e0:	4621      	mov	r1, r4
600161e2:	e9c5 4400 	strd	r4, r4, [r5]
600161e6:	e9c5 4404 	strd	r4, r4, [r5, #16]
600161ea:	60ac      	str	r4, [r5, #8]
600161ec:	666c      	str	r4, [r5, #100]	; 0x64
600161ee:	61ac      	str	r4, [r5, #24]
600161f0:	2208      	movs	r2, #8
600161f2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
600161f6:	f7fd f8a3 	bl	60013340 <memset>
600161fa:	f105 0058 	add.w	r0, r5, #88	; 0x58
600161fe:	e9c5 5907 	strd	r5, r9, [r5, #28]
60016202:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
60016206:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
6001620a:	f7f5 f9fd 	bl	6000b608 <__retarget_lock_init_recursive>
6001620e:	2301      	movs	r3, #1
60016210:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
60016214:	4804      	ldr	r0, [pc, #16]	; (60016228 <__sinit+0xec>)
60016216:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6001621a:	f7f5 ba59 	b.w	6000b6d0 <__retarget_lock_release_recursive>
6001621e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60016222:	4801      	ldr	r0, [pc, #4]	; (60016228 <__sinit+0xec>)
60016224:	f7f5 ba54 	b.w	6000b6d0 <__retarget_lock_release_recursive>
60016228:	2020347c 	.word	0x2020347c
6001622c:	60016131 	.word	0x60016131
60016230:	60017599 	.word	0x60017599
60016234:	600175bd 	.word	0x600175bd
60016238:	600175fd 	.word	0x600175fd
6001623c:	60017621 	.word	0x60017621
60016240:	00010009 	.word	0x00010009
60016244:	00020012 	.word	0x00020012

60016248 <_malloc_trim_r>:
60016248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6001624a:	4f23      	ldr	r7, [pc, #140]	; (600162d8 <_malloc_trim_r+0x90>)
6001624c:	460c      	mov	r4, r1
6001624e:	4606      	mov	r6, r0
60016250:	f7fd f8c8 	bl	600133e4 <__malloc_lock>
60016254:	68bb      	ldr	r3, [r7, #8]
60016256:	685d      	ldr	r5, [r3, #4]
60016258:	f025 0503 	bic.w	r5, r5, #3
6001625c:	f605 73ef 	addw	r3, r5, #4079	; 0xfef
60016260:	1b19      	subs	r1, r3, r4
60016262:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
60016266:	f021 010f 	bic.w	r1, r1, #15
6001626a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
6001626e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
60016272:	db07      	blt.n	60016284 <_malloc_trim_r+0x3c>
60016274:	2100      	movs	r1, #0
60016276:	4630      	mov	r0, r6
60016278:	f7fd f8d4 	bl	60013424 <_sbrk_r>
6001627c:	68bb      	ldr	r3, [r7, #8]
6001627e:	442b      	add	r3, r5
60016280:	4298      	cmp	r0, r3
60016282:	d004      	beq.n	6001628e <_malloc_trim_r+0x46>
60016284:	4630      	mov	r0, r6
60016286:	f7fd f8b3 	bl	600133f0 <__malloc_unlock>
6001628a:	2000      	movs	r0, #0
6001628c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6001628e:	4261      	negs	r1, r4
60016290:	4630      	mov	r0, r6
60016292:	f7fd f8c7 	bl	60013424 <_sbrk_r>
60016296:	3001      	adds	r0, #1
60016298:	d00d      	beq.n	600162b6 <_malloc_trim_r+0x6e>
6001629a:	4a10      	ldr	r2, [pc, #64]	; (600162dc <_malloc_trim_r+0x94>)
6001629c:	68bb      	ldr	r3, [r7, #8]
6001629e:	1b2d      	subs	r5, r5, r4
600162a0:	f045 0501 	orr.w	r5, r5, #1
600162a4:	605d      	str	r5, [r3, #4]
600162a6:	6813      	ldr	r3, [r2, #0]
600162a8:	4630      	mov	r0, r6
600162aa:	1b1b      	subs	r3, r3, r4
600162ac:	6013      	str	r3, [r2, #0]
600162ae:	f7fd f89f 	bl	600133f0 <__malloc_unlock>
600162b2:	2001      	movs	r0, #1
600162b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600162b6:	2100      	movs	r1, #0
600162b8:	4630      	mov	r0, r6
600162ba:	f7fd f8b3 	bl	60013424 <_sbrk_r>
600162be:	68ba      	ldr	r2, [r7, #8]
600162c0:	1a83      	subs	r3, r0, r2
600162c2:	2b0f      	cmp	r3, #15
600162c4:	ddde      	ble.n	60016284 <_malloc_trim_r+0x3c>
600162c6:	f043 0301 	orr.w	r3, r3, #1
600162ca:	6053      	str	r3, [r2, #4]
600162cc:	4b04      	ldr	r3, [pc, #16]	; (600162e0 <_malloc_trim_r+0x98>)
600162ce:	4903      	ldr	r1, [pc, #12]	; (600162dc <_malloc_trim_r+0x94>)
600162d0:	681b      	ldr	r3, [r3, #0]
600162d2:	1ac0      	subs	r0, r0, r3
600162d4:	6008      	str	r0, [r1, #0]
600162d6:	e7d5      	b.n	60016284 <_malloc_trim_r+0x3c>
600162d8:	202025a8 	.word	0x202025a8
600162dc:	20204de0 	.word	0x20204de0
600162e0:	20203144 	.word	0x20203144

600162e4 <_free_r>:
600162e4:	2900      	cmp	r1, #0
600162e6:	d07c      	beq.n	600163e2 <_free_r+0xfe>
600162e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600162ea:	460c      	mov	r4, r1
600162ec:	4606      	mov	r6, r0
600162ee:	f7fd f879 	bl	600133e4 <__malloc_lock>
600162f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
600162f6:	4f77      	ldr	r7, [pc, #476]	; (600164d4 <_free_r+0x1f0>)
600162f8:	f1a4 0508 	sub.w	r5, r4, #8
600162fc:	f023 0101 	bic.w	r1, r3, #1
60016300:	1868      	adds	r0, r5, r1
60016302:	f8d7 c008 	ldr.w	ip, [r7, #8]
60016306:	6842      	ldr	r2, [r0, #4]
60016308:	4584      	cmp	ip, r0
6001630a:	f022 0203 	bic.w	r2, r2, #3
6001630e:	f000 8083 	beq.w	60016418 <_free_r+0x134>
60016312:	07db      	lsls	r3, r3, #31
60016314:	6042      	str	r2, [r0, #4]
60016316:	eb00 0c02 	add.w	ip, r0, r2
6001631a:	d433      	bmi.n	60016384 <_free_r+0xa0>
6001631c:	f854 4c08 	ldr.w	r4, [r4, #-8]
60016320:	f8dc 3004 	ldr.w	r3, [ip, #4]
60016324:	1b2d      	subs	r5, r5, r4
60016326:	4421      	add	r1, r4
60016328:	68ac      	ldr	r4, [r5, #8]
6001632a:	f107 0c08 	add.w	ip, r7, #8
6001632e:	4564      	cmp	r4, ip
60016330:	f003 0301 	and.w	r3, r3, #1
60016334:	d064      	beq.n	60016400 <_free_r+0x11c>
60016336:	f8d5 e00c 	ldr.w	lr, [r5, #12]
6001633a:	f8c4 e00c 	str.w	lr, [r4, #12]
6001633e:	f8ce 4008 	str.w	r4, [lr, #8]
60016342:	2b00      	cmp	r3, #0
60016344:	f000 8081 	beq.w	6001644a <_free_r+0x166>
60016348:	f041 0301 	orr.w	r3, r1, #1
6001634c:	606b      	str	r3, [r5, #4]
6001634e:	6001      	str	r1, [r0, #0]
60016350:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
60016354:	d222      	bcs.n	6001639c <_free_r+0xb8>
60016356:	6878      	ldr	r0, [r7, #4]
60016358:	08cb      	lsrs	r3, r1, #3
6001635a:	2201      	movs	r2, #1
6001635c:	0949      	lsrs	r1, r1, #5
6001635e:	3301      	adds	r3, #1
60016360:	408a      	lsls	r2, r1
60016362:	4302      	orrs	r2, r0
60016364:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
60016368:	607a      	str	r2, [r7, #4]
6001636a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
6001636e:	3a08      	subs	r2, #8
60016370:	e9c5 1202 	strd	r1, r2, [r5, #8]
60016374:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
60016378:	60cd      	str	r5, [r1, #12]
6001637a:	4630      	mov	r0, r6
6001637c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
60016380:	f7fd b836 	b.w	600133f0 <__malloc_unlock>
60016384:	f8dc 3004 	ldr.w	r3, [ip, #4]
60016388:	07db      	lsls	r3, r3, #31
6001638a:	d52b      	bpl.n	600163e4 <_free_r+0x100>
6001638c:	f041 0301 	orr.w	r3, r1, #1
60016390:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
60016394:	f844 3c04 	str.w	r3, [r4, #-4]
60016398:	6001      	str	r1, [r0, #0]
6001639a:	d3dc      	bcc.n	60016356 <_free_r+0x72>
6001639c:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
600163a0:	ea4f 2351 	mov.w	r3, r1, lsr #9
600163a4:	d253      	bcs.n	6001644e <_free_r+0x16a>
600163a6:	098b      	lsrs	r3, r1, #6
600163a8:	f103 0039 	add.w	r0, r3, #57	; 0x39
600163ac:	f103 0238 	add.w	r2, r3, #56	; 0x38
600163b0:	00c3      	lsls	r3, r0, #3
600163b2:	18f8      	adds	r0, r7, r3
600163b4:	58fb      	ldr	r3, [r7, r3]
600163b6:	3808      	subs	r0, #8
600163b8:	4298      	cmp	r0, r3
600163ba:	d103      	bne.n	600163c4 <_free_r+0xe0>
600163bc:	e063      	b.n	60016486 <_free_r+0x1a2>
600163be:	689b      	ldr	r3, [r3, #8]
600163c0:	4298      	cmp	r0, r3
600163c2:	d004      	beq.n	600163ce <_free_r+0xea>
600163c4:	685a      	ldr	r2, [r3, #4]
600163c6:	f022 0203 	bic.w	r2, r2, #3
600163ca:	428a      	cmp	r2, r1
600163cc:	d8f7      	bhi.n	600163be <_free_r+0xda>
600163ce:	68d8      	ldr	r0, [r3, #12]
600163d0:	e9c5 3002 	strd	r3, r0, [r5, #8]
600163d4:	6085      	str	r5, [r0, #8]
600163d6:	60dd      	str	r5, [r3, #12]
600163d8:	4630      	mov	r0, r6
600163da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
600163de:	f7fd b807 	b.w	600133f0 <__malloc_unlock>
600163e2:	4770      	bx	lr
600163e4:	4411      	add	r1, r2
600163e6:	f107 0c08 	add.w	ip, r7, #8
600163ea:	6883      	ldr	r3, [r0, #8]
600163ec:	4563      	cmp	r3, ip
600163ee:	d03f      	beq.n	60016470 <_free_r+0x18c>
600163f0:	68c2      	ldr	r2, [r0, #12]
600163f2:	60da      	str	r2, [r3, #12]
600163f4:	6093      	str	r3, [r2, #8]
600163f6:	f041 0301 	orr.w	r3, r1, #1
600163fa:	606b      	str	r3, [r5, #4]
600163fc:	5069      	str	r1, [r5, r1]
600163fe:	e7a7      	b.n	60016350 <_free_r+0x6c>
60016400:	2b00      	cmp	r3, #0
60016402:	d161      	bne.n	600164c8 <_free_r+0x1e4>
60016404:	440a      	add	r2, r1
60016406:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
6001640a:	60cb      	str	r3, [r1, #12]
6001640c:	6099      	str	r1, [r3, #8]
6001640e:	f042 0301 	orr.w	r3, r2, #1
60016412:	606b      	str	r3, [r5, #4]
60016414:	50aa      	str	r2, [r5, r2]
60016416:	e7b0      	b.n	6001637a <_free_r+0x96>
60016418:	440a      	add	r2, r1
6001641a:	07d9      	lsls	r1, r3, #31
6001641c:	d407      	bmi.n	6001642e <_free_r+0x14a>
6001641e:	f854 3c08 	ldr.w	r3, [r4, #-8]
60016422:	1aed      	subs	r5, r5, r3
60016424:	441a      	add	r2, r3
60016426:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
6001642a:	60cb      	str	r3, [r1, #12]
6001642c:	6099      	str	r1, [r3, #8]
6001642e:	f042 0301 	orr.w	r3, r2, #1
60016432:	606b      	str	r3, [r5, #4]
60016434:	4b28      	ldr	r3, [pc, #160]	; (600164d8 <_free_r+0x1f4>)
60016436:	60bd      	str	r5, [r7, #8]
60016438:	681b      	ldr	r3, [r3, #0]
6001643a:	4293      	cmp	r3, r2
6001643c:	d89d      	bhi.n	6001637a <_free_r+0x96>
6001643e:	4b27      	ldr	r3, [pc, #156]	; (600164dc <_free_r+0x1f8>)
60016440:	4630      	mov	r0, r6
60016442:	6819      	ldr	r1, [r3, #0]
60016444:	f7ff ff00 	bl	60016248 <_malloc_trim_r>
60016448:	e797      	b.n	6001637a <_free_r+0x96>
6001644a:	4411      	add	r1, r2
6001644c:	e7cd      	b.n	600163ea <_free_r+0x106>
6001644e:	2b14      	cmp	r3, #20
60016450:	d908      	bls.n	60016464 <_free_r+0x180>
60016452:	2b54      	cmp	r3, #84	; 0x54
60016454:	d81f      	bhi.n	60016496 <_free_r+0x1b2>
60016456:	0b0b      	lsrs	r3, r1, #12
60016458:	f103 006f 	add.w	r0, r3, #111	; 0x6f
6001645c:	f103 026e 	add.w	r2, r3, #110	; 0x6e
60016460:	00c3      	lsls	r3, r0, #3
60016462:	e7a6      	b.n	600163b2 <_free_r+0xce>
60016464:	f103 005c 	add.w	r0, r3, #92	; 0x5c
60016468:	f103 025b 	add.w	r2, r3, #91	; 0x5b
6001646c:	00c3      	lsls	r3, r0, #3
6001646e:	e7a0      	b.n	600163b2 <_free_r+0xce>
60016470:	f041 0301 	orr.w	r3, r1, #1
60016474:	613d      	str	r5, [r7, #16]
60016476:	617d      	str	r5, [r7, #20]
60016478:	f8c5 c008 	str.w	ip, [r5, #8]
6001647c:	f8c5 c00c 	str.w	ip, [r5, #12]
60016480:	606b      	str	r3, [r5, #4]
60016482:	5069      	str	r1, [r5, r1]
60016484:	e779      	b.n	6001637a <_free_r+0x96>
60016486:	6879      	ldr	r1, [r7, #4]
60016488:	1092      	asrs	r2, r2, #2
6001648a:	2401      	movs	r4, #1
6001648c:	fa04 f202 	lsl.w	r2, r4, r2
60016490:	430a      	orrs	r2, r1
60016492:	607a      	str	r2, [r7, #4]
60016494:	e79c      	b.n	600163d0 <_free_r+0xec>
60016496:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
6001649a:	d806      	bhi.n	600164aa <_free_r+0x1c6>
6001649c:	0bcb      	lsrs	r3, r1, #15
6001649e:	f103 0078 	add.w	r0, r3, #120	; 0x78
600164a2:	f103 0277 	add.w	r2, r3, #119	; 0x77
600164a6:	00c3      	lsls	r3, r0, #3
600164a8:	e783      	b.n	600163b2 <_free_r+0xce>
600164aa:	f240 5254 	movw	r2, #1364	; 0x554
600164ae:	4293      	cmp	r3, r2
600164b0:	d806      	bhi.n	600164c0 <_free_r+0x1dc>
600164b2:	0c8b      	lsrs	r3, r1, #18
600164b4:	f103 007d 	add.w	r0, r3, #125	; 0x7d
600164b8:	f103 027c 	add.w	r2, r3, #124	; 0x7c
600164bc:	00c3      	lsls	r3, r0, #3
600164be:	e778      	b.n	600163b2 <_free_r+0xce>
600164c0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
600164c4:	227e      	movs	r2, #126	; 0x7e
600164c6:	e774      	b.n	600163b2 <_free_r+0xce>
600164c8:	f041 0301 	orr.w	r3, r1, #1
600164cc:	606b      	str	r3, [r5, #4]
600164ce:	6001      	str	r1, [r0, #0]
600164d0:	e753      	b.n	6001637a <_free_r+0x96>
600164d2:	bf00      	nop
600164d4:	202025a8 	.word	0x202025a8
600164d8:	20203148 	.word	0x20203148
600164dc:	20204e10 	.word	0x20204e10

600164e0 <__sfvwrite_r>:
600164e0:	6893      	ldr	r3, [r2, #8]
600164e2:	2b00      	cmp	r3, #0
600164e4:	f000 80f6 	beq.w	600166d4 <__sfvwrite_r+0x1f4>
600164e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600164ec:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
600164f0:	f01c 0f08 	tst.w	ip, #8
600164f4:	b083      	sub	sp, #12
600164f6:	4690      	mov	r8, r2
600164f8:	4681      	mov	r9, r0
600164fa:	460c      	mov	r4, r1
600164fc:	d031      	beq.n	60016562 <__sfvwrite_r+0x82>
600164fe:	690b      	ldr	r3, [r1, #16]
60016500:	b37b      	cbz	r3, 60016562 <__sfvwrite_r+0x82>
60016502:	f01c 0702 	ands.w	r7, ip, #2
60016506:	f8d8 6000 	ldr.w	r6, [r8]
6001650a:	d038      	beq.n	6001657e <__sfvwrite_r+0x9e>
6001650c:	2700      	movs	r7, #0
6001650e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
60016512:	69e1      	ldr	r1, [r4, #28]
60016514:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 600167d4 <__sfvwrite_r+0x2f4>
60016518:	463d      	mov	r5, r7
6001651a:	4555      	cmp	r5, sl
6001651c:	462b      	mov	r3, r5
6001651e:	463a      	mov	r2, r7
60016520:	bf28      	it	cs
60016522:	4653      	movcs	r3, sl
60016524:	4648      	mov	r0, r9
60016526:	b1c5      	cbz	r5, 6001655a <__sfvwrite_r+0x7a>
60016528:	47d8      	blx	fp
6001652a:	2800      	cmp	r0, #0
6001652c:	f340 80c8 	ble.w	600166c0 <__sfvwrite_r+0x1e0>
60016530:	f8d8 3008 	ldr.w	r3, [r8, #8]
60016534:	1a1b      	subs	r3, r3, r0
60016536:	4407      	add	r7, r0
60016538:	1a2d      	subs	r5, r5, r0
6001653a:	f8c8 3008 	str.w	r3, [r8, #8]
6001653e:	2b00      	cmp	r3, #0
60016540:	f000 80b4 	beq.w	600166ac <__sfvwrite_r+0x1cc>
60016544:	4555      	cmp	r5, sl
60016546:	462b      	mov	r3, r5
60016548:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
6001654c:	69e1      	ldr	r1, [r4, #28]
6001654e:	bf28      	it	cs
60016550:	4653      	movcs	r3, sl
60016552:	463a      	mov	r2, r7
60016554:	4648      	mov	r0, r9
60016556:	2d00      	cmp	r5, #0
60016558:	d1e6      	bne.n	60016528 <__sfvwrite_r+0x48>
6001655a:	e9d6 7500 	ldrd	r7, r5, [r6]
6001655e:	3608      	adds	r6, #8
60016560:	e7db      	b.n	6001651a <__sfvwrite_r+0x3a>
60016562:	4621      	mov	r1, r4
60016564:	4648      	mov	r0, r9
60016566:	f7ff fc2d 	bl	60015dc4 <__swsetup_r>
6001656a:	2800      	cmp	r0, #0
6001656c:	f040 80ad 	bne.w	600166ca <__sfvwrite_r+0x1ea>
60016570:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
60016574:	f8d8 6000 	ldr.w	r6, [r8]
60016578:	f01c 0702 	ands.w	r7, ip, #2
6001657c:	d1c6      	bne.n	6001650c <__sfvwrite_r+0x2c>
6001657e:	f01c 0a01 	ands.w	sl, ip, #1
60016582:	d163      	bne.n	6001664c <__sfvwrite_r+0x16c>
60016584:	6823      	ldr	r3, [r4, #0]
60016586:	68a1      	ldr	r1, [r4, #8]
60016588:	4657      	mov	r7, sl
6001658a:	4618      	mov	r0, r3
6001658c:	468b      	mov	fp, r1
6001658e:	2f00      	cmp	r7, #0
60016590:	d058      	beq.n	60016644 <__sfvwrite_r+0x164>
60016592:	f41c 7f00 	tst.w	ip, #512	; 0x200
60016596:	f000 80b1 	beq.w	600166fc <__sfvwrite_r+0x21c>
6001659a:	42b9      	cmp	r1, r7
6001659c:	460a      	mov	r2, r1
6001659e:	f200 80dd 	bhi.w	6001675c <__sfvwrite_r+0x27c>
600165a2:	f41c 6f90 	tst.w	ip, #1152	; 0x480
600165a6:	d02f      	beq.n	60016608 <__sfvwrite_r+0x128>
600165a8:	6921      	ldr	r1, [r4, #16]
600165aa:	6962      	ldr	r2, [r4, #20]
600165ac:	1a5d      	subs	r5, r3, r1
600165ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
600165b2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
600165b6:	1c6b      	adds	r3, r5, #1
600165b8:	1052      	asrs	r2, r2, #1
600165ba:	443b      	add	r3, r7
600165bc:	4293      	cmp	r3, r2
600165be:	bf92      	itee	ls
600165c0:	4693      	movls	fp, r2
600165c2:	469b      	movhi	fp, r3
600165c4:	461a      	movhi	r2, r3
600165c6:	f41c 6f80 	tst.w	ip, #1024	; 0x400
600165ca:	f000 80e6 	beq.w	6001679a <__sfvwrite_r+0x2ba>
600165ce:	4611      	mov	r1, r2
600165d0:	4648      	mov	r0, r9
600165d2:	f7fc fbf9 	bl	60012dc8 <_malloc_r>
600165d6:	2800      	cmp	r0, #0
600165d8:	f000 80f5 	beq.w	600167c6 <__sfvwrite_r+0x2e6>
600165dc:	462a      	mov	r2, r5
600165de:	6921      	ldr	r1, [r4, #16]
600165e0:	9001      	str	r0, [sp, #4]
600165e2:	f7ed f8a9 	bl	60003738 <memcpy>
600165e6:	89a2      	ldrh	r2, [r4, #12]
600165e8:	9b01      	ldr	r3, [sp, #4]
600165ea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
600165ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
600165f2:	81a2      	strh	r2, [r4, #12]
600165f4:	1958      	adds	r0, r3, r5
600165f6:	ebab 0505 	sub.w	r5, fp, r5
600165fa:	f8c4 b014 	str.w	fp, [r4, #20]
600165fe:	6123      	str	r3, [r4, #16]
60016600:	60a5      	str	r5, [r4, #8]
60016602:	6020      	str	r0, [r4, #0]
60016604:	46bb      	mov	fp, r7
60016606:	463a      	mov	r2, r7
60016608:	4651      	mov	r1, sl
6001660a:	9201      	str	r2, [sp, #4]
6001660c:	f000 f96e 	bl	600168ec <memmove>
60016610:	68a1      	ldr	r1, [r4, #8]
60016612:	6823      	ldr	r3, [r4, #0]
60016614:	9a01      	ldr	r2, [sp, #4]
60016616:	eba1 010b 	sub.w	r1, r1, fp
6001661a:	441a      	add	r2, r3
6001661c:	463d      	mov	r5, r7
6001661e:	60a1      	str	r1, [r4, #8]
60016620:	6022      	str	r2, [r4, #0]
60016622:	2700      	movs	r7, #0
60016624:	f8d8 3008 	ldr.w	r3, [r8, #8]
60016628:	1b5b      	subs	r3, r3, r5
6001662a:	44aa      	add	sl, r5
6001662c:	f8c8 3008 	str.w	r3, [r8, #8]
60016630:	2b00      	cmp	r3, #0
60016632:	d03b      	beq.n	600166ac <__sfvwrite_r+0x1cc>
60016634:	6823      	ldr	r3, [r4, #0]
60016636:	68a1      	ldr	r1, [r4, #8]
60016638:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
6001663c:	4618      	mov	r0, r3
6001663e:	468b      	mov	fp, r1
60016640:	2f00      	cmp	r7, #0
60016642:	d1a6      	bne.n	60016592 <__sfvwrite_r+0xb2>
60016644:	e9d6 a700 	ldrd	sl, r7, [r6]
60016648:	3608      	adds	r6, #8
6001664a:	e79e      	b.n	6001658a <__sfvwrite_r+0xaa>
6001664c:	4638      	mov	r0, r7
6001664e:	46bb      	mov	fp, r7
60016650:	463d      	mov	r5, r7
60016652:	2d00      	cmp	r5, #0
60016654:	d040      	beq.n	600166d8 <__sfvwrite_r+0x1f8>
60016656:	2800      	cmp	r0, #0
60016658:	d045      	beq.n	600166e6 <__sfvwrite_r+0x206>
6001665a:	463a      	mov	r2, r7
6001665c:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
60016660:	6820      	ldr	r0, [r4, #0]
60016662:	68a1      	ldr	r1, [r4, #8]
60016664:	42aa      	cmp	r2, r5
60016666:	bf28      	it	cs
60016668:	462a      	movcs	r2, r5
6001666a:	4560      	cmp	r0, ip
6001666c:	d904      	bls.n	60016678 <__sfvwrite_r+0x198>
6001666e:	eb01 0a03 	add.w	sl, r1, r3
60016672:	4552      	cmp	r2, sl
60016674:	f300 8082 	bgt.w	6001677c <__sfvwrite_r+0x29c>
60016678:	4293      	cmp	r3, r2
6001667a:	dc72      	bgt.n	60016762 <__sfvwrite_r+0x282>
6001667c:	69e1      	ldr	r1, [r4, #28]
6001667e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
60016682:	465a      	mov	r2, fp
60016684:	4648      	mov	r0, r9
60016686:	47e0      	blx	ip
60016688:	f1b0 0a00 	subs.w	sl, r0, #0
6001668c:	dd18      	ble.n	600166c0 <__sfvwrite_r+0x1e0>
6001668e:	ebb7 070a 	subs.w	r7, r7, sl
60016692:	d00f      	beq.n	600166b4 <__sfvwrite_r+0x1d4>
60016694:	2001      	movs	r0, #1
60016696:	f8d8 3008 	ldr.w	r3, [r8, #8]
6001669a:	eba3 030a 	sub.w	r3, r3, sl
6001669e:	44d3      	add	fp, sl
600166a0:	eba5 050a 	sub.w	r5, r5, sl
600166a4:	f8c8 3008 	str.w	r3, [r8, #8]
600166a8:	2b00      	cmp	r3, #0
600166aa:	d1d2      	bne.n	60016652 <__sfvwrite_r+0x172>
600166ac:	2000      	movs	r0, #0
600166ae:	b003      	add	sp, #12
600166b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
600166b4:	4621      	mov	r1, r4
600166b6:	4648      	mov	r0, r9
600166b8:	f7ff fd0c 	bl	600160d4 <_fflush_r>
600166bc:	2800      	cmp	r0, #0
600166be:	d0ea      	beq.n	60016696 <__sfvwrite_r+0x1b6>
600166c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600166c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600166c8:	81a3      	strh	r3, [r4, #12]
600166ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
600166ce:	b003      	add	sp, #12
600166d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
600166d4:	2000      	movs	r0, #0
600166d6:	4770      	bx	lr
600166d8:	6875      	ldr	r5, [r6, #4]
600166da:	4633      	mov	r3, r6
600166dc:	3608      	adds	r6, #8
600166de:	2d00      	cmp	r5, #0
600166e0:	d0fa      	beq.n	600166d8 <__sfvwrite_r+0x1f8>
600166e2:	f8d3 b000 	ldr.w	fp, [r3]
600166e6:	462a      	mov	r2, r5
600166e8:	210a      	movs	r1, #10
600166ea:	4658      	mov	r0, fp
600166ec:	f7eb ffc8 	bl	60002680 <memchr>
600166f0:	2800      	cmp	r0, #0
600166f2:	d065      	beq.n	600167c0 <__sfvwrite_r+0x2e0>
600166f4:	3001      	adds	r0, #1
600166f6:	eba0 070b 	sub.w	r7, r0, fp
600166fa:	e7ae      	b.n	6001665a <__sfvwrite_r+0x17a>
600166fc:	6922      	ldr	r2, [r4, #16]
600166fe:	429a      	cmp	r2, r3
60016700:	d314      	bcc.n	6001672c <__sfvwrite_r+0x24c>
60016702:	6962      	ldr	r2, [r4, #20]
60016704:	42ba      	cmp	r2, r7
60016706:	d811      	bhi.n	6001672c <__sfvwrite_r+0x24c>
60016708:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
6001670c:	42bb      	cmp	r3, r7
6001670e:	bf28      	it	cs
60016710:	463b      	movcs	r3, r7
60016712:	6a65      	ldr	r5, [r4, #36]	; 0x24
60016714:	fb93 f3f2 	sdiv	r3, r3, r2
60016718:	69e1      	ldr	r1, [r4, #28]
6001671a:	fb02 f303 	mul.w	r3, r2, r3
6001671e:	4648      	mov	r0, r9
60016720:	4652      	mov	r2, sl
60016722:	47a8      	blx	r5
60016724:	1e05      	subs	r5, r0, #0
60016726:	ddcb      	ble.n	600166c0 <__sfvwrite_r+0x1e0>
60016728:	1b7f      	subs	r7, r7, r5
6001672a:	e77b      	b.n	60016624 <__sfvwrite_r+0x144>
6001672c:	42b9      	cmp	r1, r7
6001672e:	bf28      	it	cs
60016730:	4639      	movcs	r1, r7
60016732:	460d      	mov	r5, r1
60016734:	4618      	mov	r0, r3
60016736:	460a      	mov	r2, r1
60016738:	4651      	mov	r1, sl
6001673a:	f000 f8d7 	bl	600168ec <memmove>
6001673e:	68a1      	ldr	r1, [r4, #8]
60016740:	6823      	ldr	r3, [r4, #0]
60016742:	1b49      	subs	r1, r1, r5
60016744:	442b      	add	r3, r5
60016746:	60a1      	str	r1, [r4, #8]
60016748:	6023      	str	r3, [r4, #0]
6001674a:	2900      	cmp	r1, #0
6001674c:	d1ec      	bne.n	60016728 <__sfvwrite_r+0x248>
6001674e:	4621      	mov	r1, r4
60016750:	4648      	mov	r0, r9
60016752:	f7ff fcbf 	bl	600160d4 <_fflush_r>
60016756:	2800      	cmp	r0, #0
60016758:	d0e6      	beq.n	60016728 <__sfvwrite_r+0x248>
6001675a:	e7b1      	b.n	600166c0 <__sfvwrite_r+0x1e0>
6001675c:	46bb      	mov	fp, r7
6001675e:	463a      	mov	r2, r7
60016760:	e752      	b.n	60016608 <__sfvwrite_r+0x128>
60016762:	4659      	mov	r1, fp
60016764:	9201      	str	r2, [sp, #4]
60016766:	f000 f8c1 	bl	600168ec <memmove>
6001676a:	9a01      	ldr	r2, [sp, #4]
6001676c:	68a3      	ldr	r3, [r4, #8]
6001676e:	1a9b      	subs	r3, r3, r2
60016770:	60a3      	str	r3, [r4, #8]
60016772:	6823      	ldr	r3, [r4, #0]
60016774:	4413      	add	r3, r2
60016776:	6023      	str	r3, [r4, #0]
60016778:	4692      	mov	sl, r2
6001677a:	e788      	b.n	6001668e <__sfvwrite_r+0x1ae>
6001677c:	4659      	mov	r1, fp
6001677e:	4652      	mov	r2, sl
60016780:	f000 f8b4 	bl	600168ec <memmove>
60016784:	6823      	ldr	r3, [r4, #0]
60016786:	4453      	add	r3, sl
60016788:	6023      	str	r3, [r4, #0]
6001678a:	4621      	mov	r1, r4
6001678c:	4648      	mov	r0, r9
6001678e:	f7ff fca1 	bl	600160d4 <_fflush_r>
60016792:	2800      	cmp	r0, #0
60016794:	f43f af7b 	beq.w	6001668e <__sfvwrite_r+0x1ae>
60016798:	e792      	b.n	600166c0 <__sfvwrite_r+0x1e0>
6001679a:	4648      	mov	r0, r9
6001679c:	f000 fcde 	bl	6001715c <_realloc_r>
600167a0:	4603      	mov	r3, r0
600167a2:	2800      	cmp	r0, #0
600167a4:	f47f af26 	bne.w	600165f4 <__sfvwrite_r+0x114>
600167a8:	6921      	ldr	r1, [r4, #16]
600167aa:	4648      	mov	r0, r9
600167ac:	f7ff fd9a 	bl	600162e4 <_free_r>
600167b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600167b4:	220c      	movs	r2, #12
600167b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
600167ba:	f8c9 2000 	str.w	r2, [r9]
600167be:	e781      	b.n	600166c4 <__sfvwrite_r+0x1e4>
600167c0:	1c6a      	adds	r2, r5, #1
600167c2:	4617      	mov	r7, r2
600167c4:	e74a      	b.n	6001665c <__sfvwrite_r+0x17c>
600167c6:	220c      	movs	r2, #12
600167c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600167cc:	f8c9 2000 	str.w	r2, [r9]
600167d0:	e778      	b.n	600166c4 <__sfvwrite_r+0x1e4>
600167d2:	bf00      	nop
600167d4:	7ffffc00 	.word	0x7ffffc00

600167d8 <_fwalk_reent>:
600167d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
600167dc:	4607      	mov	r7, r0
600167de:	4688      	mov	r8, r1
600167e0:	f500 76a6 	add.w	r6, r0, #332	; 0x14c
600167e4:	f04f 0900 	mov.w	r9, #0
600167e8:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
600167ec:	3d01      	subs	r5, #1
600167ee:	d411      	bmi.n	60016814 <_fwalk_reent+0x3c>
600167f0:	89a3      	ldrh	r3, [r4, #12]
600167f2:	2b01      	cmp	r3, #1
600167f4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
600167f8:	d908      	bls.n	6001680c <_fwalk_reent+0x34>
600167fa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
600167fe:	3301      	adds	r3, #1
60016800:	4621      	mov	r1, r4
60016802:	d003      	beq.n	6001680c <_fwalk_reent+0x34>
60016804:	4638      	mov	r0, r7
60016806:	47c0      	blx	r8
60016808:	ea49 0900 	orr.w	r9, r9, r0
6001680c:	1c6b      	adds	r3, r5, #1
6001680e:	f104 0468 	add.w	r4, r4, #104	; 0x68
60016812:	d1ed      	bne.n	600167f0 <_fwalk_reent+0x18>
60016814:	6836      	ldr	r6, [r6, #0]
60016816:	2e00      	cmp	r6, #0
60016818:	d1e6      	bne.n	600167e8 <_fwalk_reent+0x10>
6001681a:	4648      	mov	r0, r9
6001681c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

60016820 <_localeconv_r>:
60016820:	4800      	ldr	r0, [pc, #0]	; (60016824 <_localeconv_r+0x4>)
60016822:	4770      	bx	lr
60016824:	2020323c 	.word	0x2020323c

60016828 <__smakebuf_r>:
60016828:	b5f0      	push	{r4, r5, r6, r7, lr}
6001682a:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
6001682e:	460c      	mov	r4, r1
60016830:	0799      	lsls	r1, r3, #30
60016832:	b097      	sub	sp, #92	; 0x5c
60016834:	d507      	bpl.n	60016846 <__smakebuf_r+0x1e>
60016836:	f104 0343 	add.w	r3, r4, #67	; 0x43
6001683a:	2201      	movs	r2, #1
6001683c:	e9c4 3204 	strd	r3, r2, [r4, #16]
60016840:	6023      	str	r3, [r4, #0]
60016842:	b017      	add	sp, #92	; 0x5c
60016844:	bdf0      	pop	{r4, r5, r6, r7, pc}
60016846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
6001684a:	2900      	cmp	r1, #0
6001684c:	4605      	mov	r5, r0
6001684e:	db2e      	blt.n	600168ae <__smakebuf_r+0x86>
60016850:	466a      	mov	r2, sp
60016852:	f000 ff75 	bl	60017740 <_fstat_r>
60016856:	2800      	cmp	r0, #0
60016858:	db27      	blt.n	600168aa <__smakebuf_r+0x82>
6001685a:	9e01      	ldr	r6, [sp, #4]
6001685c:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
60016860:	f44f 6780 	mov.w	r7, #1024	; 0x400
60016864:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
60016868:	fab6 f686 	clz	r6, r6
6001686c:	4639      	mov	r1, r7
6001686e:	4628      	mov	r0, r5
60016870:	0976      	lsrs	r6, r6, #5
60016872:	f7fc faa9 	bl	60012dc8 <_malloc_r>
60016876:	b338      	cbz	r0, 600168c8 <__smakebuf_r+0xa0>
60016878:	89a3      	ldrh	r3, [r4, #12]
6001687a:	4a1b      	ldr	r2, [pc, #108]	; (600168e8 <__smakebuf_r+0xc0>)
6001687c:	63ea      	str	r2, [r5, #60]	; 0x3c
6001687e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
60016882:	e9c4 0704 	strd	r0, r7, [r4, #16]
60016886:	81a3      	strh	r3, [r4, #12]
60016888:	6020      	str	r0, [r4, #0]
6001688a:	2e00      	cmp	r6, #0
6001688c:	d0d9      	beq.n	60016842 <__smakebuf_r+0x1a>
6001688e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
60016892:	4628      	mov	r0, r5
60016894:	f000 ff6a 	bl	6001776c <_isatty_r>
60016898:	2800      	cmp	r0, #0
6001689a:	d0d2      	beq.n	60016842 <__smakebuf_r+0x1a>
6001689c:	89a3      	ldrh	r3, [r4, #12]
6001689e:	f023 0303 	bic.w	r3, r3, #3
600168a2:	f043 0301 	orr.w	r3, r3, #1
600168a6:	81a3      	strh	r3, [r4, #12]
600168a8:	e7cb      	b.n	60016842 <__smakebuf_r+0x1a>
600168aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600168ae:	f013 0f80 	tst.w	r3, #128	; 0x80
600168b2:	bf0c      	ite	eq
600168b4:	f44f 6780 	moveq.w	r7, #1024	; 0x400
600168b8:	2740      	movne	r7, #64	; 0x40
600168ba:	4639      	mov	r1, r7
600168bc:	4628      	mov	r0, r5
600168be:	2600      	movs	r6, #0
600168c0:	f7fc fa82 	bl	60012dc8 <_malloc_r>
600168c4:	2800      	cmp	r0, #0
600168c6:	d1d7      	bne.n	60016878 <__smakebuf_r+0x50>
600168c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
600168cc:	059a      	lsls	r2, r3, #22
600168ce:	d4b8      	bmi.n	60016842 <__smakebuf_r+0x1a>
600168d0:	f023 0303 	bic.w	r3, r3, #3
600168d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
600168d8:	f043 0302 	orr.w	r3, r3, #2
600168dc:	2101      	movs	r1, #1
600168de:	e9c4 2104 	strd	r2, r1, [r4, #16]
600168e2:	81a3      	strh	r3, [r4, #12]
600168e4:	6022      	str	r2, [r4, #0]
600168e6:	e7ac      	b.n	60016842 <__smakebuf_r+0x1a>
600168e8:	60016131 	.word	0x60016131

600168ec <memmove>:
600168ec:	4288      	cmp	r0, r1
600168ee:	d90e      	bls.n	6001690e <memmove+0x22>
600168f0:	188b      	adds	r3, r1, r2
600168f2:	4283      	cmp	r3, r0
600168f4:	d90b      	bls.n	6001690e <memmove+0x22>
600168f6:	eb00 0c02 	add.w	ip, r0, r2
600168fa:	2a00      	cmp	r2, #0
600168fc:	d06e      	beq.n	600169dc <memmove+0xf0>
600168fe:	4662      	mov	r2, ip
60016900:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
60016904:	f802 cd01 	strb.w	ip, [r2, #-1]!
60016908:	4299      	cmp	r1, r3
6001690a:	d1f9      	bne.n	60016900 <memmove+0x14>
6001690c:	4770      	bx	lr
6001690e:	2a0f      	cmp	r2, #15
60016910:	d80f      	bhi.n	60016932 <memmove+0x46>
60016912:	4603      	mov	r3, r0
60016914:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
60016918:	2a00      	cmp	r2, #0
6001691a:	d05f      	beq.n	600169dc <memmove+0xf0>
6001691c:	f10c 0c01 	add.w	ip, ip, #1
60016920:	3b01      	subs	r3, #1
60016922:	448c      	add	ip, r1
60016924:	f811 2b01 	ldrb.w	r2, [r1], #1
60016928:	f803 2f01 	strb.w	r2, [r3, #1]!
6001692c:	4561      	cmp	r1, ip
6001692e:	d1f9      	bne.n	60016924 <memmove+0x38>
60016930:	4770      	bx	lr
60016932:	ea40 0301 	orr.w	r3, r0, r1
60016936:	079b      	lsls	r3, r3, #30
60016938:	d151      	bne.n	600169de <memmove+0xf2>
6001693a:	f1a2 0310 	sub.w	r3, r2, #16
6001693e:	b570      	push	{r4, r5, r6, lr}
60016940:	f101 0c20 	add.w	ip, r1, #32
60016944:	f023 050f 	bic.w	r5, r3, #15
60016948:	f101 0e10 	add.w	lr, r1, #16
6001694c:	f100 0410 	add.w	r4, r0, #16
60016950:	44ac      	add	ip, r5
60016952:	091b      	lsrs	r3, r3, #4
60016954:	f85e 5c10 	ldr.w	r5, [lr, #-16]
60016958:	f844 5c10 	str.w	r5, [r4, #-16]
6001695c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
60016960:	f844 5c0c 	str.w	r5, [r4, #-12]
60016964:	f85e 5c08 	ldr.w	r5, [lr, #-8]
60016968:	f844 5c08 	str.w	r5, [r4, #-8]
6001696c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
60016970:	f844 5c04 	str.w	r5, [r4, #-4]
60016974:	f10e 0e10 	add.w	lr, lr, #16
60016978:	45e6      	cmp	lr, ip
6001697a:	f104 0410 	add.w	r4, r4, #16
6001697e:	d1e9      	bne.n	60016954 <memmove+0x68>
60016980:	3301      	adds	r3, #1
60016982:	f012 0f0c 	tst.w	r2, #12
60016986:	eb01 1103 	add.w	r1, r1, r3, lsl #4
6001698a:	f002 040f 	and.w	r4, r2, #15
6001698e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
60016992:	d028      	beq.n	600169e6 <memmove+0xfa>
60016994:	3c04      	subs	r4, #4
60016996:	f024 0603 	bic.w	r6, r4, #3
6001699a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
6001699e:	441e      	add	r6, r3
600169a0:	1f1c      	subs	r4, r3, #4
600169a2:	468e      	mov	lr, r1
600169a4:	f85e 5b04 	ldr.w	r5, [lr], #4
600169a8:	f844 5f04 	str.w	r5, [r4, #4]!
600169ac:	42b4      	cmp	r4, r6
600169ae:	d1f9      	bne.n	600169a4 <memmove+0xb8>
600169b0:	f10c 0401 	add.w	r4, ip, #1
600169b4:	f002 0203 	and.w	r2, r2, #3
600169b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
600169bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
600169c0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
600169c4:	b14a      	cbz	r2, 600169da <memmove+0xee>
600169c6:	f10c 0c01 	add.w	ip, ip, #1
600169ca:	3b01      	subs	r3, #1
600169cc:	448c      	add	ip, r1
600169ce:	f811 2b01 	ldrb.w	r2, [r1], #1
600169d2:	f803 2f01 	strb.w	r2, [r3, #1]!
600169d6:	4561      	cmp	r1, ip
600169d8:	d1f9      	bne.n	600169ce <memmove+0xe2>
600169da:	bd70      	pop	{r4, r5, r6, pc}
600169dc:	4770      	bx	lr
600169de:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
600169e2:	4603      	mov	r3, r0
600169e4:	e79a      	b.n	6001691c <memmove+0x30>
600169e6:	4622      	mov	r2, r4
600169e8:	e7ea      	b.n	600169c0 <memmove+0xd4>
600169ea:	bf00      	nop

600169ec <_Balloc>:
600169ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
600169ee:	b570      	push	{r4, r5, r6, lr}
600169f0:	4605      	mov	r5, r0
600169f2:	460c      	mov	r4, r1
600169f4:	b14b      	cbz	r3, 60016a0a <_Balloc+0x1e>
600169f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
600169fa:	b180      	cbz	r0, 60016a1e <_Balloc+0x32>
600169fc:	6802      	ldr	r2, [r0, #0]
600169fe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
60016a02:	2300      	movs	r3, #0
60016a04:	60c3      	str	r3, [r0, #12]
60016a06:	6103      	str	r3, [r0, #16]
60016a08:	bd70      	pop	{r4, r5, r6, pc}
60016a0a:	2221      	movs	r2, #33	; 0x21
60016a0c:	2104      	movs	r1, #4
60016a0e:	f000 fe55 	bl	600176bc <_calloc_r>
60016a12:	4603      	mov	r3, r0
60016a14:	64e8      	str	r0, [r5, #76]	; 0x4c
60016a16:	2800      	cmp	r0, #0
60016a18:	d1ed      	bne.n	600169f6 <_Balloc+0xa>
60016a1a:	2000      	movs	r0, #0
60016a1c:	bd70      	pop	{r4, r5, r6, pc}
60016a1e:	2101      	movs	r1, #1
60016a20:	fa01 f604 	lsl.w	r6, r1, r4
60016a24:	1d72      	adds	r2, r6, #5
60016a26:	0092      	lsls	r2, r2, #2
60016a28:	4628      	mov	r0, r5
60016a2a:	f000 fe47 	bl	600176bc <_calloc_r>
60016a2e:	2800      	cmp	r0, #0
60016a30:	d0f3      	beq.n	60016a1a <_Balloc+0x2e>
60016a32:	e9c0 4601 	strd	r4, r6, [r0, #4]
60016a36:	e7e4      	b.n	60016a02 <_Balloc+0x16>

60016a38 <_Bfree>:
60016a38:	b131      	cbz	r1, 60016a48 <_Bfree+0x10>
60016a3a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
60016a3c:	684a      	ldr	r2, [r1, #4]
60016a3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
60016a42:	6008      	str	r0, [r1, #0]
60016a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
60016a48:	4770      	bx	lr
60016a4a:	bf00      	nop

60016a4c <__multadd>:
60016a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60016a50:	690d      	ldr	r5, [r1, #16]
60016a52:	4607      	mov	r7, r0
60016a54:	460e      	mov	r6, r1
60016a56:	461c      	mov	r4, r3
60016a58:	f101 0e14 	add.w	lr, r1, #20
60016a5c:	2000      	movs	r0, #0
60016a5e:	f8de 1000 	ldr.w	r1, [lr]
60016a62:	b28b      	uxth	r3, r1
60016a64:	fb02 4303 	mla	r3, r2, r3, r4
60016a68:	ea4f 4c13 	mov.w	ip, r3, lsr #16
60016a6c:	0c09      	lsrs	r1, r1, #16
60016a6e:	fb02 cc01 	mla	ip, r2, r1, ip
60016a72:	3001      	adds	r0, #1
60016a74:	b29b      	uxth	r3, r3
60016a76:	eb03 430c 	add.w	r3, r3, ip, lsl #16
60016a7a:	4285      	cmp	r5, r0
60016a7c:	f84e 3b04 	str.w	r3, [lr], #4
60016a80:	ea4f 441c 	mov.w	r4, ip, lsr #16
60016a84:	dceb      	bgt.n	60016a5e <__multadd+0x12>
60016a86:	b13c      	cbz	r4, 60016a98 <__multadd+0x4c>
60016a88:	68b3      	ldr	r3, [r6, #8]
60016a8a:	42ab      	cmp	r3, r5
60016a8c:	dd07      	ble.n	60016a9e <__multadd+0x52>
60016a8e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
60016a92:	3501      	adds	r5, #1
60016a94:	615c      	str	r4, [r3, #20]
60016a96:	6135      	str	r5, [r6, #16]
60016a98:	4630      	mov	r0, r6
60016a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60016a9e:	6871      	ldr	r1, [r6, #4]
60016aa0:	4638      	mov	r0, r7
60016aa2:	3101      	adds	r1, #1
60016aa4:	f7ff ffa2 	bl	600169ec <_Balloc>
60016aa8:	4680      	mov	r8, r0
60016aaa:	b1a8      	cbz	r0, 60016ad8 <__multadd+0x8c>
60016aac:	6932      	ldr	r2, [r6, #16]
60016aae:	3202      	adds	r2, #2
60016ab0:	f106 010c 	add.w	r1, r6, #12
60016ab4:	0092      	lsls	r2, r2, #2
60016ab6:	300c      	adds	r0, #12
60016ab8:	f7ec fe3e 	bl	60003738 <memcpy>
60016abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
60016abe:	6872      	ldr	r2, [r6, #4]
60016ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
60016ac4:	6031      	str	r1, [r6, #0]
60016ac6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
60016aca:	4646      	mov	r6, r8
60016acc:	eb06 0385 	add.w	r3, r6, r5, lsl #2
60016ad0:	3501      	adds	r5, #1
60016ad2:	615c      	str	r4, [r3, #20]
60016ad4:	6135      	str	r5, [r6, #16]
60016ad6:	e7df      	b.n	60016a98 <__multadd+0x4c>
60016ad8:	4b02      	ldr	r3, [pc, #8]	; (60016ae4 <__multadd+0x98>)
60016ada:	4803      	ldr	r0, [pc, #12]	; (60016ae8 <__multadd+0x9c>)
60016adc:	4642      	mov	r2, r8
60016ade:	21b5      	movs	r1, #181	; 0xb5
60016ae0:	f7fc f92e 	bl	60012d40 <__assert_func>
60016ae4:	6001bfcc 	.word	0x6001bfcc
60016ae8:	6001c038 	.word	0x6001c038

60016aec <__hi0bits>:
60016aec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
60016af0:	4603      	mov	r3, r0
60016af2:	bf36      	itet	cc
60016af4:	0403      	lslcc	r3, r0, #16
60016af6:	2000      	movcs	r0, #0
60016af8:	2010      	movcc	r0, #16
60016afa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
60016afe:	bf3c      	itt	cc
60016b00:	021b      	lslcc	r3, r3, #8
60016b02:	3008      	addcc	r0, #8
60016b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
60016b08:	bf3c      	itt	cc
60016b0a:	011b      	lslcc	r3, r3, #4
60016b0c:	3004      	addcc	r0, #4
60016b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
60016b12:	d303      	bcc.n	60016b1c <__hi0bits+0x30>
60016b14:	2b00      	cmp	r3, #0
60016b16:	db06      	blt.n	60016b26 <__hi0bits+0x3a>
60016b18:	3001      	adds	r0, #1
60016b1a:	4770      	bx	lr
60016b1c:	009b      	lsls	r3, r3, #2
60016b1e:	d403      	bmi.n	60016b28 <__hi0bits+0x3c>
60016b20:	005b      	lsls	r3, r3, #1
60016b22:	d403      	bmi.n	60016b2c <__hi0bits+0x40>
60016b24:	2020      	movs	r0, #32
60016b26:	4770      	bx	lr
60016b28:	3002      	adds	r0, #2
60016b2a:	4770      	bx	lr
60016b2c:	3003      	adds	r0, #3
60016b2e:	4770      	bx	lr

60016b30 <__lo0bits>:
60016b30:	6803      	ldr	r3, [r0, #0]
60016b32:	f013 0207 	ands.w	r2, r3, #7
60016b36:	4601      	mov	r1, r0
60016b38:	d007      	beq.n	60016b4a <__lo0bits+0x1a>
60016b3a:	07da      	lsls	r2, r3, #31
60016b3c:	d41f      	bmi.n	60016b7e <__lo0bits+0x4e>
60016b3e:	0798      	lsls	r0, r3, #30
60016b40:	d521      	bpl.n	60016b86 <__lo0bits+0x56>
60016b42:	085b      	lsrs	r3, r3, #1
60016b44:	600b      	str	r3, [r1, #0]
60016b46:	2001      	movs	r0, #1
60016b48:	4770      	bx	lr
60016b4a:	b298      	uxth	r0, r3
60016b4c:	b1a0      	cbz	r0, 60016b78 <__lo0bits+0x48>
60016b4e:	4610      	mov	r0, r2
60016b50:	b2da      	uxtb	r2, r3
60016b52:	b90a      	cbnz	r2, 60016b58 <__lo0bits+0x28>
60016b54:	3008      	adds	r0, #8
60016b56:	0a1b      	lsrs	r3, r3, #8
60016b58:	071a      	lsls	r2, r3, #28
60016b5a:	bf04      	itt	eq
60016b5c:	091b      	lsreq	r3, r3, #4
60016b5e:	3004      	addeq	r0, #4
60016b60:	079a      	lsls	r2, r3, #30
60016b62:	bf04      	itt	eq
60016b64:	089b      	lsreq	r3, r3, #2
60016b66:	3002      	addeq	r0, #2
60016b68:	07da      	lsls	r2, r3, #31
60016b6a:	d403      	bmi.n	60016b74 <__lo0bits+0x44>
60016b6c:	085b      	lsrs	r3, r3, #1
60016b6e:	f100 0001 	add.w	r0, r0, #1
60016b72:	d006      	beq.n	60016b82 <__lo0bits+0x52>
60016b74:	600b      	str	r3, [r1, #0]
60016b76:	4770      	bx	lr
60016b78:	0c1b      	lsrs	r3, r3, #16
60016b7a:	2010      	movs	r0, #16
60016b7c:	e7e8      	b.n	60016b50 <__lo0bits+0x20>
60016b7e:	2000      	movs	r0, #0
60016b80:	4770      	bx	lr
60016b82:	2020      	movs	r0, #32
60016b84:	4770      	bx	lr
60016b86:	089b      	lsrs	r3, r3, #2
60016b88:	600b      	str	r3, [r1, #0]
60016b8a:	2002      	movs	r0, #2
60016b8c:	4770      	bx	lr
60016b8e:	bf00      	nop

60016b90 <__i2b>:
60016b90:	b538      	push	{r3, r4, r5, lr}
60016b92:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
60016b94:	4604      	mov	r4, r0
60016b96:	460d      	mov	r5, r1
60016b98:	b14b      	cbz	r3, 60016bae <__i2b+0x1e>
60016b9a:	6858      	ldr	r0, [r3, #4]
60016b9c:	b1b0      	cbz	r0, 60016bcc <__i2b+0x3c>
60016b9e:	6802      	ldr	r2, [r0, #0]
60016ba0:	605a      	str	r2, [r3, #4]
60016ba2:	2200      	movs	r2, #0
60016ba4:	2301      	movs	r3, #1
60016ba6:	6145      	str	r5, [r0, #20]
60016ba8:	60c2      	str	r2, [r0, #12]
60016baa:	6103      	str	r3, [r0, #16]
60016bac:	bd38      	pop	{r3, r4, r5, pc}
60016bae:	2221      	movs	r2, #33	; 0x21
60016bb0:	2104      	movs	r1, #4
60016bb2:	f000 fd83 	bl	600176bc <_calloc_r>
60016bb6:	4603      	mov	r3, r0
60016bb8:	64e0      	str	r0, [r4, #76]	; 0x4c
60016bba:	2800      	cmp	r0, #0
60016bbc:	d1ed      	bne.n	60016b9a <__i2b+0xa>
60016bbe:	4b09      	ldr	r3, [pc, #36]	; (60016be4 <__i2b+0x54>)
60016bc0:	4809      	ldr	r0, [pc, #36]	; (60016be8 <__i2b+0x58>)
60016bc2:	2200      	movs	r2, #0
60016bc4:	f44f 71a0 	mov.w	r1, #320	; 0x140
60016bc8:	f7fc f8ba 	bl	60012d40 <__assert_func>
60016bcc:	221c      	movs	r2, #28
60016bce:	2101      	movs	r1, #1
60016bd0:	4620      	mov	r0, r4
60016bd2:	f000 fd73 	bl	600176bc <_calloc_r>
60016bd6:	2800      	cmp	r0, #0
60016bd8:	d0f1      	beq.n	60016bbe <__i2b+0x2e>
60016bda:	2201      	movs	r2, #1
60016bdc:	2302      	movs	r3, #2
60016bde:	6042      	str	r2, [r0, #4]
60016be0:	6083      	str	r3, [r0, #8]
60016be2:	e7de      	b.n	60016ba2 <__i2b+0x12>
60016be4:	6001bfcc 	.word	0x6001bfcc
60016be8:	6001c038 	.word	0x6001c038

60016bec <__multiply>:
60016bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60016bf0:	f8d1 8010 	ldr.w	r8, [r1, #16]
60016bf4:	6915      	ldr	r5, [r2, #16]
60016bf6:	45a8      	cmp	r8, r5
60016bf8:	b085      	sub	sp, #20
60016bfa:	460e      	mov	r6, r1
60016bfc:	4692      	mov	sl, r2
60016bfe:	db05      	blt.n	60016c0c <__multiply+0x20>
60016c00:	462a      	mov	r2, r5
60016c02:	4653      	mov	r3, sl
60016c04:	4645      	mov	r5, r8
60016c06:	468a      	mov	sl, r1
60016c08:	4690      	mov	r8, r2
60016c0a:	461e      	mov	r6, r3
60016c0c:	f8da 3008 	ldr.w	r3, [sl, #8]
60016c10:	f8da 1004 	ldr.w	r1, [sl, #4]
60016c14:	eb05 0408 	add.w	r4, r5, r8
60016c18:	42a3      	cmp	r3, r4
60016c1a:	bfb8      	it	lt
60016c1c:	3101      	addlt	r1, #1
60016c1e:	f7ff fee5 	bl	600169ec <_Balloc>
60016c22:	4684      	mov	ip, r0
60016c24:	2800      	cmp	r0, #0
60016c26:	f000 808b 	beq.w	60016d40 <__multiply+0x154>
60016c2a:	f100 0714 	add.w	r7, r0, #20
60016c2e:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
60016c32:	4577      	cmp	r7, lr
60016c34:	d205      	bcs.n	60016c42 <__multiply+0x56>
60016c36:	463b      	mov	r3, r7
60016c38:	2200      	movs	r2, #0
60016c3a:	f843 2b04 	str.w	r2, [r3], #4
60016c3e:	459e      	cmp	lr, r3
60016c40:	d8fb      	bhi.n	60016c3a <__multiply+0x4e>
60016c42:	3614      	adds	r6, #20
60016c44:	eb06 0888 	add.w	r8, r6, r8, lsl #2
60016c48:	f10a 0914 	add.w	r9, sl, #20
60016c4c:	4546      	cmp	r6, r8
60016c4e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
60016c52:	d266      	bcs.n	60016d22 <__multiply+0x136>
60016c54:	eba5 030a 	sub.w	r3, r5, sl
60016c58:	3b15      	subs	r3, #21
60016c5a:	f023 0303 	bic.w	r3, r3, #3
60016c5e:	f10a 0a15 	add.w	sl, sl, #21
60016c62:	3304      	adds	r3, #4
60016c64:	4555      	cmp	r5, sl
60016c66:	bf2c      	ite	cs
60016c68:	469b      	movcs	fp, r3
60016c6a:	f04f 0b04 	movcc.w	fp, #4
60016c6e:	f8cd e008 	str.w	lr, [sp, #8]
60016c72:	9403      	str	r4, [sp, #12]
60016c74:	46ae      	mov	lr, r5
60016c76:	46e2      	mov	sl, ip
60016c78:	e005      	b.n	60016c86 <__multiply+0x9a>
60016c7a:	0c09      	lsrs	r1, r1, #16
60016c7c:	d12a      	bne.n	60016cd4 <__multiply+0xe8>
60016c7e:	45b0      	cmp	r8, r6
60016c80:	f107 0704 	add.w	r7, r7, #4
60016c84:	d94a      	bls.n	60016d1c <__multiply+0x130>
60016c86:	f856 1b04 	ldr.w	r1, [r6], #4
60016c8a:	b28d      	uxth	r5, r1
60016c8c:	2d00      	cmp	r5, #0
60016c8e:	d0f4      	beq.n	60016c7a <__multiply+0x8e>
60016c90:	46cc      	mov	ip, r9
60016c92:	463c      	mov	r4, r7
60016c94:	2300      	movs	r3, #0
60016c96:	9601      	str	r6, [sp, #4]
60016c98:	f85c 0b04 	ldr.w	r0, [ip], #4
60016c9c:	6821      	ldr	r1, [r4, #0]
60016c9e:	b286      	uxth	r6, r0
60016ca0:	b28a      	uxth	r2, r1
60016ca2:	0c00      	lsrs	r0, r0, #16
60016ca4:	fb05 2206 	mla	r2, r5, r6, r2
60016ca8:	0c09      	lsrs	r1, r1, #16
60016caa:	441a      	add	r2, r3
60016cac:	fb05 1100 	mla	r1, r5, r0, r1
60016cb0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
60016cb4:	b292      	uxth	r2, r2
60016cb6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
60016cba:	45e6      	cmp	lr, ip
60016cbc:	f844 2b04 	str.w	r2, [r4], #4
60016cc0:	ea4f 4311 	mov.w	r3, r1, lsr #16
60016cc4:	d8e8      	bhi.n	60016c98 <__multiply+0xac>
60016cc6:	9e01      	ldr	r6, [sp, #4]
60016cc8:	f847 300b 	str.w	r3, [r7, fp]
60016ccc:	f856 1c04 	ldr.w	r1, [r6, #-4]
60016cd0:	0c09      	lsrs	r1, r1, #16
60016cd2:	d0d4      	beq.n	60016c7e <__multiply+0x92>
60016cd4:	683b      	ldr	r3, [r7, #0]
60016cd6:	2200      	movs	r2, #0
60016cd8:	4648      	mov	r0, r9
60016cda:	461d      	mov	r5, r3
60016cdc:	463c      	mov	r4, r7
60016cde:	4694      	mov	ip, r2
60016ce0:	8802      	ldrh	r2, [r0, #0]
60016ce2:	fb01 c202 	mla	r2, r1, r2, ip
60016ce6:	eb02 4215 	add.w	r2, r2, r5, lsr #16
60016cea:	b29b      	uxth	r3, r3
60016cec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
60016cf0:	f844 3b04 	str.w	r3, [r4], #4
60016cf4:	f850 3b04 	ldr.w	r3, [r0], #4
60016cf8:	6825      	ldr	r5, [r4, #0]
60016cfa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
60016cfe:	b2ab      	uxth	r3, r5
60016d00:	fb01 330c 	mla	r3, r1, ip, r3
60016d04:	eb03 4312 	add.w	r3, r3, r2, lsr #16
60016d08:	4586      	cmp	lr, r0
60016d0a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
60016d0e:	d8e7      	bhi.n	60016ce0 <__multiply+0xf4>
60016d10:	45b0      	cmp	r8, r6
60016d12:	f847 300b 	str.w	r3, [r7, fp]
60016d16:	f107 0704 	add.w	r7, r7, #4
60016d1a:	d8b4      	bhi.n	60016c86 <__multiply+0x9a>
60016d1c:	e9dd e402 	ldrd	lr, r4, [sp, #8]
60016d20:	46d4      	mov	ip, sl
60016d22:	2c00      	cmp	r4, #0
60016d24:	dc02      	bgt.n	60016d2c <__multiply+0x140>
60016d26:	e005      	b.n	60016d34 <__multiply+0x148>
60016d28:	3c01      	subs	r4, #1
60016d2a:	d003      	beq.n	60016d34 <__multiply+0x148>
60016d2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
60016d30:	2b00      	cmp	r3, #0
60016d32:	d0f9      	beq.n	60016d28 <__multiply+0x13c>
60016d34:	4660      	mov	r0, ip
60016d36:	f8cc 4010 	str.w	r4, [ip, #16]
60016d3a:	b005      	add	sp, #20
60016d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60016d40:	4b03      	ldr	r3, [pc, #12]	; (60016d50 <__multiply+0x164>)
60016d42:	4804      	ldr	r0, [pc, #16]	; (60016d54 <__multiply+0x168>)
60016d44:	4662      	mov	r2, ip
60016d46:	f240 115d 	movw	r1, #349	; 0x15d
60016d4a:	f7fb fff9 	bl	60012d40 <__assert_func>
60016d4e:	bf00      	nop
60016d50:	6001bfcc 	.word	0x6001bfcc
60016d54:	6001c038 	.word	0x6001c038

60016d58 <__pow5mult>:
60016d58:	f012 0303 	ands.w	r3, r2, #3
60016d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60016d60:	4614      	mov	r4, r2
60016d62:	4607      	mov	r7, r0
60016d64:	d12c      	bne.n	60016dc0 <__pow5mult+0x68>
60016d66:	460d      	mov	r5, r1
60016d68:	10a4      	asrs	r4, r4, #2
60016d6a:	d01c      	beq.n	60016da6 <__pow5mult+0x4e>
60016d6c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
60016d6e:	b386      	cbz	r6, 60016dd2 <__pow5mult+0x7a>
60016d70:	07e3      	lsls	r3, r4, #31
60016d72:	f04f 0800 	mov.w	r8, #0
60016d76:	d406      	bmi.n	60016d86 <__pow5mult+0x2e>
60016d78:	1064      	asrs	r4, r4, #1
60016d7a:	d014      	beq.n	60016da6 <__pow5mult+0x4e>
60016d7c:	6830      	ldr	r0, [r6, #0]
60016d7e:	b1a8      	cbz	r0, 60016dac <__pow5mult+0x54>
60016d80:	4606      	mov	r6, r0
60016d82:	07e3      	lsls	r3, r4, #31
60016d84:	d5f8      	bpl.n	60016d78 <__pow5mult+0x20>
60016d86:	4632      	mov	r2, r6
60016d88:	4629      	mov	r1, r5
60016d8a:	4638      	mov	r0, r7
60016d8c:	f7ff ff2e 	bl	60016bec <__multiply>
60016d90:	b135      	cbz	r5, 60016da0 <__pow5mult+0x48>
60016d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
60016d94:	6869      	ldr	r1, [r5, #4]
60016d96:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
60016d9a:	602a      	str	r2, [r5, #0]
60016d9c:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
60016da0:	1064      	asrs	r4, r4, #1
60016da2:	4605      	mov	r5, r0
60016da4:	d1ea      	bne.n	60016d7c <__pow5mult+0x24>
60016da6:	4628      	mov	r0, r5
60016da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60016dac:	4632      	mov	r2, r6
60016dae:	4631      	mov	r1, r6
60016db0:	4638      	mov	r0, r7
60016db2:	f7ff ff1b 	bl	60016bec <__multiply>
60016db6:	6030      	str	r0, [r6, #0]
60016db8:	f8c0 8000 	str.w	r8, [r0]
60016dbc:	4606      	mov	r6, r0
60016dbe:	e7e0      	b.n	60016d82 <__pow5mult+0x2a>
60016dc0:	3b01      	subs	r3, #1
60016dc2:	4a0f      	ldr	r2, [pc, #60]	; (60016e00 <__pow5mult+0xa8>)
60016dc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
60016dc8:	2300      	movs	r3, #0
60016dca:	f7ff fe3f 	bl	60016a4c <__multadd>
60016dce:	4605      	mov	r5, r0
60016dd0:	e7ca      	b.n	60016d68 <__pow5mult+0x10>
60016dd2:	2101      	movs	r1, #1
60016dd4:	4638      	mov	r0, r7
60016dd6:	f7ff fe09 	bl	600169ec <_Balloc>
60016dda:	4606      	mov	r6, r0
60016ddc:	b140      	cbz	r0, 60016df0 <__pow5mult+0x98>
60016dde:	2301      	movs	r3, #1
60016de0:	f240 2271 	movw	r2, #625	; 0x271
60016de4:	e9c0 3204 	strd	r3, r2, [r0, #16]
60016de8:	2300      	movs	r3, #0
60016dea:	64b8      	str	r0, [r7, #72]	; 0x48
60016dec:	6003      	str	r3, [r0, #0]
60016dee:	e7bf      	b.n	60016d70 <__pow5mult+0x18>
60016df0:	4b04      	ldr	r3, [pc, #16]	; (60016e04 <__pow5mult+0xac>)
60016df2:	4805      	ldr	r0, [pc, #20]	; (60016e08 <__pow5mult+0xb0>)
60016df4:	4632      	mov	r2, r6
60016df6:	f44f 71a0 	mov.w	r1, #320	; 0x140
60016dfa:	f7fb ffa1 	bl	60012d40 <__assert_func>
60016dfe:	bf00      	nop
60016e00:	6001c090 	.word	0x6001c090
60016e04:	6001bfcc 	.word	0x6001bfcc
60016e08:	6001c038 	.word	0x6001c038

60016e0c <__lshift>:
60016e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60016e10:	460c      	mov	r4, r1
60016e12:	4690      	mov	r8, r2
60016e14:	6927      	ldr	r7, [r4, #16]
60016e16:	68a3      	ldr	r3, [r4, #8]
60016e18:	6849      	ldr	r1, [r1, #4]
60016e1a:	eb07 1762 	add.w	r7, r7, r2, asr #5
60016e1e:	1c7d      	adds	r5, r7, #1
60016e20:	429d      	cmp	r5, r3
60016e22:	4606      	mov	r6, r0
60016e24:	ea4f 1962 	mov.w	r9, r2, asr #5
60016e28:	dd04      	ble.n	60016e34 <__lshift+0x28>
60016e2a:	005b      	lsls	r3, r3, #1
60016e2c:	429d      	cmp	r5, r3
60016e2e:	f101 0101 	add.w	r1, r1, #1
60016e32:	dcfa      	bgt.n	60016e2a <__lshift+0x1e>
60016e34:	4630      	mov	r0, r6
60016e36:	f7ff fdd9 	bl	600169ec <_Balloc>
60016e3a:	4684      	mov	ip, r0
60016e3c:	2800      	cmp	r0, #0
60016e3e:	d051      	beq.n	60016ee4 <__lshift+0xd8>
60016e40:	f1b9 0f00 	cmp.w	r9, #0
60016e44:	f100 0014 	add.w	r0, r0, #20
60016e48:	dd0e      	ble.n	60016e68 <__lshift+0x5c>
60016e4a:	f109 0205 	add.w	r2, r9, #5
60016e4e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
60016e52:	4603      	mov	r3, r0
60016e54:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
60016e58:	2100      	movs	r1, #0
60016e5a:	f843 1b04 	str.w	r1, [r3], #4
60016e5e:	4293      	cmp	r3, r2
60016e60:	d1fb      	bne.n	60016e5a <__lshift+0x4e>
60016e62:	f1ae 0314 	sub.w	r3, lr, #20
60016e66:	4418      	add	r0, r3
60016e68:	6921      	ldr	r1, [r4, #16]
60016e6a:	f104 0314 	add.w	r3, r4, #20
60016e6e:	f018 081f 	ands.w	r8, r8, #31
60016e72:	eb03 0181 	add.w	r1, r3, r1, lsl #2
60016e76:	d02d      	beq.n	60016ed4 <__lshift+0xc8>
60016e78:	f1c8 0920 	rsb	r9, r8, #32
60016e7c:	4686      	mov	lr, r0
60016e7e:	f04f 0a00 	mov.w	sl, #0
60016e82:	681a      	ldr	r2, [r3, #0]
60016e84:	fa02 f208 	lsl.w	r2, r2, r8
60016e88:	ea42 020a 	orr.w	r2, r2, sl
60016e8c:	f84e 2b04 	str.w	r2, [lr], #4
60016e90:	f853 2b04 	ldr.w	r2, [r3], #4
60016e94:	4299      	cmp	r1, r3
60016e96:	fa22 fa09 	lsr.w	sl, r2, r9
60016e9a:	d8f2      	bhi.n	60016e82 <__lshift+0x76>
60016e9c:	1b0b      	subs	r3, r1, r4
60016e9e:	3b15      	subs	r3, #21
60016ea0:	f023 0303 	bic.w	r3, r3, #3
60016ea4:	3304      	adds	r3, #4
60016ea6:	f104 0215 	add.w	r2, r4, #21
60016eaa:	4291      	cmp	r1, r2
60016eac:	bf38      	it	cc
60016eae:	2304      	movcc	r3, #4
60016eb0:	f840 a003 	str.w	sl, [r0, r3]
60016eb4:	f1ba 0f00 	cmp.w	sl, #0
60016eb8:	d100      	bne.n	60016ebc <__lshift+0xb0>
60016eba:	463d      	mov	r5, r7
60016ebc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
60016ebe:	6862      	ldr	r2, [r4, #4]
60016ec0:	f8cc 5010 	str.w	r5, [ip, #16]
60016ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
60016ec8:	6021      	str	r1, [r4, #0]
60016eca:	4660      	mov	r0, ip
60016ecc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
60016ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60016ed4:	3804      	subs	r0, #4
60016ed6:	f853 2b04 	ldr.w	r2, [r3], #4
60016eda:	f840 2f04 	str.w	r2, [r0, #4]!
60016ede:	4299      	cmp	r1, r3
60016ee0:	d8f9      	bhi.n	60016ed6 <__lshift+0xca>
60016ee2:	e7ea      	b.n	60016eba <__lshift+0xae>
60016ee4:	4b03      	ldr	r3, [pc, #12]	; (60016ef4 <__lshift+0xe8>)
60016ee6:	4804      	ldr	r0, [pc, #16]	; (60016ef8 <__lshift+0xec>)
60016ee8:	4662      	mov	r2, ip
60016eea:	f240 11d9 	movw	r1, #473	; 0x1d9
60016eee:	f7fb ff27 	bl	60012d40 <__assert_func>
60016ef2:	bf00      	nop
60016ef4:	6001bfcc 	.word	0x6001bfcc
60016ef8:	6001c038 	.word	0x6001c038

60016efc <__mcmp>:
60016efc:	690b      	ldr	r3, [r1, #16]
60016efe:	4684      	mov	ip, r0
60016f00:	6900      	ldr	r0, [r0, #16]
60016f02:	1ac0      	subs	r0, r0, r3
60016f04:	d115      	bne.n	60016f32 <__mcmp+0x36>
60016f06:	f10c 0c14 	add.w	ip, ip, #20
60016f0a:	3114      	adds	r1, #20
60016f0c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
60016f10:	b410      	push	{r4}
60016f12:	eb01 0383 	add.w	r3, r1, r3, lsl #2
60016f16:	e001      	b.n	60016f1c <__mcmp+0x20>
60016f18:	4594      	cmp	ip, r2
60016f1a:	d208      	bcs.n	60016f2e <__mcmp+0x32>
60016f1c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
60016f20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
60016f24:	428c      	cmp	r4, r1
60016f26:	d0f7      	beq.n	60016f18 <__mcmp+0x1c>
60016f28:	d204      	bcs.n	60016f34 <__mcmp+0x38>
60016f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60016f2e:	bc10      	pop	{r4}
60016f30:	4770      	bx	lr
60016f32:	4770      	bx	lr
60016f34:	2001      	movs	r0, #1
60016f36:	bc10      	pop	{r4}
60016f38:	4770      	bx	lr
60016f3a:	bf00      	nop

60016f3c <__mdiff>:
60016f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60016f40:	6913      	ldr	r3, [r2, #16]
60016f42:	690f      	ldr	r7, [r1, #16]
60016f44:	1aff      	subs	r7, r7, r3
60016f46:	2f00      	cmp	r7, #0
60016f48:	b083      	sub	sp, #12
60016f4a:	460d      	mov	r5, r1
60016f4c:	4690      	mov	r8, r2
60016f4e:	d115      	bne.n	60016f7c <__mdiff+0x40>
60016f50:	f101 0614 	add.w	r6, r1, #20
60016f54:	3214      	adds	r2, #20
60016f56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
60016f5a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
60016f5e:	e001      	b.n	60016f64 <__mdiff+0x28>
60016f60:	429e      	cmp	r6, r3
60016f62:	d276      	bcs.n	60017052 <__mdiff+0x116>
60016f64:	f853 4d04 	ldr.w	r4, [r3, #-4]!
60016f68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
60016f6c:	428c      	cmp	r4, r1
60016f6e:	d0f7      	beq.n	60016f60 <__mdiff+0x24>
60016f70:	d206      	bcs.n	60016f80 <__mdiff+0x44>
60016f72:	462b      	mov	r3, r5
60016f74:	2701      	movs	r7, #1
60016f76:	4645      	mov	r5, r8
60016f78:	4698      	mov	r8, r3
60016f7a:	e001      	b.n	60016f80 <__mdiff+0x44>
60016f7c:	dbf9      	blt.n	60016f72 <__mdiff+0x36>
60016f7e:	2700      	movs	r7, #0
60016f80:	6869      	ldr	r1, [r5, #4]
60016f82:	f7ff fd33 	bl	600169ec <_Balloc>
60016f86:	4681      	mov	r9, r0
60016f88:	2800      	cmp	r0, #0
60016f8a:	d076      	beq.n	6001707a <__mdiff+0x13e>
60016f8c:	692e      	ldr	r6, [r5, #16]
60016f8e:	60c7      	str	r7, [r0, #12]
60016f90:	f8d8 0010 	ldr.w	r0, [r8, #16]
60016f94:	f105 0b14 	add.w	fp, r5, #20
60016f98:	f108 0e14 	add.w	lr, r8, #20
60016f9c:	f109 0a14 	add.w	sl, r9, #20
60016fa0:	f105 0110 	add.w	r1, r5, #16
60016fa4:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
60016fa8:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
60016fac:	4657      	mov	r7, sl
60016fae:	f04f 0c00 	mov.w	ip, #0
60016fb2:	f8cd b004 	str.w	fp, [sp, #4]
60016fb6:	f85e 4b04 	ldr.w	r4, [lr], #4
60016fba:	f851 5f04 	ldr.w	r5, [r1, #4]!
60016fbe:	fa1f fb84 	uxth.w	fp, r4
60016fc2:	b2ab      	uxth	r3, r5
60016fc4:	eba3 030b 	sub.w	r3, r3, fp
60016fc8:	0c24      	lsrs	r4, r4, #16
60016fca:	4463      	add	r3, ip
60016fcc:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
60016fd0:	eb04 4423 	add.w	r4, r4, r3, asr #16
60016fd4:	b29b      	uxth	r3, r3
60016fd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
60016fda:	4570      	cmp	r0, lr
60016fdc:	f847 3b04 	str.w	r3, [r7], #4
60016fe0:	ea4f 4c24 	mov.w	ip, r4, asr #16
60016fe4:	d8e7      	bhi.n	60016fb6 <__mdiff+0x7a>
60016fe6:	eba0 0108 	sub.w	r1, r0, r8
60016fea:	3915      	subs	r1, #21
60016fec:	0889      	lsrs	r1, r1, #2
60016fee:	1c4c      	adds	r4, r1, #1
60016ff0:	f8dd b004 	ldr.w	fp, [sp, #4]
60016ff4:	f108 0815 	add.w	r8, r8, #21
60016ff8:	00a4      	lsls	r4, r4, #2
60016ffa:	4540      	cmp	r0, r8
60016ffc:	bf38      	it	cc
60016ffe:	2404      	movcc	r4, #4
60017000:	eb0b 0504 	add.w	r5, fp, r4
60017004:	42aa      	cmp	r2, r5
60017006:	4454      	add	r4, sl
60017008:	d930      	bls.n	6001706c <__mdiff+0x130>
6001700a:	4627      	mov	r7, r4
6001700c:	4628      	mov	r0, r5
6001700e:	f850 3b04 	ldr.w	r3, [r0], #4
60017012:	fa1c fe83 	uxtah	lr, ip, r3
60017016:	0c19      	lsrs	r1, r3, #16
60017018:	4463      	add	r3, ip
6001701a:	eb01 412e 	add.w	r1, r1, lr, asr #16
6001701e:	b29b      	uxth	r3, r3
60017020:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
60017024:	4282      	cmp	r2, r0
60017026:	f847 3b04 	str.w	r3, [r7], #4
6001702a:	ea4f 4c21 	mov.w	ip, r1, asr #16
6001702e:	d8ee      	bhi.n	6001700e <__mdiff+0xd2>
60017030:	3a01      	subs	r2, #1
60017032:	1b52      	subs	r2, r2, r5
60017034:	f022 0203 	bic.w	r2, r2, #3
60017038:	4414      	add	r4, r2
6001703a:	b923      	cbnz	r3, 60017046 <__mdiff+0x10a>
6001703c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
60017040:	3e01      	subs	r6, #1
60017042:	2b00      	cmp	r3, #0
60017044:	d0fa      	beq.n	6001703c <__mdiff+0x100>
60017046:	4648      	mov	r0, r9
60017048:	f8c9 6010 	str.w	r6, [r9, #16]
6001704c:	b003      	add	sp, #12
6001704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
60017052:	2100      	movs	r1, #0
60017054:	f7ff fcca 	bl	600169ec <_Balloc>
60017058:	4681      	mov	r9, r0
6001705a:	b1a8      	cbz	r0, 60017088 <__mdiff+0x14c>
6001705c:	2201      	movs	r2, #1
6001705e:	2300      	movs	r3, #0
60017060:	e9c0 2304 	strd	r2, r3, [r0, #16]
60017064:	4648      	mov	r0, r9
60017066:	b003      	add	sp, #12
60017068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
6001706c:	0089      	lsls	r1, r1, #2
6001706e:	4540      	cmp	r0, r8
60017070:	bf38      	it	cc
60017072:	2100      	movcc	r1, #0
60017074:	eb0a 0401 	add.w	r4, sl, r1
60017078:	e7df      	b.n	6001703a <__mdiff+0xfe>
6001707a:	4b07      	ldr	r3, [pc, #28]	; (60017098 <__mdiff+0x15c>)
6001707c:	4807      	ldr	r0, [pc, #28]	; (6001709c <__mdiff+0x160>)
6001707e:	464a      	mov	r2, r9
60017080:	f44f 7110 	mov.w	r1, #576	; 0x240
60017084:	f7fb fe5c 	bl	60012d40 <__assert_func>
60017088:	4b03      	ldr	r3, [pc, #12]	; (60017098 <__mdiff+0x15c>)
6001708a:	4804      	ldr	r0, [pc, #16]	; (6001709c <__mdiff+0x160>)
6001708c:	464a      	mov	r2, r9
6001708e:	f240 2132 	movw	r1, #562	; 0x232
60017092:	f7fb fe55 	bl	60012d40 <__assert_func>
60017096:	bf00      	nop
60017098:	6001bfcc 	.word	0x6001bfcc
6001709c:	6001c038 	.word	0x6001c038

600170a0 <__d2b>:
600170a0:	b5f0      	push	{r4, r5, r6, r7, lr}
600170a2:	2101      	movs	r1, #1
600170a4:	b083      	sub	sp, #12
600170a6:	4616      	mov	r6, r2
600170a8:	461f      	mov	r7, r3
600170aa:	f7ff fc9f 	bl	600169ec <_Balloc>
600170ae:	4605      	mov	r5, r0
600170b0:	2800      	cmp	r0, #0
600170b2:	d047      	beq.n	60017144 <__d2b+0xa4>
600170b4:	f3c7 540a 	ubfx	r4, r7, #20, #11
600170b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
600170bc:	b10c      	cbz	r4, 600170c2 <__d2b+0x22>
600170be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
600170c2:	2e00      	cmp	r6, #0
600170c4:	9301      	str	r3, [sp, #4]
600170c6:	d114      	bne.n	600170f2 <__d2b+0x52>
600170c8:	a801      	add	r0, sp, #4
600170ca:	f7ff fd31 	bl	60016b30 <__lo0bits>
600170ce:	9b01      	ldr	r3, [sp, #4]
600170d0:	616b      	str	r3, [r5, #20]
600170d2:	2201      	movs	r2, #1
600170d4:	3020      	adds	r0, #32
600170d6:	612a      	str	r2, [r5, #16]
600170d8:	b314      	cbz	r4, 60017120 <__d2b+0x80>
600170da:	9b08      	ldr	r3, [sp, #32]
600170dc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
600170e0:	4404      	add	r4, r0
600170e2:	601c      	str	r4, [r3, #0]
600170e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
600170e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
600170ea:	6018      	str	r0, [r3, #0]
600170ec:	4628      	mov	r0, r5
600170ee:	b003      	add	sp, #12
600170f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
600170f2:	4668      	mov	r0, sp
600170f4:	9600      	str	r6, [sp, #0]
600170f6:	f7ff fd1b 	bl	60016b30 <__lo0bits>
600170fa:	9b01      	ldr	r3, [sp, #4]
600170fc:	b300      	cbz	r0, 60017140 <__d2b+0xa0>
600170fe:	9900      	ldr	r1, [sp, #0]
60017100:	f1c0 0220 	rsb	r2, r0, #32
60017104:	fa03 f202 	lsl.w	r2, r3, r2
60017108:	40c3      	lsrs	r3, r0
6001710a:	9301      	str	r3, [sp, #4]
6001710c:	430a      	orrs	r2, r1
6001710e:	2b00      	cmp	r3, #0
60017110:	e9c5 2305 	strd	r2, r3, [r5, #20]
60017114:	bf0c      	ite	eq
60017116:	2201      	moveq	r2, #1
60017118:	2202      	movne	r2, #2
6001711a:	612a      	str	r2, [r5, #16]
6001711c:	2c00      	cmp	r4, #0
6001711e:	d1dc      	bne.n	600170da <__d2b+0x3a>
60017120:	eb05 0182 	add.w	r1, r5, r2, lsl #2
60017124:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
60017128:	6908      	ldr	r0, [r1, #16]
6001712a:	9908      	ldr	r1, [sp, #32]
6001712c:	600b      	str	r3, [r1, #0]
6001712e:	f7ff fcdd 	bl	60016aec <__hi0bits>
60017132:	9b09      	ldr	r3, [sp, #36]	; 0x24
60017134:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
60017138:	6018      	str	r0, [r3, #0]
6001713a:	4628      	mov	r0, r5
6001713c:	b003      	add	sp, #12
6001713e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60017140:	9a00      	ldr	r2, [sp, #0]
60017142:	e7e4      	b.n	6001710e <__d2b+0x6e>
60017144:	4b03      	ldr	r3, [pc, #12]	; (60017154 <__d2b+0xb4>)
60017146:	4804      	ldr	r0, [pc, #16]	; (60017158 <__d2b+0xb8>)
60017148:	462a      	mov	r2, r5
6001714a:	f240 310a 	movw	r1, #778	; 0x30a
6001714e:	f7fb fdf7 	bl	60012d40 <__assert_func>
60017152:	bf00      	nop
60017154:	6001bfcc 	.word	0x6001bfcc
60017158:	6001c038 	.word	0x6001c038

6001715c <_realloc_r>:
6001715c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60017160:	4616      	mov	r6, r2
60017162:	2900      	cmp	r1, #0
60017164:	f000 8096 	beq.w	60017294 <_realloc_r+0x138>
60017168:	460c      	mov	r4, r1
6001716a:	4680      	mov	r8, r0
6001716c:	f106 050b 	add.w	r5, r6, #11
60017170:	f7fc f938 	bl	600133e4 <__malloc_lock>
60017174:	f854 1c04 	ldr.w	r1, [r4, #-4]
60017178:	2d16      	cmp	r5, #22
6001717a:	f1a4 0908 	sub.w	r9, r4, #8
6001717e:	f021 0703 	bic.w	r7, r1, #3
60017182:	d858      	bhi.n	60017236 <_realloc_r+0xda>
60017184:	2510      	movs	r5, #16
60017186:	42ae      	cmp	r6, r5
60017188:	d858      	bhi.n	6001723c <_realloc_r+0xe0>
6001718a:	42af      	cmp	r7, r5
6001718c:	da60      	bge.n	60017250 <_realloc_r+0xf4>
6001718e:	4bbe      	ldr	r3, [pc, #760]	; (60017488 <_realloc_r+0x32c>)
60017190:	689a      	ldr	r2, [r3, #8]
60017192:	eb09 0c07 	add.w	ip, r9, r7
60017196:	4562      	cmp	r2, ip
60017198:	f8dc 0004 	ldr.w	r0, [ip, #4]
6001719c:	f000 8090 	beq.w	600172c0 <_realloc_r+0x164>
600171a0:	f020 0301 	bic.w	r3, r0, #1
600171a4:	4463      	add	r3, ip
600171a6:	685b      	ldr	r3, [r3, #4]
600171a8:	07da      	lsls	r2, r3, #31
600171aa:	d468      	bmi.n	6001727e <_realloc_r+0x122>
600171ac:	f020 0003 	bic.w	r0, r0, #3
600171b0:	183b      	adds	r3, r7, r0
600171b2:	429d      	cmp	r5, r3
600171b4:	dd47      	ble.n	60017246 <_realloc_r+0xea>
600171b6:	07cb      	lsls	r3, r1, #31
600171b8:	d412      	bmi.n	600171e0 <_realloc_r+0x84>
600171ba:	f854 3c08 	ldr.w	r3, [r4, #-8]
600171be:	eba9 0b03 	sub.w	fp, r9, r3
600171c2:	f8db 3004 	ldr.w	r3, [fp, #4]
600171c6:	f023 0203 	bic.w	r2, r3, #3
600171ca:	4410      	add	r0, r2
600171cc:	eb00 0a07 	add.w	sl, r0, r7
600171d0:	4555      	cmp	r5, sl
600171d2:	f340 80f6 	ble.w	600173c2 <_realloc_r+0x266>
600171d6:	eb07 0a02 	add.w	sl, r7, r2
600171da:	4555      	cmp	r5, sl
600171dc:	f340 80cc 	ble.w	60017378 <_realloc_r+0x21c>
600171e0:	4631      	mov	r1, r6
600171e2:	4640      	mov	r0, r8
600171e4:	f7fb fdf0 	bl	60012dc8 <_malloc_r>
600171e8:	4606      	mov	r6, r0
600171ea:	2800      	cmp	r0, #0
600171ec:	f000 8120 	beq.w	60017430 <_realloc_r+0x2d4>
600171f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
600171f4:	f023 0301 	bic.w	r3, r3, #1
600171f8:	444b      	add	r3, r9
600171fa:	f1a0 0208 	sub.w	r2, r0, #8
600171fe:	4293      	cmp	r3, r2
60017200:	f000 80b4 	beq.w	6001736c <_realloc_r+0x210>
60017204:	1f3a      	subs	r2, r7, #4
60017206:	2a24      	cmp	r2, #36	; 0x24
60017208:	f200 80d7 	bhi.w	600173ba <_realloc_r+0x25e>
6001720c:	2a13      	cmp	r2, #19
6001720e:	f200 80a2 	bhi.w	60017356 <_realloc_r+0x1fa>
60017212:	4603      	mov	r3, r0
60017214:	4622      	mov	r2, r4
60017216:	6811      	ldr	r1, [r2, #0]
60017218:	6019      	str	r1, [r3, #0]
6001721a:	6851      	ldr	r1, [r2, #4]
6001721c:	6059      	str	r1, [r3, #4]
6001721e:	6892      	ldr	r2, [r2, #8]
60017220:	609a      	str	r2, [r3, #8]
60017222:	4621      	mov	r1, r4
60017224:	4640      	mov	r0, r8
60017226:	f7ff f85d 	bl	600162e4 <_free_r>
6001722a:	4640      	mov	r0, r8
6001722c:	f7fc f8e0 	bl	600133f0 <__malloc_unlock>
60017230:	4630      	mov	r0, r6
60017232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
60017236:	f035 0507 	bics.w	r5, r5, #7
6001723a:	d5a4      	bpl.n	60017186 <_realloc_r+0x2a>
6001723c:	230c      	movs	r3, #12
6001723e:	f8c8 3000 	str.w	r3, [r8]
60017242:	2600      	movs	r6, #0
60017244:	e018      	b.n	60017278 <_realloc_r+0x11c>
60017246:	461f      	mov	r7, r3
60017248:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
6001724c:	60d3      	str	r3, [r2, #12]
6001724e:	609a      	str	r2, [r3, #8]
60017250:	f8d9 3004 	ldr.w	r3, [r9, #4]
60017254:	1b7a      	subs	r2, r7, r5
60017256:	2a0f      	cmp	r2, #15
60017258:	f003 0301 	and.w	r3, r3, #1
6001725c:	eb09 0007 	add.w	r0, r9, r7
60017260:	d81d      	bhi.n	6001729e <_realloc_r+0x142>
60017262:	433b      	orrs	r3, r7
60017264:	f8c9 3004 	str.w	r3, [r9, #4]
60017268:	6843      	ldr	r3, [r0, #4]
6001726a:	f043 0301 	orr.w	r3, r3, #1
6001726e:	6043      	str	r3, [r0, #4]
60017270:	4640      	mov	r0, r8
60017272:	f7fc f8bd 	bl	600133f0 <__malloc_unlock>
60017276:	4626      	mov	r6, r4
60017278:	4630      	mov	r0, r6
6001727a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
6001727e:	07c9      	lsls	r1, r1, #31
60017280:	d4ae      	bmi.n	600171e0 <_realloc_r+0x84>
60017282:	f854 3c08 	ldr.w	r3, [r4, #-8]
60017286:	eba9 0b03 	sub.w	fp, r9, r3
6001728a:	f8db 3004 	ldr.w	r3, [fp, #4]
6001728e:	f023 0203 	bic.w	r2, r3, #3
60017292:	e7a0      	b.n	600171d6 <_realloc_r+0x7a>
60017294:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60017298:	4611      	mov	r1, r2
6001729a:	f7fb bd95 	b.w	60012dc8 <_malloc_r>
6001729e:	eb09 0105 	add.w	r1, r9, r5
600172a2:	432b      	orrs	r3, r5
600172a4:	f042 0201 	orr.w	r2, r2, #1
600172a8:	f8c9 3004 	str.w	r3, [r9, #4]
600172ac:	604a      	str	r2, [r1, #4]
600172ae:	6843      	ldr	r3, [r0, #4]
600172b0:	f043 0301 	orr.w	r3, r3, #1
600172b4:	6043      	str	r3, [r0, #4]
600172b6:	3108      	adds	r1, #8
600172b8:	4640      	mov	r0, r8
600172ba:	f7ff f813 	bl	600162e4 <_free_r>
600172be:	e7d7      	b.n	60017270 <_realloc_r+0x114>
600172c0:	f020 0003 	bic.w	r0, r0, #3
600172c4:	19c2      	adds	r2, r0, r7
600172c6:	f105 0c10 	add.w	ip, r5, #16
600172ca:	4562      	cmp	r2, ip
600172cc:	f280 8091 	bge.w	600173f2 <_realloc_r+0x296>
600172d0:	07ca      	lsls	r2, r1, #31
600172d2:	d485      	bmi.n	600171e0 <_realloc_r+0x84>
600172d4:	f854 2c08 	ldr.w	r2, [r4, #-8]
600172d8:	eba9 0b02 	sub.w	fp, r9, r2
600172dc:	f8db 2004 	ldr.w	r2, [fp, #4]
600172e0:	f022 0203 	bic.w	r2, r2, #3
600172e4:	4410      	add	r0, r2
600172e6:	eb00 0a07 	add.w	sl, r0, r7
600172ea:	45d4      	cmp	ip, sl
600172ec:	f73f af73 	bgt.w	600171d6 <_realloc_r+0x7a>
600172f0:	465e      	mov	r6, fp
600172f2:	f8db 100c 	ldr.w	r1, [fp, #12]
600172f6:	f856 0f08 	ldr.w	r0, [r6, #8]!
600172fa:	1f3a      	subs	r2, r7, #4
600172fc:	2a24      	cmp	r2, #36	; 0x24
600172fe:	60c1      	str	r1, [r0, #12]
60017300:	6088      	str	r0, [r1, #8]
60017302:	f200 80ae 	bhi.w	60017462 <_realloc_r+0x306>
60017306:	2a13      	cmp	r2, #19
60017308:	f240 80a9 	bls.w	6001745e <_realloc_r+0x302>
6001730c:	6821      	ldr	r1, [r4, #0]
6001730e:	f8cb 1008 	str.w	r1, [fp, #8]
60017312:	6861      	ldr	r1, [r4, #4]
60017314:	f8cb 100c 	str.w	r1, [fp, #12]
60017318:	2a1b      	cmp	r2, #27
6001731a:	f200 80a8 	bhi.w	6001746e <_realloc_r+0x312>
6001731e:	3408      	adds	r4, #8
60017320:	f10b 0210 	add.w	r2, fp, #16
60017324:	6821      	ldr	r1, [r4, #0]
60017326:	6011      	str	r1, [r2, #0]
60017328:	6861      	ldr	r1, [r4, #4]
6001732a:	6051      	str	r1, [r2, #4]
6001732c:	68a1      	ldr	r1, [r4, #8]
6001732e:	6091      	str	r1, [r2, #8]
60017330:	eb0b 0105 	add.w	r1, fp, r5
60017334:	ebaa 0205 	sub.w	r2, sl, r5
60017338:	f042 0201 	orr.w	r2, r2, #1
6001733c:	6099      	str	r1, [r3, #8]
6001733e:	604a      	str	r2, [r1, #4]
60017340:	f8db 3004 	ldr.w	r3, [fp, #4]
60017344:	f003 0301 	and.w	r3, r3, #1
60017348:	432b      	orrs	r3, r5
6001734a:	4640      	mov	r0, r8
6001734c:	f8cb 3004 	str.w	r3, [fp, #4]
60017350:	f7fc f84e 	bl	600133f0 <__malloc_unlock>
60017354:	e790      	b.n	60017278 <_realloc_r+0x11c>
60017356:	6823      	ldr	r3, [r4, #0]
60017358:	6003      	str	r3, [r0, #0]
6001735a:	6863      	ldr	r3, [r4, #4]
6001735c:	6043      	str	r3, [r0, #4]
6001735e:	2a1b      	cmp	r2, #27
60017360:	d83c      	bhi.n	600173dc <_realloc_r+0x280>
60017362:	f104 0208 	add.w	r2, r4, #8
60017366:	f100 0308 	add.w	r3, r0, #8
6001736a:	e754      	b.n	60017216 <_realloc_r+0xba>
6001736c:	f850 3c04 	ldr.w	r3, [r0, #-4]
60017370:	f023 0303 	bic.w	r3, r3, #3
60017374:	441f      	add	r7, r3
60017376:	e76b      	b.n	60017250 <_realloc_r+0xf4>
60017378:	1f3a      	subs	r2, r7, #4
6001737a:	465e      	mov	r6, fp
6001737c:	f8db 300c 	ldr.w	r3, [fp, #12]
60017380:	f856 1f08 	ldr.w	r1, [r6, #8]!
60017384:	2a24      	cmp	r2, #36	; 0x24
60017386:	60cb      	str	r3, [r1, #12]
60017388:	6099      	str	r1, [r3, #8]
6001738a:	d822      	bhi.n	600173d2 <_realloc_r+0x276>
6001738c:	2a13      	cmp	r2, #19
6001738e:	d91e      	bls.n	600173ce <_realloc_r+0x272>
60017390:	6823      	ldr	r3, [r4, #0]
60017392:	f8cb 3008 	str.w	r3, [fp, #8]
60017396:	6863      	ldr	r3, [r4, #4]
60017398:	f8cb 300c 	str.w	r3, [fp, #12]
6001739c:	2a1b      	cmp	r2, #27
6001739e:	d83b      	bhi.n	60017418 <_realloc_r+0x2bc>
600173a0:	3408      	adds	r4, #8
600173a2:	f10b 0310 	add.w	r3, fp, #16
600173a6:	6822      	ldr	r2, [r4, #0]
600173a8:	601a      	str	r2, [r3, #0]
600173aa:	6862      	ldr	r2, [r4, #4]
600173ac:	605a      	str	r2, [r3, #4]
600173ae:	68a2      	ldr	r2, [r4, #8]
600173b0:	609a      	str	r2, [r3, #8]
600173b2:	4634      	mov	r4, r6
600173b4:	4657      	mov	r7, sl
600173b6:	46d9      	mov	r9, fp
600173b8:	e74a      	b.n	60017250 <_realloc_r+0xf4>
600173ba:	4621      	mov	r1, r4
600173bc:	f7ff fa96 	bl	600168ec <memmove>
600173c0:	e72f      	b.n	60017222 <_realloc_r+0xc6>
600173c2:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
600173c6:	1f3a      	subs	r2, r7, #4
600173c8:	60cb      	str	r3, [r1, #12]
600173ca:	6099      	str	r1, [r3, #8]
600173cc:	e7d5      	b.n	6001737a <_realloc_r+0x21e>
600173ce:	4633      	mov	r3, r6
600173d0:	e7e9      	b.n	600173a6 <_realloc_r+0x24a>
600173d2:	4621      	mov	r1, r4
600173d4:	4630      	mov	r0, r6
600173d6:	f7ff fa89 	bl	600168ec <memmove>
600173da:	e7ea      	b.n	600173b2 <_realloc_r+0x256>
600173dc:	68a3      	ldr	r3, [r4, #8]
600173de:	6083      	str	r3, [r0, #8]
600173e0:	68e3      	ldr	r3, [r4, #12]
600173e2:	60c3      	str	r3, [r0, #12]
600173e4:	2a24      	cmp	r2, #36	; 0x24
600173e6:	d027      	beq.n	60017438 <_realloc_r+0x2dc>
600173e8:	f104 0210 	add.w	r2, r4, #16
600173ec:	f100 0310 	add.w	r3, r0, #16
600173f0:	e711      	b.n	60017216 <_realloc_r+0xba>
600173f2:	eb09 0105 	add.w	r1, r9, r5
600173f6:	6099      	str	r1, [r3, #8]
600173f8:	1b53      	subs	r3, r2, r5
600173fa:	f043 0301 	orr.w	r3, r3, #1
600173fe:	604b      	str	r3, [r1, #4]
60017400:	f854 3c04 	ldr.w	r3, [r4, #-4]
60017404:	f003 0301 	and.w	r3, r3, #1
60017408:	432b      	orrs	r3, r5
6001740a:	4640      	mov	r0, r8
6001740c:	f844 3c04 	str.w	r3, [r4, #-4]
60017410:	f7fb ffee 	bl	600133f0 <__malloc_unlock>
60017414:	4626      	mov	r6, r4
60017416:	e72f      	b.n	60017278 <_realloc_r+0x11c>
60017418:	68a3      	ldr	r3, [r4, #8]
6001741a:	f8cb 3010 	str.w	r3, [fp, #16]
6001741e:	68e3      	ldr	r3, [r4, #12]
60017420:	f8cb 3014 	str.w	r3, [fp, #20]
60017424:	2a24      	cmp	r2, #36	; 0x24
60017426:	d010      	beq.n	6001744a <_realloc_r+0x2ee>
60017428:	3410      	adds	r4, #16
6001742a:	f10b 0318 	add.w	r3, fp, #24
6001742e:	e7ba      	b.n	600173a6 <_realloc_r+0x24a>
60017430:	4640      	mov	r0, r8
60017432:	f7fb ffdd 	bl	600133f0 <__malloc_unlock>
60017436:	e704      	b.n	60017242 <_realloc_r+0xe6>
60017438:	6923      	ldr	r3, [r4, #16]
6001743a:	6103      	str	r3, [r0, #16]
6001743c:	6961      	ldr	r1, [r4, #20]
6001743e:	6141      	str	r1, [r0, #20]
60017440:	f104 0218 	add.w	r2, r4, #24
60017444:	f100 0318 	add.w	r3, r0, #24
60017448:	e6e5      	b.n	60017216 <_realloc_r+0xba>
6001744a:	6923      	ldr	r3, [r4, #16]
6001744c:	f8cb 3018 	str.w	r3, [fp, #24]
60017450:	6963      	ldr	r3, [r4, #20]
60017452:	f8cb 301c 	str.w	r3, [fp, #28]
60017456:	3418      	adds	r4, #24
60017458:	f10b 0320 	add.w	r3, fp, #32
6001745c:	e7a3      	b.n	600173a6 <_realloc_r+0x24a>
6001745e:	4632      	mov	r2, r6
60017460:	e760      	b.n	60017324 <_realloc_r+0x1c8>
60017462:	4621      	mov	r1, r4
60017464:	4630      	mov	r0, r6
60017466:	f7ff fa41 	bl	600168ec <memmove>
6001746a:	4b07      	ldr	r3, [pc, #28]	; (60017488 <_realloc_r+0x32c>)
6001746c:	e760      	b.n	60017330 <_realloc_r+0x1d4>
6001746e:	68a1      	ldr	r1, [r4, #8]
60017470:	f8cb 1010 	str.w	r1, [fp, #16]
60017474:	68e1      	ldr	r1, [r4, #12]
60017476:	f8cb 1014 	str.w	r1, [fp, #20]
6001747a:	2a24      	cmp	r2, #36	; 0x24
6001747c:	d006      	beq.n	6001748c <_realloc_r+0x330>
6001747e:	3410      	adds	r4, #16
60017480:	f10b 0218 	add.w	r2, fp, #24
60017484:	e74e      	b.n	60017324 <_realloc_r+0x1c8>
60017486:	bf00      	nop
60017488:	202025a8 	.word	0x202025a8
6001748c:	6922      	ldr	r2, [r4, #16]
6001748e:	f8cb 2018 	str.w	r2, [fp, #24]
60017492:	6962      	ldr	r2, [r4, #20]
60017494:	f8cb 201c 	str.w	r2, [fp, #28]
60017498:	3418      	adds	r4, #24
6001749a:	f10b 0220 	add.w	r2, fp, #32
6001749e:	e741      	b.n	60017324 <_realloc_r+0x1c8>

600174a0 <frexp>:
600174a0:	f8df c060 	ldr.w	ip, [pc, #96]	; 60017504 <frexp+0x64>
600174a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600174a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
600174aa:	2700      	movs	r7, #0
600174ac:	4563      	cmp	r3, ip
600174ae:	4604      	mov	r4, r0
600174b0:	460d      	mov	r5, r1
600174b2:	4616      	mov	r6, r2
600174b4:	6017      	str	r7, [r2, #0]
600174b6:	d822      	bhi.n	600174fe <frexp+0x5e>
600174b8:	4684      	mov	ip, r0
600174ba:	ea53 0c0c 	orrs.w	ip, r3, ip
600174be:	d01e      	beq.n	600174fe <frexp+0x5e>
600174c0:	f8df c044 	ldr.w	ip, [pc, #68]	; 60017508 <frexp+0x68>
600174c4:	ea01 0c0c 	and.w	ip, r1, ip
600174c8:	460a      	mov	r2, r1
600174ca:	f1bc 0f00 	cmp.w	ip, #0
600174ce:	d109      	bne.n	600174e4 <frexp+0x44>
600174d0:	4b0e      	ldr	r3, [pc, #56]	; (6001750c <frexp+0x6c>)
600174d2:	2200      	movs	r2, #0
600174d4:	f7eb fae0 	bl	60002a98 <__aeabi_dmul>
600174d8:	f06f 0735 	mvn.w	r7, #53	; 0x35
600174dc:	4604      	mov	r4, r0
600174de:	460a      	mov	r2, r1
600174e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
600174e4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
600174e8:	151b      	asrs	r3, r3, #20
600174ea:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
600174ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
600174f2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
600174f6:	443b      	add	r3, r7
600174f8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
600174fc:	6033      	str	r3, [r6, #0]
600174fe:	4620      	mov	r0, r4
60017500:	4629      	mov	r1, r5
60017502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60017504:	7fefffff 	.word	0x7fefffff
60017508:	7ff00000 	.word	0x7ff00000
6001750c:	43500000 	.word	0x43500000

60017510 <raise>:
60017510:	b538      	push	{r3, r4, r5, lr}
60017512:	4b14      	ldr	r3, [pc, #80]	; (60017564 <raise+0x54>)
60017514:	281f      	cmp	r0, #31
60017516:	681d      	ldr	r5, [r3, #0]
60017518:	d81e      	bhi.n	60017558 <raise+0x48>
6001751a:	f8d5 2148 	ldr.w	r2, [r5, #328]	; 0x148
6001751e:	4604      	mov	r4, r0
60017520:	b162      	cbz	r2, 6001753c <raise+0x2c>
60017522:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
60017526:	b14b      	cbz	r3, 6001753c <raise+0x2c>
60017528:	2b01      	cmp	r3, #1
6001752a:	d005      	beq.n	60017538 <raise+0x28>
6001752c:	1c59      	adds	r1, r3, #1
6001752e:	d00f      	beq.n	60017550 <raise+0x40>
60017530:	2100      	movs	r1, #0
60017532:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
60017536:	4798      	blx	r3
60017538:	2000      	movs	r0, #0
6001753a:	bd38      	pop	{r3, r4, r5, pc}
6001753c:	4628      	mov	r0, r5
6001753e:	f000 f829 	bl	60017594 <_getpid_r>
60017542:	4622      	mov	r2, r4
60017544:	4601      	mov	r1, r0
60017546:	4628      	mov	r0, r5
60017548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
6001754c:	f000 b80c 	b.w	60017568 <_kill_r>
60017550:	2316      	movs	r3, #22
60017552:	602b      	str	r3, [r5, #0]
60017554:	2001      	movs	r0, #1
60017556:	bd38      	pop	{r3, r4, r5, pc}
60017558:	2316      	movs	r3, #22
6001755a:	602b      	str	r3, [r5, #0]
6001755c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60017560:	bd38      	pop	{r3, r4, r5, pc}
60017562:	bf00      	nop
60017564:	20203140 	.word	0x20203140

60017568 <_kill_r>:
60017568:	b570      	push	{r4, r5, r6, lr}
6001756a:	460c      	mov	r4, r1
6001756c:	4d08      	ldr	r5, [pc, #32]	; (60017590 <_kill_r+0x28>)
6001756e:	4603      	mov	r3, r0
60017570:	2600      	movs	r6, #0
60017572:	4620      	mov	r0, r4
60017574:	4611      	mov	r1, r2
60017576:	461c      	mov	r4, r3
60017578:	602e      	str	r6, [r5, #0]
6001757a:	f000 ff82 	bl	60018482 <_kill>
6001757e:	1c43      	adds	r3, r0, #1
60017580:	d000      	beq.n	60017584 <_kill_r+0x1c>
60017582:	bd70      	pop	{r4, r5, r6, pc}
60017584:	682b      	ldr	r3, [r5, #0]
60017586:	2b00      	cmp	r3, #0
60017588:	d0fb      	beq.n	60017582 <_kill_r+0x1a>
6001758a:	6023      	str	r3, [r4, #0]
6001758c:	bd70      	pop	{r4, r5, r6, pc}
6001758e:	bf00      	nop
60017590:	20204e14 	.word	0x20204e14

60017594 <_getpid_r>:
60017594:	f000 bf77 	b.w	60018486 <_getpid>

60017598 <__sread>:
60017598:	b510      	push	{r4, lr}
6001759a:	460c      	mov	r4, r1
6001759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
600175a0:	f000 f922 	bl	600177e8 <_read_r>
600175a4:	2800      	cmp	r0, #0
600175a6:	db03      	blt.n	600175b0 <__sread+0x18>
600175a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
600175aa:	4403      	add	r3, r0
600175ac:	6523      	str	r3, [r4, #80]	; 0x50
600175ae:	bd10      	pop	{r4, pc}
600175b0:	89a3      	ldrh	r3, [r4, #12]
600175b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
600175b6:	81a3      	strh	r3, [r4, #12]
600175b8:	bd10      	pop	{r4, pc}
600175ba:	bf00      	nop

600175bc <__swrite>:
600175bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
600175c0:	460c      	mov	r4, r1
600175c2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
600175c6:	461f      	mov	r7, r3
600175c8:	05cb      	lsls	r3, r1, #23
600175ca:	4605      	mov	r5, r0
600175cc:	4616      	mov	r6, r2
600175ce:	d40b      	bmi.n	600175e8 <__swrite+0x2c>
600175d0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
600175d4:	81a1      	strh	r1, [r4, #12]
600175d6:	463b      	mov	r3, r7
600175d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
600175dc:	4632      	mov	r2, r6
600175de:	4628      	mov	r0, r5
600175e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
600175e4:	f000 b854 	b.w	60017690 <_write_r>
600175e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
600175ec:	2302      	movs	r3, #2
600175ee:	2200      	movs	r2, #0
600175f0:	f000 f8ce 	bl	60017790 <_lseek_r>
600175f4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
600175f8:	e7ea      	b.n	600175d0 <__swrite+0x14>
600175fa:	bf00      	nop

600175fc <__sseek>:
600175fc:	b510      	push	{r4, lr}
600175fe:	460c      	mov	r4, r1
60017600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
60017604:	f000 f8c4 	bl	60017790 <_lseek_r>
60017608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
6001760c:	1c42      	adds	r2, r0, #1
6001760e:	bf0e      	itee	eq
60017610:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
60017614:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
60017618:	6520      	strne	r0, [r4, #80]	; 0x50
6001761a:	81a3      	strh	r3, [r4, #12]
6001761c:	bd10      	pop	{r4, pc}
6001761e:	bf00      	nop

60017620 <__sclose>:
60017620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
60017624:	f000 b87a 	b.w	6001771c <_close_r>

60017628 <strncpy>:
60017628:	ea40 0301 	orr.w	r3, r0, r1
6001762c:	079b      	lsls	r3, r3, #30
6001762e:	b510      	push	{r4, lr}
60017630:	d101      	bne.n	60017636 <strncpy+0xe>
60017632:	2a03      	cmp	r2, #3
60017634:	d817      	bhi.n	60017666 <strncpy+0x3e>
60017636:	4684      	mov	ip, r0
60017638:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
6001763c:	e007      	b.n	6001764e <strncpy+0x26>
6001763e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
60017642:	f803 1b01 	strb.w	r1, [r3], #1
60017646:	1e54      	subs	r4, r2, #1
60017648:	b129      	cbz	r1, 60017656 <strncpy+0x2e>
6001764a:	469c      	mov	ip, r3
6001764c:	4622      	mov	r2, r4
6001764e:	4663      	mov	r3, ip
60017650:	2a00      	cmp	r2, #0
60017652:	d1f4      	bne.n	6001763e <strncpy+0x16>
60017654:	bd10      	pop	{r4, pc}
60017656:	4494      	add	ip, r2
60017658:	2c00      	cmp	r4, #0
6001765a:	d0fb      	beq.n	60017654 <strncpy+0x2c>
6001765c:	f803 1b01 	strb.w	r1, [r3], #1
60017660:	4563      	cmp	r3, ip
60017662:	d1fb      	bne.n	6001765c <strncpy+0x34>
60017664:	bd10      	pop	{r4, pc}
60017666:	468e      	mov	lr, r1
60017668:	4684      	mov	ip, r0
6001766a:	f8de 4000 	ldr.w	r4, [lr]
6001766e:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
60017672:	ea23 0304 	bic.w	r3, r3, r4
60017676:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
6001767a:	4671      	mov	r1, lr
6001767c:	f10e 0e04 	add.w	lr, lr, #4
60017680:	d1da      	bne.n	60017638 <strncpy+0x10>
60017682:	3a04      	subs	r2, #4
60017684:	2a03      	cmp	r2, #3
60017686:	f84c 4b04 	str.w	r4, [ip], #4
6001768a:	d8ee      	bhi.n	6001766a <strncpy+0x42>
6001768c:	4671      	mov	r1, lr
6001768e:	e7d3      	b.n	60017638 <strncpy+0x10>

60017690 <_write_r>:
60017690:	b538      	push	{r3, r4, r5, lr}
60017692:	460c      	mov	r4, r1
60017694:	4d08      	ldr	r5, [pc, #32]	; (600176b8 <_write_r+0x28>)
60017696:	4684      	mov	ip, r0
60017698:	4611      	mov	r1, r2
6001769a:	4620      	mov	r0, r4
6001769c:	461a      	mov	r2, r3
6001769e:	2300      	movs	r3, #0
600176a0:	602b      	str	r3, [r5, #0]
600176a2:	4664      	mov	r4, ip
600176a4:	f000 fedf 	bl	60018466 <_write>
600176a8:	1c43      	adds	r3, r0, #1
600176aa:	d000      	beq.n	600176ae <_write_r+0x1e>
600176ac:	bd38      	pop	{r3, r4, r5, pc}
600176ae:	682b      	ldr	r3, [r5, #0]
600176b0:	2b00      	cmp	r3, #0
600176b2:	d0fb      	beq.n	600176ac <_write_r+0x1c>
600176b4:	6023      	str	r3, [r4, #0]
600176b6:	bd38      	pop	{r3, r4, r5, pc}
600176b8:	20204e14 	.word	0x20204e14

600176bc <_calloc_r>:
600176bc:	b510      	push	{r4, lr}
600176be:	fb02 f101 	mul.w	r1, r2, r1
600176c2:	f7fb fb81 	bl	60012dc8 <_malloc_r>
600176c6:	4604      	mov	r4, r0
600176c8:	b168      	cbz	r0, 600176e6 <_calloc_r+0x2a>
600176ca:	f850 2c04 	ldr.w	r2, [r0, #-4]
600176ce:	f022 0203 	bic.w	r2, r2, #3
600176d2:	3a04      	subs	r2, #4
600176d4:	2a24      	cmp	r2, #36	; 0x24
600176d6:	d818      	bhi.n	6001770a <_calloc_r+0x4e>
600176d8:	2a13      	cmp	r2, #19
600176da:	d806      	bhi.n	600176ea <_calloc_r+0x2e>
600176dc:	4602      	mov	r2, r0
600176de:	2300      	movs	r3, #0
600176e0:	6013      	str	r3, [r2, #0]
600176e2:	6053      	str	r3, [r2, #4]
600176e4:	6093      	str	r3, [r2, #8]
600176e6:	4620      	mov	r0, r4
600176e8:	bd10      	pop	{r4, pc}
600176ea:	2300      	movs	r3, #0
600176ec:	2a1b      	cmp	r2, #27
600176ee:	6003      	str	r3, [r0, #0]
600176f0:	6043      	str	r3, [r0, #4]
600176f2:	d90f      	bls.n	60017714 <_calloc_r+0x58>
600176f4:	2a24      	cmp	r2, #36	; 0x24
600176f6:	6083      	str	r3, [r0, #8]
600176f8:	60c3      	str	r3, [r0, #12]
600176fa:	bf11      	iteee	ne
600176fc:	f100 0210 	addne.w	r2, r0, #16
60017700:	f100 0218 	addeq.w	r2, r0, #24
60017704:	6103      	streq	r3, [r0, #16]
60017706:	6143      	streq	r3, [r0, #20]
60017708:	e7e9      	b.n	600176de <_calloc_r+0x22>
6001770a:	2100      	movs	r1, #0
6001770c:	f7fb fe18 	bl	60013340 <memset>
60017710:	4620      	mov	r0, r4
60017712:	bd10      	pop	{r4, pc}
60017714:	f100 0208 	add.w	r2, r0, #8
60017718:	e7e1      	b.n	600176de <_calloc_r+0x22>
6001771a:	bf00      	nop

6001771c <_close_r>:
6001771c:	b538      	push	{r3, r4, r5, lr}
6001771e:	4d07      	ldr	r5, [pc, #28]	; (6001773c <_close_r+0x20>)
60017720:	2200      	movs	r2, #0
60017722:	4604      	mov	r4, r0
60017724:	4608      	mov	r0, r1
60017726:	602a      	str	r2, [r5, #0]
60017728:	f000 fea1 	bl	6001846e <_close>
6001772c:	1c43      	adds	r3, r0, #1
6001772e:	d000      	beq.n	60017732 <_close_r+0x16>
60017730:	bd38      	pop	{r3, r4, r5, pc}
60017732:	682b      	ldr	r3, [r5, #0]
60017734:	2b00      	cmp	r3, #0
60017736:	d0fb      	beq.n	60017730 <_close_r+0x14>
60017738:	6023      	str	r3, [r4, #0]
6001773a:	bd38      	pop	{r3, r4, r5, pc}
6001773c:	20204e14 	.word	0x20204e14

60017740 <_fstat_r>:
60017740:	b570      	push	{r4, r5, r6, lr}
60017742:	460c      	mov	r4, r1
60017744:	4d08      	ldr	r5, [pc, #32]	; (60017768 <_fstat_r+0x28>)
60017746:	4603      	mov	r3, r0
60017748:	2600      	movs	r6, #0
6001774a:	4620      	mov	r0, r4
6001774c:	4611      	mov	r1, r2
6001774e:	461c      	mov	r4, r3
60017750:	602e      	str	r6, [r5, #0]
60017752:	f000 fe9a 	bl	6001848a <_fstat>
60017756:	1c43      	adds	r3, r0, #1
60017758:	d000      	beq.n	6001775c <_fstat_r+0x1c>
6001775a:	bd70      	pop	{r4, r5, r6, pc}
6001775c:	682b      	ldr	r3, [r5, #0]
6001775e:	2b00      	cmp	r3, #0
60017760:	d0fb      	beq.n	6001775a <_fstat_r+0x1a>
60017762:	6023      	str	r3, [r4, #0]
60017764:	bd70      	pop	{r4, r5, r6, pc}
60017766:	bf00      	nop
60017768:	20204e14 	.word	0x20204e14

6001776c <_isatty_r>:
6001776c:	b538      	push	{r3, r4, r5, lr}
6001776e:	4d07      	ldr	r5, [pc, #28]	; (6001778c <_isatty_r+0x20>)
60017770:	2200      	movs	r2, #0
60017772:	4604      	mov	r4, r0
60017774:	4608      	mov	r0, r1
60017776:	602a      	str	r2, [r5, #0]
60017778:	f000 fe7e 	bl	60018478 <_isatty>
6001777c:	1c43      	adds	r3, r0, #1
6001777e:	d000      	beq.n	60017782 <_isatty_r+0x16>
60017780:	bd38      	pop	{r3, r4, r5, pc}
60017782:	682b      	ldr	r3, [r5, #0]
60017784:	2b00      	cmp	r3, #0
60017786:	d0fb      	beq.n	60017780 <_isatty_r+0x14>
60017788:	6023      	str	r3, [r4, #0]
6001778a:	bd38      	pop	{r3, r4, r5, pc}
6001778c:	20204e14 	.word	0x20204e14

60017790 <_lseek_r>:
60017790:	b538      	push	{r3, r4, r5, lr}
60017792:	460c      	mov	r4, r1
60017794:	4d08      	ldr	r5, [pc, #32]	; (600177b8 <_lseek_r+0x28>)
60017796:	4684      	mov	ip, r0
60017798:	4611      	mov	r1, r2
6001779a:	4620      	mov	r0, r4
6001779c:	461a      	mov	r2, r3
6001779e:	2300      	movs	r3, #0
600177a0:	602b      	str	r3, [r5, #0]
600177a2:	4664      	mov	r4, ip
600177a4:	f000 fe66 	bl	60018474 <_lseek>
600177a8:	1c43      	adds	r3, r0, #1
600177aa:	d000      	beq.n	600177ae <_lseek_r+0x1e>
600177ac:	bd38      	pop	{r3, r4, r5, pc}
600177ae:	682b      	ldr	r3, [r5, #0]
600177b0:	2b00      	cmp	r3, #0
600177b2:	d0fb      	beq.n	600177ac <_lseek_r+0x1c>
600177b4:	6023      	str	r3, [r4, #0]
600177b6:	bd38      	pop	{r3, r4, r5, pc}
600177b8:	20204e14 	.word	0x20204e14

600177bc <__ascii_mbtowc>:
600177bc:	b082      	sub	sp, #8
600177be:	b149      	cbz	r1, 600177d4 <__ascii_mbtowc+0x18>
600177c0:	b15a      	cbz	r2, 600177da <__ascii_mbtowc+0x1e>
600177c2:	b16b      	cbz	r3, 600177e0 <__ascii_mbtowc+0x24>
600177c4:	7813      	ldrb	r3, [r2, #0]
600177c6:	600b      	str	r3, [r1, #0]
600177c8:	7812      	ldrb	r2, [r2, #0]
600177ca:	1e10      	subs	r0, r2, #0
600177cc:	bf18      	it	ne
600177ce:	2001      	movne	r0, #1
600177d0:	b002      	add	sp, #8
600177d2:	4770      	bx	lr
600177d4:	a901      	add	r1, sp, #4
600177d6:	2a00      	cmp	r2, #0
600177d8:	d1f3      	bne.n	600177c2 <__ascii_mbtowc+0x6>
600177da:	4610      	mov	r0, r2
600177dc:	b002      	add	sp, #8
600177de:	4770      	bx	lr
600177e0:	f06f 0001 	mvn.w	r0, #1
600177e4:	e7f4      	b.n	600177d0 <__ascii_mbtowc+0x14>
600177e6:	bf00      	nop

600177e8 <_read_r>:
600177e8:	b538      	push	{r3, r4, r5, lr}
600177ea:	460c      	mov	r4, r1
600177ec:	4d08      	ldr	r5, [pc, #32]	; (60017810 <_read_r+0x28>)
600177ee:	4684      	mov	ip, r0
600177f0:	4611      	mov	r1, r2
600177f2:	4620      	mov	r0, r4
600177f4:	461a      	mov	r2, r3
600177f6:	2300      	movs	r3, #0
600177f8:	602b      	str	r3, [r5, #0]
600177fa:	4664      	mov	r4, ip
600177fc:	f000 fe2f 	bl	6001845e <_read>
60017800:	1c43      	adds	r3, r0, #1
60017802:	d000      	beq.n	60017806 <_read_r+0x1e>
60017804:	bd38      	pop	{r3, r4, r5, pc}
60017806:	682b      	ldr	r3, [r5, #0]
60017808:	2b00      	cmp	r3, #0
6001780a:	d0fb      	beq.n	60017804 <_read_r+0x1c>
6001780c:	6023      	str	r3, [r4, #0]
6001780e:	bd38      	pop	{r3, r4, r5, pc}
60017810:	20204e14 	.word	0x20204e14

60017814 <__ascii_wctomb>:
60017814:	b149      	cbz	r1, 6001782a <__ascii_wctomb+0x16>
60017816:	2aff      	cmp	r2, #255	; 0xff
60017818:	d802      	bhi.n	60017820 <__ascii_wctomb+0xc>
6001781a:	700a      	strb	r2, [r1, #0]
6001781c:	2001      	movs	r0, #1
6001781e:	4770      	bx	lr
60017820:	238a      	movs	r3, #138	; 0x8a
60017822:	6003      	str	r3, [r0, #0]
60017824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60017828:	4770      	bx	lr
6001782a:	4608      	mov	r0, r1
6001782c:	4770      	bx	lr
6001782e:	bf00      	nop

60017830 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
60017830:	4770      	bx	lr

60017832 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
60017832:	f7f8 bc5d 	b.w	600100f0 <z_impl_k_mutex_lock>

60017836 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
60017836:	f7f8 bd2b 	b.w	60010290 <z_impl_k_mutex_unlock>

6001783a <k_timer_status_sync.isra.0>:
	return z_impl_k_timer_status_sync(timer);
6001783a:	f7fa bf89 	b.w	60012750 <z_impl_k_timer_status_sync>

6001783e <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
6001783e:	f7fa ba23 	b.w	60011c88 <z_impl_k_sleep>

60017842 <k_msleep.isra.0>:
			return t * ((uint64_t)to_hz / from_hz);
60017842:	210a      	movs	r1, #10
	return k_sleep(Z_TIMEOUT_MS(ms));
60017844:	fb80 0101 	smull	r0, r1, r0, r1
60017848:	f7ff bff9 	b.w	6001783e <k_sleep.isra.0>

6001784c <mean_val>:
{
6001784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6001784e:	4607      	mov	r7, r0
60017850:	460d      	mov	r5, r1
	for (int i = 0; i < len; ++i) {
60017852:	2600      	movs	r6, #0
	float sum = 0.0, mean = 0.0;
60017854:	2400      	movs	r4, #0
	for (int i = 0; i < len; ++i) {
60017856:	42ae      	cmp	r6, r5
60017858:	db07      	blt.n	6001786a <mean_val+0x1e>
	mean = sum / len;
6001785a:	4628      	mov	r0, r5
6001785c:	f7eb fce8 	bl	60003230 <__aeabi_i2f>
60017860:	4601      	mov	r1, r0
60017862:	4620      	mov	r0, r4
60017864:	f7eb fdec 	bl	60003440 <__aeabi_fdiv>
}
60017868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sum += arr[i];
6001786a:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
6001786e:	4620      	mov	r0, r4
60017870:	f7eb fc2a 	bl	600030c8 <__addsf3>
	for (int i = 0; i < len; ++i) {
60017874:	3601      	adds	r6, #1
		sum += arr[i];
60017876:	4604      	mov	r4, r0
	for (int i = 0; i < len; ++i) {
60017878:	e7ed      	b.n	60017856 <mean_val+0xa>

6001787a <moving_average>:
{
6001787a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
6001787e:	4606      	mov	r6, r0
60017880:	4680      	mov	r8, r0
60017882:	460c      	mov	r4, r1
60017884:	4615      	mov	r5, r2
	for (int i = 0; i < size - 1; i++) {
60017886:	2700      	movs	r7, #0
	float sum = 0;
60017888:	2000      	movs	r0, #0
	for (int i = 0; i < size - 1; i++) {
6001788a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
6001788e:	45b9      	cmp	r9, r7
60017890:	dc11      	bgt.n	600178b6 <moving_average+0x3c>
	buf[size - 1] = new_value;
60017892:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
	sum += new_value;
60017896:	4629      	mov	r1, r5
	buf[size - 1] = new_value;
60017898:	3b01      	subs	r3, #1
6001789a:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
	sum += new_value;
6001789e:	f7eb fc13 	bl	600030c8 <__addsf3>
600178a2:	4605      	mov	r5, r0
	return sum / size;
600178a4:	4620      	mov	r0, r4
600178a6:	f7eb fcc3 	bl	60003230 <__aeabi_i2f>
600178aa:	4601      	mov	r1, r0
600178ac:	4628      	mov	r0, r5
600178ae:	f7eb fdc7 	bl	60003440 <__aeabi_fdiv>
}
600178b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		buf[i] = buf[i + 1];
600178b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
	for (int i = 0; i < size - 1; i++) {
600178ba:	3701      	adds	r7, #1
		buf[i] = buf[i + 1];
600178bc:	f848 1b04 	str.w	r1, [r8], #4
		sum += buf[i];
600178c0:	f7eb fc02 	bl	600030c8 <__addsf3>
	for (int i = 0; i < size - 1; i++) {
600178c4:	e7e3      	b.n	6001788e <moving_average+0x14>

600178c6 <main>:

// K_THREAD_DEFINE(data_output_id, STACKSIZE, data_print, NULL, NULL, NULL,
// PRIORITY, 0, 0);

int main(void)
{
600178c6:	b508      	push	{r3, lr}
	usb_enable(NULL);
600178c8:	2000      	movs	r0, #0
600178ca:	f7f2 f97b 	bl	60009bc4 <usb_enable>
	return 0;
}
600178ce:	2000      	movs	r0, #0
600178d0:	bd08      	pop	{r3, pc}

600178d2 <cbpprintf_external>:
{
600178d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600178d6:	4606      	mov	r6, r0
600178d8:	460d      	mov	r5, r1
600178da:	4617      	mov	r7, r2
	if (buf == NULL) {
600178dc:	4698      	mov	r8, r3
600178de:	b32b      	cbz	r3, 6001792c <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
600178e0:	f898 4000 	ldrb.w	r4, [r8]
	for (i = 0; i < s_nbr; i++) {
600178e4:	f04f 0a00 	mov.w	sl, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
600178e8:	f893 9001 	ldrb.w	r9, [r3, #1]
	args_size = hdr->hdr.desc.len * sizeof(int);
600178ec:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
600178ee:	78db      	ldrb	r3, [r3, #3]
600178f0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
600178f4:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
600178f8:	441c      	add	r4, r3
600178fa:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
600178fc:	45ca      	cmp	sl, r9
600178fe:	d309      	bcc.n	60017914 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
60017900:	f108 0308 	add.w	r3, r8, #8
60017904:	f8d8 2004 	ldr.w	r2, [r8, #4]
60017908:	4639      	mov	r1, r7
6001790a:	4630      	mov	r0, r6
6001790c:	46ac      	mov	ip, r5
}
6001790e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
60017912:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
60017914:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
60017918:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
6001791c:	4620      	mov	r0, r4
		*ps = s;
6001791e:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
60017922:	f7ea fccd 	bl	600022c0 <strlen>
60017926:	3001      	adds	r0, #1
60017928:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
6001792a:	e7e7      	b.n	600178fc <cbpprintf_external+0x2a>
}
6001792c:	f06f 0015 	mvn.w	r0, #21
60017930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

60017934 <is_ptr>:
{
60017934:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
60017936:	2500      	movs	r5, #0
{
60017938:	4602      	mov	r2, r0
	bool mod = false;
6001793a:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
6001793c:	4614      	mov	r4, r2
6001793e:	f814 3b01 	ldrb.w	r3, [r4], #1
60017942:	b90b      	cbnz	r3, 60017948 <is_ptr+0x14>
					return false;
60017944:	4618      	mov	r0, r3
60017946:	e009      	b.n	6001795c <is_ptr+0x28>
		if (mod) {
60017948:	b198      	cbz	r0, 60017972 <is_ptr+0x3e>
			if (cnt == n) {
6001794a:	428d      	cmp	r5, r1
6001794c:	d107      	bne.n	6001795e <is_ptr+0x2a>
				if (c == 'p') {
6001794e:	2b70      	cmp	r3, #112	; 0x70
60017950:	d004      	beq.n	6001795c <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
60017952:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
60017956:	2a3a      	cmp	r2, #58	; 0x3a
60017958:	d80b      	bhi.n	60017972 <is_ptr+0x3e>
					return false;
6001795a:	2000      	movs	r0, #0
}
6001795c:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
6001795e:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
60017962:	2e3a      	cmp	r6, #58	; 0x3a
60017964:	d805      	bhi.n	60017972 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
60017966:	7853      	ldrb	r3, [r2, #1]
				cnt++;
60017968:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
6001796a:	1c94      	adds	r4, r2, #2
6001796c:	2b00      	cmp	r3, #0
6001796e:	d0e9      	beq.n	60017944 <is_ptr+0x10>
60017970:	2000      	movs	r0, #0
		if (c == '%') {
60017972:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
60017974:	4622      	mov	r2, r4
			mod = !mod;
60017976:	bf08      	it	eq
60017978:	f080 0001 	eoreq.w	r0, r0, #1
6001797c:	e7de      	b.n	6001793c <is_ptr+0x8>

6001797e <arch_printk_char_out>:
}
6001797e:	2000      	movs	r0, #0
60017980:	4770      	bx	lr

60017982 <str_out>:
{
60017982:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
60017984:	688a      	ldr	r2, [r1, #8]
60017986:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
60017988:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
6001798a:	b114      	cbz	r4, 60017992 <str_out+0x10>
6001798c:	684b      	ldr	r3, [r1, #4]
6001798e:	4293      	cmp	r3, r2
60017990:	dc01      	bgt.n	60017996 <str_out+0x14>
		ctx->count++;
60017992:	608d      	str	r5, [r1, #8]
}
60017994:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
60017996:	3b01      	subs	r3, #1
		ctx->str[ctx->count++] = '\0';
60017998:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
6001799a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
6001799c:	bf0a      	itet	eq
6001799e:	2200      	moveq	r2, #0
		ctx->str[ctx->count++] = c;
600179a0:	54a0      	strbne	r0, [r4, r2]
		ctx->str[ctx->count++] = '\0';
600179a2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
600179a4:	e7f6      	b.n	60017994 <str_out+0x12>

600179a6 <vprintk>:
		z_log_vprintk(fmt, ap);
600179a6:	f000 bbeb 	b.w	60018180 <z_log_vprintk>

600179aa <printk>:
{
600179aa:	b40f      	push	{r0, r1, r2, r3}
600179ac:	b507      	push	{r0, r1, r2, lr}
600179ae:	a904      	add	r1, sp, #16
600179b0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
600179b4:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
600179b6:	f000 fbe3 	bl	60018180 <z_log_vprintk>
}
600179ba:	b003      	add	sp, #12
600179bc:	f85d eb04 	ldr.w	lr, [sp], #4
600179c0:	b004      	add	sp, #16
600179c2:	4770      	bx	lr

600179c4 <snprintk>:
{
600179c4:	b40c      	push	{r2, r3}
600179c6:	b507      	push	{r0, r1, r2, lr}
600179c8:	ab04      	add	r3, sp, #16
600179ca:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
600179ce:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
600179d0:	f7ef f962 	bl	60006c98 <vsnprintk>
}
600179d4:	b003      	add	sp, #12
600179d6:	f85d eb04 	ldr.w	lr, [sp], #4
600179da:	b002      	add	sp, #8
600179dc:	4770      	bx	lr

600179de <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
600179de:	4604      	mov	r4, r0
600179e0:	4608      	mov	r0, r1
600179e2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
600179e4:	461a      	mov	r2, r3
{
600179e6:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
600179e8:	47a0      	blx	r4
	return z_impl_z_current_get();
600179ea:	f7fa f97f 	bl	60011cec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
600179ee:	f7f3 fc13 	bl	6000b218 <z_impl_k_thread_abort>

600179f2 <chunk_field>:
	if (big_heap(h)) {
600179f2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
600179f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
600179f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
600179fc:	bf2c      	ite	cs
600179fe:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
60017a02:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
60017a06:	4770      	bx	lr

60017a08 <chunk_set>:
	void *cmem = &buf[c];
60017a08:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
60017a0c:	6880      	ldr	r0, [r0, #8]
60017a0e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
60017a12:	bf2c      	ite	cs
60017a14:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
60017a18:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
60017a1c:	4770      	bx	lr

60017a1e <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
60017a1e:	2201      	movs	r2, #1
{
60017a20:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
60017a22:	f7ff ffe6 	bl	600179f2 <chunk_field>
}
60017a26:	40d0      	lsrs	r0, r2
60017a28:	bd08      	pop	{r3, pc}

60017a2a <set_chunk_used>:
	if (big_heap(h)) {
60017a2a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
60017a2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
60017a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
60017a34:	d308      	bcc.n	60017a48 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
60017a36:	684b      	ldr	r3, [r1, #4]
		if (used) {
60017a38:	b11a      	cbz	r2, 60017a42 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
60017a3a:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
60017a3e:	604b      	str	r3, [r1, #4]
60017a40:	4770      	bx	lr
60017a42:	f023 0301 	bic.w	r3, r3, #1
60017a46:	e7fa      	b.n	60017a3e <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
60017a48:	884b      	ldrh	r3, [r1, #2]
		if (used) {
60017a4a:	b11a      	cbz	r2, 60017a54 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
60017a4c:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
60017a50:	804b      	strh	r3, [r1, #2]
}
60017a52:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
60017a54:	f023 0301 	bic.w	r3, r3, #1
60017a58:	e7fa      	b.n	60017a50 <set_chunk_used+0x26>

60017a5a <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
60017a5a:	0053      	lsls	r3, r2, #1
60017a5c:	2201      	movs	r2, #1
60017a5e:	f7ff bfd3 	b.w	60017a08 <chunk_set>

60017a62 <mem_to_chunkid>:
	return big_heap(h) ? 8 : 4;
60017a62:	6883      	ldr	r3, [r0, #8]
60017a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
60017a68:	bf34      	ite	cc
60017a6a:	2304      	movcc	r3, #4
60017a6c:	2308      	movcs	r3, #8
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
60017a6e:	1ac9      	subs	r1, r1, r3
60017a70:	1a08      	subs	r0, r1, r0
}
60017a72:	08c0      	lsrs	r0, r0, #3
60017a74:	4770      	bx	lr

60017a76 <bytes_to_chunksz.isra.0>:
60017a76:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
60017a7a:	f101 0107 	add.w	r1, r1, #7
	return big_heap(h) ? 8 : 4;
60017a7e:	bf34      	ite	cc
60017a80:	2304      	movcc	r3, #4
60017a82:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
60017a84:	18c8      	adds	r0, r1, r3
}
60017a86:	08c0      	lsrs	r0, r0, #3
60017a88:	4770      	bx	lr

60017a8a <bucket_idx.isra.0>:
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
60017a8a:	460a      	mov	r2, r1
	return bytes_to_chunksz(h, 1);
60017a8c:	2101      	movs	r1, #1
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
60017a8e:	3201      	adds	r2, #1
static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
60017a90:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
60017a92:	f7ff fff0 	bl	60017a76 <bytes_to_chunksz.isra.0>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
60017a96:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
60017a98:	fab2 f082 	clz	r0, r2
}
60017a9c:	f1c0 001f 	rsb	r0, r0, #31
60017aa0:	bd08      	pop	{r3, pc}

60017aa2 <free_list_remove_bidx>:
{
60017aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60017aa6:	460e      	mov	r6, r1
60017aa8:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
60017aaa:	2203      	movs	r2, #3
60017aac:	4604      	mov	r4, r0
60017aae:	f7ff ffa0 	bl	600179f2 <chunk_field>
	if (next_free_chunk(h, c) == c) {
60017ab2:	4286      	cmp	r6, r0
60017ab4:	4605      	mov	r5, r0
60017ab6:	f107 0804 	add.w	r8, r7, #4
60017aba:	d10a      	bne.n	60017ad2 <free_list_remove_bidx+0x30>
		h->avail_buckets &= ~BIT(bidx);
60017abc:	2201      	movs	r2, #1
60017abe:	68e3      	ldr	r3, [r4, #12]
60017ac0:	40ba      	lsls	r2, r7
60017ac2:	ea23 0302 	bic.w	r3, r3, r2
60017ac6:	60e3      	str	r3, [r4, #12]
		b->next = 0;
60017ac8:	2300      	movs	r3, #0
60017aca:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
60017ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
60017ad2:	4631      	mov	r1, r6
60017ad4:	2202      	movs	r2, #2
60017ad6:	4620      	mov	r0, r4
60017ad8:	f7ff ff8b 	bl	600179f2 <chunk_field>
60017adc:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
60017ade:	462b      	mov	r3, r5
60017ae0:	4601      	mov	r1, r0
60017ae2:	2203      	movs	r2, #3
60017ae4:	4620      	mov	r0, r4
		b->next = second;
60017ae6:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
60017aea:	f7ff ff8d 	bl	60017a08 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
60017aee:	4633      	mov	r3, r6
60017af0:	4629      	mov	r1, r5
60017af2:	4620      	mov	r0, r4
60017af4:	2202      	movs	r2, #2
}
60017af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
60017afa:	f7ff bf85 	b.w	60017a08 <chunk_set>

60017afe <free_list_remove>:
{
60017afe:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
60017b00:	6886      	ldr	r6, [r0, #8]
60017b02:	460d      	mov	r5, r1
60017b04:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
60017b06:	f7ff ff8a 	bl	60017a1e <chunk_size>
60017b0a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
60017b0e:	4601      	mov	r1, r0
60017b10:	d301      	bcc.n	60017b16 <free_list_remove+0x18>
60017b12:	2801      	cmp	r0, #1
60017b14:	d009      	beq.n	60017b2a <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
60017b16:	4630      	mov	r0, r6
60017b18:	f7ff ffb7 	bl	60017a8a <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
60017b1c:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
60017b1e:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
60017b20:	4620      	mov	r0, r4
}
60017b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
60017b26:	f7ff bfbc 	b.w	60017aa2 <free_list_remove_bidx>
}
60017b2a:	bd70      	pop	{r4, r5, r6, pc}

60017b2c <alloc_chunk>:
{
60017b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60017b30:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
60017b32:	6880      	ldr	r0, [r0, #8]
{
60017b34:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
60017b36:	f7ff ffa8 	bl	60017a8a <bucket_idx.isra.0>
60017b3a:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
60017b3e:	4606      	mov	r6, r0
	if (b->next) {
60017b40:	f8da 9010 	ldr.w	r9, [sl, #16]
60017b44:	f1b9 0f00 	cmp.w	r9, #0
60017b48:	d01b      	beq.n	60017b82 <alloc_chunk+0x56>
60017b4a:	2703      	movs	r7, #3
			chunkid_t c = b->next;
60017b4c:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
60017b50:	4628      	mov	r0, r5
60017b52:	4621      	mov	r1, r4
60017b54:	f7ff ff63 	bl	60017a1e <chunk_size>
60017b58:	4540      	cmp	r0, r8
60017b5a:	d307      	bcc.n	60017b6c <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
60017b5c:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
60017b5e:	4621      	mov	r1, r4
60017b60:	4628      	mov	r0, r5
60017b62:	f7ff ff9e 	bl	60017aa2 <free_list_remove_bidx>
}
60017b66:	4620      	mov	r0, r4
60017b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
60017b6c:	2203      	movs	r2, #3
60017b6e:	4621      	mov	r1, r4
60017b70:	4628      	mov	r0, r5
60017b72:	f7ff ff3e 	bl	600179f2 <chunk_field>
		} while (--i && b->next != first);
60017b76:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
60017b78:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
60017b7c:	d001      	beq.n	60017b82 <alloc_chunk+0x56>
60017b7e:	4581      	cmp	r9, r0
60017b80:	d1e4      	bne.n	60017b4c <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
60017b82:	3601      	adds	r6, #1
60017b84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
60017b88:	68eb      	ldr	r3, [r5, #12]
60017b8a:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
60017b8c:	401c      	ands	r4, r3
60017b8e:	d0ea      	beq.n	60017b66 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
60017b90:	fa94 f2a4 	rbit	r2, r4
60017b94:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
60017b98:	1d13      	adds	r3, r2, #4
60017b9a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
60017b9e:	e7de      	b.n	60017b5e <alloc_chunk+0x32>

60017ba0 <split_chunks>:
{
60017ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60017ba4:	4614      	mov	r4, r2
60017ba6:	460e      	mov	r6, r1
60017ba8:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
60017baa:	f7ff ff38 	bl	60017a1e <chunk_size>
	chunksz_t rsz = sz0 - lsz;
60017bae:	1b37      	subs	r7, r6, r4
	chunksz_t lsz = rc - lc;
60017bb0:	eba4 0806 	sub.w	r8, r4, r6
	set_chunk_size(h, lc, lsz);
60017bb4:	4631      	mov	r1, r6
	chunksz_t rsz = sz0 - lsz;
60017bb6:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
60017bb8:	4642      	mov	r2, r8
60017bba:	4628      	mov	r0, r5
60017bbc:	f7ff ff4d 	bl	60017a5a <set_chunk_size>
	set_chunk_size(h, rc, rsz);
60017bc0:	463a      	mov	r2, r7
60017bc2:	4621      	mov	r1, r4
60017bc4:	4628      	mov	r0, r5
60017bc6:	f7ff ff48 	bl	60017a5a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
60017bca:	4643      	mov	r3, r8
60017bcc:	2200      	movs	r2, #0
60017bce:	4621      	mov	r1, r4
60017bd0:	4628      	mov	r0, r5
60017bd2:	f7ff ff19 	bl	60017a08 <chunk_set>
	return c + chunk_size(h, c);
60017bd6:	4621      	mov	r1, r4
60017bd8:	4628      	mov	r0, r5
60017bda:	f7ff ff20 	bl	60017a1e <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
60017bde:	463b      	mov	r3, r7
60017be0:	1821      	adds	r1, r4, r0
60017be2:	2200      	movs	r2, #0
60017be4:	4628      	mov	r0, r5
}
60017be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
60017bea:	f7ff bf0d 	b.w	60017a08 <chunk_set>

60017bee <merge_chunks>:
{
60017bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60017bf2:	4616      	mov	r6, r2
60017bf4:	4604      	mov	r4, r0
60017bf6:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
60017bf8:	f7ff ff11 	bl	60017a1e <chunk_size>
60017bfc:	4605      	mov	r5, r0
60017bfe:	4631      	mov	r1, r6
60017c00:	4620      	mov	r0, r4
60017c02:	f7ff ff0c 	bl	60017a1e <chunk_size>
60017c06:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
60017c08:	4639      	mov	r1, r7
60017c0a:	4620      	mov	r0, r4
60017c0c:	462a      	mov	r2, r5
60017c0e:	f7ff ff24 	bl	60017a5a <set_chunk_size>
	return c + chunk_size(h, c);
60017c12:	4631      	mov	r1, r6
60017c14:	4620      	mov	r0, r4
60017c16:	f7ff ff02 	bl	60017a1e <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
60017c1a:	462b      	mov	r3, r5
60017c1c:	1831      	adds	r1, r6, r0
60017c1e:	2200      	movs	r2, #0
60017c20:	4620      	mov	r0, r4
}
60017c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
60017c26:	f7ff beef 	b.w	60017a08 <chunk_set>

60017c2a <free_list_add>:
{
60017c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
60017c2e:	6886      	ldr	r6, [r0, #8]
60017c30:	460d      	mov	r5, r1
60017c32:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
60017c34:	f7ff fef3 	bl	60017a1e <chunk_size>
60017c38:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
60017c3c:	4601      	mov	r1, r0
60017c3e:	d301      	bcc.n	60017c44 <free_list_add+0x1a>
60017c40:	2801      	cmp	r0, #1
60017c42:	d032      	beq.n	60017caa <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
60017c44:	4630      	mov	r0, r6
60017c46:	f7ff ff20 	bl	60017a8a <bucket_idx.isra.0>
	if (b->next == 0U) {
60017c4a:	eb04 0180 	add.w	r1, r4, r0, lsl #2
60017c4e:	690e      	ldr	r6, [r1, #16]
60017c50:	b996      	cbnz	r6, 60017c78 <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
60017c52:	2201      	movs	r2, #1
60017c54:	68e3      	ldr	r3, [r4, #12]
60017c56:	4082      	lsls	r2, r0
	chunk_set(h, c, FREE_PREV, prev);
60017c58:	4620      	mov	r0, r4
60017c5a:	4313      	orrs	r3, r2
60017c5c:	2202      	movs	r2, #2
60017c5e:	60e3      	str	r3, [r4, #12]
60017c60:	462b      	mov	r3, r5
		b->next = c;
60017c62:	610d      	str	r5, [r1, #16]
60017c64:	4629      	mov	r1, r5
60017c66:	f7ff fecf 	bl	60017a08 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
60017c6a:	2203      	movs	r2, #3
60017c6c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
60017c6e:	4620      	mov	r0, r4
}
60017c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
60017c74:	f7ff bec8 	b.w	60017a08 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
60017c78:	2202      	movs	r2, #2
60017c7a:	4631      	mov	r1, r6
60017c7c:	4620      	mov	r0, r4
60017c7e:	f7ff feb8 	bl	600179f2 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
60017c82:	4629      	mov	r1, r5
60017c84:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
60017c86:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
60017c88:	4620      	mov	r0, r4
60017c8a:	f7ff febd 	bl	60017a08 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
60017c8e:	2203      	movs	r2, #3
60017c90:	4633      	mov	r3, r6
60017c92:	4629      	mov	r1, r5
60017c94:	4620      	mov	r0, r4
60017c96:	f7ff feb7 	bl	60017a08 <chunk_set>
60017c9a:	4639      	mov	r1, r7
60017c9c:	462b      	mov	r3, r5
60017c9e:	4620      	mov	r0, r4
60017ca0:	f7ff feb2 	bl	60017a08 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
60017ca4:	2202      	movs	r2, #2
60017ca6:	4631      	mov	r1, r6
60017ca8:	e7e1      	b.n	60017c6e <free_list_add+0x44>
60017caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

60017cae <free_chunk>:
{
60017cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60017cb0:	460c      	mov	r4, r1
60017cb2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
60017cb4:	f7ff feb3 	bl	60017a1e <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
60017cb8:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
60017cba:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
60017cbc:	4628      	mov	r0, r5
60017cbe:	4631      	mov	r1, r6
60017cc0:	f7ff fe97 	bl	600179f2 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
60017cc4:	07c3      	lsls	r3, r0, #31
60017cc6:	d40c      	bmi.n	60017ce2 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
60017cc8:	4631      	mov	r1, r6
60017cca:	4628      	mov	r0, r5
60017ccc:	f7ff ff17 	bl	60017afe <free_list_remove>
	return c + chunk_size(h, c);
60017cd0:	4621      	mov	r1, r4
60017cd2:	4628      	mov	r0, r5
60017cd4:	f7ff fea3 	bl	60017a1e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
60017cd8:	4621      	mov	r1, r4
60017cda:	1822      	adds	r2, r4, r0
60017cdc:	4628      	mov	r0, r5
60017cde:	f7ff ff86 	bl	60017bee <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
60017ce2:	2200      	movs	r2, #0
60017ce4:	4621      	mov	r1, r4
60017ce6:	4628      	mov	r0, r5
60017ce8:	f7ff fe83 	bl	600179f2 <chunk_field>
60017cec:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
60017cee:	2201      	movs	r2, #1
60017cf0:	4628      	mov	r0, r5
60017cf2:	4639      	mov	r1, r7
60017cf4:	f7ff fe7d 	bl	600179f2 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
60017cf8:	ea10 0602 	ands.w	r6, r0, r2
60017cfc:	d113      	bne.n	60017d26 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
60017cfe:	4639      	mov	r1, r7
60017d00:	4628      	mov	r0, r5
60017d02:	f7ff fefc 	bl	60017afe <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
60017d06:	4621      	mov	r1, r4
60017d08:	4632      	mov	r2, r6
60017d0a:	4628      	mov	r0, r5
60017d0c:	f7ff fe71 	bl	600179f2 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
60017d10:	4622      	mov	r2, r4
60017d12:	1a21      	subs	r1, r4, r0
60017d14:	4628      	mov	r0, r5
60017d16:	f7ff ff6a 	bl	60017bee <merge_chunks>
60017d1a:	4621      	mov	r1, r4
60017d1c:	4632      	mov	r2, r6
60017d1e:	4628      	mov	r0, r5
60017d20:	f7ff fe67 	bl	600179f2 <chunk_field>
60017d24:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
60017d26:	4621      	mov	r1, r4
60017d28:	4628      	mov	r0, r5
}
60017d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
60017d2e:	f7ff bf7c 	b.w	60017c2a <free_list_add>

60017d32 <sys_heap_alloc>:
{
60017d32:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
60017d34:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
60017d36:	b909      	cbnz	r1, 60017d3c <sys_heap_alloc+0xa>
		return NULL;
60017d38:	2000      	movs	r0, #0
}
60017d3a:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
60017d3c:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
60017d3e:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
60017d42:	d9f9      	bls.n	60017d38 <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
60017d44:	f7ff fe97 	bl	60017a76 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
60017d48:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
60017d4a:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
60017d4c:	4630      	mov	r0, r6
60017d4e:	f7ff feed 	bl	60017b2c <alloc_chunk>
	if (c == 0U) {
60017d52:	4604      	mov	r4, r0
60017d54:	2800      	cmp	r0, #0
60017d56:	d0ef      	beq.n	60017d38 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
60017d58:	4601      	mov	r1, r0
60017d5a:	4630      	mov	r0, r6
60017d5c:	f7ff fe5f 	bl	60017a1e <chunk_size>
60017d60:	42a8      	cmp	r0, r5
60017d62:	d909      	bls.n	60017d78 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
60017d64:	4425      	add	r5, r4
60017d66:	4621      	mov	r1, r4
60017d68:	4630      	mov	r0, r6
60017d6a:	462a      	mov	r2, r5
60017d6c:	f7ff ff18 	bl	60017ba0 <split_chunks>
		free_list_add(h, c + chunk_sz);
60017d70:	4629      	mov	r1, r5
60017d72:	4630      	mov	r0, r6
60017d74:	f7ff ff59 	bl	60017c2a <free_list_add>
	set_chunk_used(h, c, true);
60017d78:	4630      	mov	r0, r6
60017d7a:	2201      	movs	r2, #1
60017d7c:	4621      	mov	r1, r4
60017d7e:	f7ff fe54 	bl	60017a2a <set_chunk_used>
	return big_heap(h) ? 8 : 4;
60017d82:	68b3      	ldr	r3, [r6, #8]
60017d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
60017d88:	bf34      	ite	cc
60017d8a:	2304      	movcc	r3, #4
60017d8c:	2308      	movcs	r3, #8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
60017d8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
60017d92:	4418      	add	r0, r3
	return mem;
60017d94:	e7d1      	b.n	60017d3a <sys_heap_alloc+0x8>

60017d96 <_ldiv5>:
	uint32_t v_lo = *v;
60017d96:	e9d0 2100 	ldrd	r2, r1, [r0]
{
60017d9a:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
60017d9c:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
60017da0:	fba2 2403 	umull	r2, r4, r2, r3
60017da4:	18d5      	adds	r5, r2, r3
60017da6:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
60017daa:	fba1 1303 	umull	r1, r3, r1, r3
60017dae:	1852      	adds	r2, r2, r1
60017db0:	eb44 0403 	adc.w	r4, r4, r3
60017db4:	1952      	adds	r2, r2, r5
60017db6:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
60017dba:	1889      	adds	r1, r1, r2
60017dbc:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
60017dc0:	e9c0 1300 	strd	r1, r3, [r0]
}
60017dc4:	bd30      	pop	{r4, r5, pc}

60017dc6 <_get_digit>:
{
60017dc6:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
60017dc8:	680a      	ldr	r2, [r1, #0]
{
60017dca:	4603      	mov	r3, r0
	if (*digit_count > 0) {
60017dcc:	2a00      	cmp	r2, #0
60017dce:	dd0f      	ble.n	60017df0 <_get_digit+0x2a>
		--*digit_count;
60017dd0:	3a01      	subs	r2, #1
60017dd2:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
60017dd4:	6844      	ldr	r4, [r0, #4]
60017dd6:	200a      	movs	r0, #10
60017dd8:	681a      	ldr	r2, [r3, #0]
60017dda:	fba2 1200 	umull	r1, r2, r2, r0
60017dde:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
60017de2:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
60017de4:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
		rval = ((*fr >> 60) & 0xF) + '0';
60017de8:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
60017dea:	e9c3 1200 	strd	r1, r2, [r3]
}
60017dee:	bd10      	pop	{r4, pc}
		rval = '0';
60017df0:	2030      	movs	r0, #48	; 0x30
60017df2:	e7fc      	b.n	60017dee <_get_digit+0x28>

60017df4 <outs>:
{
60017df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60017df8:	4607      	mov	r7, r0
60017dfa:	4688      	mov	r8, r1
60017dfc:	4615      	mov	r5, r2
60017dfe:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
60017e00:	4614      	mov	r4, r2
60017e02:	42b4      	cmp	r4, r6
60017e04:	d305      	bcc.n	60017e12 <outs+0x1e>
60017e06:	b10e      	cbz	r6, 60017e0c <outs+0x18>
	return (int)count;
60017e08:	1b60      	subs	r0, r4, r5
60017e0a:	e008      	b.n	60017e1e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
60017e0c:	7823      	ldrb	r3, [r4, #0]
60017e0e:	2b00      	cmp	r3, #0
60017e10:	d0fa      	beq.n	60017e08 <outs+0x14>
		int rc = out((int)*sp++, ctx);
60017e12:	4641      	mov	r1, r8
60017e14:	f814 0b01 	ldrb.w	r0, [r4], #1
60017e18:	47b8      	blx	r7
		if (rc < 0) {
60017e1a:	2800      	cmp	r0, #0
60017e1c:	daf1      	bge.n	60017e02 <outs+0xe>
}
60017e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

60017e22 <ring_buf_put_claim>:
{
60017e22:	b5f0      	push	{r4, r5, r6, r7, lr}
60017e24:	4604      	mov	r4, r0
	if (unlikely(wrap_size >= buf->size)) {
60017e26:	69c3      	ldr	r3, [r0, #28]
	base = buf->put_base;
60017e28:	68c6      	ldr	r6, [r0, #12]
{
60017e2a:	4694      	mov	ip, r2
	wrap_size = buf->put_head - base;
60017e2c:	6845      	ldr	r5, [r0, #4]
60017e2e:	6940      	ldr	r0, [r0, #20]
60017e30:	1baf      	subs	r7, r5, r6
60017e32:	1a28      	subs	r0, r5, r0
	if (unlikely(wrap_size >= buf->size)) {
60017e34:	42bb      	cmp	r3, r7
60017e36:	eba3 0200 	sub.w	r2, r3, r0
		wrap_size -= buf->size;
60017e3a:	bf9c      	itt	ls
60017e3c:	1aff      	subls	r7, r7, r3
		base += buf->size;
60017e3e:	18f6      	addls	r6, r6, r3
	size = MIN(size, free_space);
60017e40:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
60017e42:	eba3 0007 	sub.w	r0, r3, r7
	*data = &buf->buffer[buf->put_head - base];
60017e46:	eba5 0506 	sub.w	r5, r5, r6
	size = MIN(size, free_space);
60017e4a:	bf28      	it	cs
60017e4c:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
60017e4e:	6823      	ldr	r3, [r4, #0]
	size = MIN(size, wrap_size);
60017e50:	4290      	cmp	r0, r2
	*data = &buf->buffer[buf->put_head - base];
60017e52:	442b      	add	r3, r5
	size = MIN(size, wrap_size);
60017e54:	bf28      	it	cs
60017e56:	4610      	movcs	r0, r2
	*data = &buf->buffer[buf->put_head - base];
60017e58:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
60017e5a:	6863      	ldr	r3, [r4, #4]
60017e5c:	4403      	add	r3, r0
60017e5e:	6063      	str	r3, [r4, #4]
}
60017e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

60017e62 <ring_buf_put_finish>:
	finish_space = buf->put_head - buf->put_tail;
60017e62:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
60017e66:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
60017e68:	428a      	cmp	r2, r1
60017e6a:	d30c      	bcc.n	60017e86 <ring_buf_put_finish+0x24>
	buf->put_tail += size;
60017e6c:	4419      	add	r1, r3
	wrap_size = buf->put_tail - buf->put_base;
60017e6e:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
60017e70:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
60017e72:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
60017e76:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
60017e78:	428a      	cmp	r2, r1
60017e7a:	d901      	bls.n	60017e80 <ring_buf_put_finish+0x1e>
	return 0;
60017e7c:	2000      	movs	r0, #0
60017e7e:	4770      	bx	lr
		buf->put_base += buf->size;
60017e80:	4413      	add	r3, r2
60017e82:	60c3      	str	r3, [r0, #12]
60017e84:	e7fa      	b.n	60017e7c <ring_buf_put_finish+0x1a>
		return -EINVAL;
60017e86:	f06f 0015 	mvn.w	r0, #21
}
60017e8a:	4770      	bx	lr

60017e8c <ring_buf_get_claim>:
{
60017e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
60017e8e:	4604      	mov	r4, r0
	base = buf->get_base;
60017e90:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
60017e92:	6905      	ldr	r5, [r0, #16]
{
60017e94:	4694      	mov	ip, r2
	if (unlikely(wrap_size >= buf->size)) {
60017e96:	69c0      	ldr	r0, [r0, #28]
	wrap_size = buf->get_head - base;
60017e98:	1baf      	subs	r7, r5, r6
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
60017e9a:	68a3      	ldr	r3, [r4, #8]
	if (unlikely(wrap_size >= buf->size)) {
60017e9c:	42b8      	cmp	r0, r7
60017e9e:	eba3 0205 	sub.w	r2, r3, r5
	*data = &buf->buffer[buf->get_head - base];
60017ea2:	6823      	ldr	r3, [r4, #0]
		base += buf->size;
60017ea4:	bf9c      	itt	ls
60017ea6:	1836      	addls	r6, r6, r0
		wrap_size -= buf->size;
60017ea8:	1a3f      	subls	r7, r7, r0
	size = MIN(size, available_size);
60017eaa:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
60017eac:	eba0 0007 	sub.w	r0, r0, r7
	*data = &buf->buffer[buf->get_head - base];
60017eb0:	eba5 0506 	sub.w	r5, r5, r6
	size = MIN(size, available_size);
60017eb4:	bf28      	it	cs
60017eb6:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
60017eb8:	442b      	add	r3, r5
	size = MIN(size, wrap_size);
60017eba:	4290      	cmp	r0, r2
	*data = &buf->buffer[buf->get_head - base];
60017ebc:	600b      	str	r3, [r1, #0]
	size = MIN(size, wrap_size);
60017ebe:	bf28      	it	cs
60017ec0:	4610      	movcs	r0, r2
	buf->get_head += size;
60017ec2:	6923      	ldr	r3, [r4, #16]
60017ec4:	4403      	add	r3, r0
60017ec6:	6123      	str	r3, [r4, #16]
}
60017ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

60017eca <ring_buf_get_finish>:
	finish_space = buf->get_head - buf->get_tail;
60017eca:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
60017ece:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
60017ed0:	428a      	cmp	r2, r1
60017ed2:	d30c      	bcc.n	60017eee <ring_buf_get_finish+0x24>
	buf->get_tail += size;
60017ed4:	4419      	add	r1, r3
	if (unlikely(wrap_size >= buf->size)) {
60017ed6:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
60017eda:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
60017ede:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
60017ee0:	428a      	cmp	r2, r1
60017ee2:	d901      	bls.n	60017ee8 <ring_buf_get_finish+0x1e>
	return 0;
60017ee4:	2000      	movs	r0, #0
60017ee6:	4770      	bx	lr
		buf->get_base += buf->size;
60017ee8:	4413      	add	r3, r2
60017eea:	6183      	str	r3, [r0, #24]
60017eec:	e7fa      	b.n	60017ee4 <ring_buf_get_finish+0x1a>
		return -EINVAL;
60017eee:	f06f 0015 	mvn.w	r0, #21
}
60017ef2:	4770      	bx	lr

60017ef4 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
60017ef4:	4040      	eors	r0, r0
60017ef6:	f380 8811 	msr	BASEPRI, r0
60017efa:	f04f 0004 	mov.w	r0, #4
60017efe:	df02      	svc	2
}
60017f00:	4770      	bx	lr

60017f02 <assert_print>:

void assert_print(const char *fmt, ...)
{
60017f02:	b40f      	push	{r0, r1, r2, r3}
60017f04:	b507      	push	{r0, r1, r2, lr}
60017f06:	a904      	add	r1, sp, #16
60017f08:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
60017f0c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
60017f0e:	f7ff fd4a 	bl	600179a6 <vprintk>

	va_end(ap);
}
60017f12:	b003      	add	sp, #12
60017f14:	f85d eb04 	ldr.w	lr, [sp], #4
60017f18:	b004      	add	sp, #16
60017f1a:	4770      	bx	lr

60017f1c <free_space>:
{
60017f1c:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
60017f1e:	6903      	ldr	r3, [r0, #16]
{
60017f20:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
60017f22:	f013 0008 	ands.w	r0, r3, #8
60017f26:	d109      	bne.n	60017f3c <free_space+0x20>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
60017f28:	6813      	ldr	r3, [r2, #0]
60017f2a:	68d4      	ldr	r4, [r2, #12]
60017f2c:	429c      	cmp	r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
60017f2e:	bf97      	itett	ls
60017f30:	6a52      	ldrls	r2, [r2, #36]	; 0x24
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
60017f32:	1ae3      	subhi	r3, r4, r3
	return true;
60017f34:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
60017f36:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
60017f38:	600b      	str	r3, [r1, #0]
}
60017f3a:	bd10      	pop	{r4, pc}
60017f3c:	2300      	movs	r3, #0
		return false;
60017f3e:	4618      	mov	r0, r3
60017f40:	e7fa      	b.n	60017f38 <free_space+0x1c>

60017f42 <get_usage>:
{
60017f42:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
60017f44:	a901      	add	r1, sp, #4
{
60017f46:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
60017f48:	f7ff ffe8 	bl	60017f1c <free_space>
60017f4c:	b120      	cbz	r0, 60017f58 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
60017f4e:	9b01      	ldr	r3, [sp, #4]
60017f50:	68e2      	ldr	r2, [r4, #12]
60017f52:	3b01      	subs	r3, #1
60017f54:	4413      	add	r3, r2
60017f56:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
60017f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
60017f5a:	9b01      	ldr	r3, [sp, #4]
60017f5c:	1ac0      	subs	r0, r0, r3
}
60017f5e:	3801      	subs	r0, #1
60017f60:	b002      	add	sp, #8
60017f62:	bd10      	pop	{r4, pc}

60017f64 <idx_inc>:
{
60017f64:	b510      	push	{r4, lr}
60017f66:	4604      	mov	r4, r0
	uint32_t i = idx + val;
60017f68:	1850      	adds	r0, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
60017f6a:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
60017f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
60017f6e:	07d2      	lsls	r2, r2, #31
60017f70:	d502      	bpl.n	60017f78 <idx_inc+0x14>
		return i & (buffer->size - 1);
60017f72:	3b01      	subs	r3, #1
60017f74:	4018      	ands	r0, r3
}
60017f76:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
60017f78:	4298      	cmp	r0, r3
60017f7a:	bf28      	it	cs
60017f7c:	1ac0      	subcs	r0, r0, r3
60017f7e:	e7fa      	b.n	60017f76 <idx_inc+0x12>

60017f80 <rd_idx_inc>:
{
60017f80:	b510      	push	{r4, lr}
60017f82:	4604      	mov	r4, r0
60017f84:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
60017f86:	68c1      	ldr	r1, [r0, #12]
60017f88:	f7ff ffec 	bl	60017f64 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
60017f8c:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
60017f8e:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
60017f90:	f023 0308 	bic.w	r3, r3, #8
60017f94:	6123      	str	r3, [r4, #16]
}
60017f96:	bd10      	pop	{r4, pc}

60017f98 <add_skip_item>:
{
60017f98:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
60017f9a:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
60017f9c:	6a02      	ldr	r2, [r0, #32]
{
60017f9e:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
60017fa0:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
60017fa2:	f043 0302 	orr.w	r3, r3, #2
{
60017fa6:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
60017fa8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60017fac:	462a      	mov	r2, r5
60017fae:	6801      	ldr	r1, [r0, #0]
60017fb0:	f7ff ffd8 	bl	60017f64 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60017fb4:	68e3      	ldr	r3, [r4, #12]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
60017fb6:	6861      	ldr	r1, [r4, #4]
60017fb8:	462a      	mov	r2, r5
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60017fba:	4298      	cmp	r0, r3
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60017fbc:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
60017fbe:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
60017fc0:	bf02      	ittt	eq
60017fc2:	6923      	ldreq	r3, [r4, #16]
60017fc4:	f043 0308 	orreq.w	r3, r3, #8
60017fc8:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
60017fca:	f7ff ffcb 	bl	60017f64 <idx_inc>
60017fce:	6060      	str	r0, [r4, #4]
}
60017fd0:	bd38      	pop	{r3, r4, r5, pc}

60017fd2 <drop_item_locked>:
{
60017fd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
60017fd6:	68c7      	ldr	r7, [r0, #12]
{
60017fd8:	469b      	mov	fp, r3
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
60017fda:	6a06      	ldr	r6, [r0, #32]
{
60017fdc:	4604      	mov	r4, r0
60017fde:	4688      	mov	r8, r1
60017fe0:	4691      	mov	r9, r2
	if (item->hdr.busy && !item->hdr.valid) {
60017fe2:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
60017fe6:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
60017fea:	f003 0303 	and.w	r3, r3, #3
60017fee:	2b02      	cmp	r3, #2
60017ff0:	f04f 0300 	mov.w	r3, #0
60017ff4:	d009      	beq.n	6001800a <drop_item_locked+0x38>
	*item_to_drop = NULL;
60017ff6:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
60017ff8:	f8cb 3000 	str.w	r3, [fp]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
60017ffc:	6923      	ldr	r3, [r4, #16]
60017ffe:	0799      	lsls	r1, r3, #30
60018000:	d410      	bmi.n	60018024 <drop_item_locked+0x52>
		return false;
60018002:	2000      	movs	r0, #0
}
60018004:	b003      	add	sp, #12
60018006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
6001800a:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
6001800e:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
60018010:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
60018012:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
60018016:	d0f1      	beq.n	60017ffc <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
60018018:	f7ff ffb2 	bl	60017f80 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
6001801c:	68e3      	ldr	r3, [r4, #12]
6001801e:	60a3      	str	r3, [r4, #8]
		return true;
60018020:	2001      	movs	r0, #1
60018022:	e7ef      	b.n	60018004 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
60018024:	69e3      	ldr	r3, [r4, #28]
60018026:	4650      	mov	r0, sl
60018028:	4798      	blx	r3
	return item->hdr.valid;
6001802a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
6001802e:	4605      	mov	r5, r0
	if (!is_valid(item)) {
60018030:	07da      	lsls	r2, r3, #31
60018032:	d5e6      	bpl.n	60018002 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
60018034:	f013 0302 	ands.w	r3, r3, #2
60018038:	d01d      	beq.n	60018076 <drop_item_locked+0xa4>
		if (free_wlen) {
6001803a:	f1b8 0f00 	cmp.w	r8, #0
6001803e:	d003      	beq.n	60018048 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
60018040:	4641      	mov	r1, r8
60018042:	4620      	mov	r0, r4
60018044:	f7ff ffa8 	bl	60017f98 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
60018048:	6861      	ldr	r1, [r4, #4]
6001804a:	462a      	mov	r2, r5
6001804c:	4620      	mov	r0, r4
6001804e:	f7ff ff89 	bl	60017f64 <idx_inc>
60018052:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
60018054:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
60018058:	4299      	cmp	r1, r3
6001805a:	d104      	bne.n	60018066 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
6001805c:	462a      	mov	r2, r5
6001805e:	4620      	mov	r0, r4
60018060:	f7ff ff80 	bl	60017f64 <idx_inc>
60018064:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
60018066:	68a3      	ldr	r3, [r4, #8]
60018068:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
6001806a:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
6001806c:	6923      	ldr	r3, [r4, #16]
6001806e:	f043 0308 	orr.w	r3, r3, #8
60018072:	6123      	str	r3, [r4, #16]
60018074:	e7d4      	b.n	60018020 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
60018076:	4601      	mov	r1, r0
60018078:	4620      	mov	r0, r4
6001807a:	9301      	str	r3, [sp, #4]
6001807c:	f7ff ff80 	bl	60017f80 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
60018080:	68e2      	ldr	r2, [r4, #12]
60018082:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
60018084:	f1b8 0f00 	cmp.w	r8, #0
60018088:	d004      	beq.n	60018094 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
6001808a:	6821      	ldr	r1, [r4, #0]
6001808c:	6a22      	ldr	r2, [r4, #32]
6001808e:	9b01      	ldr	r3, [sp, #4]
60018090:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
60018094:	eb05 0208 	add.w	r2, r5, r8
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
60018098:	4620      	mov	r0, r4
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
6001809a:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
6001809e:	6821      	ldr	r1, [r4, #0]
600180a0:	f7ff ff60 	bl	60017f64 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
600180a4:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
600180a6:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
600180a8:	f043 0308 	orr.w	r3, r3, #8
600180ac:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
600180ae:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
600180b2:	f36f 0300 	bfc	r3, #0, #1
600180b6:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
600180ba:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
600180be:	e7af      	b.n	60018020 <drop_item_locked+0x4e>

600180c0 <post_drop_action>:
{
600180c0:	b570      	push	{r4, r5, r6, lr}
600180c2:	4604      	mov	r4, r0
600180c4:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
600180c6:	f7ff ff4d 	bl	60017f64 <idx_inc>
	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
600180ca:	6823      	ldr	r3, [r4, #0]
600180cc:	4283      	cmp	r3, r0
600180ce:	d105      	bne.n	600180dc <post_drop_action+0x1c>
		buffer->flags &= ~MPSC_PBUF_FULL;
600180d0:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
600180d2:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
600180d4:	f023 0308 	bic.w	r3, r3, #8
600180d8:	6123      	str	r3, [r4, #16]
}
600180da:	bd70      	pop	{r4, r5, r6, pc}
	union mpsc_pbuf_generic skip = {
600180dc:	00ab      	lsls	r3, r5, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
600180de:	6a22      	ldr	r2, [r4, #32]
	buffer->wr_idx = idx_inc(buffer,
600180e0:	4620      	mov	r0, r4
	union mpsc_pbuf_generic skip = {
600180e2:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
600180e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
600180ea:	462a      	mov	r2, r5
600180ec:	6861      	ldr	r1, [r4, #4]
600180ee:	f7ff ff39 	bl	60017f64 <idx_inc>
600180f2:	6060      	str	r0, [r4, #4]
600180f4:	e7f1      	b.n	600180da <post_drop_action+0x1a>

600180f6 <max_utilization_update>:
{
600180f6:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
600180f8:	6903      	ldr	r3, [r0, #16]
{
600180fa:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
600180fc:	075b      	lsls	r3, r3, #29
600180fe:	d506      	bpl.n	6001810e <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
60018100:	6a85      	ldr	r5, [r0, #40]	; 0x28
60018102:	f7ff ff1e 	bl	60017f42 <get_usage>
60018106:	4285      	cmp	r5, r0
60018108:	bf2c      	ite	cs
6001810a:	62a5      	strcs	r5, [r4, #40]	; 0x28
6001810c:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
6001810e:	bd38      	pop	{r3, r4, r5, pc}

60018110 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
60018110:	6902      	ldr	r2, [r0, #16]
60018112:	6883      	ldr	r3, [r0, #8]
60018114:	0712      	lsls	r2, r2, #28
60018116:	d402      	bmi.n	6001811e <mpsc_pbuf_is_pending+0xe>
60018118:	6842      	ldr	r2, [r0, #4]
6001811a:	429a      	cmp	r2, r3
6001811c:	d200      	bcs.n	60018120 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
6001811e:	6a42      	ldr	r2, [r0, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
60018120:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
60018122:	1e18      	subs	r0, r3, #0
60018124:	bf18      	it	ne
60018126:	2001      	movne	r0, #1
60018128:	4770      	bx	lr

6001812a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
6001812a:	4770      	bx	lr

6001812c <z_arm_platform_init>:
		(&__ocram_data_end - &__ocram_data_start));
	/* Zero BSS region */
	memset(&__ocram_bss_start, 0, (&__ocram_bss_end - &__ocram_bss_start));
#endif
	/* Call CMSIS SystemInit */
	SystemInit();
6001812c:	f7f5 bd2c 	b.w	6000db88 <SystemInit>

60018130 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
60018130:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
60018132:	075b      	lsls	r3, r3, #29
60018134:	d40b      	bmi.n	6001814e <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
60018136:	6803      	ldr	r3, [r0, #0]
60018138:	8842      	ldrh	r2, [r0, #2]
6001813a:	f3c3 2349 	ubfx	r3, r3, #9, #10
6001813e:	f3c2 02cb 	ubfx	r2, r2, #3, #12
60018142:	1898      	adds	r0, r3, r2
60018144:	3017      	adds	r0, #23
60018146:	f020 0007 	bic.w	r0, r0, #7
6001814a:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
6001814c:	4770      	bx	lr
	return 0;
6001814e:	2000      	movs	r0, #0
}
60018150:	4770      	bx	lr

60018152 <dummy_timestamp>:
}
60018152:	2000      	movs	r0, #0
60018154:	4770      	bx	lr

60018156 <atomic_inc>:
{
60018156:	4603      	mov	r3, r0
}
60018158:	f3bf 8f5b 	dmb	ish
6001815c:	e853 0f00 	ldrex	r0, [r3]
60018160:	1c42      	adds	r2, r0, #1
60018162:	e843 2100 	strex	r1, r2, [r3]
60018166:	2900      	cmp	r1, #0
60018168:	d1f8      	bne.n	6001815c <atomic_inc+0x6>
6001816a:	f3bf 8f5b 	dmb	ish
6001816e:	4770      	bx	lr

60018170 <default_lf_get_timestamp>:
{
60018170:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
60018172:	f001 fc2d 	bl	600199d0 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
60018176:	220a      	movs	r2, #10
60018178:	2300      	movs	r3, #0
6001817a:	f7eb fac3 	bl	60003704 <__aeabi_uldivmod>
}
6001817e:	bd08      	pop	{r3, pc}

60018180 <z_log_vprintk>:
{
60018180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
60018182:	2300      	movs	r3, #0
60018184:	e9cd 0102 	strd	r0, r1, [sp, #8]
60018188:	461a      	mov	r2, r3
6001818a:	4619      	mov	r1, r3
6001818c:	4618      	mov	r0, r3
6001818e:	e9cd 3300 	strd	r3, r3, [sp]
60018192:	f7f0 fcfd 	bl	60008b90 <z_impl_z_log_msg_runtime_vcreate>
}
60018196:	b005      	add	sp, #20
60018198:	f85d fb04 	ldr.w	pc, [sp], #4

6001819c <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
6001819c:	2001      	movs	r0, #1
6001819e:	f7f0 ba1d 	b.w	600085dc <z_log_dropped>

600181a2 <z_log_get_tag>:
}
600181a2:	2000      	movs	r0, #0
600181a4:	4770      	bx	lr

600181a6 <z_cbprintf_cpy>:
{
600181a6:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
600181a8:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
{
600181ac:	460c      	mov	r4, r1
600181ae:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
600181b0:	1b9b      	subs	r3, r3, r6
600181b2:	428b      	cmp	r3, r1
600181b4:	d30a      	bcc.n	600181cc <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
600181b6:	6813      	ldr	r3, [r2, #0]
600181b8:	460a      	mov	r2, r1
600181ba:	4601      	mov	r1, r0
600181bc:	1998      	adds	r0, r3, r6
600181be:	f7eb fabb 	bl	60003738 <memcpy>
	desc->off += len;
600181c2:	68ab      	ldr	r3, [r5, #8]
	return len;
600181c4:	4620      	mov	r0, r4
	desc->off += len;
600181c6:	4423      	add	r3, r4
600181c8:	60ab      	str	r3, [r5, #8]
}
600181ca:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
600181cc:	f06f 001b 	mvn.w	r0, #27
600181d0:	e7fb      	b.n	600181ca <z_cbprintf_cpy+0x24>

600181d2 <z_log_msg_finalize>:
{
600181d2:	b570      	push	{r4, r5, r6, lr}
600181d4:	460e      	mov	r6, r1
600181d6:	4615      	mov	r5, r2
600181d8:	4619      	mov	r1, r3
600181da:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
600181de:	4604      	mov	r4, r0
600181e0:	b918      	cbnz	r0, 600181ea <z_log_msg_finalize+0x18>
}
600181e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
600181e6:	f7f0 b9f9 	b.w	600085dc <z_log_dropped>
	if (data) {
600181ea:	b12b      	cbz	r3, 600181f8 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
600181ec:	3010      	adds	r0, #16
600181ee:	f3c5 2349 	ubfx	r3, r5, #9, #10
600181f2:	4418      	add	r0, r3
600181f4:	f7eb faa0 	bl	60003738 <memcpy>
	z_log_msg_commit(msg);
600181f8:	4620      	mov	r0, r4
	msg->hdr.source = source;
600181fa:	e9c4 5600 	strd	r5, r6, [r4]
}
600181fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
60018202:	f7f0 bc19 	b.w	60008a38 <z_log_msg_commit>

60018206 <buffer_write>:
{
60018206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60018208:	4606      	mov	r6, r0
6001820a:	460d      	mov	r5, r1
6001820c:	4614      	mov	r4, r2
6001820e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
60018210:	4621      	mov	r1, r4
60018212:	4628      	mov	r0, r5
60018214:	463a      	mov	r2, r7
60018216:	47b0      	blx	r6
	} while (len != 0);
60018218:	1a24      	subs	r4, r4, r0
		buf += processed;
6001821a:	4405      	add	r5, r0
	} while (len != 0);
6001821c:	d1f8      	bne.n	60018210 <buffer_write+0xa>
}
6001821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

60018220 <cbvprintf>:
{
60018220:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
60018222:	2400      	movs	r4, #0
60018224:	9400      	str	r4, [sp, #0]
60018226:	f7ee ff1f 	bl	60007068 <z_cbvprintf_impl>
}
6001822a:	b002      	add	sp, #8
6001822c:	bd10      	pop	{r4, pc}

6001822e <log_output_flush>:
{
6001822e:	b510      	push	{r4, lr}
		     output->control_block->offset,
60018230:	6842      	ldr	r2, [r0, #4]
{
60018232:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
60018234:	6881      	ldr	r1, [r0, #8]
60018236:	6800      	ldr	r0, [r0, #0]
60018238:	e9d2 2300 	ldrd	r2, r3, [r2]
6001823c:	f7ff ffe3 	bl	60018206 <buffer_write>
	output->control_block->offset = 0;
60018240:	6863      	ldr	r3, [r4, #4]
60018242:	2200      	movs	r2, #0
60018244:	601a      	str	r2, [r3, #0]
}
60018246:	bd10      	pop	{r4, pc}

60018248 <cr_out_func>:
	if (c == '\n') {
60018248:	280a      	cmp	r0, #10
{
6001824a:	b538      	push	{r3, r4, r5, lr}
6001824c:	4604      	mov	r4, r0
6001824e:	460d      	mov	r5, r1
	if (c == '\n') {
60018250:	d102      	bne.n	60018258 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
60018252:	200d      	movs	r0, #13
60018254:	f7f0 fd20 	bl	60008c98 <out_func>
	out_func(c, ctx);
60018258:	4629      	mov	r1, r5
6001825a:	4620      	mov	r0, r4
6001825c:	f7f0 fd1c 	bl	60008c98 <out_func>
}
60018260:	2000      	movs	r0, #0
60018262:	bd38      	pop	{r3, r4, r5, pc}

60018264 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
60018264:	2300      	movs	r3, #0
60018266:	f7f0 bc2d 	b.w	60008ac4 <z_impl_z_log_msg_static_create>

6001826a <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
6001826a:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
6001826e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
60018272:	d001      	beq.n	60018278 <get_ep_bm_from_addr+0xe>
60018274:	f7f1 b894 	b.w	600093a0 <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
60018278:	f010 0f80 	tst.w	r0, #128	; 0x80
6001827c:	f04f 0001 	mov.w	r0, #1
		ep_bm = BIT(ep_idx + 16);
60018280:	bf18      	it	ne
60018282:	3210      	addne	r2, #16
		ep_bm = BIT(ep_idx);
60018284:	4090      	lsls	r0, r2
}
60018286:	4770      	bx	lr

60018288 <usb_get_dev_data_by_cfg>:
	return list->head;
60018288:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
6001828a:	b138      	cbz	r0, 6001829c <usb_get_dev_data_by_cfg+0x14>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
6001828c:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
60018290:	3804      	subs	r0, #4

		if (cfg_cur == cfg) {
60018292:	685b      	ldr	r3, [r3, #4]
60018294:	428b      	cmp	r3, r1
60018296:	d001      	beq.n	6001829c <usb_get_dev_data_by_cfg+0x14>
	return node->next;
60018298:	6840      	ldr	r0, [r0, #4]
6001829a:	e7f6      	b.n	6001828a <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
6001829c:	4770      	bx	lr

6001829e <usb_get_dev_data_by_iface>:
	return list->head;
6001829e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
600182a0:	b148      	cbz	r0, 600182b6 <usb_get_dev_data_by_iface+0x18>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
600182a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
600182a6:	3804      	subs	r0, #4
		const struct usb_if_descriptor *if_desc =
600182a8:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
600182aa:	685b      	ldr	r3, [r3, #4]
600182ac:	789b      	ldrb	r3, [r3, #2]
600182ae:	428b      	cmp	r3, r1
600182b0:	d001      	beq.n	600182b6 <usb_get_dev_data_by_iface+0x18>
	return node->next;
600182b2:	6840      	ldr	r0, [r0, #4]
600182b4:	e7f4      	b.n	600182a0 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
600182b6:	4770      	bx	lr

600182b8 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
600182b8:	b530      	push	{r4, r5, lr}
	return list->head;
600182ba:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
600182bc:	b188      	cbz	r0, 600182e2 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
600182be:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
600182c2:	3804      	subs	r0, #4
		const struct usb_cfg_data *cfg = dev->config;
600182c4:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
600182c6:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
600182c8:	7f1d      	ldrb	r5, [r3, #28]
600182ca:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
600182cc:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
600182ce:	b2dc      	uxtb	r4, r3
600182d0:	42a5      	cmp	r5, r4
600182d2:	d801      	bhi.n	600182d8 <usb_get_dev_data_by_ep+0x20>
	return node->next;
600182d4:	6840      	ldr	r0, [r0, #4]
600182d6:	e7f1      	b.n	600182bc <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
600182d8:	3301      	adds	r3, #1
600182da:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
600182de:	428c      	cmp	r4, r1
600182e0:	d1f5      	bne.n	600182ce <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
600182e2:	bd30      	pop	{r4, r5, pc}

600182e4 <usb_transfer_is_busy>:
{
600182e4:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
600182e6:	f7f1 fea9 	bl	6000a03c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
600182ea:	b128      	cbz	r0, 600182f8 <usb_transfer_is_busy+0x14>
600182ec:	6840      	ldr	r0, [r0, #4]
600182ee:	f110 0f10 	cmn.w	r0, #16
600182f2:	bf14      	ite	ne
600182f4:	2000      	movne	r0, #0
600182f6:	2001      	moveq	r0, #1
}
600182f8:	bd08      	pop	{r3, pc}

600182fa <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
600182fa:	1c4b      	adds	r3, r1, #1
	desc->if0.bInterfaceNumber = bInterfaceNumber;
600182fc:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
600182fe:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
60018300:	b2db      	uxtb	r3, r3
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
60018302:	f800 1c06 	strb.w	r1, [r0, #-6]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
60018306:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
6001830a:	76c3      	strb	r3, [r0, #27]
}
6001830c:	4770      	bx	lr

6001830e <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
6001830e:	e950 3102 	ldrd	r3, r1, [r0, #-8]
60018312:	f8d0 025c 	ldr.w	r0, [r0, #604]	; 0x25c
60018316:	4718      	bx	r3

60018318 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60018318:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
6001831a:	2200      	movs	r2, #0
6001831c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
60018320:	4770      	bx	lr

60018322 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60018322:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
60018324:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
60018328:	b108      	cbz	r0, 6001832e <cdc_acm_irq_tx_ready+0xc>
6001832a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
6001832e:	4770      	bx	lr

60018330 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60018330:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
60018332:	2200      	movs	r2, #0
60018334:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
60018338:	4770      	bx	lr

6001833a <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
6001833a:	6903      	ldr	r3, [r0, #16]
}
6001833c:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
60018340:	4770      	bx	lr

60018342 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60018342:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
60018344:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
60018348:	b112      	cbz	r2, 60018350 <cdc_acm_irq_is_pending+0xe>
6001834a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
6001834e:	b92a      	cbnz	r2, 6001835c <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
60018350:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
60018354:	b118      	cbz	r0, 6001835e <cdc_acm_irq_is_pending+0x1c>
60018356:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
6001835a:	4770      	bx	lr
		return 1;
6001835c:	2001      	movs	r0, #1
}
6001835e:	4770      	bx	lr

60018360 <cdc_acm_irq_update>:
}
60018360:	2001      	movs	r0, #1
60018362:	4770      	bx	lr

60018364 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60018364:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
60018366:	e9c3 1200 	strd	r1, r2, [r3]
}
6001836a:	4770      	bx	lr

6001836c <cdc_acm_configure>:
}
6001836c:	2000      	movs	r0, #0
6001836e:	4770      	bx	lr

60018370 <cdc_acm_config_get>:
{
60018370:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
60018372:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
60018374:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
60018378:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
6001837a:	f893 2258 	ldrb.w	r2, [r3, #600]	; 0x258
6001837e:	b16a      	cbz	r2, 6001839c <cdc_acm_config_get+0x2c>
60018380:	2a01      	cmp	r2, #1
60018382:	bf0c      	ite	eq
60018384:	2202      	moveq	r2, #2
60018386:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
60018388:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
6001838a:	f893 2259 	ldrb.w	r2, [r3, #601]	; 0x259
6001838e:	1e50      	subs	r0, r2, #1
60018390:	2803      	cmp	r0, #3
60018392:	d805      	bhi.n	600183a0 <cdc_acm_config_get+0x30>
60018394:	e8df f000 	tbb	[pc, r0]
60018398:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
6001839c:	2201      	movs	r2, #1
6001839e:	e7f3      	b.n	60018388 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
600183a0:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
600183a2:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
600183a4:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
600183a8:	2b06      	cmp	r3, #6
600183aa:	d009      	beq.n	600183c0 <cdc_acm_config_get+0x50>
600183ac:	2b07      	cmp	r3, #7
600183ae:	d009      	beq.n	600183c4 <cdc_acm_config_get+0x54>
600183b0:	2b05      	cmp	r3, #5
600183b2:	bf0c      	ite	eq
600183b4:	2300      	moveq	r3, #0
600183b6:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
600183b8:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
600183ba:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
600183bc:	71c8      	strb	r0, [r1, #7]
}
600183be:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
600183c0:	2301      	movs	r3, #1
600183c2:	e7f9      	b.n	600183b8 <cdc_acm_config_get+0x48>
600183c4:	2302      	movs	r3, #2
600183c6:	e7f7      	b.n	600183b8 <cdc_acm_config_get+0x48>

600183c8 <cdc_acm_fifo_read>:
{
600183c8:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
600183ca:	6904      	ldr	r4, [r0, #16]
{
600183cc:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
600183ce:	f8d4 024c 	ldr.w	r0, [r4, #588]	; 0x24c
600183d2:	f7ef fce3 	bl	60007d9c <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
600183d6:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
600183da:	4606      	mov	r6, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
600183dc:	691a      	ldr	r2, [r3, #16]
600183de:	6899      	ldr	r1, [r3, #8]
600183e0:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
600183e2:	bf04      	itt	eq
600183e4:	2200      	moveq	r2, #0
600183e6:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
600183ea:	f894 2260 	ldrb.w	r2, [r4, #608]	; 0x260
600183ee:	b1a2      	cbz	r2, 6001841a <cdc_acm_fifo_read+0x52>
	return buf->size - (buf->put_head - buf->get_tail);
600183f0:	685a      	ldr	r2, [r3, #4]
600183f2:	6959      	ldr	r1, [r3, #20]
600183f4:	69db      	ldr	r3, [r3, #28]
600183f6:	1a52      	subs	r2, r2, r1
600183f8:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
600183fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
600183fe:	d30c      	bcc.n	6001841a <cdc_acm_fifo_read+0x52>
			if (dev_data->configured) {
60018400:	f894 325e 	ldrb.w	r3, [r4, #606]	; 0x25e
60018404:	b133      	cbz	r3, 60018414 <cdc_acm_fifo_read+0x4c>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
60018406:	686b      	ldr	r3, [r5, #4]
60018408:	4622      	mov	r2, r4
6001840a:	2100      	movs	r1, #0
6001840c:	6a1b      	ldr	r3, [r3, #32]
6001840e:	7b18      	ldrb	r0, [r3, #12]
60018410:	f7f2 f952 	bl	6000a6b8 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
60018414:	2300      	movs	r3, #0
60018416:	f884 3260 	strb.w	r3, [r4, #608]	; 0x260
}
6001841a:	4630      	mov	r0, r6
6001841c:	bd70      	pop	{r4, r5, r6, pc}

6001841e <cdc_acm_poll_in>:
	int ret = cdc_acm_fifo_read(dev, c, 1);
6001841e:	2201      	movs	r2, #1
{
60018420:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
60018422:	f7ff ffd1 	bl	600183c8 <cdc_acm_fifo_read>
}
60018426:	3801      	subs	r0, #1
60018428:	bf18      	it	ne
6001842a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
6001842e:	bd08      	pop	{r3, pc}

60018430 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
60018430:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
60018432:	6800      	ldr	r0, [r0, #0]
60018434:	f7f2 b9ea 	b.w	6000a80c <z_arm_fatal_error>

60018438 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
60018438:	2100      	movs	r1, #0
6001843a:	2001      	movs	r0, #1
6001843c:	f7f2 b9e6 	b.w	6000a80c <z_arm_fatal_error>

60018440 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
60018440:	b508      	push	{r3, lr}
	handler();
60018442:	f7f2 fa89 	bl	6000a958 <z_SysNmiOnReset>
	z_arm_int_exit();
}
60018446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
6001844a:	f7f2 bb57 	b.w	6000aafc <z_arm_exc_exit>

6001844e <z_log_msg_static_create.constprop.0>:
6001844e:	2300      	movs	r3, #0
60018450:	f7f0 bb38 	b.w	60008ac4 <z_impl_z_log_msg_static_create>

60018454 <_stdout_hook_default>:
}
60018454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60018458:	4770      	bx	lr

6001845a <_stdin_hook_default>:
}
6001845a:	2000      	movs	r0, #0
6001845c:	4770      	bx	lr

6001845e <_read>:
{
6001845e:	4608      	mov	r0, r1
60018460:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
60018462:	f7f3 b889 	b.w	6000b578 <z_impl_zephyr_read_stdin>

60018466 <_write>:
{
60018466:	4608      	mov	r0, r1
60018468:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
6001846a:	f7f3 b899 	b.w	6000b5a0 <z_impl_zephyr_write_stdout>

6001846e <_close>:
int _close(int file)
6001846e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60018472:	4770      	bx	lr

60018474 <_lseek>:
}
60018474:	2000      	movs	r0, #0
60018476:	4770      	bx	lr

60018478 <_isatty>:
}
60018478:	2802      	cmp	r0, #2
6001847a:	bfcc      	ite	gt
6001847c:	2000      	movgt	r0, #0
6001847e:	2001      	movle	r0, #1
60018480:	4770      	bx	lr

60018482 <_kill>:
}
60018482:	2000      	movs	r0, #0
60018484:	4770      	bx	lr

60018486 <_getpid>:
}
60018486:	2000      	movs	r0, #0
60018488:	4770      	bx	lr

6001848a <_fstat>:
	st->st_mode = S_IFCHR;
6001848a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
6001848e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
60018490:	604b      	str	r3, [r1, #4]
}
60018492:	4770      	bx	lr

60018494 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
60018494:	f7f7 b8c6 	b.w	6000f624 <z_impl_z_errno>

60018498 <z_log_msg_static_create.constprop.0>:
60018498:	2300      	movs	r3, #0
6001849a:	f7f0 bb13 	b.w	60008ac4 <z_impl_z_log_msg_static_create>

6001849e <usb_dc_ep_read>:
{
6001849e:	b570      	push	{r4, r5, r6, lr}
600184a0:	4604      	mov	r4, r0
600184a2:	460e      	mov	r6, r1
600184a4:	4615      	mov	r5, r2
	int retval = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
600184a6:	f7f3 fdc7 	bl	6000c038 <usb_dc_ep_read_wait>
	if (retval) {
600184aa:	b930      	cbnz	r0, 600184ba <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
600184ac:	b906      	cbnz	r6, 600184b0 <usb_dc_ep_read+0x12>
600184ae:	b125      	cbz	r5, 600184ba <usb_dc_ep_read+0x1c>
	return usb_dc_ep_read_continue(ep);
600184b0:	4620      	mov	r0, r4
}
600184b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return usb_dc_ep_read_continue(ep);
600184b6:	f7f3 be57 	b.w	6000c168 <usb_dc_ep_read_continue>
}
600184ba:	bd70      	pop	{r4, r5, r6, pc}

600184bc <mcux_12b1msps_sar_adc_start_channel>:
{
600184bc:	b513      	push	{r0, r1, r4, lr}
	struct mcux_12b1msps_sar_adc_data *data = dev->data;
600184be:	6902      	ldr	r2, [r0, #16]
	ADC_SetChannelConfig(config->base, channel_group, &channel_config);
600184c0:	2100      	movs	r1, #0
	const struct mcux_12b1msps_sar_adc_config *config = dev->config;
600184c2:	6844      	ldr	r4, [r0, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
600184c4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
600184c8:	2b00      	cmp	r3, #0
600184ca:	fa93 f3a3 	rbit	r3, r3
600184ce:	fab3 f383 	clz	r3, r3
	data->channel_id = find_lsb_set(data->channels) - 1;
600184d2:	bf08      	it	eq
600184d4:	23ff      	moveq	r3, #255	; 0xff
600184d6:	f882 30a4 	strb.w	r3, [r2, #164]	; 0xa4
	channel_config.enableInterruptOnConversionCompleted = true;
600184da:	2201      	movs	r2, #1
	channel_config.channelNumber = data->channel_id;
600184dc:	9300      	str	r3, [sp, #0]
	channel_config.enableInterruptOnConversionCompleted = true;
600184de:	f88d 2004 	strb.w	r2, [sp, #4]
	ADC_SetChannelConfig(config->base, channel_group, &channel_config);
600184e2:	466a      	mov	r2, sp
600184e4:	6820      	ldr	r0, [r4, #0]
600184e6:	f7f6 fd99 	bl	6000f01c <ADC_SetChannelConfig>
}
600184ea:	b002      	add	sp, #8
600184ec:	bd10      	pop	{r4, pc}

600184ee <adc_context_start_sampling>:
	data->channels = ctx->sequence.channels;
600184ee:	6e83      	ldr	r3, [r0, #104]	; 0x68
600184f0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	data->repeat_buffer = data->buffer;
600184f4:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
600184f8:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	mcux_12b1msps_sar_adc_start_channel(data->dev);
600184fc:	f850 0c08 	ldr.w	r0, [r0, #-8]
60018500:	f7ff bfdc 	b.w	600184bc <mcux_12b1msps_sar_adc_start_channel>

60018504 <mcux_12b1msps_sar_adc_config_func_0>:
			    mcux_12b1msps_sar_adc_isr, DEVICE_DT_INST_GET(n), 0);	       \
									       \
		irq_enable(DT_INST_IRQN(n));				       \
	}

DT_INST_FOREACH_STATUS_OKAY(ACD_MCUX_12B1MSPS_SAR_INIT)
60018504:	2200      	movs	r2, #0
60018506:	2043      	movs	r0, #67	; 0x43
60018508:	b508      	push	{r3, lr}
6001850a:	4611      	mov	r1, r2
6001850c:	f7f2 f9f2 	bl	6000a8f4 <z_arm_irq_priority_set>
60018510:	2043      	movs	r0, #67	; 0x43
60018512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
60018516:	f7f2 b9df 	b.w	6000a8d8 <arch_irq_enable>

6001851a <adc_context_on_timer_expired>:
{
6001851a:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
6001851c:	3808      	subs	r0, #8
6001851e:	b410      	push	{r4}
60018520:	f3bf 8f5b 	dmb	ish
60018524:	e850 2f00 	ldrex	r2, [r0]
60018528:	1c51      	adds	r1, r2, #1
6001852a:	e840 1400 	strex	r4, r1, [r0]
6001852e:	2c00      	cmp	r4, #0
60018530:	d1f8      	bne.n	60018524 <adc_context_on_timer_expired+0xa>
60018532:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
60018536:	b912      	cbnz	r2, 6001853e <adc_context_on_timer_expired+0x24>
}
60018538:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
6001853a:	f7ff bfd8 	b.w	600184ee <adc_context_start_sampling>
		ctx->status = -EBUSY;
6001853e:	f06f 020f 	mvn.w	r2, #15
}
60018542:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
60018544:	659a      	str	r2, [r3, #88]	; 0x58
}
60018546:	4770      	bx	lr

60018548 <mcux_12b1msps_sar_adc_isr>:
{
60018548:	b510      	push	{r4, lr}
	ADC_Type *base = config->base;
6001854a:	6843      	ldr	r3, [r0, #4]
	struct mcux_12b1msps_sar_adc_data *data = dev->data;
6001854c:	6904      	ldr	r4, [r0, #16]
	ADC_Type *base = config->base;
6001854e:	681b      	ldr	r3, [r3, #0]
    return base->R[channelGroup];
60018550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	*data->buffer++ = result;
60018552:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
60018556:	1c99      	adds	r1, r3, #2
60018558:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	result = ADC_GetChannelConversionValue(base, channel_group);
6001855c:	801a      	strh	r2, [r3, #0]
	data->channels &= ~BIT(data->channel_id);
6001855e:	2201      	movs	r2, #1
60018560:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
60018564:	409a      	lsls	r2, r3
60018566:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
6001856a:	ea23 0302 	bic.w	r3, r3, r2
6001856e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (data->channels) {
60018572:	b11b      	cbz	r3, 6001857c <mcux_12b1msps_sar_adc_isr+0x34>
}
60018574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mcux_12b1msps_sar_adc_start_channel(dev);
60018578:	f7ff bfa0 	b.w	600184bc <mcux_12b1msps_sar_adc_start_channel>
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
6001857c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
6001857e:	b3bb      	cbz	r3, 600185f0 <mcux_12b1msps_sar_adc_isr+0xa8>
		adc_sequence_callback callback = ctx->options.callback;
60018580:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
60018584:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
		if (callback) {
60018588:	b133      	cbz	r3, 60018598 <mcux_12b1msps_sar_adc_isr+0x50>
			action = callback(dev,
6001858a:	f104 016c 	add.w	r1, r4, #108	; 0x6c
6001858e:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
60018590:	2801      	cmp	r0, #1
60018592:	d00b      	beq.n	600185ac <mcux_12b1msps_sar_adc_isr+0x64>
60018594:	2802      	cmp	r0, #2
60018596:	d024      	beq.n	600185e2 <mcux_12b1msps_sar_adc_isr+0x9a>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
60018598:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
6001859c:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
600185a0:	429a      	cmp	r2, r3
600185a2:	d91e      	bls.n	600185e2 <mcux_12b1msps_sar_adc_isr+0x9a>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
600185a4:	3301      	adds	r3, #1
600185a6:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
			} else {
				finish = true;
			}
		}

		if (!finish) {
600185aa:	e003      	b.n	600185b4 <mcux_12b1msps_sar_adc_isr+0x6c>
		data->buffer = data->repeat_buffer;
600185ac:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
600185b0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
600185b4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		adc_context_on_sampling_done(&data->ctx, dev);
600185b8:	f104 0008 	add.w	r0, r4, #8
600185bc:	b91b      	cbnz	r3, 600185c6 <mcux_12b1msps_sar_adc_isr+0x7e>
}
600185be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
600185c2:	f7ff bf94 	b.w	600184ee <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
600185c6:	f3bf 8f5b 	dmb	ish
600185ca:	e850 3f00 	ldrex	r3, [r0]
600185ce:	1e5a      	subs	r2, r3, #1
600185d0:	e840 2100 	strex	r1, r2, [r0]
600185d4:	2900      	cmp	r1, #0
600185d6:	d1f8      	bne.n	600185ca <mcux_12b1msps_sar_adc_isr+0x82>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
600185d8:	2b01      	cmp	r3, #1
600185da:	f3bf 8f5b 	dmb	ish
600185de:	dcee      	bgt.n	600185be <mcux_12b1msps_sar_adc_isr+0x76>
600185e0:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
600185e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
600185e6:	b11b      	cbz	r3, 600185f0 <mcux_12b1msps_sar_adc_isr+0xa8>
	z_impl_k_timer_stop(timer);
600185e8:	f104 0010 	add.w	r0, r4, #16
600185ec:	f001 fa20 	bl	60019a30 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
600185f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
600185f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
600185f8:	f7f7 bed8 	b.w	600103ac <z_impl_k_sem_give>

600185fc <mcux_ccm_on>:
}
600185fc:	2000      	movs	r0, #0
600185fe:	4770      	bx	lr

60018600 <mcux_ccm_init>:

static int mcux_ccm_init(const struct device *dev)
{
	return 0;
}
60018600:	2000      	movs	r0, #0
60018602:	4770      	bx	lr

60018604 <mcux_ccm_off>:
static int mcux_ccm_off(const struct device *dev,
60018604:	2000      	movs	r0, #0
60018606:	4770      	bx	lr

60018608 <mcux_igpio_port_get_raw>:
	GPIO_Type *base = config->base;
60018608:	6843      	ldr	r3, [r0, #4]
}
6001860a:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
6001860c:	685b      	ldr	r3, [r3, #4]
	*value = base->DR;
6001860e:	681b      	ldr	r3, [r3, #0]
60018610:	600b      	str	r3, [r1, #0]
}
60018612:	4770      	bx	lr

60018614 <mcux_igpio_port_set_masked_raw>:
	GPIO_Type *base = config->base;
60018614:	6843      	ldr	r3, [r0, #4]
60018616:	685b      	ldr	r3, [r3, #4]
	base->DR = (base->DR & ~mask) | (mask & value);
60018618:	6818      	ldr	r0, [r3, #0]
6001861a:	4042      	eors	r2, r0
6001861c:	400a      	ands	r2, r1
6001861e:	4042      	eors	r2, r0
}
60018620:	2000      	movs	r0, #0
	base->DR = (base->DR & ~mask) | (mask & value);
60018622:	601a      	str	r2, [r3, #0]
}
60018624:	4770      	bx	lr

60018626 <mcux_igpio_port_set_bits_raw>:
	GPIO_Type *base = config->base;
60018626:	6843      	ldr	r3, [r0, #4]
}
60018628:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
6001862a:	685b      	ldr	r3, [r3, #4]
 * @param mask GPIO pin number macro
 */
static inline void GPIO_PortSet(GPIO_Type *base, uint32_t mask)
{
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_SET) && (FSL_FEATURE_IGPIO_HAS_DR_SET == 1))
    base->DR_SET = mask;
6001862c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
60018630:	4770      	bx	lr

60018632 <mcux_igpio_port_clear_bits_raw>:
	GPIO_Type *base = config->base;
60018632:	6843      	ldr	r3, [r0, #4]
}
60018634:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
60018636:	685b      	ldr	r3, [r3, #4]
 * @param mask GPIO pin number macro
 */
static inline void GPIO_PortClear(GPIO_Type *base, uint32_t mask)
{
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_CLEAR) && (FSL_FEATURE_IGPIO_HAS_DR_CLEAR == 1))
    base->DR_CLEAR = mask;
60018638:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
}
6001863c:	4770      	bx	lr

6001863e <mcux_igpio_port_toggle_bits>:
	GPIO_Type *base = config->base;
6001863e:	6843      	ldr	r3, [r0, #4]
}
60018640:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
60018642:	685b      	ldr	r3, [r3, #4]
 * @param mask GPIO pin number macro
 */
static inline void GPIO_PortToggle(GPIO_Type *base, uint32_t mask)
{
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_TOGGLE) && (FSL_FEATURE_IGPIO_HAS_DR_TOGGLE == 1))
    base->DR_TOGGLE = mask;
60018644:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
}
60018648:	4770      	bx	lr

6001864a <mcux_igpio_pin_interrupt_configure>:
{
6001864a:	b570      	push	{r4, r5, r6, lr}
	if (mode == GPIO_INT_MODE_DISABLED) {
6001864c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	GPIO_Type *base = config->base;
60018650:	6840      	ldr	r0, [r0, #4]
60018652:	6840      	ldr	r0, [r0, #4]
	if (mode == GPIO_INT_MODE_DISABLED) {
60018654:	d113      	bne.n	6001867e <mcux_igpio_pin_interrupt_configure+0x34>
	__asm__ volatile(
60018656:	f04f 0310 	mov.w	r3, #16
6001865a:	f3ef 8411 	mrs	r4, BASEPRI
6001865e:	f383 8812 	msr	BASEPRI_MAX, r3
60018662:	f3bf 8f6f 	isb	sy
		WRITE_BIT(base->IMR, pin, 0);
60018666:	2201      	movs	r2, #1
60018668:	6943      	ldr	r3, [r0, #20]
6001866a:	408a      	lsls	r2, r1
6001866c:	ea23 0302 	bic.w	r3, r3, r2
	WRITE_BIT(base->IMR, pin, 1);
60018670:	6143      	str	r3, [r0, #20]
	__asm__ volatile(
60018672:	f384 8811 	msr	BASEPRI, r4
60018676:	f3bf 8f6f 	isb	sy
		return 0;
6001867a:	2000      	movs	r0, #0
}
6001867c:	bd70      	pop	{r4, r5, r6, pc}
	if ((mode == GPIO_INT_MODE_EDGE) && (trig == GPIO_INT_TRIG_LOW)) {
6001867e:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
60018682:	d12b      	bne.n	600186dc <mcux_igpio_pin_interrupt_configure+0x92>
60018684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
60018688:	d030      	beq.n	600186ec <mcux_igpio_pin_interrupt_configure+0xa2>
	} else if ((mode == GPIO_INT_MODE_EDGE) &&
6001868a:	f103 457c 	add.w	r5, r3, #4227858432	; 0xfc000000
6001868e:	426a      	negs	r2, r5
60018690:	416a      	adcs	r2, r5
60018692:	0052      	lsls	r2, r2, #1
	if (pin < 16) {
60018694:	290f      	cmp	r1, #15
60018696:	d82d      	bhi.n	600186f4 <mcux_igpio_pin_interrupt_configure+0xaa>
		shift = 2 * pin;
60018698:	004d      	lsls	r5, r1, #1
		base->ICR1 = (base->ICR1 & ~(3 << shift)) | (icr << shift);
6001869a:	2603      	movs	r6, #3
6001869c:	68c4      	ldr	r4, [r0, #12]
6001869e:	40ae      	lsls	r6, r5
600186a0:	fa02 f505 	lsl.w	r5, r2, r5
600186a4:	ea24 0406 	bic.w	r4, r4, r6
600186a8:	432c      	orrs	r4, r5
600186aa:	60c4      	str	r4, [r0, #12]
	__asm__ volatile(
600186ac:	f04f 0210 	mov.w	r2, #16
600186b0:	f3ef 8411 	mrs	r4, BASEPRI
600186b4:	f382 8812 	msr	BASEPRI_MAX, r2
600186b8:	f3bf 8f6f 	isb	sy
	WRITE_BIT(base->EDGE_SEL, pin, trig == GPIO_INT_TRIG_BOTH);
600186bc:	2201      	movs	r2, #1
600186be:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
600186c2:	69c3      	ldr	r3, [r0, #28]
600186c4:	fa02 f201 	lsl.w	r2, r2, r1
600186c8:	bf0c      	ite	eq
600186ca:	4313      	orreq	r3, r2
600186cc:	4393      	bicne	r3, r2
600186ce:	61c3      	str	r3, [r0, #28]
	WRITE_BIT(base->ISR, pin, 1);
600186d0:	6983      	ldr	r3, [r0, #24]
600186d2:	4313      	orrs	r3, r2
600186d4:	6183      	str	r3, [r0, #24]
	WRITE_BIT(base->IMR, pin, 1);
600186d6:	6943      	ldr	r3, [r0, #20]
600186d8:	4313      	orrs	r3, r2
600186da:	e7c9      	b.n	60018670 <mcux_igpio_pin_interrupt_configure+0x26>
	} else if ((mode == GPIO_INT_MODE_LEVEL) &&
600186dc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
600186e0:	d106      	bne.n	600186f0 <mcux_igpio_pin_interrupt_configure+0xa6>
600186e2:	f103 447c 	add.w	r4, r3, #4227858432	; 0xfc000000
600186e6:	4262      	negs	r2, r4
600186e8:	4162      	adcs	r2, r4
600186ea:	e7d3      	b.n	60018694 <mcux_igpio_pin_interrupt_configure+0x4a>
		icr = 3;
600186ec:	2203      	movs	r2, #3
600186ee:	e7d1      	b.n	60018694 <mcux_igpio_pin_interrupt_configure+0x4a>
		icr = 0;
600186f0:	2200      	movs	r2, #0
600186f2:	e7cf      	b.n	60018694 <mcux_igpio_pin_interrupt_configure+0x4a>
	} else if (pin < 32) {
600186f4:	291f      	cmp	r1, #31
600186f6:	d80b      	bhi.n	60018710 <mcux_igpio_pin_interrupt_configure+0xc6>
		shift = 2 * (pin - 16);
600186f8:	f1a1 0510 	sub.w	r5, r1, #16
		base->ICR2 = (base->ICR2 & ~(3 << shift)) | (icr << shift);
600186fc:	2603      	movs	r6, #3
600186fe:	6904      	ldr	r4, [r0, #16]
		shift = 2 * (pin - 16);
60018700:	006d      	lsls	r5, r5, #1
		base->ICR2 = (base->ICR2 & ~(3 << shift)) | (icr << shift);
60018702:	40ae      	lsls	r6, r5
60018704:	40aa      	lsls	r2, r5
60018706:	ea24 0406 	bic.w	r4, r4, r6
6001870a:	4322      	orrs	r2, r4
6001870c:	6102      	str	r2, [r0, #16]
6001870e:	e7cd      	b.n	600186ac <mcux_igpio_pin_interrupt_configure+0x62>
		return -EINVAL;
60018710:	f06f 0015 	mvn.w	r0, #21
60018714:	e7b2      	b.n	6001867c <mcux_igpio_pin_interrupt_configure+0x32>

60018716 <mcux_igpio_5_init>:
			   (MCUX_IGPIO_IRQ_INIT(n, 1);))		\
									\
		return 0;						\
	}

DT_INST_FOREACH_STATUS_OKAY(MCUX_IGPIO_INIT)
60018716:	2000      	movs	r0, #0
60018718:	4770      	bx	lr

6001871a <mcux_igpio_configure>:
{
6001871a:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct mcux_igpio_config *config = dev->config;
6001871c:	6843      	ldr	r3, [r0, #4]
{
6001871e:	4615      	mov	r5, r2
60018720:	b087      	sub	sp, #28
60018722:	460f      	mov	r7, r1
	GPIO_Type *base = config->base;
60018724:	685e      	ldr	r6, [r3, #4]
	for (i = 0; i < config->gap_count; i++) {
60018726:	2200      	movs	r2, #0
60018728:	f893 c011 	ldrb.w	ip, [r3, #17]
6001872c:	4594      	cmp	ip, r2
6001872e:	dc4f      	bgt.n	600187d0 <mcux_igpio_configure+0xb6>
	if (cfg_idx >= config->mux_count) {
60018730:	7c1a      	ldrb	r2, [r3, #16]
60018732:	428a      	cmp	r2, r1
60018734:	dd57      	ble.n	600187e6 <mcux_igpio_configure+0xcc>
		(volatile uint32_t *)config->pin_muxes[cfg_idx].config_register;
60018736:	689c      	ldr	r4, [r3, #8]
60018738:	2314      	movs	r3, #20
6001873a:	fb03 4401 	mla	r4, r3, r1, r4
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
6001873e:	07a9      	lsls	r1, r5, #30
	volatile uint32_t *gpio_cfg_reg =
60018740:	6863      	ldr	r3, [r4, #4]
	uint32_t reg = *gpio_cfg_reg;
60018742:	681b      	ldr	r3, [r3, #0]
		reg |= IOMUXC_SW_PAD_CTL_PAD_ODE_MASK;
60018744:	bf4c      	ite	mi
60018746:	f443 6300 	orrmi.w	r3, r3, #2048	; 0x800
		reg &= ~IOMUXC_SW_PAD_CTL_PAD_ODE_MASK;
6001874a:	f423 6300 	bicpl.w	r3, r3, #2048	; 0x800
	if (((flags & GPIO_PULL_UP) != 0) || ((flags & GPIO_PULL_DOWN) != 0)) {
6001874e:	f015 0f30 	tst.w	r5, #48	; 0x30
60018752:	d04f      	beq.n	600187f4 <mcux_igpio_configure+0xda>
		if (((flags & GPIO_PULL_UP) != 0)) {
60018754:	06ea      	lsls	r2, r5, #27
			reg |= IOMUXC_SW_PAD_CTL_PAD_PUS(2);
60018756:	bf56      	itet	pl
60018758:	f423 4340 	bicpl.w	r3, r3, #49152	; 0xc000
6001875c:	f443 4320 	orrmi.w	r3, r3, #40960	; 0xa000
			reg &= ~IOMUXC_SW_PAD_CTL_PAD_PUS_MASK;
60018760:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
	memcpy(&pin_cfg.pinmux, &config->pin_muxes[cfg_idx], sizeof(pin_cfg));
60018764:	466a      	mov	r2, sp
60018766:	f104 0e10 	add.w	lr, r4, #16
6001876a:	6820      	ldr	r0, [r4, #0]
6001876c:	3408      	adds	r4, #8
6001876e:	f854 1c04 	ldr.w	r1, [r4, #-4]
60018772:	4694      	mov	ip, r2
60018774:	4574      	cmp	r4, lr
60018776:	e8ac 0003 	stmia.w	ip!, {r0, r1}
6001877a:	4662      	mov	r2, ip
6001877c:	d1f5      	bne.n	6001876a <mcux_igpio_configure+0x50>
6001877e:	6820      	ldr	r0, [r4, #0]
	pinctrl_configure_pins(&pin_cfg, 1, PINCTRL_REG_NONE);
60018780:	2200      	movs	r2, #0
60018782:	2101      	movs	r1, #1
	memcpy(&pin_cfg.pinmux, &config->pin_muxes[cfg_idx], sizeof(pin_cfg));
60018784:	f8cc 0000 	str.w	r0, [ip]
	pinctrl_configure_pins(&pin_cfg, 1, PINCTRL_REG_NONE);
60018788:	4668      	mov	r0, sp
	pin_cfg.pin_ctrl_flags = reg;
6001878a:	9305      	str	r3, [sp, #20]
	pinctrl_configure_pins(&pin_cfg, 1, PINCTRL_REG_NONE);
6001878c:	f000 fafa 	bl	60018d84 <pinctrl_configure_pins>
	if (((flags & GPIO_INPUT) != 0) && ((flags & GPIO_OUTPUT) != 0)) {
60018790:	f405 3340 	and.w	r3, r5, #196608	; 0x30000
60018794:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
60018798:	d025      	beq.n	600187e6 <mcux_igpio_configure+0xcc>
	if (flags & GPIO_OUTPUT_INIT_HIGH) {
6001879a:	032c      	lsls	r4, r5, #12
6001879c:	d504      	bpl.n	600187a8 <mcux_igpio_configure+0x8e>
    GPIO_PinWrite(base, pin, output);
6001879e:	2201      	movs	r2, #1
600187a0:	4639      	mov	r1, r7
600187a2:	4630      	mov	r0, r6
600187a4:	f7f5 ff02 	bl	6000e5ac <GPIO_PinWrite>
	if (flags & GPIO_OUTPUT_INIT_LOW) {
600187a8:	0368      	lsls	r0, r5, #13
600187aa:	d504      	bpl.n	600187b6 <mcux_igpio_configure+0x9c>
600187ac:	2200      	movs	r2, #0
600187ae:	4639      	mov	r1, r7
600187b0:	4630      	mov	r0, r6
600187b2:	f7f5 fefb 	bl	6000e5ac <GPIO_PinWrite>
	WRITE_BIT(base->GDIR, pin, flags & GPIO_OUTPUT);
600187b6:	2301      	movs	r3, #1
600187b8:	6872      	ldr	r2, [r6, #4]
600187ba:	03a9      	lsls	r1, r5, #14
	return 0;
600187bc:	f04f 0000 	mov.w	r0, #0
	WRITE_BIT(base->GDIR, pin, flags & GPIO_OUTPUT);
600187c0:	fa03 f307 	lsl.w	r3, r3, r7
600187c4:	bf4c      	ite	mi
600187c6:	4313      	orrmi	r3, r2
600187c8:	ea22 0303 	bicpl.w	r3, r2, r3
600187cc:	6073      	str	r3, [r6, #4]
	return 0;
600187ce:	e00c      	b.n	600187ea <mcux_igpio_configure+0xd0>
		if (pin >= config->pin_gaps[i].start) {
600187d0:	68d8      	ldr	r0, [r3, #12]
600187d2:	eb00 0442 	add.w	r4, r0, r2, lsl #1
600187d6:	f810 0012 	ldrb.w	r0, [r0, r2, lsl #1]
600187da:	42b8      	cmp	r0, r7
600187dc:	d808      	bhi.n	600187f0 <mcux_igpio_configure+0xd6>
				config->pin_gaps[i].len)) {
600187de:	7864      	ldrb	r4, [r4, #1]
			if (pin < (config->pin_gaps[i].start +
600187e0:	4420      	add	r0, r4
600187e2:	42b8      	cmp	r0, r7
600187e4:	dd03      	ble.n	600187ee <mcux_igpio_configure+0xd4>
				return -ENOTSUP;
600187e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
600187ea:	b007      	add	sp, #28
600187ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cfg_idx -= config->pin_gaps[i].len;
600187ee:	1b09      	subs	r1, r1, r4
	for (i = 0; i < config->gap_count; i++) {
600187f0:	3201      	adds	r2, #1
600187f2:	e79b      	b.n	6001872c <mcux_igpio_configure+0x12>
		reg &= ~IOMUXC_SW_PAD_CTL_PAD_PUE_MASK;
600187f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
600187f8:	e7b4      	b.n	60018764 <mcux_igpio_configure+0x4a>

600187fa <mcux_igpio_0_init>:
DT_INST_FOREACH_STATUS_OKAY(MCUX_IGPIO_INIT)
600187fa:	2200      	movs	r2, #0
600187fc:	2050      	movs	r0, #80	; 0x50
600187fe:	b508      	push	{r3, lr}
60018800:	4611      	mov	r1, r2
60018802:	f7f2 f877 	bl	6000a8f4 <z_arm_irq_priority_set>
60018806:	2050      	movs	r0, #80	; 0x50
60018808:	f7f2 f866 	bl	6000a8d8 <arch_irq_enable>
6001880c:	2200      	movs	r2, #0
6001880e:	2051      	movs	r0, #81	; 0x51
60018810:	4611      	mov	r1, r2
60018812:	f7f2 f86f 	bl	6000a8f4 <z_arm_irq_priority_set>
60018816:	2051      	movs	r0, #81	; 0x51
60018818:	f7f2 f85e 	bl	6000a8d8 <arch_irq_enable>
6001881c:	2000      	movs	r0, #0
6001881e:	bd08      	pop	{r3, pc}

60018820 <mcux_igpio_1_init>:
60018820:	2200      	movs	r2, #0
60018822:	2052      	movs	r0, #82	; 0x52
60018824:	b508      	push	{r3, lr}
60018826:	4611      	mov	r1, r2
60018828:	f7f2 f864 	bl	6000a8f4 <z_arm_irq_priority_set>
6001882c:	2052      	movs	r0, #82	; 0x52
6001882e:	f7f2 f853 	bl	6000a8d8 <arch_irq_enable>
60018832:	2200      	movs	r2, #0
60018834:	2053      	movs	r0, #83	; 0x53
60018836:	4611      	mov	r1, r2
60018838:	f7f2 f85c 	bl	6000a8f4 <z_arm_irq_priority_set>
6001883c:	2053      	movs	r0, #83	; 0x53
6001883e:	f7f2 f84b 	bl	6000a8d8 <arch_irq_enable>
60018842:	2000      	movs	r0, #0
60018844:	bd08      	pop	{r3, pc}

60018846 <mcux_igpio_2_init>:
60018846:	2200      	movs	r2, #0
60018848:	2054      	movs	r0, #84	; 0x54
6001884a:	b508      	push	{r3, lr}
6001884c:	4611      	mov	r1, r2
6001884e:	f7f2 f851 	bl	6000a8f4 <z_arm_irq_priority_set>
60018852:	2054      	movs	r0, #84	; 0x54
60018854:	f7f2 f840 	bl	6000a8d8 <arch_irq_enable>
60018858:	2200      	movs	r2, #0
6001885a:	2055      	movs	r0, #85	; 0x55
6001885c:	4611      	mov	r1, r2
6001885e:	f7f2 f849 	bl	6000a8f4 <z_arm_irq_priority_set>
60018862:	2055      	movs	r0, #85	; 0x55
60018864:	f7f2 f838 	bl	6000a8d8 <arch_irq_enable>
60018868:	2000      	movs	r0, #0
6001886a:	bd08      	pop	{r3, pc}

6001886c <mcux_igpio_3_init>:
6001886c:	2200      	movs	r2, #0
6001886e:	2056      	movs	r0, #86	; 0x56
60018870:	b508      	push	{r3, lr}
60018872:	4611      	mov	r1, r2
60018874:	f7f2 f83e 	bl	6000a8f4 <z_arm_irq_priority_set>
60018878:	2056      	movs	r0, #86	; 0x56
6001887a:	f7f2 f82d 	bl	6000a8d8 <arch_irq_enable>
6001887e:	2200      	movs	r2, #0
60018880:	2057      	movs	r0, #87	; 0x57
60018882:	4611      	mov	r1, r2
60018884:	f7f2 f836 	bl	6000a8f4 <z_arm_irq_priority_set>
60018888:	2057      	movs	r0, #87	; 0x57
6001888a:	f7f2 f825 	bl	6000a8d8 <arch_irq_enable>
6001888e:	2000      	movs	r0, #0
60018890:	bd08      	pop	{r3, pc}

60018892 <mcux_igpio_4_init>:
60018892:	2200      	movs	r2, #0
60018894:	2058      	movs	r0, #88	; 0x58
60018896:	b508      	push	{r3, lr}
60018898:	4611      	mov	r1, r2
6001889a:	f7f2 f82b 	bl	6000a8f4 <z_arm_irq_priority_set>
6001889e:	2058      	movs	r0, #88	; 0x58
600188a0:	f7f2 f81a 	bl	6000a8d8 <arch_irq_enable>
600188a4:	2200      	movs	r2, #0
600188a6:	2059      	movs	r0, #89	; 0x59
600188a8:	4611      	mov	r1, r2
600188aa:	f7f2 f823 	bl	6000a8f4 <z_arm_irq_priority_set>
600188ae:	2059      	movs	r0, #89	; 0x59
600188b0:	f7f2 f812 	bl	6000a8d8 <arch_irq_enable>
600188b4:	2000      	movs	r0, #0
600188b6:	bd08      	pop	{r3, pc}

600188b8 <mcux_igpio_7_init>:
600188b8:	2000      	movs	r0, #0
600188ba:	4770      	bx	lr

600188bc <mcux_igpio_8_init>:
600188bc:	2000      	movs	r0, #0
600188be:	4770      	bx	lr

600188c0 <mcux_igpio_6_init>:
600188c0:	2000      	movs	r0, #0
600188c2:	4770      	bx	lr

600188c4 <mcux_lpi2c_config_func_0>:
			    DEVICE_DT_INST_GET(n), 0);			\
									\
		irq_enable(DT_INST_IRQN(n));				\
	}

DT_INST_FOREACH_STATUS_OKAY(I2C_MCUX_LPI2C_INIT)
600188c4:	2200      	movs	r2, #0
600188c6:	201c      	movs	r0, #28
600188c8:	b508      	push	{r3, lr}
600188ca:	4611      	mov	r1, r2
600188cc:	f7f2 f812 	bl	6000a8f4 <z_arm_irq_priority_set>
600188d0:	201c      	movs	r0, #28
600188d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
600188d6:	f7f1 bfff 	b.w	6000a8d8 <arch_irq_enable>

600188da <mcux_lpi2c_isr>:
	LPI2C_Type *base = config->base;
600188da:	6843      	ldr	r3, [r0, #4]
	LPI2C_MasterTransferHandleIRQ(base, &data->handle);
600188dc:	6901      	ldr	r1, [r0, #16]
600188de:	6818      	ldr	r0, [r3, #0]
600188e0:	f7f5 bbd0 	b.w	6000e084 <LPI2C_MasterTransferHandleIRQ>

600188e4 <mcux_lpi2c_master_transfer_callback>:
	data->callback_status = status;
600188e4:	655a      	str	r2, [r3, #84]	; 0x54
600188e6:	f103 0044 	add.w	r0, r3, #68	; 0x44
600188ea:	f7f7 bd5f 	b.w	600103ac <z_impl_k_sem_give>

600188ee <mcux_pwm_get_cycles_per_sec>:
{
600188ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct pwm_mcux_config *config = dev->config;
600188f0:	6845      	ldr	r5, [r0, #4]
{
600188f2:	4614      	mov	r4, r2
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
600188f4:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
	if (api->get_rate == NULL) {
600188f8:	6883      	ldr	r3, [r0, #8]
600188fa:	68db      	ldr	r3, [r3, #12]
600188fc:	b91b      	cbnz	r3, 60018906 <mcux_pwm_get_cycles_per_sec+0x18>
		return -EINVAL;
600188fe:	f06f 0015 	mvn.w	r0, #21
}
60018902:	b003      	add	sp, #12
60018904:	bd30      	pop	{r4, r5, pc}
	return api->get_rate(dev, sys, rate);
60018906:	aa01      	add	r2, sp, #4
60018908:	4798      	blx	r3
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6001890a:	2800      	cmp	r0, #0
6001890c:	d1f7      	bne.n	600188fe <mcux_pwm_get_cycles_per_sec+0x10>
	*cycles = clock_freq >> config->prescale;
6001890e:	7c2a      	ldrb	r2, [r5, #16]
60018910:	9b01      	ldr	r3, [sp, #4]
60018912:	40d3      	lsrs	r3, r2
60018914:	e9c4 3000 	strd	r3, r0, [r4]
	return 0;
60018918:	e7f3      	b.n	60018902 <mcux_pwm_get_cycles_per_sec+0x14>

6001891a <z_log_msg_static_create.constprop.0>:
6001891a:	2300      	movs	r3, #0
6001891c:	f7f0 b8d2 	b.w	60008ac4 <z_impl_z_log_msg_static_create>

60018920 <ina219_reg_read.isra.0>:
static int ina219_reg_read(const struct device *dev,
60018920:	b530      	push	{r4, r5, lr}
60018922:	b08b      	sub	sp, #44	; 0x2c
60018924:	4614      	mov	r4, r2
60018926:	4603      	mov	r3, r0
	return i2c_write_read(spec->bus, spec->addr,
60018928:	6800      	ldr	r0, [r0, #0]
	msg[0].buf = (uint8_t *)write_buf;
6001892a:	f10d 0207 	add.w	r2, sp, #7
6001892e:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
60018932:	2107      	movs	r1, #7
	return i2c_write_read(spec->bus, spec->addr,
60018934:	889b      	ldrh	r3, [r3, #4]
	msg[0].buf = (uint8_t *)write_buf;
60018936:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
60018938:	2201      	movs	r2, #1
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
6001893a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	msg[0].len = num_write;
6001893e:	9205      	str	r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
60018940:	2200      	movs	r2, #0
60018942:	f88d 2018 	strb.w	r2, [sp, #24]
	msg[1].buf = (uint8_t *)read_buf;
60018946:	aa03      	add	r2, sp, #12
60018948:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
6001894a:	2202      	movs	r2, #2
6001894c:	9208      	str	r2, [sp, #32]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
6001894e:	6881      	ldr	r1, [r0, #8]
60018950:	688d      	ldr	r5, [r1, #8]
60018952:	a904      	add	r1, sp, #16
60018954:	47a8      	blx	r5
	*reg_data = sys_get_be16(rx_buf);
60018956:	f8bd 300c 	ldrh.w	r3, [sp, #12]
6001895a:	ba5b      	rev16	r3, r3
6001895c:	8023      	strh	r3, [r4, #0]
}
6001895e:	b00b      	add	sp, #44	; 0x2c
60018960:	bd30      	pop	{r4, r5, pc}

60018962 <ina219_reg_write.isra.0>:
static int ina219_reg_write(const struct device *dev,
60018962:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	tx_buf[0] = addr;
60018964:	f88d 1000 	strb.w	r1, [sp]
	dst[0] = val >> 8;
60018968:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
6001896a:	f88d 2002 	strb.w	r2, [sp, #2]
	msg.len = num_bytes;
6001896e:	2203      	movs	r2, #3
static int ina219_reg_write(const struct device *dev,
60018970:	4603      	mov	r3, r0
	dst[0] = val >> 8;
60018972:	f88d 1001 	strb.w	r1, [sp, #1]
60018976:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
60018978:	2202      	movs	r2, #2
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
6001897a:	6800      	ldr	r0, [r0, #0]
6001897c:	889b      	ldrh	r3, [r3, #4]
	msg.buf = (uint8_t *)buf;
6001897e:	f8cd d004 	str.w	sp, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
60018982:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
60018986:	6882      	ldr	r2, [r0, #8]
60018988:	a901      	add	r1, sp, #4
6001898a:	6894      	ldr	r4, [r2, #8]
6001898c:	2201      	movs	r2, #1
6001898e:	47a0      	blx	r4
}
60018990:	b004      	add	sp, #16
60018992:	bd10      	pop	{r4, pc}

60018994 <z_impl_i2c_transfer>:
{
60018994:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
60018996:	6884      	ldr	r4, [r0, #8]
60018998:	68a4      	ldr	r4, [r4, #8]
6001899a:	46a4      	mov	ip, r4
}
6001899c:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
6001899e:	4760      	bx	ip

600189a0 <mcux_lpuart_irq_update>:
}

static int mcux_lpuart_irq_update(const struct device *dev)
{
	return 1;
}
600189a0:	2001      	movs	r0, #1
600189a2:	4770      	bx	lr

600189a4 <mcux_lpuart_irq_callback_set>:

static void mcux_lpuart_irq_callback_set(const struct device *dev,
					 uart_irq_callback_user_data_t cb,
					 void *cb_data)
{
	struct mcux_lpuart_data *data = dev->data;
600189a4:	6903      	ldr	r3, [r0, #16]

	data->callback = cb;
	data->cb_data = cb_data;
600189a6:	e9c3 1200 	strd	r1, r2, [r3]
}
600189aa:	4770      	bx	lr

600189ac <mcux_lpuart_config_get>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int mcux_lpuart_config_get(const struct device *dev, struct uart_config *cfg)
{
	struct mcux_lpuart_data *data = dev->data;
600189ac:	6902      	ldr	r2, [r0, #16]
{
600189ae:	460b      	mov	r3, r1
	*cfg = data->uart_config;
600189b0:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
600189b4:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
600189b8:	2000      	movs	r0, #0
600189ba:	4770      	bx	lr

600189bc <mcux_lpuart_irq_err_disable>:
	LPUART_DisableInterrupts(config->base, mask);
600189bc:	6843      	ldr	r3, [r0, #4]
600189be:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
600189c2:	6818      	ldr	r0, [r3, #0]
600189c4:	f000 bb13 	b.w	60018fee <LPUART_DisableInterrupts>

600189c8 <mcux_lpuart_irq_rx_disable>:
	const struct mcux_lpuart_config *config = dev->config;
600189c8:	6842      	ldr	r2, [r0, #4]
	LPUART_EnableRx(config->base, false);
600189ca:	6811      	ldr	r1, [r2, #0]
    {
        base->CTRL |= LPUART_CTRL_RE_MASK;
    }
    else
    {
        base->CTRL &= ~LPUART_CTRL_RE_MASK;
600189cc:	698b      	ldr	r3, [r1, #24]
600189ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
600189d2:	618b      	str	r3, [r1, #24]
	LPUART_DisableInterrupts(config->base, mask);
600189d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
600189d8:	6810      	ldr	r0, [r2, #0]
600189da:	f000 bb08 	b.w	60018fee <LPUART_DisableInterrupts>

600189de <mcux_lpuart_irq_tx_disable>:
	LPUART_DisableInterrupts(config->base, mask);
600189de:	6843      	ldr	r3, [r0, #4]
600189e0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
600189e4:	6818      	ldr	r0, [r3, #0]
600189e6:	f000 bb02 	b.w	60018fee <LPUART_DisableInterrupts>

600189ea <mcux_lpuart_irq_err_enable>:
	LPUART_EnableInterrupts(config->base, mask);
600189ea:	6843      	ldr	r3, [r0, #4]
600189ec:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
600189f0:	6818      	ldr	r0, [r3, #0]
600189f2:	f000 bae3 	b.w	60018fbc <LPUART_EnableInterrupts>

600189f6 <mcux_lpuart_irq_tx_enable>:
	LPUART_EnableInterrupts(config->base, mask);
600189f6:	6843      	ldr	r3, [r0, #4]
600189f8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
600189fc:	6818      	ldr	r0, [r3, #0]
600189fe:	f000 badd 	b.w	60018fbc <LPUART_EnableInterrupts>

60018a02 <mcux_lpuart_irq_rx_full>:
{
60018a02:	b508      	push	{r3, lr}
	uint32_t flags = LPUART_GetStatusFlags(config->base);
60018a04:	6843      	ldr	r3, [r0, #4]
60018a06:	6818      	ldr	r0, [r3, #0]
60018a08:	f7f5 fda6 	bl	6000e558 <LPUART_GetStatusFlags>
}
60018a0c:	f3c0 5040 	ubfx	r0, r0, #21, #1
60018a10:	bd08      	pop	{r3, pc}

60018a12 <mcux_lpuart_irq_tx_complete>:
{
60018a12:	b508      	push	{r3, lr}
	uint32_t flags = LPUART_GetStatusFlags(config->base);
60018a14:	6843      	ldr	r3, [r0, #4]
60018a16:	6818      	ldr	r0, [r3, #0]
60018a18:	f7f5 fd9e 	bl	6000e558 <LPUART_GetStatusFlags>
}
60018a1c:	f3c0 5080 	ubfx	r0, r0, #22, #1
60018a20:	bd08      	pop	{r3, pc}

60018a22 <mcux_lpuart_irq_tx_ready>:
{
60018a22:	b538      	push	{r3, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
60018a24:	6845      	ldr	r5, [r0, #4]
	uint32_t flags = LPUART_GetStatusFlags(config->base);
60018a26:	6828      	ldr	r0, [r5, #0]
60018a28:	f7f5 fd96 	bl	6000e558 <LPUART_GetStatusFlags>
60018a2c:	4604      	mov	r4, r0
	return (LPUART_GetEnabledInterrupts(config->base) & mask)
60018a2e:	6828      	ldr	r0, [r5, #0]
60018a30:	f7f5 fd7c 	bl	6000e52c <LPUART_GetEnabledInterrupts>
		&& (flags & kLPUART_TxDataRegEmptyFlag);
60018a34:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
60018a38:	bf18      	it	ne
60018a3a:	f3c4 50c0 	ubfxne	r0, r4, #23, #1
}
60018a3e:	bd38      	pop	{r3, r4, r5, pc}

60018a40 <mcux_lpuart_irq_is_pending>:
{
60018a40:	b538      	push	{r3, r4, r5, lr}
60018a42:	4605      	mov	r5, r0
	return (mcux_lpuart_irq_tx_ready(dev)
60018a44:	f7ff ffed 	bl	60018a22 <mcux_lpuart_irq_tx_ready>
		|| mcux_lpuart_irq_rx_pending(dev));
60018a48:	4604      	mov	r4, r0
60018a4a:	b968      	cbnz	r0, 60018a68 <mcux_lpuart_irq_is_pending+0x28>
	return (LPUART_GetEnabledInterrupts(config->base) & mask)
60018a4c:	686b      	ldr	r3, [r5, #4]
60018a4e:	6818      	ldr	r0, [r3, #0]
60018a50:	f7f5 fd6c 	bl	6000e52c <LPUART_GetEnabledInterrupts>
		&& mcux_lpuart_irq_rx_full(dev);
60018a54:	0283      	lsls	r3, r0, #10
60018a56:	d505      	bpl.n	60018a64 <mcux_lpuart_irq_is_pending+0x24>
60018a58:	4628      	mov	r0, r5
60018a5a:	f7ff ffd2 	bl	60018a02 <mcux_lpuart_irq_rx_full>
60018a5e:	1e04      	subs	r4, r0, #0
60018a60:	bf18      	it	ne
60018a62:	2401      	movne	r4, #1
}
60018a64:	4620      	mov	r0, r4
60018a66:	bd38      	pop	{r3, r4, r5, pc}
		|| mcux_lpuart_irq_rx_pending(dev));
60018a68:	2401      	movs	r4, #1
60018a6a:	e7fb      	b.n	60018a64 <mcux_lpuart_irq_is_pending+0x24>

60018a6c <mcux_lpuart_fifo_read>:
{
60018a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
60018a70:	460e      	mov	r6, r1
60018a72:	4617      	mov	r7, r2
	const struct mcux_lpuart_config *config = dev->config;
60018a74:	f8d0 8004 	ldr.w	r8, [r0, #4]
	while ((len - num_rx > 0) &&
60018a78:	2500      	movs	r5, #0
{
#if defined(FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT) && FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT
    uint32_t ctrl = base->CTRL;
    uint8_t result;
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
                            (((ctrl & LPUART_CTRL_M7_MASK) == 0U) && ((ctrl & LPUART_CTRL_M_MASK) == 0U) &&
60018a7a:	f640 0912 	movw	r9, #2066	; 0x812
60018a7e:	b2ec      	uxtb	r4, r5
60018a80:	42a7      	cmp	r7, r4
60018a82:	dd05      	ble.n	60018a90 <mcux_lpuart_fifo_read+0x24>
	       (LPUART_GetStatusFlags(config->base)
60018a84:	f8d8 0000 	ldr.w	r0, [r8]
60018a88:	f7f5 fd66 	bl	6000e558 <LPUART_GetStatusFlags>
	while ((len - num_rx > 0) &&
60018a8c:	0283      	lsls	r3, r0, #10
60018a8e:	d402      	bmi.n	60018a96 <mcux_lpuart_fifo_read+0x2a>
}
60018a90:	4620      	mov	r0, r4
60018a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx_data[num_rx++] = LPUART_ReadByte(config->base);
60018a96:	f8d8 2000 	ldr.w	r2, [r8]
    uint32_t ctrl = base->CTRL;
60018a9a:	6993      	ldr	r3, [r2, #24]
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
60018a9c:	0519      	lsls	r1, r3, #20
60018a9e:	d408      	bmi.n	60018ab2 <mcux_lpuart_fifo_read+0x46>
                            (((ctrl & LPUART_CTRL_M7_MASK) == 0U) && ((ctrl & LPUART_CTRL_M_MASK) == 0U) &&
60018aa0:	ea03 0309 	and.w	r3, r3, r9
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
60018aa4:	2b02      	cmp	r3, #2
60018aa6:	d004      	beq.n	60018ab2 <mcux_lpuart_fifo_read+0x46>
    {
        result = (uint8_t)(base->DATA & 0x7FU);
    }
    else
    {
        result = (uint8_t)base->DATA;
60018aa8:	69d3      	ldr	r3, [r2, #28]
60018aaa:	b2db      	uxtb	r3, r3
    }

    return result;
60018aac:	3501      	adds	r5, #1
60018aae:	5533      	strb	r3, [r6, r4]
60018ab0:	e7e5      	b.n	60018a7e <mcux_lpuart_fifo_read+0x12>
        result = (uint8_t)(base->DATA & 0x7FU);
60018ab2:	69d3      	ldr	r3, [r2, #28]
60018ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
60018ab8:	e7f8      	b.n	60018aac <mcux_lpuart_fifo_read+0x40>

60018aba <mcux_lpuart_fifo_fill>:
{
60018aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60018abe:	460e      	mov	r6, r1
60018ac0:	4617      	mov	r7, r2
	const struct mcux_lpuart_config *config = dev->config;
60018ac2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	while ((len - num_tx > 0) &&
60018ac6:	2500      	movs	r5, #0
60018ac8:	b2ec      	uxtb	r4, r5
60018aca:	42a7      	cmp	r7, r4
60018acc:	dd06      	ble.n	60018adc <mcux_lpuart_fifo_fill+0x22>
	       (LPUART_GetStatusFlags(config->base)
60018ace:	f8d8 0000 	ldr.w	r0, [r8]
	while ((len - num_tx > 0) &&
60018ad2:	3501      	adds	r5, #1
	       (LPUART_GetStatusFlags(config->base)
60018ad4:	f7f5 fd40 	bl	6000e558 <LPUART_GetStatusFlags>
	while ((len - num_tx > 0) &&
60018ad8:	0203      	lsls	r3, r0, #8
60018ada:	d402      	bmi.n	60018ae2 <mcux_lpuart_fifo_fill+0x28>
}
60018adc:	4620      	mov	r0, r4
60018ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LPUART_WriteByte(config->base, tx_data[num_tx++]);
60018ae2:	f8d8 3000 	ldr.w	r3, [r8]
    base->DATA = data;
60018ae6:	5d32      	ldrb	r2, [r6, r4]
60018ae8:	61da      	str	r2, [r3, #28]
}
60018aea:	e7ed      	b.n	60018ac8 <mcux_lpuart_fifo_fill+0xe>

60018aec <mcux_lpuart_poll_out>:
{
60018aec:	b538      	push	{r3, r4, r5, lr}
60018aee:	460c      	mov	r4, r1
	const struct mcux_lpuart_config *config = dev->config;
60018af0:	6845      	ldr	r5, [r0, #4]
	while (!(LPUART_GetStatusFlags(config->base)
60018af2:	6828      	ldr	r0, [r5, #0]
60018af4:	f7f5 fd30 	bl	6000e558 <LPUART_GetStatusFlags>
60018af8:	0203      	lsls	r3, r0, #8
60018afa:	d5fa      	bpl.n	60018af2 <mcux_lpuart_poll_out+0x6>
60018afc:	f04f 0210 	mov.w	r2, #16
60018b00:	f3ef 8311 	mrs	r3, BASEPRI
60018b04:	f382 8812 	msr	BASEPRI_MAX, r2
60018b08:	f3bf 8f6f 	isb	sy
	LPUART_WriteByte(config->base, c);
60018b0c:	682a      	ldr	r2, [r5, #0]
    base->DATA = data;
60018b0e:	61d4      	str	r4, [r2, #28]
	__asm__ volatile(
60018b10:	f383 8811 	msr	BASEPRI, r3
60018b14:	f3bf 8f6f 	isb	sy
}
60018b18:	bd38      	pop	{r3, r4, r5, pc}

60018b1a <mcux_lpuart_configure_init>:
{
60018b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct mcux_lpuart_config *config = dev->config;
60018b1e:	6844      	ldr	r4, [r0, #4]
{
60018b20:	b086      	sub	sp, #24
	struct mcux_lpuart_data *data = dev->data;
60018b22:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
60018b26:	460d      	mov	r5, r1
	if (!device_is_ready(config->clock_dev)) {
60018b28:	6860      	ldr	r0, [r4, #4]
60018b2a:	f000 fea2 	bl	60019872 <z_device_is_ready>
60018b2e:	4607      	mov	r7, r0
60018b30:	2800      	cmp	r0, #0
60018b32:	d070      	beq.n	60018c16 <mcux_lpuart_configure_init+0xfc>
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
60018b34:	6860      	ldr	r0, [r4, #4]
60018b36:	68e1      	ldr	r1, [r4, #12]
	if (api->get_rate == NULL) {
60018b38:	6883      	ldr	r3, [r0, #8]
60018b3a:	68db      	ldr	r3, [r3, #12]
60018b3c:	b92b      	cbnz	r3, 60018b4a <mcux_lpuart_configure_init+0x30>
		return -EINVAL;
60018b3e:	f06f 0615 	mvn.w	r6, #21
}
60018b42:	4630      	mov	r0, r6
60018b44:	b006      	add	sp, #24
60018b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->get_rate(dev, sys, rate);
60018b4a:	466a      	mov	r2, sp
60018b4c:	4798      	blx	r3
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
60018b4e:	4606      	mov	r6, r0
60018b50:	2800      	cmp	r0, #0
60018b52:	d1f4      	bne.n	60018b3e <mcux_lpuart_configure_init+0x24>
	LPUART_GetDefaultConfig(&uart_config);
60018b54:	a801      	add	r0, sp, #4
60018b56:	f7f5 fccf 	bl	6000e4f8 <LPUART_GetDefaultConfig>
	switch (cfg->parity) {
60018b5a:	792b      	ldrb	r3, [r5, #4]
60018b5c:	2b01      	cmp	r3, #1
60018b5e:	d005      	beq.n	60018b6c <mcux_lpuart_configure_init+0x52>
60018b60:	2b02      	cmp	r3, #2
60018b62:	d004      	beq.n	60018b6e <mcux_lpuart_configure_init+0x54>
60018b64:	b11b      	cbz	r3, 60018b6e <mcux_lpuart_configure_init+0x54>
		return -ENOTSUP;
60018b66:	f06f 0685 	mvn.w	r6, #133	; 0x85
60018b6a:	e7ea      	b.n	60018b42 <mcux_lpuart_configure_init+0x28>
	switch (cfg->parity) {
60018b6c:	2303      	movs	r3, #3
		uart_config.parityMode = kLPUART_ParityDisabled;
60018b6e:	f88d 3008 	strb.w	r3, [sp, #8]
	switch (cfg->data_bits) {
60018b72:	79ab      	ldrb	r3, [r5, #6]
60018b74:	2b02      	cmp	r3, #2
60018b76:	d04a      	beq.n	60018c0e <mcux_lpuart_configure_init+0xf4>
60018b78:	2b03      	cmp	r3, #3
60018b7a:	d1f4      	bne.n	60018b66 <mcux_lpuart_configure_init+0x4c>
60018b7c:	2300      	movs	r3, #0
		uart_config.dataBitsCount  = kLPUART_SevenDataBits;
60018b7e:	f88d 3009 	strb.w	r3, [sp, #9]
	switch (cfg->stop_bits) {
60018b82:	796b      	ldrb	r3, [r5, #5]
60018b84:	2b01      	cmp	r3, #1
60018b86:	d044      	beq.n	60018c12 <mcux_lpuart_configure_init+0xf8>
60018b88:	2b03      	cmp	r3, #3
60018b8a:	d1ec      	bne.n	60018b66 <mcux_lpuart_configure_init+0x4c>
60018b8c:	2301      	movs	r3, #1
		uart_config.stopBitCount = kLPUART_OneStopBit;
60018b8e:	f88d 300b 	strb.w	r3, [sp, #11]
	switch (cfg->flow_ctrl) {
60018b92:	79eb      	ldrb	r3, [r5, #7]
60018b94:	2b01      	cmp	r3, #1
60018b96:	d004      	beq.n	60018ba2 <mcux_lpuart_configure_init+0x88>
60018b98:	2b03      	cmp	r3, #3
60018b9a:	d001      	beq.n	60018ba0 <mcux_lpuart_configure_init+0x86>
60018b9c:	2b00      	cmp	r3, #0
60018b9e:	d1e2      	bne.n	60018b66 <mcux_lpuart_configure_init+0x4c>
60018ba0:	2700      	movs	r7, #0
	uart_config.baudRate_Bps = cfg->baudrate;
60018ba2:	682b      	ldr	r3, [r5, #0]
	LPUART_Init(config->base, &uart_config, clock_freq);
60018ba4:	a901      	add	r1, sp, #4
		uart_config.enableTxCTS = false;
60018ba6:	f88d 700f 	strb.w	r7, [sp, #15]
	uart_config.baudRate_Bps = cfg->baudrate;
60018baa:	9301      	str	r3, [sp, #4]
	uart_config.enableTx = false;
60018bac:	f44f 7380 	mov.w	r3, #256	; 0x100
		uart_config.enableRxRTS = false;
60018bb0:	f88d 700e 	strb.w	r7, [sp, #14]
	uart_config.enableTx = false;
60018bb4:	f8ad 3014 	strh.w	r3, [sp, #20]
	LPUART_Init(config->base, &uart_config, clock_freq);
60018bb8:	9a00      	ldr	r2, [sp, #0]
60018bba:	6820      	ldr	r0, [r4, #0]
60018bbc:	f7f5 fb8c 	bl	6000e2d8 <LPUART_Init>
	if (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485) {
60018bc0:	79eb      	ldrb	r3, [r5, #7]
60018bc2:	2b03      	cmp	r3, #3
60018bc4:	d10b      	bne.n	60018bde <mcux_lpuart_configure_init+0xc4>
		config->base->MODIR |= LPUART_MODIR_TXRTSE(true);
60018bc6:	6822      	ldr	r2, [r4, #0]
60018bc8:	6a53      	ldr	r3, [r2, #36]	; 0x24
60018bca:	f043 0302 	orr.w	r3, r3, #2
60018bce:	6253      	str	r3, [r2, #36]	; 0x24
		if (!config->rs485_de_active_low) {
60018bd0:	7d63      	ldrb	r3, [r4, #21]
60018bd2:	b923      	cbnz	r3, 60018bde <mcux_lpuart_configure_init+0xc4>
			config->base->MODIR |= LPUART_MODIR_TXRTSPOL(1);
60018bd4:	6822      	ldr	r2, [r4, #0]
60018bd6:	6a53      	ldr	r3, [r2, #36]	; 0x24
60018bd8:	f043 0304 	orr.w	r3, r3, #4
60018bdc:	6253      	str	r3, [r2, #36]	; 0x24
	config->base->CTRL |= LPUART_CTRL_TE(true);
60018bde:	6822      	ldr	r2, [r4, #0]
60018be0:	6993      	ldr	r3, [r2, #24]
60018be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
60018be6:	6193      	str	r3, [r2, #24]
	if (config->loopback_en) {
60018be8:	7da3      	ldrb	r3, [r4, #22]
60018bea:	b14b      	cbz	r3, 60018c00 <mcux_lpuart_configure_init+0xe6>
		config->base->CTRL |= LPUART_CTRL_LOOPS_MASK;
60018bec:	6822      	ldr	r2, [r4, #0]
60018bee:	6993      	ldr	r3, [r2, #24]
60018bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
60018bf4:	6193      	str	r3, [r2, #24]
		config->base->CTRL &= ~LPUART_CTRL_RSRC_MASK;
60018bf6:	6822      	ldr	r2, [r4, #0]
60018bf8:	6993      	ldr	r3, [r2, #24]
60018bfa:	f023 0320 	bic.w	r3, r3, #32
60018bfe:	6193      	str	r3, [r2, #24]
	data->uart_config = *cfg;
60018c00:	f108 0308 	add.w	r3, r8, #8
60018c04:	e895 0003 	ldmia.w	r5, {r0, r1}
60018c08:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
60018c0c:	e799      	b.n	60018b42 <mcux_lpuart_configure_init+0x28>
	switch (cfg->data_bits) {
60018c0e:	2301      	movs	r3, #1
60018c10:	e7b5      	b.n	60018b7e <mcux_lpuart_configure_init+0x64>
	switch (cfg->stop_bits) {
60018c12:	2300      	movs	r3, #0
60018c14:	e7bb      	b.n	60018b8e <mcux_lpuart_configure_init+0x74>
		return -ENODEV;
60018c16:	f06f 0612 	mvn.w	r6, #18
60018c1a:	e792      	b.n	60018b42 <mcux_lpuart_configure_init+0x28>

60018c1c <mcux_lpuart_err_check>:
{
60018c1c:	b538      	push	{r3, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
60018c1e:	6845      	ldr	r5, [r0, #4]
	uint32_t flags = LPUART_GetStatusFlags(config->base);
60018c20:	6828      	ldr	r0, [r5, #0]
60018c22:	f7f5 fc99 	bl	6000e558 <LPUART_GetStatusFlags>
	if (flags & kLPUART_RxOverrunFlag) {
60018c26:	f3c0 44c0 	ubfx	r4, r0, #19, #1
	if (flags & kLPUART_ParityErrorFlag) {
60018c2a:	03c1      	lsls	r1, r0, #15
	LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag |
60018c2c:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
		err |= UART_ERROR_PARITY;
60018c30:	bf48      	it	mi
60018c32:	f044 0402 	orrmi.w	r4, r4, #2
	if (flags & kLPUART_FramingErrorFlag) {
60018c36:	0382      	lsls	r2, r0, #14
		err |= UART_ERROR_FRAMING;
60018c38:	bf48      	it	mi
60018c3a:	f044 0404 	orrmi.w	r4, r4, #4
	if (flags & kLPUART_NoiseErrorFlag) {
60018c3e:	0343      	lsls	r3, r0, #13
	LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag |
60018c40:	6828      	ldr	r0, [r5, #0]
		err |= UART_ERROR_PARITY;
60018c42:	bf48      	it	mi
60018c44:	f044 0402 	orrmi.w	r4, r4, #2
	LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag |
60018c48:	f7f5 fc92 	bl	6000e570 <LPUART_ClearStatusFlags>
}
60018c4c:	4620      	mov	r0, r4
60018c4e:	bd38      	pop	{r3, r4, r5, pc}

60018c50 <mcux_lpuart_isr>:
{
60018c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct mcux_lpuart_config *config = dev->config;
60018c52:	6846      	ldr	r6, [r0, #4]
{
60018c54:	4604      	mov	r4, r0
	struct mcux_lpuart_data *data = dev->data;
60018c56:	6907      	ldr	r7, [r0, #16]
	const uint32_t status = LPUART_GetStatusFlags(config->base);
60018c58:	6830      	ldr	r0, [r6, #0]
60018c5a:	f7f5 fc7d 	bl	6000e558 <LPUART_GetStatusFlags>
	if (data->callback) {
60018c5e:	683b      	ldr	r3, [r7, #0]
	const uint32_t status = LPUART_GetStatusFlags(config->base);
60018c60:	4605      	mov	r5, r0
	if (data->callback) {
60018c62:	b113      	cbz	r3, 60018c6a <mcux_lpuart_isr+0x1a>
		data->callback(dev, data->cb_data);
60018c64:	6879      	ldr	r1, [r7, #4]
60018c66:	4620      	mov	r0, r4
60018c68:	4798      	blx	r3
	if (status & kLPUART_RxOverrunFlag) {
60018c6a:	032b      	lsls	r3, r5, #12
60018c6c:	d506      	bpl.n	60018c7c <mcux_lpuart_isr+0x2c>
		LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag);
60018c6e:	6830      	ldr	r0, [r6, #0]
60018c70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
}
60018c74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag);
60018c78:	f7f5 bc7a 	b.w	6000e570 <LPUART_ClearStatusFlags>
}
60018c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

60018c7e <mcux_lpuart_config_func_0>:
			    &mcux_lpuart_##n##_config,			\
			    PRE_KERNEL_1,				\
			    CONFIG_SERIAL_INIT_PRIORITY,		\
			    &mcux_lpuart_driver_api);			\

DT_INST_FOREACH_STATUS_OKAY(LPUART_MCUX_INIT)
60018c7e:	2200      	movs	r2, #0
60018c80:	2019      	movs	r0, #25
60018c82:	b508      	push	{r3, lr}
60018c84:	4611      	mov	r1, r2
60018c86:	f7f1 fe35 	bl	6000a8f4 <z_arm_irq_priority_set>
60018c8a:	2019      	movs	r0, #25
60018c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
60018c90:	f7f1 be22 	b.w	6000a8d8 <arch_irq_enable>

60018c94 <mcux_lpuart_irq_rx_enable>:
{
60018c94:	b510      	push	{r4, lr}
	const struct mcux_lpuart_config *config = dev->config;
60018c96:	6844      	ldr	r4, [r0, #4]
	LPUART_EnableInterrupts(config->base, mask);
60018c98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
60018c9c:	6820      	ldr	r0, [r4, #0]
60018c9e:	f000 f98d 	bl	60018fbc <LPUART_EnableInterrupts>
	LPUART_EnableRx(config->base, true);
60018ca2:	6822      	ldr	r2, [r4, #0]
        base->CTRL |= LPUART_CTRL_RE_MASK;
60018ca4:	6993      	ldr	r3, [r2, #24]
60018ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
60018caa:	6193      	str	r3, [r2, #24]
}
60018cac:	bd10      	pop	{r4, pc}

60018cae <mcux_lpuart_init>:
{
60018cae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
60018cb0:	6845      	ldr	r5, [r0, #4]
{
60018cb2:	4604      	mov	r4, r0
	struct mcux_lpuart_data *data = dev->data;
60018cb4:	6901      	ldr	r1, [r0, #16]
	uart_api_config->baudrate = config->baud_rate;
60018cb6:	692b      	ldr	r3, [r5, #16]
	mcux_lpuart_configure_init(dev, uart_api_config);
60018cb8:	3108      	adds	r1, #8
	uart_api_config->baudrate = config->baud_rate;
60018cba:	600b      	str	r3, [r1, #0]
	uart_api_config->parity = UART_CFG_PARITY_NONE;
60018cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
60018cc0:	808b      	strh	r3, [r1, #4]
	uart_api_config->data_bits = UART_CFG_DATA_BITS_8;
60018cc2:	2303      	movs	r3, #3
60018cc4:	718b      	strb	r3, [r1, #6]
	uart_api_config->flow_ctrl = config->flow_ctrl;
60018cc6:	7d2b      	ldrb	r3, [r5, #20]
60018cc8:	71cb      	strb	r3, [r1, #7]
	mcux_lpuart_configure_init(dev, uart_api_config);
60018cca:	f7ff ff26 	bl	60018b1a <mcux_lpuart_configure_init>
	ret = pinctrl_lookup_state(config, id, &state);
60018cce:	aa01      	add	r2, sp, #4
60018cd0:	2100      	movs	r1, #0
60018cd2:	68a8      	ldr	r0, [r5, #8]
60018cd4:	f000 f843 	bl	60018d5e <pinctrl_lookup_state>
	if (ret < 0) {
60018cd8:	2800      	cmp	r0, #0
60018cda:	db0b      	blt.n	60018cf4 <mcux_lpuart_init+0x46>
	return pinctrl_apply_state_direct(config, state);
60018cdc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
60018cde:	2200      	movs	r2, #0
60018ce0:	7919      	ldrb	r1, [r3, #4]
60018ce2:	6818      	ldr	r0, [r3, #0]
60018ce4:	f000 f84e 	bl	60018d84 <pinctrl_configure_pins>
	if (err < 0) {
60018ce8:	2800      	cmp	r0, #0
60018cea:	db03      	blt.n	60018cf4 <mcux_lpuart_init+0x46>
	config->irq_config_func(dev);
60018cec:	4620      	mov	r0, r4
60018cee:	69ab      	ldr	r3, [r5, #24]
60018cf0:	4798      	blx	r3
	return 0;
60018cf2:	2000      	movs	r0, #0
}
60018cf4:	b003      	add	sp, #12
60018cf6:	bd30      	pop	{r4, r5, pc}

60018cf8 <mcux_lpuart_configure>:
{
60018cf8:	b538      	push	{r3, r4, r5, lr}
	LPUART_Deinit(config->base);
60018cfa:	6843      	ldr	r3, [r0, #4]
{
60018cfc:	4604      	mov	r4, r0
60018cfe:	460d      	mov	r5, r1
	LPUART_Deinit(config->base);
60018d00:	6818      	ldr	r0, [r3, #0]
60018d02:	f7f5 fbdd 	bl	6000e4c0 <LPUART_Deinit>
	int ret = mcux_lpuart_configure_init(dev, cfg);
60018d06:	4620      	mov	r0, r4
60018d08:	4629      	mov	r1, r5
60018d0a:	f7ff ff06 	bl	60018b1a <mcux_lpuart_configure_init>
	if (ret) {
60018d0e:	4604      	mov	r4, r0
60018d10:	b918      	cbnz	r0, 60018d1a <mcux_lpuart_configure+0x22>
	return z_impl_k_sleep(timeout);
60018d12:	200a      	movs	r0, #10
60018d14:	2100      	movs	r1, #0
60018d16:	f7f8 ffb7 	bl	60011c88 <z_impl_k_sleep>
}
60018d1a:	4620      	mov	r0, r4
60018d1c:	bd38      	pop	{r3, r4, r5, pc}

60018d1e <mcux_lpuart_poll_in>:
{
60018d1e:	b538      	push	{r3, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
60018d20:	6845      	ldr	r5, [r0, #4]
{
60018d22:	460c      	mov	r4, r1
	uint32_t flags = LPUART_GetStatusFlags(config->base);
60018d24:	6828      	ldr	r0, [r5, #0]
60018d26:	f7f5 fc17 	bl	6000e558 <LPUART_GetStatusFlags>
	if (flags & kLPUART_RxDataRegFullFlag) {
60018d2a:	0280      	lsls	r0, r0, #10
60018d2c:	d514      	bpl.n	60018d58 <mcux_lpuart_poll_in+0x3a>
		*c = LPUART_ReadByte(config->base);
60018d2e:	682a      	ldr	r2, [r5, #0]
    uint32_t ctrl = base->CTRL;
60018d30:	6993      	ldr	r3, [r2, #24]
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
60018d32:	0519      	lsls	r1, r3, #20
60018d34:	d40c      	bmi.n	60018d50 <mcux_lpuart_poll_in+0x32>
                            (((ctrl & LPUART_CTRL_M7_MASK) == 0U) && ((ctrl & LPUART_CTRL_M_MASK) == 0U) &&
60018d36:	f423 63fd 	bic.w	r3, r3, #2024	; 0x7e8
60018d3a:	f023 0305 	bic.w	r3, r3, #5
60018d3e:	051b      	lsls	r3, r3, #20
60018d40:	0d1b      	lsrs	r3, r3, #20
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
60018d42:	2b02      	cmp	r3, #2
60018d44:	d004      	beq.n	60018d50 <mcux_lpuart_poll_in+0x32>
        result = (uint8_t)base->DATA;
60018d46:	69d3      	ldr	r3, [r2, #28]
60018d48:	b2db      	uxtb	r3, r3
		ret = 0;
60018d4a:	2000      	movs	r0, #0
		*c = LPUART_ReadByte(config->base);
60018d4c:	7023      	strb	r3, [r4, #0]
}
60018d4e:	bd38      	pop	{r3, r4, r5, pc}
        result = (uint8_t)(base->DATA & 0x7FU);
60018d50:	69d3      	ldr	r3, [r2, #28]
60018d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
60018d56:	e7f8      	b.n	60018d4a <mcux_lpuart_poll_in+0x2c>
	int ret = -1;
60018d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return ret;
60018d5c:	e7f7      	b.n	60018d4e <mcux_lpuart_poll_in+0x30>

60018d5e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
60018d5e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
60018d60:	6803      	ldr	r3, [r0, #0]
60018d62:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
60018d64:	7905      	ldrb	r5, [r0, #4]
60018d66:	6804      	ldr	r4, [r0, #0]
60018d68:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
60018d6c:	42a3      	cmp	r3, r4
60018d6e:	d302      	bcc.n	60018d76 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
60018d70:	f06f 0001 	mvn.w	r0, #1
}
60018d74:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
60018d76:	795c      	ldrb	r4, [r3, #5]
60018d78:	428c      	cmp	r4, r1
60018d7a:	d001      	beq.n	60018d80 <pinctrl_lookup_state+0x22>
		(*state)++;
60018d7c:	3308      	adds	r3, #8
60018d7e:	e7f0      	b.n	60018d62 <pinctrl_lookup_state+0x4>
			return 0;
60018d80:	2000      	movs	r0, #0
60018d82:	e7f7      	b.n	60018d74 <pinctrl_lookup_state+0x16>

60018d84 <pinctrl_configure_pins>:
{
60018d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0U; i < pin_cnt; i++) {
60018d88:	2600      	movs	r6, #0
				*gpr_register &= ~(0x1 << pins[i].pinmux.gpr_shift);
60018d8a:	f04f 0801 	mov.w	r8, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
60018d8e:	b2f3      	uxtb	r3, r6
60018d90:	4299      	cmp	r1, r3
60018d92:	d802      	bhi.n	60018d9a <pinctrl_configure_pins+0x16>
}
60018d94:	2000      	movs	r0, #0
60018d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t mux_mode = pins[i].pinmux.mux_mode;
60018d9a:	7c42      	ldrb	r2, [r0, #17]
			(volatile uint32_t *)((uintptr_t)pins[i].pinmux.gpr_register);
60018d9c:	68c4      	ldr	r4, [r0, #12]
		uint32_t mux_mode = pins[i].pinmux.mux_mode;
60018d9e:	f002 070f 	and.w	r7, r2, #15
		uint32_t mux_register = pins[i].pinmux.mux_register;
60018da2:	f8d0 9000 	ldr.w	r9, [r0]
		uint32_t input_register = pins[i].pinmux.input_register;
60018da6:	f8d0 e008 	ldr.w	lr, [r0, #8]
		uint32_t input_daisy = pins[i].pinmux.input_daisy;
60018daa:	0912      	lsrs	r2, r2, #4
		uint32_t config_register = pins[i].pinmux.config_register;
60018dac:	f8d0 c004 	ldr.w	ip, [r0, #4]
		uint32_t pin_ctrl_flags = pins[i].pin_ctrl_flags;
60018db0:	6945      	ldr	r5, [r0, #20]
		if (gpr_register) {
60018db2:	b184      	cbz	r4, 60018dd6 <pinctrl_configure_pins+0x52>
			if (pins[i].pinmux.gpr_val) {
60018db4:	7c83      	ldrb	r3, [r0, #18]
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
60018db6:	f890 b010 	ldrb.w	fp, [r0, #16]
			if (pins[i].pinmux.gpr_val) {
60018dba:	f013 0f01 	tst.w	r3, #1
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
60018dbe:	f00b 0b1f 	and.w	fp, fp, #31
			if (pins[i].pinmux.gpr_val) {
60018dc2:	d01e      	beq.n	60018e02 <pinctrl_configure_pins+0x7e>
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
60018dc4:	f003 0301 	and.w	r3, r3, #1
				*gpr_register |=
60018dc8:	f8d4 a000 	ldr.w	sl, [r4]
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
60018dcc:	fa03 f30b 	lsl.w	r3, r3, fp
				*gpr_register |=
60018dd0:	ea43 030a 	orr.w	r3, r3, sl
				*gpr_register &= ~(0x1 << pins[i].pinmux.gpr_shift);
60018dd4:	6023      	str	r3, [r4, #0]
			IOMUXC_SW_MUX_CTL_PAD_SION(MCUX_IMX_INPUT_ENABLE(pin_ctrl_flags));
60018dd6:	0feb      	lsrs	r3, r5, #31
			IOMUXC_SW_MUX_CTL_PAD_MUX_MODE(mux_mode) |
60018dd8:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
		*((volatile uint32_t *)((uintptr_t)mux_register)) =
60018ddc:	f8c9 7000 	str.w	r7, [r9]
		if (input_register) {
60018de0:	f1be 0f00 	cmp.w	lr, #0
60018de4:	d003      	beq.n	60018dee <pinctrl_configure_pins+0x6a>
				IOMUXC_SELECT_INPUT_DAISY(input_daisy);
60018de6:	f002 0207 	and.w	r2, r2, #7
			*((volatile uint32_t *)((uintptr_t)input_register)) =
60018dea:	f8ce 2000 	str.w	r2, [lr]
		if (config_register) {
60018dee:	f1bc 0f00 	cmp.w	ip, #0
60018df2:	d003      	beq.n	60018dfc <pinctrl_configure_pins+0x78>
				pin_ctrl_flags & (~(0x1 << MCUX_IMX_INPUT_ENABLE_SHIFT));
60018df4:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
			*((volatile uint32_t *)((uintptr_t)config_register)) =
60018df8:	f8cc 5000 	str.w	r5, [ip]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
60018dfc:	3601      	adds	r6, #1
60018dfe:	3018      	adds	r0, #24
60018e00:	e7c5      	b.n	60018d8e <pinctrl_configure_pins+0xa>
				*gpr_register &= ~(0x1 << pins[i].pinmux.gpr_shift);
60018e02:	6823      	ldr	r3, [r4, #0]
60018e04:	fa08 fb0b 	lsl.w	fp, r8, fp
60018e08:	ea23 030b 	bic.w	r3, r3, fp
60018e0c:	e7e2      	b.n	60018dd4 <pinctrl_configure_pins+0x50>

60018e0e <SystemInitHook>:
   -- SystemInitHook()
   ---------------------------------------------------------------------------- */

__attribute__ ((weak)) void SystemInitHook (void) {
  /* Void implementation of the weak function. */
}
60018e0e:	4770      	bx	lr

60018e10 <LPI2C_MasterCheckAndClearError>:
{
60018e10:	b510      	push	{r4, lr}
    if (0U != status)
60018e12:	f411 5470 	ands.w	r4, r1, #15360	; 0x3c00
{
60018e16:	4602      	mov	r2, r0
    if (0U != status)
60018e18:	d01b      	beq.n	60018e52 <LPI2C_MasterCheckAndClearError+0x42>
        if (0U != (status & (uint32_t)kLPI2C_MasterPinLowTimeoutFlag))
60018e1a:	048b      	lsls	r3, r1, #18
60018e1c:	d410      	bmi.n	60018e40 <LPI2C_MasterCheckAndClearError+0x30>
        else if (0U != (status & (uint32_t)kLPI2C_MasterArbitrationLostFlag))
60018e1e:	050b      	lsls	r3, r1, #20
60018e20:	d411      	bmi.n	60018e46 <LPI2C_MasterCheckAndClearError+0x36>
        else if (0U != (status & (uint32_t)kLPI2C_MasterNackDetectFlag))
60018e22:	054b      	lsls	r3, r1, #21
60018e24:	d412      	bmi.n	60018e4c <LPI2C_MasterCheckAndClearError+0x3c>
    status_t result = kStatus_Success;
60018e26:	f411 5f80 	tst.w	r1, #4096	; 0x1000
60018e2a:	f240 3387 	movw	r3, #903	; 0x387
60018e2e:	bf0c      	ite	eq
60018e30:	2000      	moveq	r0, #0
60018e32:	4618      	movne	r0, r3
    base->MSR = statusMask;
60018e34:	6154      	str	r4, [r2, #20]
        base->MCR |= LPI2C_MCR_RRF_MASK | LPI2C_MCR_RTF_MASK;
60018e36:	6913      	ldr	r3, [r2, #16]
60018e38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
60018e3c:	6113      	str	r3, [r2, #16]
}
60018e3e:	bd10      	pop	{r4, pc}
            result = kStatus_LPI2C_PinLowTimeout;
60018e40:	f240 308a 	movw	r0, #906	; 0x38a
60018e44:	e7f6      	b.n	60018e34 <LPI2C_MasterCheckAndClearError+0x24>
            result = kStatus_LPI2C_ArbitrationLost;
60018e46:	f240 3089 	movw	r0, #905	; 0x389
60018e4a:	e7f3      	b.n	60018e34 <LPI2C_MasterCheckAndClearError+0x24>
            result = kStatus_LPI2C_Nak;
60018e4c:	f240 3086 	movw	r0, #902	; 0x386
60018e50:	e7f0      	b.n	60018e34 <LPI2C_MasterCheckAndClearError+0x24>
    status_t result = kStatus_Success;
60018e52:	4620      	mov	r0, r4
    return result;
60018e54:	e7f3      	b.n	60018e3e <LPI2C_MasterCheckAndClearError+0x2e>

60018e56 <LPI2C_CheckForBusyBus>:
    return base->MSR;
60018e56:	6943      	ldr	r3, [r0, #20]
    if ((0U != (status & (uint32_t)kLPI2C_MasterBusBusyFlag)) && (0U == (status & (uint32_t)kLPI2C_MasterBusyFlag)))
60018e58:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    status_t ret = kStatus_Success;
60018e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
}
60018e60:	bf0c      	ite	eq
60018e62:	f44f 7061 	moveq.w	r0, #900	; 0x384
60018e66:	2000      	movne	r0, #0
60018e68:	4770      	bx	lr

60018e6a <LPI2C_MasterSetBaudRate>:
{
60018e6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t filtScl = (uint8_t)((base->MCFGR2 & LPI2C_MCFGR2_FILTSCL_MASK) >> LPI2C_MCFGR2_FILTSCL_SHIFT);
60018e6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    uint8_t bestclkCycle = 0U;
60018e70:	2700      	movs	r7, #0
    wasEnabled = (0U != ((base->MCR & LPI2C_MCR_MEN_MASK) >> LPI2C_MCR_MEN_SHIFT));
60018e72:	6904      	ldr	r4, [r0, #16]
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60018e74:	f04f 0b0a 	mov.w	fp, #10
    uint8_t filtScl = (uint8_t)((base->MCFGR2 & LPI2C_MCFGR2_FILTSCL_MASK) >> LPI2C_MCFGR2_FILTSCL_SHIFT);
60018e78:	f3c3 4303 	ubfx	r3, r3, #16, #4
    uint8_t bestDivider = 1U;
60018e7c:	f04f 0c01 	mov.w	ip, #1
    wasEnabled = (0U != ((base->MCR & LPI2C_MCR_MEN_MASK) >> LPI2C_MCR_MEN_SHIFT));
60018e80:	f004 0401 	and.w	r4, r4, #1
    uint32_t bestError = 0xffffffffu;
60018e84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    uint8_t bestPre     = 0U;
60018e88:	46b9      	mov	r9, r7
    for (prescale = 0U; prescale <= 7U; prescale++)
60018e8a:	46be      	mov	lr, r7
    wasEnabled = (0U != ((base->MCR & LPI2C_MCR_MEN_MASK) >> LPI2C_MCR_MEN_SHIFT));
60018e8c:	9400      	str	r4, [sp, #0]
    uint8_t divider     = 1U;
60018e8e:	4665      	mov	r5, ip
    base->MCR = (base->MCR & ~LPI2C_MCR_MEN_MASK) | LPI2C_MCR_MEN(enable);
60018e90:	6904      	ldr	r4, [r0, #16]
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60018e92:	3302      	adds	r3, #2
60018e94:	f024 0401 	bic.w	r4, r4, #1
60018e98:	6104      	str	r4, [r0, #16]
60018e9a:	fb0b f401 	mul.w	r4, fp, r1
60018e9e:	9401      	str	r4, [sp, #4]
60018ea0:	9c01      	ldr	r4, [sp, #4]
60018ea2:	fbb4 f4f5 	udiv	r4, r4, r5
60018ea6:	fbb4 f4f2 	udiv	r4, r4, r2
60018eaa:	fbb3 f8f5 	udiv	r8, r3, r5
60018eae:	3405      	adds	r4, #5
60018eb0:	f1c8 06fe 	rsb	r6, r8, #254	; 0xfe
60018eb4:	fbb4 f4fb 	udiv	r4, r4, fp
60018eb8:	4434      	add	r4, r6
        if (clkCycle > (120U - (2U + filtScl) / divider))
60018eba:	f1c8 0678 	rsb	r6, r8, #120	; 0x78
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60018ebe:	b2e4      	uxtb	r4, r4
        if (clkCycle > (120U - (2U + filtScl) / divider))
60018ec0:	42b4      	cmp	r4, r6
60018ec2:	d95e      	bls.n	60018f82 <LPI2C_MasterSetBaudRate+0x118>
    for (prescale = 0U; prescale <= 7U; prescale++)
60018ec4:	f10e 0e01 	add.w	lr, lr, #1
        divider *= 2U;
60018ec8:	006d      	lsls	r5, r5, #1
    for (prescale = 0U; prescale <= 7U; prescale++)
60018eca:	fa5f fe8e 	uxtb.w	lr, lr
        divider *= 2U;
60018ece:	b2ed      	uxtb	r5, r5
    for (prescale = 0U; prescale <= 7U; prescale++)
60018ed0:	f1be 0f08 	cmp.w	lr, #8
60018ed4:	d1e4      	bne.n	60018ea0 <LPI2C_MasterSetBaudRate+0x36>
    while (tmpHigh > (bestclkCycle - 52U * sourceClock_Hz / baudRate_Hz / bestDivider / 100U + 1U))
60018ed6:	2664      	movs	r6, #100	; 0x64
60018ed8:	1c7d      	adds	r5, r7, #1
    uint8_t tmpHigh = (bestclkCycle - (2U + filtScl) / bestDivider) / 2U;
60018eda:	fbb3 f4fc 	udiv	r4, r3, ip
    while (tmpHigh > (bestclkCycle - 52U * sourceClock_Hz / baudRate_Hz / bestDivider / 100U + 1U))
60018ede:	2334      	movs	r3, #52	; 0x34
    uint8_t tmpHigh = (bestclkCycle - (2U + filtScl) / bestDivider) / 2U;
60018ee0:	1b3c      	subs	r4, r7, r4
    while (tmpHigh > (bestclkCycle - 52U * sourceClock_Hz / baudRate_Hz / bestDivider / 100U + 1U))
60018ee2:	434b      	muls	r3, r1
    uint8_t tmpHigh = (bestclkCycle - (2U + filtScl) / bestDivider) / 2U;
60018ee4:	f3c4 0447 	ubfx	r4, r4, #1, #8
    while (tmpHigh > (bestclkCycle - 52U * sourceClock_Hz / baudRate_Hz / bestDivider / 100U + 1U))
60018ee8:	fbb3 f3f2 	udiv	r3, r3, r2
60018eec:	fbb3 f3fc 	udiv	r3, r3, ip
60018ef0:	fbb3 f3f6 	udiv	r3, r3, r6
60018ef4:	1aed      	subs	r5, r5, r3
60018ef6:	42ac      	cmp	r4, r5
60018ef8:	d85d      	bhi.n	60018fb6 <LPI2C_MasterSetBaudRate+0x14c>
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60018efa:	2514      	movs	r5, #20
    uint8_t tmpHold = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 2U) - 1U;
60018efc:	fbb1 f2f2 	udiv	r2, r1, r2
60018f00:	fbb2 f1fc 	udiv	r1, r2, ip
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60018f04:	fbb2 f2f5 	udiv	r2, r2, r5
    uint8_t tmpHold = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 2U) - 1U;
60018f08:	084b      	lsrs	r3, r1, #1
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60018f0a:	f10c 0502 	add.w	r5, ip, #2
    uint8_t tmpDataVd = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 4U) - 1U;
60018f0e:	0889      	lsrs	r1, r1, #2
    uint8_t tmpHold = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 2U) - 1U;
60018f10:	3b01      	subs	r3, #1
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60018f12:	42aa      	cmp	r2, r5
    uint8_t tmpDataVd = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 4U) - 1U;
60018f14:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    uint8_t tmpHold = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 2U) - 1U;
60018f18:	b2db      	uxtb	r3, r3
    uint8_t tmpDataVd = (uint8_t)(sourceClock_Hz / baudRate_Hz / bestDivider / 4U) - 1U;
60018f1a:	b2c9      	uxtb	r1, r1
    if ((sourceClock_Hz / baudRate_Hz / 20U) > (bestDivider + 2U))
60018f1c:	d910      	bls.n	60018f40 <LPI2C_MasterSetBaudRate+0xd6>
        uint8_t filtSda = (uint8_t)((base->MCFGR2 & LPI2C_MCFGR2_FILTSDA_MASK) >> LPI2C_MCFGR2_FILTSDA_SHIFT);
60018f1e:	6a85      	ldr	r5, [r0, #40]	; 0x28
        if (filtSda < (sourceClock_Hz / baudRate_Hz / 20U - bestDivider - 2U))
60018f20:	3a02      	subs	r2, #2
        uint8_t filtSda = (uint8_t)((base->MCFGR2 & LPI2C_MCFGR2_FILTSDA_MASK) >> LPI2C_MCFGR2_FILTSDA_SHIFT);
60018f22:	f3c5 6503 	ubfx	r5, r5, #24, #4
        if (filtSda < (sourceClock_Hz / baudRate_Hz / 20U - bestDivider - 2U))
60018f26:	eba2 020c 	sub.w	r2, r2, ip
60018f2a:	4295      	cmp	r5, r2
            filtSda = (uint8_t)(sourceClock_Hz / baudRate_Hz / 20U) - bestDivider - 2U;
60018f2c:	bf38      	it	cc
60018f2e:	b2d5      	uxtbcc	r5, r2
        base->MCFGR2 = (base->MCFGR2 & ~LPI2C_MCFGR2_FILTSDA_MASK) | LPI2C_MCFGR2_FILTSDA(filtSda);
60018f30:	6a82      	ldr	r2, [r0, #40]	; 0x28
60018f32:	062d      	lsls	r5, r5, #24
60018f34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
60018f38:	f005 6570 	and.w	r5, r5, #251658240	; 0xf000000
60018f3c:	4315      	orrs	r5, r2
60018f3e:	6285      	str	r5, [r0, #40]	; 0x28
             LPI2C_MCCR0_SETHOLD((uint32_t)tmpHold) | LPI2C_MCCR0_DATAVD((uint32_t)tmpDataVd);
60018f40:	041b      	lsls	r3, r3, #16
             LPI2C_MCCR0_CLKLO((uint32_t)((uint32_t)bestclkCycle - (uint32_t)tmpHigh)) |
60018f42:	1b3f      	subs	r7, r7, r4
             LPI2C_MCCR0_SETHOLD((uint32_t)tmpHold) | LPI2C_MCCR0_DATAVD((uint32_t)tmpDataVd);
60018f44:	0609      	lsls	r1, r1, #24
    base->MCFGR1 = (base->MCFGR1 & ~LPI2C_MCFGR1_PRESCALE_MASK) | LPI2C_MCFGR1_PRESCALE(bestPre);
60018f46:	f009 0907 	and.w	r9, r9, #7
             LPI2C_MCCR0_SETHOLD((uint32_t)tmpHold) | LPI2C_MCCR0_DATAVD((uint32_t)tmpDataVd);
60018f4a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
    tmpReg = LPI2C_MCCR0_CLKHI((uint32_t)tmpHigh) |
60018f4e:	0222      	lsls	r2, r4, #8
             LPI2C_MCCR0_SETHOLD((uint32_t)tmpHold) | LPI2C_MCCR0_DATAVD((uint32_t)tmpDataVd);
60018f50:	f001 517c 	and.w	r1, r1, #1056964608	; 0x3f000000
             LPI2C_MCCR0_CLKLO((uint32_t)((uint32_t)bestclkCycle - (uint32_t)tmpHigh)) |
60018f54:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    tmpReg = LPI2C_MCCR0_CLKHI((uint32_t)tmpHigh) |
60018f58:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
60018f5c:	430b      	orrs	r3, r1
60018f5e:	4313      	orrs	r3, r2
60018f60:	433b      	orrs	r3, r7
    base->MCCR0 = tmpReg;
60018f62:	6483      	str	r3, [r0, #72]	; 0x48
    base->MCFGR1 = (base->MCFGR1 & ~LPI2C_MCFGR1_PRESCALE_MASK) | LPI2C_MCFGR1_PRESCALE(bestPre);
60018f64:	6a43      	ldr	r3, [r0, #36]	; 0x24
60018f66:	f023 0307 	bic.w	r3, r3, #7
60018f6a:	ea43 0309 	orr.w	r3, r3, r9
60018f6e:	6243      	str	r3, [r0, #36]	; 0x24
    if (wasEnabled)
60018f70:	9b00      	ldr	r3, [sp, #0]
60018f72:	b11b      	cbz	r3, 60018f7c <LPI2C_MasterSetBaudRate+0x112>
60018f74:	6903      	ldr	r3, [r0, #16]
60018f76:	f043 0301 	orr.w	r3, r3, #1
60018f7a:	6103      	str	r3, [r0, #16]
}
60018f7c:	b003      	add	sp, #12
60018f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        computedRate = (sourceClock_Hz / (uint32_t)divider) /
60018f82:	fbb1 f6f5 	udiv	r6, r1, r5
                       ((uint32_t)clkCycle + 2U + (2U + (uint32_t)filtScl) / (uint32_t)divider);
60018f86:	f108 0802 	add.w	r8, r8, #2
60018f8a:	44a0      	add	r8, r4
        computedRate = (sourceClock_Hz / (uint32_t)divider) /
60018f8c:	fbb6 f6f8 	udiv	r6, r6, r8
        absError = baudRate_Hz > computedRate ? baudRate_Hz - computedRate : computedRate - baudRate_Hz;
60018f90:	42b2      	cmp	r2, r6
60018f92:	d907      	bls.n	60018fa4 <LPI2C_MasterSetBaudRate+0x13a>
60018f94:	1b96      	subs	r6, r2, r6
        if (absError < bestError)
60018f96:	4556      	cmp	r6, sl
60018f98:	d294      	bcs.n	60018ec4 <LPI2C_MasterSetBaudRate+0x5a>
60018f9a:	46b2      	mov	sl, r6
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60018f9c:	4627      	mov	r7, r4
60018f9e:	46f1      	mov	r9, lr
60018fa0:	46ac      	mov	ip, r5
60018fa2:	e78f      	b.n	60018ec4 <LPI2C_MasterSetBaudRate+0x5a>
        absError = baudRate_Hz > computedRate ? baudRate_Hz - computedRate : computedRate - baudRate_Hz;
60018fa4:	1ab6      	subs	r6, r6, r2
        if (absError < bestError)
60018fa6:	4556      	cmp	r6, sl
60018fa8:	d28c      	bcs.n	60018ec4 <LPI2C_MasterSetBaudRate+0x5a>
            if (absError == 0U)
60018faa:	2e00      	cmp	r6, #0
60018fac:	d1f5      	bne.n	60018f9a <LPI2C_MasterSetBaudRate+0x130>
        clkCycle = (uint8_t)((10U * sourceClock_Hz / divider / baudRate_Hz + 5U) / 10U - (2U + filtScl) / divider - 2U);
60018fae:	4627      	mov	r7, r4
60018fb0:	46f1      	mov	r9, lr
60018fb2:	46ac      	mov	ip, r5
60018fb4:	e78f      	b.n	60018ed6 <LPI2C_MasterSetBaudRate+0x6c>
        tmpHigh = tmpHigh - 1U;
60018fb6:	3c01      	subs	r4, #1
60018fb8:	b2e4      	uxtb	r4, r4
60018fba:	e79c      	b.n	60018ef6 <LPI2C_MasterSetBaudRate+0x8c>

60018fbc <LPUART_EnableInterrupts>:
    tempReg |= ((mask << 8U) & LPUART_BAUD_RXEDGIE_MASK);
60018fbc:	020b      	lsls	r3, r1, #8
    uint32_t tempReg = base->BAUD;
60018fbe:	6902      	ldr	r2, [r0, #16]
    tempReg |= ((mask << 8U) & LPUART_BAUD_RXEDGIE_MASK);
60018fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
60018fc4:	4313      	orrs	r3, r2
                 (mask & (LPUART_FIFO_TXOFE_MASK | LPUART_FIFO_RXUFE_MASK));
60018fc6:	f401 7240 	and.w	r2, r1, #768	; 0x300
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60018fca:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
    base->BAUD = tempReg;
60018fce:	6103      	str	r3, [r0, #16]
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) |
60018fd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60018fd2:	f421 2173 	bic.w	r1, r1, #995328	; 0xf3000
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) |
60018fd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60018fda:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) |
60018fde:	4313      	orrs	r3, r2
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60018fe0:	f021 010f 	bic.w	r1, r1, #15
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) |
60018fe4:	6283      	str	r3, [r0, #40]	; 0x28
    base->CTRL |= mask;
60018fe6:	6983      	ldr	r3, [r0, #24]
60018fe8:	4319      	orrs	r1, r3
60018fea:	6181      	str	r1, [r0, #24]
}
60018fec:	4770      	bx	lr

60018fee <LPUART_DisableInterrupts>:
    tempReg &= ~((mask << 8U) & LPUART_BAUD_RXEDGIE_MASK);
60018fee:	020a      	lsls	r2, r1, #8
    uint32_t tempReg = base->BAUD;
60018ff0:	6903      	ldr	r3, [r0, #16]
    tempReg &= ~((mask << 8U) & LPUART_BAUD_RXEDGIE_MASK);
60018ff2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
60018ff6:	ea23 0302 	bic.w	r3, r3, r2
                 ~(mask & (LPUART_FIFO_TXOFE_MASK | LPUART_FIFO_RXUFE_MASK));
60018ffa:	f401 7240 	and.w	r2, r1, #768	; 0x300
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60018ffe:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
    base->BAUD = tempReg;
60019002:	6103      	str	r3, [r0, #16]
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) &
60019004:	6a83      	ldr	r3, [r0, #40]	; 0x28
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60019006:	f421 2173 	bic.w	r1, r1, #995328	; 0xf3000
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) &
6001900a:	ea23 0302 	bic.w	r3, r3, r2
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
6001900e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) &
60019012:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    mask &= ~((uint32_t)kLPUART_TxFifoOverflowInterruptEnable | (uint32_t)kLPUART_RxFifoUnderflowInterruptEnable);
60019016:	f021 010f 	bic.w	r1, r1, #15
    base->FIFO = (base->FIFO & ~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) &
6001901a:	6283      	str	r3, [r0, #40]	; 0x28
    base->CTRL &= ~mask;
6001901c:	6983      	ldr	r3, [r0, #24]
6001901e:	ea23 0301 	bic.w	r3, r3, r1
60019022:	6183      	str	r3, [r0, #24]
}
60019024:	4770      	bx	lr

60019026 <ADC_DoAutoCalibration>:
#if !(defined(FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE) && FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE)
    bool bHWTrigger = false;

    /* The calibration would be failed when in hardwar mode.
     * Remember the hardware trigger state here and restore it later if the hardware trigger is enabled.*/
    if (0U != (ADC_CFG_ADTRG_MASK & base->CFG))
60019026:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
60019028:	4603      	mov	r3, r0
    if (0U != (ADC_CFG_ADTRG_MASK & base->CFG))
6001902a:	f412 5200 	ands.w	r2, r2, #8192	; 0x2000
6001902e:	d004      	beq.n	6001903a <ADC_DoAutoCalibration+0x14>
        base->CFG &= ~ADC_CFG_ADTRG_MASK;
60019030:	6c42      	ldr	r2, [r0, #68]	; 0x44
60019032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
60019036:	6442      	str	r2, [r0, #68]	; 0x44
    {
        bHWTrigger = true;
60019038:	2201      	movs	r2, #1
        ADC_EnableHardwareTrigger(base, false);
    }
#endif

    /* Clear the CALF and launch the calibration. */
    base->GS = ADC_GS_CALF_MASK; /* Clear the CALF. */
6001903a:	2102      	movs	r1, #2
6001903c:	64d9      	str	r1, [r3, #76]	; 0x4c
    base->GC |= ADC_GC_CAL_MASK; /* Launch the calibration. */
6001903e:	6c99      	ldr	r1, [r3, #72]	; 0x48
60019040:	f041 0180 	orr.w	r1, r1, #128	; 0x80
60019044:	6499      	str	r1, [r3, #72]	; 0x48

    /* Check the status of CALF bit in ADC_GS and the CAL bit in ADC_GC. */
    while (0U != (base->GC & ADC_GC_CAL_MASK))
60019046:	6c98      	ldr	r0, [r3, #72]	; 0x48
60019048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
6001904c:	d110      	bne.n	60019070 <ADC_DoAutoCalibration+0x4a>
    return (((base->HS) & (1UL << channelGroup)) >> channelGroup);
6001904e:	6a19      	ldr	r1, [r3, #32]
    }

    /* When CAL bit becomes '0' then check the CALF status and COCO[0] bit status. */
    if (0U == ADC_GetChannelStatusFlags(base, 0U)) /* Check the COCO[0] bit status. */
    {
        status = kStatus_Fail;
60019050:	f011 0f01 	tst.w	r1, #1
 *
 * @return Flags' mask if indicated flags are asserted. See "adc_status_flags_t".
 */
static inline uint32_t ADC_GetStatusFlags(ADC_Type *base)
{
    return base->GS;
60019054:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
60019056:	bf08      	it	eq
60019058:	2001      	moveq	r0, #1
    }
    if (0U != (ADC_GetStatusFlags(base) & (uint32_t)kADC_CalibrationFailedFlag)) /* Check the CALF status. */
    {
        status = kStatus_Fail;
6001905a:	f011 0f02 	tst.w	r1, #2
    return base->R[channelGroup];
6001905e:	6a59      	ldr	r1, [r3, #36]	; 0x24
60019060:	bf18      	it	ne
60019062:	2001      	movne	r0, #1
    /* Clear conversion done flag. */
    (void)ADC_GetChannelConversionValue(base, 0U);

#if !(defined(FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE) && FSL_FEATURE_ADC_SUPPORT_HARDWARE_TRIGGER_REMOVE)
    /* Restore original trigger mode. */
    if (true == bHWTrigger)
60019064:	b11a      	cbz	r2, 6001906e <ADC_DoAutoCalibration+0x48>
        base->CFG |= ADC_CFG_ADTRG_MASK;
60019066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
60019068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
6001906c:	645a      	str	r2, [r3, #68]	; 0x44
        ADC_EnableHardwareTrigger(base, true);
    }
#endif

    return status;
}
6001906e:	4770      	bx	lr
    return base->GS;
60019070:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        if (0U != (ADC_GetStatusFlags(base) & (uint32_t)kADC_CalibrationFailedFlag))
60019072:	0789      	lsls	r1, r1, #30
60019074:	d5e7      	bpl.n	60019046 <ADC_DoAutoCalibration+0x20>
            status = kStatus_Fail;
60019076:	2001      	movs	r0, #1
60019078:	e7e9      	b.n	6001904e <ADC_DoAutoCalibration+0x28>

6001907a <ADC_SetHardwareAverageConfig>:
 */
void ADC_SetHardwareAverageConfig(ADC_Type *base, adc_hardware_average_mode_t mode)
{
    uint32_t tmp32;

    if (mode == kADC_HardwareAverageDiasable)
6001907a:	2904      	cmp	r1, #4
6001907c:	d104      	bne.n	60019088 <ADC_SetHardwareAverageConfig+0xe>
    {
        base->GC &= ~ADC_GC_AVGE_MASK;
6001907e:	6c83      	ldr	r3, [r0, #72]	; 0x48
60019080:	f023 0320 	bic.w	r3, r3, #32
    else
    {
        tmp32 = base->CFG & ~ADC_CFG_AVGS_MASK;
        tmp32 |= ADC_CFG_AVGS(mode);
        base->CFG = tmp32;
        base->GC |= ADC_GC_AVGE_MASK; /* Enable the hardware compare. */
60019084:	6483      	str	r3, [r0, #72]	; 0x48
    }
}
60019086:	4770      	bx	lr
        tmp32 = base->CFG & ~ADC_CFG_AVGS_MASK;
60019088:	6c43      	ldr	r3, [r0, #68]	; 0x44
        tmp32 |= ADC_CFG_AVGS(mode);
6001908a:	0389      	lsls	r1, r1, #14
        tmp32 = base->CFG & ~ADC_CFG_AVGS_MASK;
6001908c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
        tmp32 |= ADC_CFG_AVGS(mode);
60019090:	b289      	uxth	r1, r1
60019092:	4319      	orrs	r1, r3
        base->CFG = tmp32;
60019094:	6441      	str	r1, [r0, #68]	; 0x44
        base->GC |= ADC_GC_AVGE_MASK; /* Enable the hardware compare. */
60019096:	6c83      	ldr	r3, [r0, #72]	; 0x48
60019098:	f043 0320 	orr.w	r3, r3, #32
6001909c:	e7f2      	b.n	60019084 <ADC_SetHardwareAverageConfig+0xa>

6001909e <USB_EhciPhyInit>:
 *
 * @retval kStatus_USB_Success      cancel successfully.
 * @retval kStatus_USB_Error        the freq value is incorrect.
 */
uint32_t USB_EhciPhyInit(uint8_t controllerId, uint32_t freq, usb_phy_config_struct_t *phyConfig)
{
6001909e:	b538      	push	{r3, r4, r5, lr}
600190a0:	4604      	mov	r4, r0
600190a2:	4615      	mov	r5, r2
#if ((defined FSL_FEATURE_SOC_USBPHY_COUNT) && (FSL_FEATURE_SOC_USBPHY_COUNT > 0U))
    USBPHY_Type *usbPhyBase;

    usbPhyBase = (USBPHY_Type *)USB_EhciPhyGetBase(controllerId);
600190a4:	f7f5 fff0 	bl	6000f088 <USB_EhciPhyGetBase>
    if (NULL == usbPhyBase)
600190a8:	2800      	cmp	r0, #0
600190aa:	d039      	beq.n	60019120 <USB_EhciPhyInit+0x82>
    ANATOP->HW_ANADIG_USB2_CHRG_DETECT.SET =
        ANATOP_HW_ANADIG_USB2_CHRG_DETECT_CHK_CHRG_B_MASK | ANATOP_HW_ANADIG_USB2_CHRG_DETECT_EN_B_MASK;
#endif

#if (defined USB_ANALOG)
    USB_ANALOG->INSTANCE[controllerId - (uint8_t)kUSB_ControllerEhci0].CHRG_DETECT_SET =
600190ac:	2260      	movs	r2, #96	; 0x60
600190ae:	1ea3      	subs	r3, r4, #2
600190b0:	4353      	muls	r3, r2
600190b2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
600190b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
600190ba:	f503 2358 	add.w	r3, r3, #884736	; 0xd8000
600190be:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

#if ((!(defined FSL_FEATURE_SOC_CCM_ANALOG_COUNT)) && (!(defined FSL_FEATURE_SOC_ANATOP_COUNT)))

    usbPhyBase->TRIM_OVERRIDE_EN = 0x001fU; /* override IFR value */
#endif
    usbPhyBase->CTRL |= USBPHY_CTRL_SET_ENUTMILEVEL2_MASK; /* support LS device. */
600190c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
600190c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
600190c8:	6303      	str	r3, [r0, #48]	; 0x30
    usbPhyBase->CTRL |= USBPHY_CTRL_SET_ENUTMILEVEL3_MASK; /* support external FS Hub with LS device connected. */
600190ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
600190cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
600190d0:	6303      	str	r3, [r0, #48]	; 0x30
    /* PWD register provides overall control of the PHY power state */
    usbPhyBase->PWD = 0U;
600190d2:	2300      	movs	r3, #0
600190d4:	6003      	str	r3, [r0, #0]
    if (((uint8_t)kUSB_ControllerIp3516Hs0 == controllerId) || ((uint8_t)kUSB_ControllerIp3516Hs1 == controllerId) ||
600190d6:	f1a4 030a 	sub.w	r3, r4, #10
600190da:	2b01      	cmp	r3, #1
600190dc:	d902      	bls.n	600190e4 <USB_EhciPhyInit+0x46>
600190de:	3c06      	subs	r4, #6
600190e0:	2c01      	cmp	r4, #1
600190e2:	d805      	bhi.n	600190f0 <USB_EhciPhyInit+0x52>
        ((uint8_t)kUSB_ControllerLpcIp3511Hs0 == controllerId) ||
        ((uint8_t)kUSB_ControllerLpcIp3511Hs1 == controllerId))
    {
        usbPhyBase->CTRL_SET = USBPHY_CTRL_SET_ENAUTOCLR_CLKGATE_MASK;
600190e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
600190e8:	6343      	str	r3, [r0, #52]	; 0x34
        usbPhyBase->CTRL_SET = USBPHY_CTRL_SET_ENAUTOCLR_PHY_PWD_MASK;
600190ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
600190ee:	6343      	str	r3, [r0, #52]	; 0x34
    }
    if (NULL != phyConfig)
600190f0:	b90d      	cbnz	r5, 600190f6 <USB_EhciPhyInit+0x58>
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
              USBPHY_TX_TXCAL45DM(phyConfig->TXCAL45DM)));
    }
#endif

    return (uint8_t)kStatus_USB_Success;
600190f2:	2000      	movs	r0, #0
}
600190f4:	bd38      	pop	{r3, r4, r5, pc}
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
600190f6:	786b      	ldrb	r3, [r5, #1]
              USBPHY_TX_TXCAL45DM(phyConfig->TXCAL45DM)));
600190f8:	78a9      	ldrb	r1, [r5, #2]
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
600190fa:	041b      	lsls	r3, r3, #16
            ((usbPhyBase->TX & (~(USBPHY_TX_D_CAL_MASK | USBPHY_TX_TXCAL45DM_MASK | USBPHY_TX_TXCAL45DP_MASK))) |
600190fc:	6902      	ldr	r2, [r0, #16]
              USBPHY_TX_TXCAL45DM(phyConfig->TXCAL45DM)));
600190fe:	0209      	lsls	r1, r1, #8
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
60019100:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            ((usbPhyBase->TX & (~(USBPHY_TX_D_CAL_MASK | USBPHY_TX_TXCAL45DM_MASK | USBPHY_TX_TXCAL45DP_MASK))) |
60019104:	f022 120f 	bic.w	r2, r2, #983055	; 0xf000f
              USBPHY_TX_TXCAL45DM(phyConfig->TXCAL45DM)));
60019108:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
            ((usbPhyBase->TX & (~(USBPHY_TX_D_CAL_MASK | USBPHY_TX_TXCAL45DM_MASK | USBPHY_TX_TXCAL45DP_MASK))) |
6001910c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
             (USBPHY_TX_D_CAL(phyConfig->D_CAL) | USBPHY_TX_TXCAL45DP(phyConfig->TXCAL45DP) |
60019110:	430b      	orrs	r3, r1
60019112:	7829      	ldrb	r1, [r5, #0]
60019114:	f001 010f 	and.w	r1, r1, #15
60019118:	430b      	orrs	r3, r1
            ((usbPhyBase->TX & (~(USBPHY_TX_D_CAL_MASK | USBPHY_TX_TXCAL45DM_MASK | USBPHY_TX_TXCAL45DP_MASK))) |
6001911a:	4313      	orrs	r3, r2
        usbPhyBase->TX =
6001911c:	6103      	str	r3, [r0, #16]
6001911e:	e7e8      	b.n	600190f2 <USB_EhciPhyInit+0x54>
        return (uint8_t)kStatus_USB_Error;
60019120:	2001      	movs	r0, #1
60019122:	e7e7      	b.n	600190f4 <USB_EhciPhyInit+0x56>

60019124 <USB_DeviceEhciSetDefaultState>:
    ehciState->dtdFree = ehciState->dtd;
60019124:	68c2      	ldr	r2, [r0, #12]
60019126:	2320      	movs	r3, #32
{
60019128:	b5f0      	push	{r4, r5, r6, r7, lr}
    ehciState->dtdFree = ehciState->dtd;
6001912a:	6102      	str	r2, [r0, #16]
        p->nextDtdPointer = (uint32_t)&ehciState->dtd[i];
6001912c:	68c1      	ldr	r1, [r0, #12]
6001912e:	4419      	add	r1, r3
    for (uint32_t i = 1U; i < USB_DEVICE_CONFIG_EHCI_MAX_DTD; i++)
60019130:	3320      	adds	r3, #32
60019132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
        p->nextDtdPointer = (uint32_t)&ehciState->dtd[i];
60019136:	6011      	str	r1, [r2, #0]
        p                 = (usb_device_ehci_dtd_struct_t *)p->nextDtdPointer;
60019138:	6812      	ldr	r2, [r2, #0]
    for (uint32_t i = 1U; i < USB_DEVICE_CONFIG_EHCI_MAX_DTD; i++)
6001913a:	d1f7      	bne.n	6001912c <USB_DeviceEhciSetDefaultState+0x8>
    p->nextDtdPointer   = 0U;
6001913c:	2300      	movs	r3, #0
6001913e:	f100 0410 	add.w	r4, r0, #16
        ehciState->qh[i].nextDtdPointer = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
60019142:	2701      	movs	r7, #1
        ehciState->qh[i].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.maxPacketSize =
60019144:	2640      	movs	r6, #64	; 0x40
    p->nextDtdPointer   = 0U;
60019146:	6013      	str	r3, [r2, #0]
    ehciState->dtdCount = USB_DEVICE_CONFIG_EHCI_MAX_DTD;
60019148:	2210      	movs	r2, #16
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_ITC_MASK;
6001914a:	6841      	ldr	r1, [r0, #4]
    ehciState->dtdCount = USB_DEVICE_CONFIG_EHCI_MAX_DTD;
6001914c:	f880 2094 	strb.w	r2, [r0, #148]	; 0x94
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_ITC_MASK;
60019150:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
60019154:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
60019158:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    ehciState->registerBase->USBCMD |= USBHS_USBCMD_ITC(0U);
6001915c:	6842      	ldr	r2, [r0, #4]
6001915e:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
60019162:	f8c2 1140 	str.w	r1, [r2, #320]	; 0x140
    ehciState->registerBase->USBMODE |= USBHS_USBMODE_SLOM_MASK;
60019166:	6841      	ldr	r1, [r0, #4]
60019168:	f8d1 21a8 	ldr.w	r2, [r1, #424]	; 0x1a8
6001916c:	f042 0208 	orr.w	r2, r2, #8
60019170:	f8c1 21a8 	str.w	r2, [r1, #424]	; 0x1a8
    ehciState->registerBase->USBMODE &= ~USBHS_USBMODE_ES_MASK;
60019174:	6841      	ldr	r1, [r0, #4]
60019176:	f8d1 21a8 	ldr.w	r2, [r1, #424]	; 0x1a8
6001917a:	f022 0204 	bic.w	r2, r2, #4
6001917e:	f8c1 21a8 	str.w	r2, [r1, #424]	; 0x1a8
        ehciState->dtdHard[i]                                              = NULL;
60019182:	461a      	mov	r2, r3
        ehciState->qh[i].nextDtdPointer = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
60019184:	6881      	ldr	r1, [r0, #8]
60019186:	4419      	add	r1, r3
60019188:	608f      	str	r7, [r1, #8]
        ehciState->qh[i].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.maxPacketSize =
6001918a:	6881      	ldr	r1, [r0, #8]
6001918c:	58cd      	ldr	r5, [r1, r3]
6001918e:	f366 451a 	bfi	r5, r6, #16, #11
60019192:	50cd      	str	r5, [r1, r3]
        ehciState->dtdHard[i]                                              = NULL;
60019194:	f844 2f04 	str.w	r2, [r4, #4]!
        ehciState->dtdTail[i]                                              = NULL;
60019198:	6422      	str	r2, [r4, #64]	; 0x40
        ehciState->qh[i].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
6001919a:	6881      	ldr	r1, [r0, #8]
6001919c:	4419      	add	r1, r3
    for (uint32_t i = 0U; i < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); i++)
6001919e:	3340      	adds	r3, #64	; 0x40
        ehciState->qh[i].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
600191a0:	f891 5038 	ldrb.w	r5, [r1, #56]	; 0x38
    for (uint32_t i = 0U; i < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); i++)
600191a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
        ehciState->qh[i].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
600191a8:	f362 0500 	bfi	r5, r2, #0, #1
600191ac:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
    for (uint32_t i = 0U; i < (USB_DEVICE_CONFIG_ENDPOINTS * 2U); i++)
600191b0:	d1e8      	bne.n	60019184 <USB_DeviceEhciSetDefaultState+0x60>
    ehciState->registerBase->EPLISTADDR = (uint32_t)ehciState->qh;
600191b2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
600191b6:	f8c3 1158 	str.w	r1, [r3, #344]	; 0x158
    ehciState->registerBase->USBINTR =
600191ba:	2147      	movs	r1, #71	; 0x47
    ehciState->registerBase->DEVICEADDR = 0U;
600191bc:	6843      	ldr	r3, [r0, #4]
600191be:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    ehciState->registerBase->USBINTR =
600191c2:	6843      	ldr	r3, [r0, #4]
600191c4:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    ehciState->isResetting = 0U;
600191c8:	f880 2096 	strb.w	r2, [r0, #150]	; 0x96
}
600191cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

600191ce <USB_DeviceEhciSend>:
        (endpointAddress & USB_ENDPOINT_NUMBER_MASK) | (USB_IN << USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_SHIFT),
600191ce:	f001 010f 	and.w	r1, r1, #15
    return USB_DeviceEhciTransfer(
600191d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
600191d6:	f7f5 bf8f 	b.w	6000f0f8 <USB_DeviceEhciTransfer>

600191da <USB_DeviceEhciRecv>:
    return USB_DeviceEhciTransfer(
600191da:	f001 010f 	and.w	r1, r1, #15
600191de:	f7f5 bf8b 	b.w	6000f0f8 <USB_DeviceEhciTransfer>

600191e2 <USB_DeviceEhciEndpointDeinit>:
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
600191e2:	08ca      	lsrs	r2, r1, #3
{
600191e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
600191e8:	f002 0210 	and.w	r2, r2, #16
600191ec:	f001 060f 	and.w	r6, r1, #15
    uint32_t primeBit =
600191f0:	2501      	movs	r5, #1
    ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
600191f2:	6883      	ldr	r3, [r0, #8]
        1UL << ((ep & USB_ENDPOINT_NUMBER_MASK) + ((ep & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
600191f4:	4332      	orrs	r2, r6
{
600191f6:	4604      	mov	r4, r0
    uint8_t direction =
600191f8:	09cf      	lsrs	r7, r1, #7
    uint32_t primeBit =
600191fa:	4095      	lsls	r5, r2
    uint8_t index = ((uint8_t)((uint32_t)endpoint << 1U)) | direction;
600191fc:	0072      	lsls	r2, r6, #1
    ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.isOpened = 0U;
600191fe:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
60019202:	eb03 1382 	add.w	r3, r3, r2, lsl #6
60019206:	ea4f 1882 	mov.w	r8, r2, lsl #6
6001920a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
6001920e:	f36f 0200 	bfc	r2, #0, #1
60019212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    (void)USB_DeviceEhciCancel(ehciState, ep);
60019216:	f7f6 f95d 	bl	6000f4d4 <USB_DeviceEhciCancel>
    if ((0U != (ehciState->registerBase->EPPRIME & primeBit)) || (0U != (ehciState->registerBase->EPSR & primeBit)))
6001921a:	6863      	ldr	r3, [r4, #4]
6001921c:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
60019220:	422a      	tst	r2, r5
60019222:	d11a      	bne.n	6001925a <USB_DeviceEhciEndpointDeinit+0x78>
60019224:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
60019228:	402b      	ands	r3, r5
6001922a:	d116      	bne.n	6001925a <USB_DeviceEhciEndpointDeinit+0x78>
    ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristics = 0U;
6001922c:	68a2      	ldr	r2, [r4, #8]
6001922e:	f842 3008 	str.w	r3, [r2, r8]
    if (0U == endpoint)
60019232:	6863      	ldr	r3, [r4, #4]
60019234:	b976      	cbnz	r6, 60019254 <USB_DeviceEhciEndpointDeinit+0x72>
            ~((0U != direction) ? (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXT_MASK | USBHS_EPCR_TXS_MASK) :
60019236:	2f00      	cmp	r7, #0
        ehciState->registerBase->EPCR[endpoint - 1U] &=
60019238:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
    return kStatus_USB_Success;
6001923c:	f04f 0000 	mov.w	r0, #0
            ~((0U != direction) ? (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXT_MASK | USBHS_EPCR_TXS_MASK) :
60019240:	bf0c      	ite	eq
60019242:	f06f 018d 	mvneq.w	r1, #141	; 0x8d
60019246:	f46f 010d 	mvnne.w	r1, #9240576	; 0x8d0000
        ehciState->registerBase->EPCR[endpoint - 1U] &=
6001924a:	400a      	ands	r2, r1
6001924c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
60019250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ehciState->registerBase->EPCR[endpoint - 1U] &=
60019254:	eb03 0386 	add.w	r3, r3, r6, lsl #2
60019258:	e7ed      	b.n	60019236 <USB_DeviceEhciEndpointDeinit+0x54>
        return kStatus_USB_Busy;
6001925a:	2002      	movs	r0, #2
6001925c:	e7f8      	b.n	60019250 <USB_DeviceEhciEndpointDeinit+0x6e>

6001925e <USB_DeviceEhciControl>:
 * @param param            The param type is determined by the selected item.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceEhciControl(usb_device_controller_handle ehciHandle, usb_device_control_type_t type, void *param)
{
6001925e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60019262:	460e      	mov	r6, r1
60019264:	4615      	mov	r5, r2
#if ((defined(USB_DEVICE_CONFIG_REMOTE_WAKEUP)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))
    uint64_t startTick;
#endif
#endif

    if (NULL == ehciHandle)
60019266:	4604      	mov	r4, r0
60019268:	2800      	cmp	r0, #0
6001926a:	f000 816e 	beq.w	6001954a <USB_DeviceEhciControl+0x2ec>

#if ((defined(USB_DEVICE_CONFIG_REMOTE_WAKEUP)) && (USB_DEVICE_CONFIG_REMOTE_WAKEUP > 0U))
    deviceHandle = (usb_device_struct_t *)ehciState->deviceHandle;
#endif

    switch (type)
6001926e:	2914      	cmp	r1, #20
60019270:	f200 816d 	bhi.w	6001954e <USB_DeviceEhciControl+0x2f0>
60019274:	e8df f011 	tbh	[pc, r1, lsl #1]
60019278:	00200015 	.word	0x00200015
6001927c:	00be0026 	.word	0x00be0026
60019280:	00ed00c6 	.word	0x00ed00c6
60019284:	012c0126 	.word	0x012c0126
60019288:	016b001c 	.word	0x016b001c
6001928c:	016b016b 	.word	0x016b016b
60019290:	016b016b 	.word	0x016b016b
60019294:	01640151 	.word	0x01640151
60019298:	016b016b 	.word	0x016b016b
6001929c:	016b016b 	.word	0x016b016b
600192a0:	0148      	.short	0x0148
    {
        case kUSB_DeviceControlRun:
            ehciState->registerBase->USBCMD |= USBHS_USBCMD_RS_MASK;
600192a2:	6842      	ldr	r2, [r0, #4]
600192a4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600192a8:	f043 0301 	orr.w	r3, r3, #1
600192ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
            error = kStatus_USB_Success;
            break;
        case kUSB_DeviceControlStop:
            ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_RS_MASK;
            error = kStatus_USB_Success;
600192b0:	2600      	movs	r6, #0
            /*no action*/
            break;
    }

    return error;
}
600192b2:	4630      	mov	r0, r6
600192b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_RS_MASK;
600192b8:	6842      	ldr	r2, [r0, #4]
600192ba:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600192be:	f023 0301 	bic.w	r3, r3, #1
600192c2:	e7f3      	b.n	600192ac <USB_DeviceEhciControl+0x4e>
            if (NULL != param)
600192c4:	2a00      	cmp	r2, #0
600192c6:	f000 8142 	beq.w	6001954e <USB_DeviceEhciControl+0x2f0>
    uint32_t primeBit      = 1UL << ((epInit->endpointAddress & USB_ENDPOINT_NUMBER_MASK) +
600192ca:	f892 9002 	ldrb.w	r9, [r2, #2]
600192ce:	f04f 0801 	mov.w	r8, #1
    uint16_t maxPacketSize = epInit->maxPacketSize & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_SIZE_MASK;
600192d2:	f8b2 b000 	ldrh.w	fp, [r2]
                                ((epInit->endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
600192d6:	ea4f 03d9 	mov.w	r3, r9, lsr #3
600192da:	f009 070f 	and.w	r7, r9, #15
    (void)USB_DeviceEhciCancel(ehciState, epInit->endpointAddress);
600192de:	4649      	mov	r1, r9
    uint8_t transferType = epInit->transferType & USB_DESCRIPTOR_ENDPOINT_ATTRIBUTE_TYPE_MASK;
600192e0:	f892 a003 	ldrb.w	sl, [r2, #3]
                                ((epInit->endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >> 0x03U));
600192e4:	f003 0310 	and.w	r3, r3, #16
    uint32_t primeBit      = 1UL << ((epInit->endpointAddress & USB_ENDPOINT_NUMBER_MASK) +
600192e8:	433b      	orrs	r3, r7
600192ea:	fa08 f803 	lsl.w	r8, r8, r3
    (void)USB_DeviceEhciCancel(ehciState, epInit->endpointAddress);
600192ee:	f7f6 f8f1 	bl	6000f4d4 <USB_DeviceEhciCancel>
    if ((0U != (ehciState->registerBase->EPPRIME & primeBit)) || (0U != (ehciState->registerBase->EPSR & primeBit)))
600192f2:	6863      	ldr	r3, [r4, #4]
600192f4:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
600192f8:	ea18 0f02 	tst.w	r8, r2
600192fc:	d1d9      	bne.n	600192b2 <USB_DeviceEhciControl+0x54>
600192fe:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
60019302:	ea18 0803 	ands.w	r8, r8, r3
60019306:	d1d4      	bne.n	600192b2 <USB_DeviceEhciControl+0x54>
    uint8_t transferType = epInit->transferType & USB_DESCRIPTOR_ENDPOINT_ATTRIBUTE_TYPE_MASK;
60019308:	f00a 0303 	and.w	r3, sl, #3
    uint8_t index        = ((uint8_t)((uint32_t)endpoint << 1U)) | direction;
6001930c:	0079      	lsls	r1, r7, #1
    uint16_t maxPacketSize = epInit->maxPacketSize & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_SIZE_MASK;
6001930e:	f3cb 000a 	ubfx	r0, fp, #0, #11
    uint8_t direction      = (epInit->endpointAddress & USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_MASK) >>
60019312:	ea4f 16d9 	mov.w	r6, r9, lsr #7
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult =
60019316:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
    if (USB_ENDPOINT_ISOCHRONOUS == transferType)
6001931a:	2b01      	cmp	r3, #1
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult =
6001931c:	f8d4 c008 	ldr.w	ip, [r4, #8]
60019320:	ea4f 1181 	mov.w	r1, r1, lsl #6
    if (USB_ENDPOINT_ISOCHRONOUS == transferType)
60019324:	d132      	bne.n	6001938c <USB_DeviceEhciControl+0x12e>
            1UL + ((((uint32_t)epInit->maxPacketSize) & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_MULT_TRANSACTIONS_MASK) >>
60019326:	882a      	ldrh	r2, [r5, #0]
        if (maxPacketSize > USB_DEVICE_MAX_HS_ISO_MAX_PACKET_SIZE)
60019328:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult =
6001932c:	f85c e001 	ldr.w	lr, [ip, r1]
            1UL + ((((uint32_t)epInit->maxPacketSize) & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_MULT_TRANSACTIONS_MASK) >>
60019330:	f3c2 22c1 	ubfx	r2, r2, #11, #2
        if (maxPacketSize > USB_DEVICE_MAX_HS_ISO_MAX_PACKET_SIZE)
60019334:	bf28      	it	cs
60019336:	f44f 6080 	movcs.w	r0, #1024	; 0x400
            1UL + ((((uint32_t)epInit->maxPacketSize) & USB_DESCRIPTOR_ENDPOINT_MAXPACKETSIZE_MULT_TRANSACTIONS_MASK) >>
6001933a:	3201      	adds	r2, #1
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult =
6001933c:	f362 7e9f 	bfi	lr, r2, #30, #2
60019340:	f84c e001 	str.w	lr, [ip, r1]
    ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.maxPacketSize =
60019344:	68a2      	ldr	r2, [r4, #8]
60019346:	f852 c001 	ldr.w	ip, [r2, r1]
6001934a:	f360 4c1a 	bfi	ip, r0, #16, #11
6001934e:	f842 c001 	str.w	ip, [r2, r1]
    ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.zlt = epInit->zlt;
60019352:	68a2      	ldr	r2, [r4, #8]
60019354:	f895 c004 	ldrb.w	ip, [r5, #4]
60019358:	440a      	add	r2, r1
6001935a:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
6001935e:	f36c 0041 	bfi	r0, ip, #1, #1
60019362:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
    if ((USB_CONTROL_ENDPOINT == endpoint))
60019366:	68a0      	ldr	r0, [r4, #8]
60019368:	b9bf      	cbnz	r7, 6001939a <USB_DeviceEhciControl+0x13c>
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt = 1U;
6001936a:	5842      	ldr	r2, [r0, r1]
6001936c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
60019370:	5042      	str	r2, [r0, r1]
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.ios = 1U;
60019372:	68a0      	ldr	r0, [r4, #8]
60019374:	5842      	ldr	r2, [r0, r1]
60019376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
6001937a:	5042      	str	r2, [r0, r1]
        ehciState->registerBase->EPCR0 |=
6001937c:	6860      	ldr	r0, [r4, #4]
6001937e:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
60019382:	bb0e      	cbnz	r6, 600193c8 <USB_DeviceEhciControl+0x16a>
                 (USBHS_EPCR_RXE_MASK | USBHS_EPCR_RXR_MASK | ((uint32_t)transferType << USBHS_EPCR_RXT_SHIFT)));
60019384:	009b      	lsls	r3, r3, #2
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
60019386:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
6001938a:	e020      	b.n	600193ce <USB_DeviceEhciControl+0x170>
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.mult = 0U;
6001938c:	f85c 2001 	ldr.w	r2, [ip, r1]
60019390:	f368 729f 	bfi	r2, r8, #30, #2
60019394:	f84c 2001 	str.w	r2, [ip, r1]
60019398:	e7d4      	b.n	60019344 <USB_DeviceEhciControl+0xe6>
            ((0U == epInit->zlt) ? 1U : 0U);
6001939a:	792a      	ldrb	r2, [r5, #4]
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt =
6001939c:	5845      	ldr	r5, [r0, r1]
            ((0U == epInit->zlt) ? 1U : 0U);
6001939e:	fab2 f282 	clz	r2, r2
600193a2:	0952      	lsrs	r2, r2, #5
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt =
600193a4:	f362 755d 	bfi	r5, r2, #29, #1
600193a8:	5045      	str	r5, [r0, r1]
        ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.ios = 0U;
600193aa:	68a2      	ldr	r2, [r4, #8]
600193ac:	5850      	ldr	r0, [r2, r1]
600193ae:	f36f 30cf 	bfc	r0, #15, #1
600193b2:	5050      	str	r0, [r2, r1]
        ehciState->registerBase->EPCR[endpoint - 1U] |=
600193b4:	6862      	ldr	r2, [r4, #4]
600193b6:	eb02 0287 	add.w	r2, r2, r7, lsl #2
600193ba:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
600193be:	b996      	cbnz	r6, 600193e6 <USB_DeviceEhciControl+0x188>
                 (USBHS_EPCR_RXE_MASK | USBHS_EPCR_RXR_MASK | ((uint32_t)transferType << USBHS_EPCR_RXT_SHIFT)));
600193c0:	009b      	lsls	r3, r3, #2
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
600193c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
600193c6:	e011      	b.n	600193ec <USB_DeviceEhciControl+0x18e>
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
600193c8:	049b      	lsls	r3, r3, #18
600193ca:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
        ehciState->registerBase->EPCR0 |=
600193ce:	4313      	orrs	r3, r2
600193d0:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
    ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.isOpened = 1U;
600193d4:	68a3      	ldr	r3, [r4, #8]
600193d6:	440b      	add	r3, r1
600193d8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
600193dc:	f042 0201 	orr.w	r2, r2, #1
600193e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return kStatus_USB_Success;
600193e4:	e764      	b.n	600192b0 <USB_DeviceEhciControl+0x52>
                 (USBHS_EPCR_TXE_MASK | USBHS_EPCR_TXR_MASK | ((uint32_t)transferType << USBHS_EPCR_TXT_SHIFT)) :
600193e6:	049b      	lsls	r3, r3, #18
600193e8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
        ehciState->registerBase->EPCR[endpoint - 1U] |=
600193ec:	4303      	orrs	r3, r0
600193ee:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
600193f2:	e7ef      	b.n	600193d4 <USB_DeviceEhciControl+0x176>
            if (NULL != param)
600193f4:	2a00      	cmp	r2, #0
600193f6:	f000 80aa 	beq.w	6001954e <USB_DeviceEhciControl+0x2f0>
                error = USB_DeviceEhciEndpointDeinit(ehciState, *temp8);
600193fa:	7811      	ldrb	r1, [r2, #0]
}
600193fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                error = USB_DeviceEhciEndpointDeinit(ehciState, *temp8);
60019400:	f7ff beef 	b.w	600191e2 <USB_DeviceEhciEndpointDeinit>
            if (NULL != param)
60019404:	2a00      	cmp	r2, #0
60019406:	f000 80a2 	beq.w	6001954e <USB_DeviceEhciControl+0x2f0>
                error = USB_DeviceEhciEndpointStall(ehciState, *temp8);
6001940a:	7815      	ldrb	r5, [r2, #0]
    if (0U == endpoint)
6001940c:	f015 060f 	ands.w	r6, r5, #15
60019410:	d10e      	bne.n	60019430 <USB_DeviceEhciControl+0x1d2>
        (void)USB_DeviceEhciCancel(ehciState, 0x00);
60019412:	4631      	mov	r1, r6
60019414:	f7f6 f85e 	bl	6000f4d4 <USB_DeviceEhciCancel>
        (void)USB_DeviceEhciCancel(ehciState, 0x80);
60019418:	2180      	movs	r1, #128	; 0x80
6001941a:	4620      	mov	r0, r4
6001941c:	f7f6 f85a 	bl	6000f4d4 <USB_DeviceEhciCancel>
        ehciState->registerBase->EPCR0 |= (USBHS_EPCR_TXS_MASK | USBHS_EPCR_RXS_MASK);
60019420:	6862      	ldr	r2, [r4, #4]
60019422:	f8d2 31c0 	ldr.w	r3, [r2, #448]	; 0x1c0
60019426:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6001942a:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
6001942e:	e73f      	b.n	600192b0 <USB_DeviceEhciControl+0x52>
        (void)USB_DeviceEhciCancel(ehciState, ep);
60019430:	4629      	mov	r1, r5
60019432:	f7f6 f84f 	bl	6000f4d4 <USB_DeviceEhciCancel>
        ehciState->registerBase->EPCR[endpoint - 1U] |= ((0U != direction) ? USBHS_EPCR_TXS_MASK : USBHS_EPCR_RXS_MASK);
60019436:	6861      	ldr	r1, [r4, #4]
60019438:	09ed      	lsrs	r5, r5, #7
6001943a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
6001943e:	bf0c      	ite	eq
60019440:	2201      	moveq	r2, #1
60019442:	f44f 3280 	movne.w	r2, #65536	; 0x10000
60019446:	f8d1 31c0 	ldr.w	r3, [r1, #448]	; 0x1c0
6001944a:	4313      	orrs	r3, r2
6001944c:	f8c1 31c0 	str.w	r3, [r1, #448]	; 0x1c0
60019450:	e72e      	b.n	600192b0 <USB_DeviceEhciControl+0x52>
            if (NULL != param)
60019452:	2a00      	cmp	r2, #0
60019454:	d07b      	beq.n	6001954e <USB_DeviceEhciControl+0x2f0>
                error = USB_DeviceEhciEndpointUnstall(ehciState, *temp8);
60019456:	7811      	ldrb	r1, [r2, #0]
            ehciState->registerBase->USBCMD |= USBHS_USBCMD_RS_MASK;
60019458:	6842      	ldr	r2, [r0, #4]
    if (0U == endpoint)
6001945a:	f011 030f 	ands.w	r3, r1, #15
    uint8_t direction =
6001945e:	ea4f 16d1 	mov.w	r6, r1, lsr #7
    if (0U == endpoint)
60019462:	d10e      	bne.n	60019482 <USB_DeviceEhciControl+0x224>
        ehciState->registerBase->EPCR0 &= ~((0U != direction) ? USBHS_EPCR_TXS_MASK : USBHS_EPCR_RXS_MASK);
60019464:	2e00      	cmp	r6, #0
60019466:	f8d2 31c0 	ldr.w	r3, [r2, #448]	; 0x1c0
6001946a:	bf14      	ite	ne
6001946c:	f46f 3080 	mvnne.w	r0, #65536	; 0x10000
60019470:	f06f 0001 	mvneq.w	r0, #1
60019474:	4003      	ands	r3, r0
60019476:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
    (void)USB_DeviceEhciCancel(ehciState, ep);
6001947a:	4620      	mov	r0, r4
6001947c:	f7f6 f82a 	bl	6000f4d4 <USB_DeviceEhciCancel>
    return kStatus_USB_Success;
60019480:	e716      	b.n	600192b0 <USB_DeviceEhciControl+0x52>
        ehciState->registerBase->EPCR[endpoint - 1U] &=
60019482:	eb02 0283 	add.w	r2, r2, r3, lsl #2
60019486:	1e5d      	subs	r5, r3, #1
60019488:	336f      	adds	r3, #111	; 0x6f
6001948a:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
            ~((0U != direction) ? USBHS_EPCR_TXS_MASK : USBHS_EPCR_RXS_MASK);
6001948e:	b976      	cbnz	r6, 600194ae <USB_DeviceEhciControl+0x250>
        ehciState->registerBase->EPCR[endpoint - 1U] &=
60019490:	f020 0001 	bic.w	r0, r0, #1
60019494:	f8c2 01c0 	str.w	r0, [r2, #448]	; 0x1c0
        ehciState->registerBase->EPCR[endpoint - 1U] |= ((0U != direction) ? USBHS_EPCR_TXR_MASK : USBHS_EPCR_RXR_MASK);
60019498:	6862      	ldr	r2, [r4, #4]
6001949a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
6001949e:	6858      	ldr	r0, [r3, #4]
600194a0:	2340      	movs	r3, #64	; 0x40
600194a2:	3570      	adds	r5, #112	; 0x70
600194a4:	4303      	orrs	r3, r0
600194a6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
600194aa:	6053      	str	r3, [r2, #4]
600194ac:	e7e5      	b.n	6001947a <USB_DeviceEhciControl+0x21c>
        ehciState->registerBase->EPCR[endpoint - 1U] &=
600194ae:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
600194b2:	f8c2 01c0 	str.w	r0, [r2, #448]	; 0x1c0
        ehciState->registerBase->EPCR[endpoint - 1U] |= ((0U != direction) ? USBHS_EPCR_TXR_MASK : USBHS_EPCR_RXR_MASK);
600194b6:	6862      	ldr	r2, [r4, #4]
600194b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
600194bc:	6858      	ldr	r0, [r3, #4]
600194be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
600194c2:	e7ee      	b.n	600194a2 <USB_DeviceEhciControl+0x244>
            if (NULL != param)
600194c4:	2601      	movs	r6, #1
600194c6:	2a00      	cmp	r2, #0
600194c8:	f43f aef3 	beq.w	600192b2 <USB_DeviceEhciControl+0x54>
                *temp16 = ((uint16_t)USB_DEVICE_CONFIG_SELF_POWER
600194cc:	8016      	strh	r6, [r2, #0]
                error = kStatus_USB_Success;
600194ce:	e6ef      	b.n	600192b0 <USB_DeviceEhciControl+0x52>
            if (NULL != param)
600194d0:	2a00      	cmp	r2, #0
600194d2:	d03c      	beq.n	6001954e <USB_DeviceEhciControl+0x2f0>
                uint8_t ep = (endpointStatus->endpointAddress) & USB_ENDPOINT_NUMBER_MASK;
600194d4:	7813      	ldrb	r3, [r2, #0]
                if (ep < USB_DEVICE_CONFIG_ENDPOINTS)
600194d6:	071a      	lsls	r2, r3, #28
600194d8:	d439      	bmi.n	6001954e <USB_DeviceEhciControl+0x2f0>
                uint8_t direction =
600194da:	09d9      	lsrs	r1, r3, #7
                    if (0U != ep)
600194dc:	f013 030f 	ands.w	r3, r3, #15
            ehciState->registerBase->USBCMD |= USBHS_USBCMD_RS_MASK;
600194e0:	6842      	ldr	r2, [r0, #4]
                    if (0U != ep)
600194e2:	d00e      	beq.n	60019502 <USB_DeviceEhciControl+0x2a4>
                            (0U != (ehciState->registerBase->EPCR[ep - 1U] &
600194e4:	336f      	adds	r3, #111	; 0x6f
600194e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
600194ea:	6852      	ldr	r2, [r2, #4]
                                    ((0U != direction) ? USBHS_EPCR_TXS_MASK : USBHS_EPCR_RXS_MASK))) ?
600194ec:	2900      	cmp	r1, #0
600194ee:	bf0c      	ite	eq
600194f0:	2301      	moveq	r3, #1
600194f2:	f44f 3380 	movne.w	r3, #65536	; 0x10000
                                (uint16_t)kUSB_DeviceEndpointStateStalled :
600194f6:	421a      	tst	r2, r3
600194f8:	bf14      	ite	ne
600194fa:	2301      	movne	r3, #1
600194fc:	2300      	moveq	r3, #0
                        endpointStatus->endpointStatus =
600194fe:	806b      	strh	r3, [r5, #2]
60019500:	e6d6      	b.n	600192b0 <USB_DeviceEhciControl+0x52>
                            (0U != (ehciState->registerBase->EPCR0 &
60019502:	f8d2 21c0 	ldr.w	r2, [r2, #448]	; 0x1c0
60019506:	e7f1      	b.n	600194ec <USB_DeviceEhciControl+0x28e>
            if (NULL != param)
60019508:	b30a      	cbz	r2, 6001954e <USB_DeviceEhciControl+0x2f0>
                    ((((uint32_t)(*temp8)) << USBHS_DEVICEADDR_USBADR_SHIFT) | USBHS_DEVICEADDR_USBADRA_MASK);
6001950a:	782b      	ldrb	r3, [r5, #0]
                ehciState->registerBase->DEVICEADDR =
6001950c:	6842      	ldr	r2, [r0, #4]
                    ((((uint32_t)(*temp8)) << USBHS_DEVICEADDR_USBADR_SHIFT) | USBHS_DEVICEADDR_USBADRA_MASK);
6001950e:	065b      	lsls	r3, r3, #25
60019510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
                ehciState->registerBase->DEVICEADDR =
60019514:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
                error = kStatus_USB_Success;
60019518:	e6ca      	b.n	600192b0 <USB_DeviceEhciControl+0x52>
    switch (type)
6001951a:	2500      	movs	r5, #0
                (void)USB_DeviceEhciEndpointDeinit(ehciState, (count | (USB_IN << 0x07U)));
6001951c:	f065 017f 	orn	r1, r5, #127	; 0x7f
60019520:	b2ee      	uxtb	r6, r5
60019522:	4620      	mov	r0, r4
            for (uint8_t count = 0U; count < USB_DEVICE_CONFIG_ENDPOINTS; count++)
60019524:	3501      	adds	r5, #1
                (void)USB_DeviceEhciEndpointDeinit(ehciState, (count | (USB_IN << 0x07U)));
60019526:	b2c9      	uxtb	r1, r1
60019528:	f7ff fe5b 	bl	600191e2 <USB_DeviceEhciEndpointDeinit>
                (void)USB_DeviceEhciEndpointDeinit(ehciState, (count | (USB_OUT << 0x07U)));
6001952c:	4631      	mov	r1, r6
6001952e:	4620      	mov	r0, r4
60019530:	f7ff fe57 	bl	600191e2 <USB_DeviceEhciEndpointDeinit>
            for (uint8_t count = 0U; count < USB_DEVICE_CONFIG_ENDPOINTS; count++)
60019534:	2d08      	cmp	r5, #8
60019536:	d1f1      	bne.n	6001951c <USB_DeviceEhciControl+0x2be>
            USB_DeviceEhciSetDefaultState(ehciState);
60019538:	4620      	mov	r0, r4
6001953a:	f7ff fdf3 	bl	60019124 <USB_DeviceEhciSetDefaultState>
            break;
6001953e:	e6b7      	b.n	600192b0 <USB_DeviceEhciControl+0x52>
            if (NULL != param)
60019540:	b12a      	cbz	r2, 6001954e <USB_DeviceEhciControl+0x2f0>
                *temp8 = ehciState->speed;
60019542:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
60019546:	7013      	strb	r3, [r2, #0]
                error  = kStatus_USB_Success;
60019548:	e6b2      	b.n	600192b0 <USB_DeviceEhciControl+0x52>
        return kStatus_USB_InvalidHandle;
6001954a:	2603      	movs	r6, #3
6001954c:	e6b1      	b.n	600192b2 <USB_DeviceEhciControl+0x54>
    usb_status_t error                        = kStatus_USB_Error;
6001954e:	2601      	movs	r6, #1
60019550:	e6af      	b.n	600192b2 <USB_DeviceEhciControl+0x54>

60019552 <USB_DeviceEhciIsrFunction>:
 *
 * @param deviceHandle    The device handle got from USB_DeviceInit.
 *
 */
void USB_DeviceEhciIsrFunction(void *deviceHandle)
{
60019552:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60019556:	b089      	sub	sp, #36	; 0x24
    usb_device_struct_t *handle = (usb_device_struct_t *)deviceHandle;
    usb_device_ehci_state_struct_t *ehciState;
    uint32_t status;

    if (NULL == deviceHandle)
60019558:	2800      	cmp	r0, #0
6001955a:	d05a      	beq.n	60019612 <USB_DeviceEhciIsrFunction+0xc0>
    {
        return;
    }

    ehciState = (usb_device_ehci_state_struct_t *)(handle->controllerHandle);
6001955c:	6884      	ldr	r4, [r0, #8]
#endif
        }
    }
#endif /* USB_DEVICE_CONFIG_DETACH_ENABLE */

    status = ehciState->registerBase->USBSTS;
6001955e:	6863      	ldr	r3, [r4, #4]
60019560:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
    status &= ehciState->registerBase->USBINTR;
60019564:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
60019568:	ea01 0a02 	and.w	sl, r1, r2
        /* Error interrupt */
        USB_DeviceEhciInterruptError(ehciState);
    }
#endif /* USB_DEVICE_CONFIG_ERROR_HANDLING */

    if (0U != (status & USBHS_USBSTS_URI_MASK))
6001956c:	f01a 0f40 	tst.w	sl, #64	; 0x40
    ehciState->registerBase->USBSTS = status;
60019570:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    if (0U != (status & USBHS_USBSTS_URI_MASK))
60019574:	d01c      	beq.n	600195b0 <USB_DeviceEhciIsrFunction+0x5e>
    status                             = ehciState->registerBase->EPSETUPSR;
60019576:	6863      	ldr	r3, [r4, #4]
        ehciState->registerBase->EPFLUSH = USBHS_EPFLUSH_FERB_MASK | USBHS_EPFLUSH_FETB_MASK;
60019578:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    status                             = ehciState->registerBase->EPSETUPSR;
6001957c:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    ehciState->registerBase->EPSETUPSR = status;
60019580:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    status                              = ehciState->registerBase->EPCOMPLETE;
60019584:	6863      	ldr	r3, [r4, #4]
60019586:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    ehciState->registerBase->EPCOMPLETE = status;
6001958a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        ehciState->registerBase->EPFLUSH = USBHS_EPFLUSH_FERB_MASK | USBHS_EPFLUSH_FETB_MASK;
6001958e:	6863      	ldr	r3, [r4, #4]
60019590:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
    } while (0U != (ehciState->registerBase->EPPRIME & (USBHS_EPPRIME_PERB_MASK | USBHS_EPPRIME_PETB_MASK)));
60019594:	6863      	ldr	r3, [r4, #4]
60019596:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
6001959a:	f012 1fff 	tst.w	r2, #16711935	; 0xff00ff
6001959e:	d1f6      	bne.n	6001958e <USB_DeviceEhciIsrFunction+0x3c>
    if (0U != (ehciState->registerBase->PORTSC1 & USBHS_PORTSC1_PR_MASK))
600195a0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
600195a4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
600195a8:	d036      	beq.n	60019618 <USB_DeviceEhciIsrFunction+0xc6>
        ehciState->isResetting = 1U;
600195aa:	2301      	movs	r3, #1
600195ac:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    {
        /* Reset interrupt */
        USB_DeviceEhciInterruptReset(ehciState);
    }

    if (0U != (status & USBHS_USBSTS_UI_MASK))
600195b0:	f01a 0f01 	tst.w	sl, #1
600195b4:	d00c      	beq.n	600195d0 <USB_DeviceEhciIsrFunction+0x7e>
    status = ehciState->registerBase->EPSETUPSR;
600195b6:	6863      	ldr	r3, [r4, #4]
600195b8:	f8d3 81ac 	ldr.w	r8, [r3, #428]	; 0x1ac
    if (0U != status)
600195bc:	f1b8 0f00 	cmp.w	r8, #0
600195c0:	d134      	bne.n	6001962c <USB_DeviceEhciIsrFunction+0xda>
    status = ehciState->registerBase->EPCOMPLETE;
600195c2:	6863      	ldr	r3, [r4, #4]
600195c4:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    ehciState->registerBase->EPCOMPLETE = status;
600195c8:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    if (0U != status)
600195cc:	2a00      	cmp	r2, #0
600195ce:	d177      	bne.n	600196c0 <USB_DeviceEhciIsrFunction+0x16e>
    {
        /* Token done interrupt */
        USB_DeviceEhciInterruptTokenDone(ehciState);
    }

    if (0U != (status & USBHS_USBSTS_PCI_MASK))
600195d0:	f01a 0f04 	tst.w	sl, #4
600195d4:	d01d      	beq.n	60019612 <USB_DeviceEhciIsrFunction+0xc0>
    message.buffer  = (uint8_t *)NULL;
600195d6:	2300      	movs	r3, #0
    message.length  = 0U;
600195d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    message.isSetup = 0U;
600195dc:	f88d 301d 	strb.w	r3, [sp, #29]
    if (0U == (ehciState->registerBase->PORTSC1 & USBHS_PORTSC1_PR_MASK))
600195e0:	6862      	ldr	r2, [r4, #4]
600195e2:	f8d2 5184 	ldr.w	r5, [r2, #388]	; 0x184
600195e6:	f415 7580 	ands.w	r5, r5, #256	; 0x100
600195ea:	d112      	bne.n	60019612 <USB_DeviceEhciIsrFunction+0xc0>
        if (0U != (ehciState->registerBase->PORTSC1 & USBHS_PORTSC1_HSP_MASK))
600195ec:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
600195f0:	f3c3 2340 	ubfx	r3, r3, #9, #1
600195f4:	005b      	lsls	r3, r3, #1
600195f6:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
        if (0U != ehciState->isResetting)
600195fa:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
600195fe:	b143      	cbz	r3, 60019612 <USB_DeviceEhciIsrFunction+0xc0>
            message.code = (uint8_t)kUSB_DeviceNotifyBusReset;
60019600:	2310      	movs	r3, #16
            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
60019602:	a905      	add	r1, sp, #20
            message.code = (uint8_t)kUSB_DeviceNotifyBusReset;
60019604:	f88d 301c 	strb.w	r3, [sp, #28]
            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
60019608:	6820      	ldr	r0, [r4, #0]
6001960a:	f7f2 fe77 	bl	6000c2fc <USB_DeviceNotificationTrigger>
            ehciState->isResetting = 0U;
6001960e:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
    if (0U != (status & USBHS_USBSTS_SRI_MASK))
    {
        /* Sof interrupt */
        USB_DeviceEhciInterruptSof(ehciState);
    }
}
60019612:	b009      	add	sp, #36	; 0x24
60019614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        message.length  = 0U;
60019618:	e9cd 3305 	strd	r3, r3, [sp, #20]
        message.code    = (uint8_t)kUSB_DeviceNotifyBusReset;
6001961c:	2310      	movs	r3, #16
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
6001961e:	a905      	add	r1, sp, #20
        message.code    = (uint8_t)kUSB_DeviceNotifyBusReset;
60019620:	f8ad 301c 	strh.w	r3, [sp, #28]
        (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
60019624:	6820      	ldr	r0, [r4, #0]
60019626:	f7f2 fe69 	bl	6000c2fc <USB_DeviceNotificationTrigger>
6001962a:	e7c1      	b.n	600195b0 <USB_DeviceEhciIsrFunction+0x5e>
6001962c:	2500      	movs	r5, #0
                message.isSetup = 1U;
6001962e:	f04f 0901 	mov.w	r9, #1
            if (0U != (status & (1UL << endpoint)))
60019632:	fa28 f305 	lsr.w	r3, r8, r5
60019636:	07db      	lsls	r3, r3, #31
60019638:	d53e      	bpl.n	600196b8 <USB_DeviceEhciIsrFunction+0x166>
                temp = (void *)&ehciState->qh[(uint8_t)((uint32_t)endpoint << 1U) + USB_OUT].setupBufferBack;
6001963a:	68a6      	ldr	r6, [r4, #8]
6001963c:	b2ef      	uxtb	r7, r5
                USB_DeviceEhciCancelControlPipe(ehciState, endpoint, direction);
6001963e:	4620      	mov	r0, r4
60019640:	ea4f 1bc5 	mov.w	fp, r5, lsl #7
                direction = (deviceSetup->bmRequestType & USB_REQUEST_TYPE_DIR_IN) >> USB_REQUEST_TYPE_DIR_SHIFT;
60019644:	eb06 16c5 	add.w	r6, r6, r5, lsl #7
                USB_DeviceEhciCancelControlPipe(ehciState, endpoint, direction);
60019648:	4639      	mov	r1, r7
                direction = (deviceSetup->bmRequestType & USB_REQUEST_TYPE_DIR_IN) >> USB_REQUEST_TYPE_DIR_SHIFT;
6001964a:	f816 2f30 	ldrb.w	r2, [r6, #48]!
6001964e:	09d2      	lsrs	r2, r2, #7
                USB_DeviceEhciCancelControlPipe(ehciState, endpoint, direction);
60019650:	9201      	str	r2, [sp, #4]
60019652:	f7f5 fe5d 	bl	6000f310 <USB_DeviceEhciCancelControlPipe>
                USB_DeviceEhciCancelControlPipe(ehciState, endpoint, 1U ^ direction);
60019656:	9a01      	ldr	r2, [sp, #4]
60019658:	4639      	mov	r1, r7
6001965a:	4620      	mov	r0, r4
6001965c:	f082 0201 	eor.w	r2, r2, #1
60019660:	f7f5 fe56 	bl	6000f310 <USB_DeviceEhciCancelControlPipe>
                message.length  = USB_SETUP_PACKET_SIZE;
60019664:	2308      	movs	r3, #8
                message.code    = (endpoint) | (USB_OUT << 0x07U);
60019666:	f88d 701c 	strb.w	r7, [sp, #28]
    ehciState->registerBase->EPSETUPSR = 1UL << ep;
6001966a:	fa09 f105 	lsl.w	r1, r9, r5
                message.buffer  = (uint8_t *)deviceSetup;
6001966e:	9605      	str	r6, [sp, #20]
                message.length  = USB_SETUP_PACKET_SIZE;
60019670:	9306      	str	r3, [sp, #24]
                message.isSetup = 1U;
60019672:	f88d 901d 	strb.w	r9, [sp, #29]
    ehciState->registerBase->EPSETUPSR = 1UL << ep;
60019676:	6862      	ldr	r2, [r4, #4]
60019678:	f8c2 11ac 	str.w	r1, [r2, #428]	; 0x1ac
        ehciState->registerBase->USBCMD |= USBHS_USBCMD_SUTW_MASK;
6001967c:	6861      	ldr	r1, [r4, #4]
6001967e:	f8d1 2140 	ldr.w	r2, [r1, #320]	; 0x140
60019682:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
60019686:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
        ehciState->qh[index].setupBufferBack[0] = ehciState->qh[index].setupBuffer[0];
6001968a:	68a2      	ldr	r2, [r4, #8]
6001968c:	445a      	add	r2, fp
6001968e:	6a91      	ldr	r1, [r2, #40]	; 0x28
60019690:	6311      	str	r1, [r2, #48]	; 0x30
        ehciState->qh[index].setupBufferBack[1] = ehciState->qh[index].setupBuffer[1];
60019692:	68a2      	ldr	r2, [r4, #8]
60019694:	445a      	add	r2, fp
60019696:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
60019698:	6351      	str	r1, [r2, #52]	; 0x34
        if (0U != (ehciState->registerBase->USBCMD & USBHS_USBCMD_SUTW_MASK))
6001969a:	6862      	ldr	r2, [r4, #4]
6001969c:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
600196a0:	048f      	lsls	r7, r1, #18
600196a2:	d5eb      	bpl.n	6001967c <USB_DeviceEhciIsrFunction+0x12a>
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_SUTW_MASK;
600196a4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
                (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
600196a8:	a905      	add	r1, sp, #20
    ehciState->registerBase->USBCMD &= ~USBHS_USBCMD_SUTW_MASK;
600196aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
600196ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
600196b2:	6820      	ldr	r0, [r4, #0]
600196b4:	f7f2 fe22 	bl	6000c2fc <USB_DeviceNotificationTrigger>
        for (endpoint = 0U; endpoint < USB_DEVICE_CONFIG_ENDPOINTS; endpoint++)
600196b8:	3501      	adds	r5, #1
600196ba:	2d08      	cmp	r5, #8
600196bc:	d1b9      	bne.n	60019632 <USB_DeviceEhciIsrFunction+0xe0>
600196be:	e780      	b.n	600195c2 <USB_DeviceEhciIsrFunction+0x70>
600196c0:	2700      	movs	r7, #0
                            message.isSetup = 0U;
600196c2:	46bb      	mov	fp, r7
600196c4:	463b      	mov	r3, r7
            if (0U != (status & (1UL << count)))
600196c6:	fa22 f107 	lsr.w	r1, r2, r7
600196ca:	07ce      	lsls	r6, r1, #31
600196cc:	d403      	bmi.n	600196d6 <USB_DeviceEhciIsrFunction+0x184>
        for (count = 0U; count < 32U; count++)
600196ce:	3701      	adds	r7, #1
600196d0:	2f20      	cmp	r7, #32
600196d2:	d1f8      	bne.n	600196c6 <USB_DeviceEhciIsrFunction+0x174>
600196d4:	e77c      	b.n	600195d0 <USB_DeviceEhciIsrFunction+0x7e>
                if (count > 15U)
600196d6:	2f0f      	cmp	r7, #15
600196d8:	b2f9      	uxtb	r1, r7
600196da:	d803      	bhi.n	600196e4 <USB_DeviceEhciIsrFunction+0x192>
                if (endpoint >= USB_DEVICE_CONFIG_ENDPOINTS)
600196dc:	2f07      	cmp	r7, #7
600196de:	d90f      	bls.n	60019700 <USB_DeviceEhciIsrFunction+0x1ae>
        for (count = 0U; count < 32U; count++)
600196e0:	3701      	adds	r7, #1
600196e2:	e7f0      	b.n	600196c6 <USB_DeviceEhciIsrFunction+0x174>
                    endpoint  = count - 16U;
600196e4:	3910      	subs	r1, #16
600196e6:	b2c9      	uxtb	r1, r1
                if (endpoint >= USB_DEVICE_CONFIG_ENDPOINTS)
600196e8:	2907      	cmp	r1, #7
600196ea:	d8f0      	bhi.n	600196ce <USB_DeviceEhciIsrFunction+0x17c>
                index          = (endpoint << 1U) + direction;
600196ec:	004e      	lsls	r6, r1, #1
600196ee:	3601      	adds	r6, #1
                message.length = 0U;
600196f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
                index          = (endpoint << 1U) + direction;
600196f4:	b2f6      	uxtb	r6, r6
                if ((USB_CONTROL_ENDPOINT == endpoint) && (USB_IN == direction))
600196f6:	2900      	cmp	r1, #0
600196f8:	f000 80a3 	beq.w	60019842 <USB_DeviceEhciIsrFunction+0x2f0>
                    direction = USB_IN;
600196fc:	2001      	movs	r0, #1
600196fe:	e004      	b.n	6001970a <USB_DeviceEhciIsrFunction+0x1b8>
                index          = (endpoint << 1U) + direction;
60019700:	004e      	lsls	r6, r1, #1
                    direction = USB_OUT;
60019702:	2000      	movs	r0, #0
                index          = (endpoint << 1U) + direction;
60019704:	b2f6      	uxtb	r6, r6
                message.length = 0U;
60019706:	e9cd 3305 	strd	r3, r3, [sp, #20]
                currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
6001970a:	b235      	sxth	r5, r6
                            primeBit = 1UL << (endpoint + 16U * direction);
6001970c:	f04f 0801 	mov.w	r8, #1
                            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
60019710:	ea41 1cc0 	orr.w	ip, r1, r0, lsl #7
                currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
60019714:	9502      	str	r5, [sp, #8]
60019716:	eb04 0586 	add.w	r5, r4, r6, lsl #2
                            primeBit = 1UL << (endpoint + 16U * direction);
6001971a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
                            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
6001971e:	f8cd c004 	str.w	ip, [sp, #4]
                currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
60019722:	696d      	ldr	r5, [r5, #20]
                            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
60019724:	01b6      	lsls	r6, r6, #6
                            primeBit = 1UL << (endpoint + 16U * direction);
60019726:	fa08 f801 	lsl.w	r8, r8, r1
                currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
6001972a:	f025 051f 	bic.w	r5, r5, #31
                while (NULL != currentDtd)
6001972e:	2d00      	cmp	r5, #0
60019730:	d0cd      	beq.n	600196ce <USB_DeviceEhciIsrFunction+0x17c>
                    currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
60019732:	9902      	ldr	r1, [sp, #8]
60019734:	eb04 0981 	add.w	r9, r4, r1, lsl #2
60019738:	f8d9 5014 	ldr.w	r5, [r9, #20]
6001973c:	f025 051f 	bic.w	r5, r5, #31
60019740:	4629      	mov	r1, r5
                    while (NULL != currentDtd)
60019742:	b161      	cbz	r1, 6001975e <USB_DeviceEhciIsrFunction+0x20c>
                             (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE)) ||
60019744:	6848      	ldr	r0, [r1, #4]
                        if ((0U !=
60019746:	0600      	lsls	r0, r0, #24
60019748:	d403      	bmi.n	60019752 <USB_DeviceEhciIsrFunction+0x200>
                            (0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc))
6001974a:	6848      	ldr	r0, [r1, #4]
                             (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE)) ||
6001974c:	0400      	lsls	r0, r0, #16
6001974e:	f140 8087 	bpl.w	60019860 <USB_DeviceEhciIsrFunction+0x30e>
                            if ((0U == (currentDtd->dtdTokenUnion.dtdTokenBitmap.status &
60019752:	6848      	ldr	r0, [r1, #4]
60019754:	0600      	lsls	r0, r0, #24
60019756:	d4ba      	bmi.n	600196ce <USB_DeviceEhciIsrFunction+0x17c>
                                (0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc))
60019758:	6849      	ldr	r1, [r1, #4]
                                        USB_DEVICE_ECHI_DTD_STATUS_ACTIVE)) &&
6001975a:	0408      	lsls	r0, r1, #16
6001975c:	d5b7      	bpl.n	600196ce <USB_DeviceEhciIsrFunction+0x17c>
                    while (NULL != currentDtd)
6001975e:	2d00      	cmp	r5, #0
60019760:	d0b5      	beq.n	600196ce <USB_DeviceEhciIsrFunction+0x17c>
                        if (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status & USB_DEVICE_ECHI_DTD_STATUS_ACTIVE))
60019762:	6869      	ldr	r1, [r5, #4]
60019764:	0609      	lsls	r1, r1, #24
60019766:	d4e2      	bmi.n	6001972e <USB_DeviceEhciIsrFunction+0x1dc>
                        if (NULL == message.buffer)
60019768:	9905      	ldr	r1, [sp, #20]
6001976a:	b949      	cbnz	r1, 60019780 <USB_DeviceEhciIsrFunction+0x22e>
                                (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
6001976c:	68a9      	ldr	r1, [r5, #8]
                                            (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
6001976e:	8ba8      	ldrh	r0, [r5, #28]
                                (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
60019770:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
                                            (currentDtd->reservedUnion.originalBufferInfo.originalBufferOffest));
60019774:	f3c0 000b 	ubfx	r0, r0, #0, #12
                                (uint8_t *)((currentDtd->bufferPointerPage[0] & USB_DEVICE_ECHI_DTD_PAGE_MASK) |
60019778:	f021 010f 	bic.w	r1, r1, #15
6001977c:	4301      	orrs	r1, r0
                            message.buffer =
6001977e:	9105      	str	r1, [sp, #20]
                                           currentDtd->dtdTokenUnion.dtdTokenBitmap.totalBytes);
60019780:	6868      	ldr	r0, [r5, #4]
                        message.length += (currentDtd->reservedUnion.originalBufferInfo.originalBufferLength -
60019782:	69e9      	ldr	r1, [r5, #28]
                                           currentDtd->dtdTokenUnion.dtdTokenBitmap.totalBytes);
60019784:	f3c0 400e 	ubfx	r0, r0, #16, #15
                        message.length += (currentDtd->reservedUnion.originalBufferInfo.originalBufferLength -
60019788:	f3c1 3112 	ubfx	r1, r1, #12, #19
6001978c:	1a09      	subs	r1, r1, r0
6001978e:	9806      	ldr	r0, [sp, #24]
60019790:	4408      	add	r0, r1
60019792:	9006      	str	r0, [sp, #24]
                        if (ehciState->dtdHard[index] == ehciState->dtdTail[index])
60019794:	f8d9 1014 	ldr.w	r1, [r9, #20]
60019798:	f8d9 0054 	ldr.w	r0, [r9, #84]	; 0x54
6001979c:	4281      	cmp	r1, r0
6001979e:	d163      	bne.n	60019868 <USB_DeviceEhciIsrFunction+0x316>
                            ehciState->dtdHard[index]                   = NULL;
600197a0:	f8c9 b014 	str.w	fp, [r9, #20]
                            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
600197a4:	2001      	movs	r0, #1
                            ehciState->dtdTail[index]                   = NULL;
600197a6:	f8c9 b054 	str.w	fp, [r9, #84]	; 0x54
                            ehciState->qh[index].nextDtdPointer         = USB_DEVICE_ECHI_DTD_TERMINATE_MASK;
600197aa:	68a1      	ldr	r1, [r4, #8]
600197ac:	4431      	add	r1, r6
600197ae:	6088      	str	r0, [r1, #8]
                            ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
600197b0:	68a1      	ldr	r1, [r4, #8]
600197b2:	4431      	add	r1, r6
600197b4:	f8c1 b00c 	str.w	fp, [r1, #12]
                        if ((0U != currentDtd->dtdTokenUnion.dtdTokenBitmap.ioc) ||
600197b8:	6869      	ldr	r1, [r5, #4]
600197ba:	0408      	lsls	r0, r1, #16
600197bc:	d403      	bmi.n	600197c6 <USB_DeviceEhciIsrFunction+0x274>
600197be:	f8d9 1014 	ldr.w	r1, [r9, #20]
600197c2:	291f      	cmp	r1, #31
600197c4:	d80d      	bhi.n	600197e2 <USB_DeviceEhciIsrFunction+0x290>
                            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
600197c6:	9b01      	ldr	r3, [sp, #4]
                            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
600197c8:	a905      	add	r1, sp, #20
                            message.isSetup = 0U;
600197ca:	f88d b01d 	strb.w	fp, [sp, #29]
                            message.code    = endpoint | (uint8_t)((uint32_t)direction << 0x07U);
600197ce:	f88d 301c 	strb.w	r3, [sp, #28]
                            (void)USB_DeviceNotificationTrigger(ehciState->deviceHandle, &message);
600197d2:	6820      	ldr	r0, [r4, #0]
600197d4:	9203      	str	r2, [sp, #12]
600197d6:	f7f2 fd91 	bl	6000c2fc <USB_DeviceNotificationTrigger>
                            message.buffer = NULL;
600197da:	2300      	movs	r3, #0
                            message.length = 0U;
600197dc:	9a03      	ldr	r2, [sp, #12]
600197de:	e9cd 3305 	strd	r3, r3, [sp, #20]
                        currentDtd->dtdTokenUnion.dtdToken = 0U;
600197e2:	f8c5 b004 	str.w	fp, [r5, #4]
                        currentDtd->nextDtdPointer         = (uint32_t)ehciState->dtdFree;
600197e6:	6921      	ldr	r1, [r4, #16]
600197e8:	6029      	str	r1, [r5, #0]
                        ehciState->dtdCount++;
600197ea:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
                        ehciState->dtdFree                 = currentDtd;
600197ee:	6125      	str	r5, [r4, #16]
                        ehciState->dtdCount++;
600197f0:	3101      	adds	r1, #1
600197f2:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
                        currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
600197f6:	f8d9 1014 	ldr.w	r1, [r9, #20]
                        if ((NULL != currentDtd) && (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status &
600197fa:	291f      	cmp	r1, #31
                        currentDtd = (usb_device_ehci_dtd_struct_t *)((uint32_t)ehciState->dtdHard[index] &
600197fc:	f021 051f 	bic.w	r5, r1, #31
                        if ((NULL != currentDtd) && (0U != (currentDtd->dtdTokenUnion.dtdTokenBitmap.status &
60019800:	d9ad      	bls.n	6001975e <USB_DeviceEhciIsrFunction+0x20c>
60019802:	6869      	ldr	r1, [r5, #4]
60019804:	0609      	lsls	r1, r1, #24
60019806:	d5ac      	bpl.n	60019762 <USB_DeviceEhciIsrFunction+0x210>
                            ehciState->registerBase->EPPRIME = primeBit;
60019808:	6861      	ldr	r1, [r4, #4]
6001980a:	f8c1 81b0 	str.w	r8, [r1, #432]	; 0x1b0
                            if (0U == (ehciState->registerBase->EPSR & primeBit))
6001980e:	6861      	ldr	r1, [r4, #4]
60019810:	f8d1 01b8 	ldr.w	r0, [r1, #440]	; 0x1b8
60019814:	ea18 0f00 	tst.w	r8, r0
60019818:	d1a3      	bne.n	60019762 <USB_DeviceEhciIsrFunction+0x210>
                                while (0U != (ehciState->registerBase->EPPRIME & primeBit))
6001981a:	f8d1 01b0 	ldr.w	r0, [r1, #432]	; 0x1b0
6001981e:	ea18 0f00 	tst.w	r8, r0
60019822:	d1fa      	bne.n	6001981a <USB_DeviceEhciIsrFunction+0x2c8>
                                if (0U == (ehciState->registerBase->EPSR & primeBit))
60019824:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
60019828:	ea18 0101 	ands.w	r1, r8, r1
6001982c:	d199      	bne.n	60019762 <USB_DeviceEhciIsrFunction+0x210>
                                    ehciState->qh[index].nextDtdPointer         = (uint32_t)currentDtd;
6001982e:	68a0      	ldr	r0, [r4, #8]
60019830:	4430      	add	r0, r6
60019832:	6085      	str	r5, [r0, #8]
                                    ehciState->qh[index].dtdTokenUnion.dtdToken = 0U;
60019834:	68a0      	ldr	r0, [r4, #8]
60019836:	4430      	add	r0, r6
60019838:	60c1      	str	r1, [r0, #12]
                                    ehciState->registerBase->EPPRIME            = primeBit;
6001983a:	6861      	ldr	r1, [r4, #4]
6001983c:	f8c1 81b0 	str.w	r8, [r1, #432]	; 0x1b0
                    while (NULL != currentDtd)
60019840:	e78f      	b.n	60019762 <USB_DeviceEhciIsrFunction+0x210>
                    if (1U == ehciState->qh[index].endpointStatusUnion.endpointStatusBitmap.zlt)
60019842:	68a0      	ldr	r0, [r4, #8]
60019844:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
60019848:	07ad      	lsls	r5, r5, #30
6001984a:	f57f af57 	bpl.w	600196fc <USB_DeviceEhciIsrFunction+0x1aa>
                            ehciState->qh[index].capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt)
6001984e:	6c05      	ldr	r5, [r0, #64]	; 0x40
                        if (0U ==
60019850:	00ad      	lsls	r5, r5, #2
60019852:	f53f af53 	bmi.w	600196fc <USB_DeviceEhciIsrFunction+0x1aa>
                                .capabilttiesCharacteristicsUnion.capabilttiesCharacteristicsBitmap.zlt = 1U;
60019856:	6c05      	ldr	r5, [r0, #64]	; 0x40
60019858:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
6001985c:	6405      	str	r5, [r0, #64]	; 0x40
6001985e:	e74d      	b.n	600196fc <USB_DeviceEhciIsrFunction+0x1aa>
                        currentDtd = (usb_device_ehci_dtd_struct_t *)(currentDtd->nextDtdPointer &
60019860:	6809      	ldr	r1, [r1, #0]
60019862:	f021 011f 	bic.w	r1, r1, #31
60019866:	e76c      	b.n	60019742 <USB_DeviceEhciIsrFunction+0x1f0>
                                (usb_device_ehci_dtd_struct_t *)ehciState->dtdHard[index]->nextDtdPointer;
60019868:	6809      	ldr	r1, [r1, #0]
                            ehciState->dtdHard[index] =
6001986a:	f8c9 1014 	str.w	r1, [r9, #20]
6001986e:	e7a3      	b.n	600197b8 <USB_DeviceEhciIsrFunction+0x266>

60019870 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
60019870:	4770      	bx	lr

60019872 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
60019872:	b140      	cbz	r0, 60019886 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
60019874:	68c3      	ldr	r3, [r0, #12]
60019876:	7858      	ldrb	r0, [r3, #1]
60019878:	f010 0001 	ands.w	r0, r0, #1
6001987c:	bf1e      	ittt	ne
6001987e:	7818      	ldrbne	r0, [r3, #0]
60019880:	fab0 f080 	clzne	r0, r0
60019884:	0940      	lsrne	r0, r0, #5
}
60019886:	4770      	bx	lr

60019888 <arch_system_halt>:
	__asm__ volatile(
60019888:	f04f 0210 	mov.w	r2, #16
6001988c:	f3ef 8311 	mrs	r3, BASEPRI
60019890:	f382 8812 	msr	BASEPRI_MAX, r2
60019894:	f3bf 8f6f 	isb	sy
	for (;;) {
60019898:	e7fe      	b.n	60019898 <arch_system_halt+0x10>

6001989a <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
6001989a:	f7f9 bd51 	b.w	60013340 <memset>

6001989e <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
6001989e:	f7e9 bf4b 	b.w	60003738 <memcpy>

600198a2 <k_heap_init>:
{
600198a2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
600198a4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
600198a8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
600198ac:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
600198ae:	f7ed bae3 	b.w	60006e78 <sys_heap_init>

600198b2 <k_heap_alloc>:
{
600198b2:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
600198b4:	e9cd 2300 	strd	r2, r3, [sp]
600198b8:	460a      	mov	r2, r1
600198ba:	2104      	movs	r1, #4
600198bc:	f7f6 f884 	bl	6000f9c8 <k_heap_aligned_alloc>
}
600198c0:	b003      	add	sp, #12
600198c2:	f85d fb04 	ldr.w	pc, [sp], #4

600198c6 <k_is_in_isr>:
600198c6:	f3ef 8005 	mrs	r0, IPSR
}
600198ca:	3800      	subs	r0, #0
600198cc:	bf18      	it	ne
600198ce:	2001      	movne	r0, #1
600198d0:	4770      	bx	lr

600198d2 <z_impl_k_thread_name_set>:
}
600198d2:	f06f 0057 	mvn.w	r0, #87	; 0x57
600198d6:	4770      	bx	lr

600198d8 <k_thread_name_get>:
}
600198d8:	2000      	movs	r0, #0
600198da:	4770      	bx	lr

600198dc <z_impl_k_thread_start>:
	z_sched_start(thread);
600198dc:	f7f7 bb32 	b.w	60010f44 <z_sched_start>

600198e0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
600198e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
600198e4:	428b      	cmp	r3, r1
600198e6:	d001      	beq.n	600198ec <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
600198e8:	f7f7 be2e 	b.w	60011548 <z_set_prio>
}
600198ec:	2000      	movs	r0, #0
600198ee:	4770      	bx	lr

600198f0 <z_impl_k_mutex_init>:
{
600198f0:	4603      	mov	r3, r0
	mutex->owner = NULL;
600198f2:	2000      	movs	r0, #0
600198f4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
600198f8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
600198fc:	4770      	bx	lr

600198fe <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
600198fe:	b13a      	cbz	r2, 60019910 <z_impl_k_sem_init+0x12>
60019900:	428a      	cmp	r2, r1
60019902:	d305      	bcc.n	60019910 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
60019904:	e9c0 1202 	strd	r1, r2, [r0, #8]
60019908:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
6001990c:	2000      	movs	r0, #0
6001990e:	4770      	bx	lr
		return -EINVAL;
60019910:	f06f 0015 	mvn.w	r0, #21
}
60019914:	4770      	bx	lr

60019916 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
60019916:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
60019918:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
6001991a:	408b      	lsls	r3, r1
6001991c:	ea22 0303 	bic.w	r3, r2, r3
60019920:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
60019922:	fa22 f001 	lsr.w	r0, r2, r1
}
60019926:	f000 0001 	and.w	r0, r0, #1
6001992a:	4770      	bx	lr

6001992c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
6001992c:	b120      	cbz	r0, 60019938 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
6001992e:	2200      	movs	r2, #0
60019930:	3088      	adds	r0, #136	; 0x88
60019932:	4611      	mov	r1, r2
60019934:	f7f8 baa8 	b.w	60011e88 <z_sched_wake>
}
60019938:	4770      	bx	lr

6001993a <k_work_submit_to_queue>:
{
6001993a:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
6001993c:	f7f6 ffc6 	bl	600108cc <z_work_submit_to_queue>
	if (ret > 0) {
60019940:	1e04      	subs	r4, r0, #0
60019942:	dd09      	ble.n	60019958 <k_work_submit_to_queue+0x1e>
60019944:	f04f 0310 	mov.w	r3, #16
60019948:	f3ef 8011 	mrs	r0, BASEPRI
6001994c:	f383 8812 	msr	BASEPRI_MAX, r3
60019950:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
60019954:	f000 f802 	bl	6001995c <z_reschedule_irqlock>
}
60019958:	4620      	mov	r0, r4
6001995a:	bd10      	pop	{r4, pc}

6001995c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
6001995c:	4603      	mov	r3, r0
6001995e:	b920      	cbnz	r0, 6001996a <z_reschedule_irqlock+0xe>
60019960:	f3ef 8205 	mrs	r2, IPSR
60019964:	b90a      	cbnz	r2, 6001996a <z_reschedule_irqlock+0xe>
60019966:	f7f1 b81f 	b.w	6000a9a8 <arch_swap>
	__asm__ volatile(
6001996a:	f383 8811 	msr	BASEPRI, r3
6001996e:	f3bf 8f6f 	isb	sy
}
60019972:	4770      	bx	lr

60019974 <z_reschedule_unlocked>:
	__asm__ volatile(
60019974:	f04f 0310 	mov.w	r3, #16
60019978:	f3ef 8011 	mrs	r0, BASEPRI
6001997c:	f383 8812 	msr	BASEPRI_MAX, r3
60019980:	f3bf 8f6f 	isb	sy
60019984:	f7ff bfea 	b.w	6001995c <z_reschedule_irqlock>

60019988 <z_unpend_all>:
{
60019988:	b538      	push	{r3, r4, r5, lr}
6001998a:	4605      	mov	r5, r0
	int need_sched = 0;
6001998c:	2000      	movs	r0, #0
	return list->head == list;
6001998e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60019990:	42a5      	cmp	r5, r4
60019992:	d000      	beq.n	60019996 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
60019994:	b904      	cbnz	r4, 60019998 <z_unpend_all+0x10>
}
60019996:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
60019998:	4620      	mov	r0, r4
6001999a:	f7f7 feef 	bl	6001177c <z_unpend_thread>
		z_ready_thread(thread);
6001999e:	4620      	mov	r0, r4
600199a0:	f7f7 fa00 	bl	60010da4 <z_ready_thread>
		need_sched = 1;
600199a4:	2001      	movs	r0, #1
600199a6:	e7f2      	b.n	6001998e <z_unpend_all+0x6>

600199a8 <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
600199a8:	17c1      	asrs	r1, r0, #31
		t += off;
600199aa:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
600199ac:	f04f 0264 	mov.w	r2, #100	; 0x64
600199b0:	f141 0100 	adc.w	r1, r1, #0
{
600199b4:	b508      	push	{r3, lr}
600199b6:	2300      	movs	r3, #0
600199b8:	f7e9 fea4 	bl	60003704 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
600199bc:	17c1      	asrs	r1, r0, #31
600199be:	f7f8 f8c1 	bl	60011b44 <z_tick_sleep>
}
600199c2:	2364      	movs	r3, #100	; 0x64
600199c4:	4358      	muls	r0, r3
600199c6:	bd08      	pop	{r3, pc}

600199c8 <sys_clock_tick_get_32>:
{
600199c8:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
600199ca:	f7f8 fd5d 	bl	60012488 <sys_clock_tick_get>
}
600199ce:	bd08      	pop	{r3, pc}

600199d0 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
600199d0:	f7f8 bd5a 	b.w	60012488 <sys_clock_tick_get>

600199d4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
600199d4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
600199d8:	bf08      	it	eq
600199da:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
600199de:	b538      	push	{r3, r4, r5, lr}
600199e0:	460c      	mov	r4, r1
600199e2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
600199e4:	d014      	beq.n	60019a10 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
600199e6:	4308      	orrs	r0, r1
600199e8:	d103      	bne.n	600199f2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
600199ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
600199ee:	f7f8 bd4b 	b.w	60012488 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
600199f2:	f06f 0001 	mvn.w	r0, #1
600199f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
600199fa:	1b40      	subs	r0, r0, r5
600199fc:	eb63 0101 	sbc.w	r1, r3, r1
60019a00:	2900      	cmp	r1, #0
60019a02:	da04      	bge.n	60019a0e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
60019a04:	f7f8 fd40 	bl	60012488 <sys_clock_tick_get>
60019a08:	1940      	adds	r0, r0, r5
60019a0a:	eb41 0104 	adc.w	r1, r1, r4
}
60019a0e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
60019a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60019a14:	4601      	mov	r1, r0
60019a16:	e7fa      	b.n	60019a0e <sys_clock_timeout_end_calc+0x3a>

60019a18 <k_timer_init>:
	timer->status = 0U;
60019a18:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
60019a1a:	e9c0 1208 	strd	r1, r2, [r0, #32]
60019a1e:	f100 0218 	add.w	r2, r0, #24
	timer->status = 0U;
60019a22:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
60019a24:	6343      	str	r3, [r0, #52]	; 0x34
	list->tail = (sys_dnode_t *)list;
60019a26:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
60019a2a:	e9c0 3300 	strd	r3, r3, [r0]
}
60019a2e:	4770      	bx	lr

60019a30 <z_impl_k_timer_stop>:
{
60019a30:	b510      	push	{r4, lr}
60019a32:	4604      	mov	r4, r0
	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
60019a34:	f7f8 fbde 	bl	600121f4 <z_abort_timeout>
	if (inactive) {
60019a38:	b9b0      	cbnz	r0, 60019a68 <z_impl_k_timer_stop+0x38>
	if (timer->stop_fn != NULL) {
60019a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
60019a3c:	b10b      	cbz	r3, 60019a42 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
60019a3e:	4620      	mov	r0, r4
60019a40:	4798      	blx	r3
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
60019a42:	f104 0018 	add.w	r0, r4, #24
60019a46:	f7f7 ff3d 	bl	600118c4 <z_unpend1_no_timeout>
		if (pending_thread != NULL) {
60019a4a:	b168      	cbz	r0, 60019a68 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
60019a4c:	f7f7 f9aa 	bl	60010da4 <z_ready_thread>
60019a50:	f04f 0310 	mov.w	r3, #16
60019a54:	f3ef 8011 	mrs	r0, BASEPRI
60019a58:	f383 8812 	msr	BASEPRI_MAX, r3
60019a5c:	f3bf 8f6f 	isb	sy
}
60019a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
60019a64:	f7ff bf7a 	b.w	6001995c <z_reschedule_irqlock>
60019a68:	bd10      	pop	{r4, pc}
	...
